using System;
using System.Collections.Generic;
using AutocountAPI.Models;
using Microsoft.EntityFrameworkCore;

namespace AutocountAPI.Data;

public partial class AedAccountsoftContext : DbContext
{
    public AedAccountsoftContext()
    {
    }

    public AedAccountsoftContext(DbContextOptions<AedAccountsoftContext> options)
        : base(options)
    {
    }

    public virtual DbSet<AccGroup> AccGroups { get; set; }

    public virtual DbSet<AccPeriod> AccPeriods { get; set; }

    public virtual DbSet<AccType> AccTypes { get; set; }

    public virtual DbSet<AccessRight> AccessRights { get; set; }

    public virtual DbSet<Accountant> Accountants { get; set; }

    public virtual DbSet<Activity> Activities { get; set; }

    public virtual DbSet<Address> Addresses { get; set; }

    public virtual DbSet<Adj> Adjs { get; set; }

    public virtual DbSet<Adjdtl> Adjdtls { get; set; }

    public virtual DbSet<Advqt> Advqts { get; set; }

    public virtual DbSet<Advqtdtl> Advqtdtls { get; set; }

    public virtual DbSet<AesbPlugInDevice> AesbPlugInDevices { get; set; }

    public virtual DbSet<AesbPlugInLicense> AesbPlugInLicenses { get; set; }

    public virtual DbSet<AisbA022Agrn> AisbA022Agrns { get; set; }

    public virtual DbSet<AisbA022Agrndtl> AisbA022Agrndtls { get; set; }

    public virtual DbSet<AisbA022Am> AisbA022Ams { get; set; }

    public virtual DbSet<AisbA022Amsdtl> AisbA022Amsdtls { get; set; }

    public virtual DbSet<AisbA022Asn> AisbA022Asns { get; set; }

    public virtual DbSet<AisbA022Asndtl> AisbA022Asndtls { get; set; }

    public virtual DbSet<AisbA022Ba> AisbA022Bas { get; set; }

    public virtual DbSet<AisbA022Badtl> AisbA022Badtls { get; set; }

    public virtual DbSet<AisbA022BatchNo> AisbA022BatchNos { get; set; }

    public virtual DbSet<AisbA022Bi> AisbA022Bis { get; set; }

    public virtual DbSet<AisbA022BiactualDtl> AisbA022BiactualDtls { get; set; }

    public virtual DbSet<AisbA022Bin> AisbA022Bins { get; set; }

    public virtual DbSet<AisbA022BinDtl> AisbA022BinDtls { get; set; }

    public virtual DbSet<AisbA022BinTransaction> AisbA022BinTransactions { get; set; }

    public virtual DbSet<AisbA022BisuggestBinCode> AisbA022BisuggestBinCodes { get; set; }

    public virtual DbSet<AisbA022BisuggestDtl> AisbA022BisuggestDtls { get; set; }

    public virtual DbSet<AisbA022Bo> AisbA022Bos { get; set; }

    public virtual DbSet<AisbA022BoactualDtl> AisbA022BoactualDtls { get; set; }

    public virtual DbSet<AisbA022BosuggestBinCode> AisbA022BosuggestBinCodes { get; set; }

    public virtual DbSet<AisbA022BosuggestDtl> AisbA022BosuggestDtls { get; set; }

    public virtual DbSet<AisbA022Br> AisbA022Brs { get; set; }

    public virtual DbSet<AisbA022Brdtl> AisbA022Brdtls { get; set; }

    public virtual DbSet<AisbA022Device> AisbA022Devices { get; set; }

    public virtual DbSet<AisbA022DevicesQuery> AisbA022DevicesQueries { get; set; }

    public virtual DbSet<AisbA022LoadingBay> AisbA022LoadingBays { get; set; }

    public virtual DbSet<AisbA022LoadingBayDtl> AisbA022LoadingBayDtls { get; set; }

    public virtual DbSet<AisbA022Lorry> AisbA022Lorries { get; set; }

    public virtual DbSet<AisbA022LorryUser> AisbA022LorryUsers { get; set; }

    public virtual DbSet<AisbA022Lot> AisbA022Lots { get; set; }

    public virtual DbSet<AisbA022Manifest> AisbA022Manifests { get; set; }

    public virtual DbSet<AisbA022ManifestDtl> AisbA022ManifestDtls { get; set; }

    public virtual DbSet<AisbA022ManifestDtlTransfer> AisbA022ManifestDtlTransfers { get; set; }

    public virtual DbSet<AisbA022MstockTake> AisbA022MstockTakes { get; set; }

    public virtual DbSet<AisbA022MstockTakeDtl> AisbA022MstockTakeDtls { get; set; }

    public virtual DbSet<AisbA022MstockTakeDtlBatch> AisbA022MstockTakeDtlBatches { get; set; }

    public virtual DbSet<AisbA022MultiLocationReorderAdvice> AisbA022MultiLocationReorderAdvices { get; set; }

    public virtual DbSet<AisbA022Photo> AisbA022Photos { get; set; }

    public virtual DbSet<AisbA022Picker> AisbA022Pickers { get; set; }

    public virtual DbSet<AisbA022PickerDtl> AisbA022PickerDtls { get; set; }

    public virtual DbSet<AisbA022PickingList> AisbA022PickingLists { get; set; }

    public virtual DbSet<AisbA022PickingListAuditTrail> AisbA022PickingListAuditTrails { get; set; }

    public virtual DbSet<AisbA022PickingListDtl> AisbA022PickingListDtls { get; set; }

    public virtual DbSet<AisbA022PickingListDtlSo> AisbA022PickingListDtlSos { get; set; }

    public virtual DbSet<AisbA022PickingListDtlTransfer> AisbA022PickingListDtlTransfers { get; set; }

    public virtual DbSet<AisbA022PickingListStatusTracking> AisbA022PickingListStatusTrackings { get; set; }

    public virtual DbSet<AisbA022PrintFormat> AisbA022PrintFormats { get; set; }

    public virtual DbSet<AisbA022ReOrderSetting> AisbA022ReOrderSettings { get; set; }

    public virtual DbSet<AisbA022ReportHex> AisbA022ReportHexes { get; set; }

    public virtual DbSet<AisbA022ResultA> AisbA022ResultAs { get; set; }

    public virtual DbSet<AisbA022ResultAj> AisbA022ResultAjs { get; set; }

    public virtual DbSet<AisbA022ResultAjdtl> AisbA022ResultAjdtls { get; set; }

    public virtual DbSet<AisbA022ResultAo> AisbA022ResultAos { get; set; }

    public virtual DbSet<AisbA022ResultAodtl> AisbA022ResultAodtls { get; set; }

    public virtual DbSet<AisbA022ResultAsdtl> AisbA022ResultAsdtls { get; set; }

    public virtual DbSet<AisbA022ResultBi> AisbA022ResultBis { get; set; }

    public virtual DbSet<AisbA022ResultBo> AisbA022ResultBos { get; set; }

    public virtual DbSet<AisbA022ResultBr> AisbA022ResultBrs { get; set; }

    public virtual DbSet<AisbA022ResultC> AisbA022ResultCs { get; set; }

    public virtual DbSet<AisbA022ResultCn> AisbA022ResultCns { get; set; }

    public virtual DbSet<AisbA022ResultCndtl> AisbA022ResultCndtls { get; set; }

    public virtual DbSet<AisbA022ResultCsdtl> AisbA022ResultCsdtls { get; set; }

    public virtual DbSet<AisbA022ResultDeliveryApp> AisbA022ResultDeliveryApps { get; set; }

    public virtual DbSet<AisbA022ResultDeliveryAppDtl> AisbA022ResultDeliveryAppDtls { get; set; }

    public virtual DbSet<AisbA022ResultDo> AisbA022ResultDos { get; set; }

    public virtual DbSet<AisbA022ResultDodtl> AisbA022ResultDodtls { get; set; }

    public virtual DbSet<AisbA022ResultGr> AisbA022ResultGrs { get; set; }

    public virtual DbSet<AisbA022ResultGrdtl> AisbA022ResultGrdtls { get; set; }

    public virtual DbSet<AisbA022ResultI> AisbA022ResultIs { get; set; }

    public virtual DbSet<AisbA022ResultIsdtl> AisbA022ResultIsdtls { get; set; }

    public virtual DbSet<AisbA022ResultIv> AisbA022ResultIvs { get; set; }

    public virtual DbSet<AisbA022ResultIvdtl> AisbA022ResultIvdtls { get; set; }

    public virtual DbSet<AisbA022ResultPi> AisbA022ResultPis { get; set; }

    public virtual DbSet<AisbA022ResultPidtl> AisbA022ResultPidtls { get; set; }

    public virtual DbSet<AisbA022ResultPo> AisbA022ResultPos { get; set; }

    public virtual DbSet<AisbA022ResultPodtl> AisbA022ResultPodtls { get; set; }

    public virtual DbSet<AisbA022ResultPq> AisbA022ResultPqs { get; set; }

    public virtual DbSet<AisbA022ResultPqdtl> AisbA022ResultPqdtls { get; set; }

    public virtual DbSet<AisbA022ResultPr> AisbA022ResultPrs { get; set; }

    public virtual DbSet<AisbA022ResultPrdtl> AisbA022ResultPrdtls { get; set; }

    public virtual DbSet<AisbA022ResultQt> AisbA022ResultQts { get; set; }

    public virtual DbSet<AisbA022ResultQtdtl> AisbA022ResultQtdtls { get; set; }

    public virtual DbSet<AisbA022ResultRiin> AisbA022ResultRiins { get; set; }

    public virtual DbSet<AisbA022ResultRiout> AisbA022ResultRiouts { get; set; }

    public virtual DbSet<AisbA022ResultSerialNoTran> AisbA022ResultSerialNoTrans { get; set; }

    public virtual DbSet<AisbA022ResultSo> AisbA022ResultSos { get; set; }

    public virtual DbSet<AisbA022ResultSodtl> AisbA022ResultSodtls { get; set; }

    public virtual DbSet<AisbA022ResultSr> AisbA022ResultSrs { get; set; }

    public virtual DbSet<AisbA022ResultSrdtl> AisbA022ResultSrdtls { get; set; }

    public virtual DbSet<AisbA022ResultTx> AisbA022ResultTxes { get; set; }

    public virtual DbSet<AisbA022ResultTxdtl> AisbA022ResultTxdtls { get; set; }

    public virtual DbSet<AisbA022Route> AisbA022Routes { get; set; }

    public virtual DbSet<AisbA022RoutesDtl> AisbA022RoutesDtls { get; set; }

    public virtual DbSet<AisbA022Setting> AisbA022Settings { get; set; }

    public virtual DbSet<AisbA022Setting1> AisbA022Settings1 { get; set; }

    public virtual DbSet<AisbA022SostatusTracking> AisbA022SostatusTrackings { get; set; }

    public virtual DbSet<AisbA022StockTake> AisbA022StockTakes { get; set; }

    public virtual DbSet<AisbA022StockTransit> AisbA022StockTransits { get; set; }

    public virtual DbSet<AisbA022StockTransitDtl> AisbA022StockTransitDtls { get; set; }

    public virtual DbSet<AisbA022Tag> AisbA022Tags { get; set; }

    public virtual DbSet<AisbA022Token> AisbA022Tokens { get; set; }

    public virtual DbSet<AisbA022Zone> AisbA022Zones { get; set; }

    public virtual DbSet<AisbA022ZoneDtl> AisbA022ZoneDtls { get; set; }

    public virtual DbSet<AisbA035PickingSystem> AisbA035PickingSystems { get; set; }

    public virtual DbSet<AisbA035Setting> AisbA035Settings { get; set; }

    public virtual DbSet<AisbB048ResultStockAssembly> AisbB048ResultStockAssemblies { get; set; }

    public virtual DbSet<AisbB048ResultStockAssemblyDtl> AisbB048ResultStockAssemblyDtls { get; set; }

    public virtual DbSet<AisbB048Setting> AisbB048Settings { get; set; }

    public virtual DbSet<AisbB048Token> AisbB048Tokens { get; set; }

    public virtual DbSet<AisbB063Auction> AisbB063Auctions { get; set; }

    public virtual DbSet<AisbB063Berat> AisbB063Berats { get; set; }

    public virtual DbSet<AisbB063HargaHarian> AisbB063HargaHarians { get; set; }

    public virtual DbSet<AisbB063PluginVer> AisbB063PluginVers { get; set; }

    public virtual DbSet<AisbB063Redemption> AisbB063Redemptions { get; set; }

    public virtual DbSet<AisbB063Setting> AisbB063Settings { get; set; }

    public virtual DbSet<AisbB063StatusHistory> AisbB063StatusHistories { get; set; }

    public virtual DbSet<AisbB063Ticket> AisbB063Tickets { get; set; }

    public virtual DbSet<Aorprocessing> Aorprocessings { get; set; }

    public virtual DbSet<Apcn> Apcns { get; set; }

    public virtual DbSet<Apcndtl> Apcndtls { get; set; }

    public virtual DbSet<ApcnknockOff> ApcnknockOffs { get; set; }

    public virtual DbSet<ApcnknockOffDetail> ApcnknockOffDetails { get; set; }

    public virtual DbSet<ApcontraKnockOff> ApcontraKnockOffs { get; set; }

    public virtual DbSet<ApcontraKnockOffDetail> ApcontraKnockOffDetails { get; set; }

    public virtual DbSet<Apdeposit> Apdeposits { get; set; }

    public virtual DbSet<ApdepositForfeit> ApdepositForfeits { get; set; }

    public virtual DbSet<ApdepositPaymentDtl> ApdepositPaymentDtls { get; set; }

    public virtual DbSet<ApdepositRefund> ApdepositRefunds { get; set; }

    public virtual DbSet<ApdepositRefundPaymentDtl> ApdepositRefundPaymentDtls { get; set; }

    public virtual DbSet<Apdn> Apdns { get; set; }

    public virtual DbSet<Apdndtl> Apdndtls { get; set; }

    public virtual DbSet<Apinvoice> Apinvoices { get; set; }

    public virtual DbSet<ApinvoiceDtl> ApinvoiceDtls { get; set; }

    public virtual DbSet<Appayment> Appayments { get; set; }

    public virtual DbSet<AppaymentDtl> AppaymentDtls { get; set; }

    public virtual DbSet<AppaymentKnockOff> AppaymentKnockOffs { get; set; }

    public virtual DbSet<AppaymentKnockOffDetail> AppaymentKnockOffDetails { get; set; }

    public virtual DbSet<Aprefund> Aprefunds { get; set; }

    public virtual DbSet<AprefundDtl> AprefundDtls { get; set; }

    public virtual DbSet<AprefundKnockOff> AprefundKnockOffs { get; set; }

    public virtual DbSet<AprefundKnockOffDetail> AprefundKnockOffDetails { get; set; }

    public virtual DbSet<ArapbadDebt> ArapbadDebts { get; set; }

    public virtual DbSet<ArapbadDebtRecovery> ArapbadDebtRecoveries { get; set; }

    public virtual DbSet<Arapcontra> Arapcontras { get; set; }

    public virtual DbSet<Arcn> Arcns { get; set; }

    public virtual DbSet<Arcndtl> Arcndtls { get; set; }

    public virtual DbSet<ArcnknockOff> ArcnknockOffs { get; set; }

    public virtual DbSet<ArcnknockOffDetail> ArcnknockOffDetails { get; set; }

    public virtual DbSet<ArcontraKnockOff> ArcontraKnockOffs { get; set; }

    public virtual DbSet<ArcontraKnockOffDetail> ArcontraKnockOffDetails { get; set; }

    public virtual DbSet<Ardeposit> Ardeposits { get; set; }

    public virtual DbSet<ArdepositForfeit> ArdepositForfeits { get; set; }

    public virtual DbSet<ArdepositPaymentDtl> ArdepositPaymentDtls { get; set; }

    public virtual DbSet<ArdepositRefund> ArdepositRefunds { get; set; }

    public virtual DbSet<ArdepositRefundPaymentDtl> ArdepositRefundPaymentDtls { get; set; }

    public virtual DbSet<Ardn> Ardns { get; set; }

    public virtual DbSet<Ardndtl> Ardndtls { get; set; }

    public virtual DbSet<Area> Areas { get; set; }

    public virtual DbSet<Arinvoice> Arinvoices { get; set; }

    public virtual DbSet<ArinvoiceDtl> ArinvoiceDtls { get; set; }

    public virtual DbSet<Arpayment> Arpayments { get; set; }

    public virtual DbSet<ArpaymentDtl> ArpaymentDtls { get; set; }

    public virtual DbSet<ArpaymentKnockOff> ArpaymentKnockOffs { get; set; }

    public virtual DbSet<ArpaymentKnockOffDetail> ArpaymentKnockOffDetails { get; set; }

    public virtual DbSet<Arrefund> Arrefunds { get; set; }

    public virtual DbSet<ArrefundDtl> ArrefundDtls { get; set; }

    public virtual DbSet<ArrefundKnockOff> ArrefundKnockOffs { get; set; }

    public virtual DbSet<ArrefundKnockOffDetail> ArrefundKnockOffDetails { get; set; }

    public virtual DbSet<Asm> Asms { get; set; }

    public virtual DbSet<AsmRprocessing> AsmRprocessings { get; set; }

    public virtual DbSet<Asmbomoptional> Asmbomoptionals { get; set; }

    public virtual DbSet<Asmdtl> Asmdtls { get; set; }

    public virtual DbSet<Asmorder> Asmorders { get; set; }

    public virtual DbSet<AsmorderDtl> AsmorderDtls { get; set; }

    public virtual DbSet<AssetDisposal> AssetDisposals { get; set; }

    public virtual DbSet<AssetLink> AssetLinks { get; set; }

    public virtual DbSet<AutoPrice> AutoPrices { get; set; }

    public virtual DbSet<BankRecon> BankRecons { get; set; }

    public virtual DbSet<BankSlip> BankSlips { get; set; }

    public virtual DbSet<BankTran> BankTrans { get; set; }

    public virtual DbSet<Bomoptional> Bomoptionals { get; set; }

    public virtual DbSet<BomoptionalDtl> BomoptionalDtls { get; set; }

    public virtual DbSet<BomoptionalLink> BomoptionalLinks { get; set; }

    public virtual DbSet<BonusPointAdj> BonusPointAdjs { get; set; }

    public virtual DbSet<BonusPointAdjdtl> BonusPointAdjdtls { get; set; }

    public virtual DbSet<BonusPointRedemption> BonusPointRedemptions { get; set; }

    public virtual DbSet<BonusPointRedemptionDtl> BonusPointRedemptionDtls { get; set; }

    public virtual DbSet<Branch> Branches { get; set; }

    public virtual DbSet<Bsformat> Bsformats { get; set; }

    public virtual DbSet<Budget> Budgets { get; set; }

    public virtual DbSet<BudgetPbalance> BudgetPbalances { get; set; }

    public virtual DbSet<C> Cs { get; set; }

    public virtual DbSet<CashFlowForecast> CashFlowForecasts { get; set; }

    public virtual DbSet<Cb> Cbs { get; set; }

    public virtual DbSet<Cbdtl> Cbdtls { get; set; }

    public virtual DbSet<Cbigdtl> Cbigdtls { get; set; }

    public virtual DbSet<CbpaymentDtl> CbpaymentDtls { get; set; }

    public virtual DbSet<ChangeCount> ChangeCounts { get; set; }

    public virtual DbSet<ChangeLog> ChangeLogs { get; set; }

    public virtual DbSet<Cn> Cns { get; set; }

    public virtual DbSet<Cndtl> Cndtls { get; set; }

    public virtual DbSet<Cntype> Cntypes { get; set; }

    public virtual DbSet<ColumnLock> ColumnLocks { get; set; }

    public virtual DbSet<Comment> Comments { get; set; }

    public virtual DbSet<Commission> Commissions { get; set; }

    public virtual DbSet<Consignment> Consignments { get; set; }

    public virtual DbSet<ConsignmentDtl> ConsignmentDtls { get; set; }

    public virtual DbSet<ConsignmentReturn> ConsignmentReturns { get; set; }

    public virtual DbSet<ConsignmentReturnDtl> ConsignmentReturnDtls { get; set; }

    public virtual DbSet<Contact> Contacts { get; set; }

    public virtual DbSet<Cp> Cps { get; set; }

    public virtual DbSet<Cpdtl> Cpdtls { get; set; }

    public virtual DbSet<CreditControlSync> CreditControlSyncs { get; set; }

    public virtual DbSet<Creditor> Creditors { get; set; }

    public virtual DbSet<CreditorType> CreditorTypes { get; set; }

    public virtual DbSet<Criterion> Criteria { get; set; }

    public virtual DbSet<Csdtl> Csdtls { get; set; }

    public virtual DbSet<CsgnitemBalQty> CsgnitemBalQties { get; set; }

    public virtual DbSet<Csgnxfer> Csgnxfers { get; set; }

    public virtual DbSet<Csgnxferdtl> Csgnxferdtls { get; set; }

    public virtual DbSet<CurrRate> CurrRates { get; set; }

    public virtual DbSet<Currency> Currencies { get; set; }

    public virtual DbSet<Debtor> Debtors { get; set; }

    public virtual DbSet<DebtorType> DebtorTypes { get; set; }

    public virtual DbSet<DefaultReport> DefaultReports { get; set; }

    public virtual DbSet<Dept> Depts { get; set; }

    public virtual DbSet<Dn> Dns { get; set; }

    public virtual DbSet<Dndtl> Dndtls { get; set; }

    public virtual DbSet<Dntype> Dntypes { get; set; }

    public virtual DbSet<Do> Dos { get; set; }

    public virtual DbSet<DocNoFormat> DocNoFormats { get; set; }

    public virtual DbSet<DocNoFormatAccNo> DocNoFormatAccNos { get; set; }

    public virtual DbSet<DocNoFormatUser> DocNoFormatUsers { get; set; }

    public virtual DbSet<DocNoFormatYearlyNumber> DocNoFormatYearlyNumbers { get; set; }

    public virtual DbSet<DocReportSetting> DocReportSettings { get; set; }

    public virtual DbSet<DocStatusChangeLog> DocStatusChangeLogs { get; set; }

    public virtual DbSet<DocTemplate> DocTemplates { get; set; }

    public virtual DbSet<DocTemplateUser> DocTemplateUsers { get; set; }

    public virtual DbSet<DocTransfer> DocTransfers { get; set; }

    public virtual DbSet<DocTransferTempAll> DocTransferTempAlls { get; set; }

    public virtual DbSet<DocTransferTempMatch> DocTransferTempMatches { get; set; }

    public virtual DbSet<DocumentLock> DocumentLocks { get; set; }

    public virtual DbSet<Dodtl> Dodtls { get; set; }

    public virtual DbSet<Dr> Drs { get; set; }

    public virtual DbSet<Drdtl> Drdtls { get; set; }

    public virtual DbSet<Drprocessing> Drprocessings { get; set; }

    public virtual DbSet<DrprocessingDo> DrprocessingDos { get; set; }

    public virtual DbSet<EinvoiceConsolidatedInvoice> EinvoiceConsolidatedInvoices { get; set; }

    public virtual DbSet<EinvoiceConsolidatedInvoiceDetail> EinvoiceConsolidatedInvoiceDetails { get; set; }

    public virtual DbSet<EinvoiceConsolidatedInvoiceDetailTaxType> EinvoiceConsolidatedInvoiceDetailTaxTypes { get; set; }

    public virtual DbSet<EinvoiceConsolidatedInvoiceLink> EinvoiceConsolidatedInvoiceLinks { get; set; }

    public virtual DbSet<EinvoiceEmail> EinvoiceEmails { get; set; }

    public virtual DbSet<EinvoiceQueue> EinvoiceQueues { get; set; }

    public virtual DbSet<EinvoiceSelfBilled> EinvoiceSelfBilleds { get; set; }

    public virtual DbSet<EinvoiceSelfBilledDetail> EinvoiceSelfBilledDetails { get; set; }

    public virtual DbSet<EinvoiceSelfBilledLink> EinvoiceSelfBilledLinks { get; set; }

    public virtual DbSet<EinvoiceStatusChangeLog> EinvoiceStatusChangeLogs { get; set; }

    public virtual DbSet<EventLog> EventLogs { get; set; }

    public virtual DbSet<Expense> Expenses { get; set; }

    public virtual DbSet<Fcrevalue> Fcrevalues { get; set; }

    public virtual DbSet<FcrevalueDocument> FcrevalueDocuments { get; set; }

    public virtual DbSet<FcrevalueGlaccount> FcrevalueGlaccounts { get; set; }

    public virtual DbSet<FcrevalueLock> FcrevalueLocks { get; set; }

    public virtual DbSet<FcrevalueRate> FcrevalueRates { get; set; }

    public virtual DbSet<Fifocost> Fifocosts { get; set; }

    public virtual DbSet<FiscalYear> FiscalYears { get; set; }

    public virtual DbSet<FontStyle> FontStyles { get; set; }

    public virtual DbSet<Footer> Footers { get; set; }

    public virtual DbSet<FrcustomText> FrcustomTexts { get; set; }

    public virtual DbSet<GiftRule> GiftRules { get; set; }

    public virtual DbSet<Gldtl> Gldtls { get; set; }

    public virtual DbSet<Glmast> Glmasts { get; set; }

    public virtual DbSet<GlobalPriceChange> GlobalPriceChanges { get; set; }

    public virtual DbSet<GltrxIdtrash> GltrxIdtrashes { get; set; }

    public virtual DbSet<Gr> Grs { get; set; }

    public virtual DbSet<Grdtl> Grdtls { get; set; }

    public virtual DbSet<GridListingFilter> GridListingFilters { get; set; }

    public virtual DbSet<GridListingFilterUser> GridListingFilterUsers { get; set; }

    public virtual DbSet<GstcapitalGood> GstcapitalGoods { get; set; }

    public virtual DbSet<GstcapitalGoodsDtl> GstcapitalGoodsDtls { get; set; }

    public virtual DbSet<GstcapitalGoodsSchedule> GstcapitalGoodsSchedules { get; set; }

    public virtual DbSet<GstcapitalGoodsScheduleAdj> GstcapitalGoodsScheduleAdjs { get; set; }

    public virtual DbSet<GstfilingReminder> GstfilingReminders { get; set; }

    public virtual DbSet<GstpartialExemption> GstpartialExemptions { get; set; }

    public virtual DbSet<Gstprocessor> Gstprocessors { get; set; }

    public virtual DbSet<Gstsetting> Gstsettings { get; set; }

    public virtual DbSet<Gt> Gts { get; set; }

    public virtual DbSet<Gtdtl> Gtdtls { get; set; }

    public virtual DbSet<Irasgstsubmission> Irasgstsubmissions { get; set; }

    public virtual DbSet<Iss> Isses { get; set; }

    public virtual DbSet<Issdtl> Issdtls { get; set; }

    public virtual DbSet<Item> Items { get; set; }

    public virtual DbSet<ItemBatch> ItemBatches { get; set; }

    public virtual DbSet<ItemBatchBalQty> ItemBatchBalQties { get; set; }

    public virtual DbSet<ItemBatchBalQtyTran> ItemBatchBalQtyTrans { get; set; }

    public virtual DbSet<ItemBom> ItemBoms { get; set; }

    public virtual DbSet<ItemBrand> ItemBrands { get; set; }

    public virtual DbSet<ItemCategory> ItemCategories { get; set; }

    public virtual DbSet<ItemClass> ItemClasses { get; set; }

    public virtual DbSet<ItemCostChangeHistory> ItemCostChangeHistories { get; set; }

    public virtual DbSet<ItemCostHistory> ItemCostHistories { get; set; }

    public virtual DbSet<ItemCurrencyPrice> ItemCurrencyPrices { get; set; }

    public virtual DbSet<ItemGroup> ItemGroups { get; set; }

    public virtual DbSet<ItemIngredient> ItemIngredients { get; set; }

    public virtual DbSet<ItemLevelByLocation> ItemLevelByLocations { get; set; }

    public virtual DbSet<ItemLocationPrice> ItemLocationPrices { get; set; }

    public virtual DbSet<ItemOpening> ItemOpenings { get; set; }

    public virtual DbSet<ItemPrice> ItemPrices { get; set; }

    public virtual DbSet<ItemPriceChangeHistory> ItemPriceChangeHistories { get; set; }

    public virtual DbSet<ItemReplacement> ItemReplacements { get; set; }

    public virtual DbSet<ItemSerialNo> ItemSerialNos { get; set; }

    public virtual DbSet<ItemSerialNoDtl> ItemSerialNoDtls { get; set; }

    public virtual DbSet<ItemSubCode> ItemSubCodes { get; set; }

    public virtual DbSet<ItemType> ItemTypes { get; set; }

    public virtual DbSet<ItemUom> ItemUoms { get; set; }

    public virtual DbSet<Iv> Ivs { get; set; }

    public virtual DbSet<Ivdtl> Ivdtls { get; set; }

    public virtual DbSet<Je> Jes { get; set; }

    public virtual DbSet<Jedtl> Jedtls { get; set; }

    public virtual DbSet<Journal> Journals { get; set; }

    public virtual DbSet<Layout> Layouts { get; set; }

    public virtual DbSet<LayoutUser> LayoutUsers { get; set; }

    public virtual DbSet<Location> Locations { get; set; }

    public virtual DbSet<Mail> Mail { get; set; }

    public virtual DbSet<MailDtl> MailDtls { get; set; }

    public virtual DbSet<MailQueue> MailQueues { get; set; }

    public virtual DbSet<MailQueueDtl> MailQueueDtls { get; set; }

    public virtual DbSet<Member> Members { get; set; }

    public virtual DbSet<MemberBalPoint> MemberBalPoints { get; set; }

    public virtual DbSet<MemberBalPointTran> MemberBalPointTrans { get; set; }

    public virtual DbSet<MemberType> MemberTypes { get; set; }

    public virtual DbSet<Mru> Mrus { get; set; }

    public virtual DbSet<MyeinvoiceReceiveDocument> MyeinvoiceReceiveDocuments { get; set; }

    public virtual DbSet<MyeinvoiceSupplierItemMapping> MyeinvoiceSupplierItemMappings { get; set; }

    public virtual DbSet<NameValue> NameValues { get; set; }

    public virtual DbSet<NetUser> NetUsers { get; set; }

    public virtual DbSet<NotifAllowUser> NotifAllowUsers { get; set; }

    public virtual DbSet<NotifReadUser> NotifReadUsers { get; set; }

    public virtual DbSet<Notification> Notifications { get; set; }

    public virtual DbSet<Obalance> Obalances { get; set; }

    public virtual DbSet<Obdtl> Obdtls { get; set; }

    public virtual DbSet<ObjectEventLog> ObjectEventLogs { get; set; }

    public virtual DbSet<Package> Packages { get; set; }

    public virtual DbSet<PackageDtl> PackageDtls { get; set; }

    public virtual DbSet<PastYearPriceHistory> PastYearPriceHistories { get; set; }

    public virtual DbSet<PaymentMethod> PaymentMethods { get; set; }

    public virtual DbSet<Pbalance> Pbalances { get; set; }

    public virtual DbSet<PeriodLock> PeriodLocks { get; set; }

    public virtual DbSet<PeriodLockException> PeriodLockExceptions { get; set; }

    public virtual DbSet<PhilippinesEwtremittance> PhilippinesEwtremittances { get; set; }

    public virtual DbSet<PhilippinesVatprocessor> PhilippinesVatprocessors { get; set; }

    public virtual DbSet<Pi> Pis { get; set; }

    public virtual DbSet<Pidtl> Pidtls { get; set; }

    public virtual DbSet<Plformat> Plformats { get; set; }

    public virtual DbSet<PlugIn> PlugIns { get; set; }

    public virtual DbSet<PlugInFile> PlugInFiles { get; set; }

    public virtual DbSet<Po> Pos { get; set; }

    public virtual DbSet<PocketSyncProfile> PocketSyncProfiles { get; set; }

    public virtual DbSet<Podtl> Podtls { get; set; }

    public virtual DbSet<PointTran> PointTrans { get; set; }

    public virtual DbSet<PostingAccountGroup> PostingAccountGroups { get; set; }

    public virtual DbSet<Pq> Pqs { get; set; }

    public virtual DbSet<Pqdtl> Pqdtls { get; set; }

    public virtual DbSet<Pr> Prs { get; set; }

    public virtual DbSet<Prdtl> Prdtls { get; set; }

    public virtual DbSet<PriceBookMatrix> PriceBookMatrices { get; set; }

    public virtual DbSet<PriceBookRule> PriceBookRules { get; set; }

    public virtual DbSet<PriceCategory> PriceCategories { get; set; }

    public virtual DbSet<Profile> Profiles { get; set; }

    public virtual DbSet<Project> Projects { get; set; }

    public virtual DbSet<Prprocessing> Prprocessings { get; set; }

    public virtual DbSet<PrprocessingPo> PrprocessingPos { get; set; }

    public virtual DbSet<PurchaseAgent> PurchaseAgents { get; set; }

    public virtual DbSet<PurchaseConsignment> PurchaseConsignments { get; set; }

    public virtual DbSet<PurchaseConsignmentDtl> PurchaseConsignmentDtls { get; set; }

    public virtual DbSet<PurchaseConsignmentReturn> PurchaseConsignmentReturns { get; set; }

    public virtual DbSet<PurchaseConsignmentReturnDtl> PurchaseConsignmentReturnDtls { get; set; }

    public virtual DbSet<Qt> Qts { get; set; }

    public virtual DbSet<Qtdtl> Qtdtls { get; set; }

    public virtual DbSet<Race> Races { get; set; }

    public virtual DbSet<Rcv> Rcvs { get; set; }

    public virtual DbSet<Rcvdtl> Rcvdtls { get; set; }

    public virtual DbSet<Recurrence> Recurrences { get; set; }

    public virtual DbSet<RecurrenceDtl> RecurrenceDtls { get; set; }

    public virtual DbSet<Registry> Registries { get; set; }

    public virtual DbSet<RemarkName> RemarkNames { get; set; }

    public virtual DbSet<Report> Reports { get; set; }

    public virtual DbSet<ReportAttribute> ReportAttributes { get; set; }

    public virtual DbSet<ReverseGstdo> ReverseGstdos { get; set; }

    public virtual DbSet<ReverseGstpayment> ReverseGstpayments { get; set; }

    public virtual DbSet<ReverseSstpayment> ReverseSstpayments { get; set; }

    public virtual DbSet<Rq> Rqs { get; set; }

    public virtual DbSet<Rqdtl> Rqdtls { get; set; }

    public virtual DbSet<SalesAgent> SalesAgents { get; set; }

    public virtual DbSet<SalesAtc> SalesAtcs { get; set; }

    public virtual DbSet<SerialNoTran> SerialNoTrans { get; set; }

    public virtual DbSet<Session> Sessions { get; set; }

    public virtual DbSet<Setting> Settings { get; set; }

    public virtual DbSet<SgeinvoiceAggregatedTransaction> SgeinvoiceAggregatedTransactions { get; set; }

    public virtual DbSet<SgeinvoiceAggregatedTransactionDetail> SgeinvoiceAggregatedTransactionDetails { get; set; }

    public virtual DbSet<SgeinvoiceCustomerItemMapping> SgeinvoiceCustomerItemMappings { get; set; }

    public virtual DbSet<SgeinvoiceGstregistered> SgeinvoiceGstregistereds { get; set; }

    public virtual DbSet<SgeinvoiceLogging> SgeinvoiceLoggings { get; set; }

    public virtual DbSet<SgeinvoiceReceiveDocument> SgeinvoiceReceiveDocuments { get; set; }

    public virtual DbSet<SgeinvoiceSupplierItemMapping> SgeinvoiceSupplierItemMappings { get; set; }

    public virtual DbSet<ShippingMethod> ShippingMethods { get; set; }

    public virtual DbSet<SimpleSyncSetting> SimpleSyncSettings { get; set; }

    public virtual DbSet<So> Sos { get; set; }

    public virtual DbSet<Sodtl> Sodtls { get; set; }

    public virtual DbSet<Sstprocessor> Sstprocessors { get; set; }

    public virtual DbSet<Sstsetting> Sstsettings { get; set; }

    public virtual DbSet<StockDisassembly> StockDisassemblies { get; set; }

    public virtual DbSet<StockDisassemblyDtl> StockDisassemblyDtls { get; set; }

    public virtual DbSet<StockDtl> StockDtls { get; set; }

    public virtual DbSet<StockDtlchangeQ> StockDtlchangeQs { get; set; }

    public virtual DbSet<StockPbalance> StockPbalances { get; set; }

    public virtual DbSet<StockSet> StockSets { get; set; }

    public virtual DbSet<StockTake> StockTakes { get; set; }

    public virtual DbSet<StockTakeDtl> StockTakeDtls { get; set; }

    public virtual DbSet<StockTransQueue> StockTransQueues { get; set; }

    public virtual DbSet<SyncCriteriaProfile> SyncCriteriaProfiles { get; set; }

    public virtual DbSet<SyncProfile> SyncProfiles { get; set; }

    public virtual DbSet<SystemExtension> SystemExtensions { get; set; }

    public virtual DbSet<SystemExtensionFile> SystemExtensionFiles { get; set; }

    public virtual DbSet<Tariff> Tariffs { get; set; }

    public virtual DbSet<TaxCode> TaxCodes { get; set; }

    public virtual DbSet<TaxDocNo> TaxDocNos { get; set; }

    public virtual DbSet<TaxDocNoDtl> TaxDocNoDtls { get; set; }

    public virtual DbSet<TaxEntity> TaxEntities { get; set; }

    public virtual DbSet<TaxExemption> TaxExemptions { get; set; }

    public virtual DbSet<TaxSetting> TaxSettings { get; set; }

    public virtual DbSet<TaxTran> TaxTrans { get; set; }

    public virtual DbSet<TaxTransAudit> TaxTransAudits { get; set; }

    public virtual DbSet<TaxTransAuditDtl> TaxTransAuditDtls { get; set; }

    public virtual DbSet<TaxTransCancelled> TaxTransCancelleds { get; set; }

    public virtual DbSet<TempDocument> TempDocuments { get; set; }

    public virtual DbSet<TemporaryCredit> TemporaryCredits { get; set; }

    public virtual DbSet<Term> Terms { get; set; }

    public virtual DbSet<Udf> Udfs { get; set; }

    public virtual DbSet<Udflayout> Udflayouts { get; set; }

    public virtual DbSet<Udflist> Udflists { get; set; }

    public virtual DbSet<UnapprovedDocument> UnapprovedDocuments { get; set; }

    public virtual DbSet<UnrealizedGainLoss> UnrealizedGainLosses { get; set; }

    public virtual DbSet<UnrealizedGainLossDocument> UnrealizedGainLossDocuments { get; set; }

    public virtual DbSet<UnrealizedGainLossGlaccount> UnrealizedGainLossGlaccounts { get; set; }

    public virtual DbSet<UnrealizedGainLossRate> UnrealizedGainLossRates { get; set; }

    public virtual DbSet<Uomconv> Uomconvs { get; set; }

    public virtual DbSet<UomconvDtl> UomconvDtls { get; set; }

    public virtual DbSet<UpdateCost> UpdateCosts { get; set; }

    public virtual DbSet<UpdateCostDtl> UpdateCostDtls { get; set; }

    public virtual DbSet<UpdateSalesDocument> UpdateSalesDocuments { get; set; }

    public virtual DbSet<UpdateSalesDocumentDtl> UpdateSalesDocumentDtls { get; set; }

    public virtual DbSet<UpdateStockDocument> UpdateStockDocuments { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<UserFormula> UserFormulas { get; set; }

    public virtual DbSet<UserGroup> UserGroups { get; set; }

    public virtual DbSet<UserScript> UserScripts { get; set; }

    public virtual DbSet<UsersAccNo> UsersAccNos { get; set; }

    public virtual DbSet<UsersGroup> UsersGroups { get; set; }

    public virtual DbSet<UsersPurchaseAgent> UsersPurchaseAgents { get; set; }

    public virtual DbSet<UsersSalesAgent> UsersSalesAgents { get; set; }

    public virtual DbSet<UtdstockCost> UtdstockCosts { get; set; }

    public virtual DbSet<UtdstockCostDtl> UtdstockCostDtls { get; set; }

    public virtual DbSet<V2Consignment> V2Consignments { get; set; }

    public virtual DbSet<V2ConsignmentDetail> V2ConsignmentDetails { get; set; }

    public virtual DbSet<V2ConsignmentReturn> V2ConsignmentReturns { get; set; }

    public virtual DbSet<V2ConsignmentReturnDetail> V2ConsignmentReturnDetails { get; set; }

    public virtual DbSet<V2ConsignmentReturnSubDetail> V2ConsignmentReturnSubDetails { get; set; }

    public virtual DbSet<V2ConsignmentSubDetail> V2ConsignmentSubDetails { get; set; }

    public virtual DbSet<V2Creditor> V2Creditors { get; set; }

    public virtual DbSet<V2Debtor> V2Debtors { get; set; }

    public virtual DbSet<V2Item> V2Items { get; set; }

    public virtual DbSet<V2PurchaseConsignment> V2PurchaseConsignments { get; set; }

    public virtual DbSet<V2PurchaseConsignmentDetail> V2PurchaseConsignmentDetails { get; set; }

    public virtual DbSet<V2PurchaseConsignmentReturn> V2PurchaseConsignmentReturns { get; set; }

    public virtual DbSet<V2PurchaseConsignmentReturnDetail> V2PurchaseConsignmentReturnDetails { get; set; }

    public virtual DbSet<V2PurchaseConsignmentReturnSubDetail> V2PurchaseConsignmentReturnSubDetails { get; set; }

    public virtual DbSet<V2PurchaseConsignmentSubDetail> V2PurchaseConsignmentSubDetails { get; set; }

    public virtual DbSet<V2PurchaseRequest> V2PurchaseRequests { get; set; }

    public virtual DbSet<V2PurchaseRequestDetail> V2PurchaseRequestDetails { get; set; }

    public virtual DbSet<V2PurchaseRequestSubDetail> V2PurchaseRequestSubDetails { get; set; }

    public virtual DbSet<V2StockDisassembly> V2StockDisassemblies { get; set; }

    public virtual DbSet<V2StockDisassemblyDetail> V2StockDisassemblyDetails { get; set; }

    public virtual DbSet<V2StockTake> V2StockTakes { get; set; }

    public virtual DbSet<V2StockTakeDetail> V2StockTakeDetails { get; set; }

    public virtual DbSet<V2TaxEntity> V2TaxEntities { get; set; }

    public virtual DbSet<VAccNo> VAccNos { get; set; }

    public virtual DbSet<VAdvancedQuotation> VAdvancedQuotations { get; set; }

    public virtual DbSet<VAdvancedQuotationDetail> VAdvancedQuotationDetails { get; set; }

    public virtual DbSet<VAdvancedQuotationSubDetail> VAdvancedQuotationSubDetails { get; set; }

    public virtual DbSet<VApcreditNote> VApcreditNotes { get; set; }

    public virtual DbSet<VApcreditNoteDetail> VApcreditNoteDetails { get; set; }

    public virtual DbSet<VApdebitNote> VApdebitNotes { get; set; }

    public virtual DbSet<VApdebitNoteDetail> VApdebitNoteDetails { get; set; }

    public virtual DbSet<VApdeposit> VApdeposits { get; set; }

    public virtual DbSet<VApdepositDetail> VApdepositDetails { get; set; }

    public virtual DbSet<VApinvoice> VApinvoices { get; set; }

    public virtual DbSet<VApinvoiceDetail> VApinvoiceDetails { get; set; }

    public virtual DbSet<VAppayment> VAppayments { get; set; }

    public virtual DbSet<VAppaymentDetail> VAppaymentDetails { get; set; }

    public virtual DbSet<VAprefund> VAprefunds { get; set; }

    public virtual DbSet<VAprefundDetail> VAprefundDetails { get; set; }

    public virtual DbSet<VArapcontra> VArapcontras { get; set; }

    public virtual DbSet<VArcreditNote> VArcreditNotes { get; set; }

    public virtual DbSet<VArcreditNoteDetail> VArcreditNoteDetails { get; set; }

    public virtual DbSet<VArdebitNote> VArdebitNotes { get; set; }

    public virtual DbSet<VArdebitNoteDetail> VArdebitNoteDetails { get; set; }

    public virtual DbSet<VArdeposit> VArdeposits { get; set; }

    public virtual DbSet<VArdepositDetail> VArdepositDetails { get; set; }

    public virtual DbSet<VArinvoice> VArinvoices { get; set; }

    public virtual DbSet<VArinvoiceDetail> VArinvoiceDetails { get; set; }

    public virtual DbSet<VArpayment> VArpayments { get; set; }

    public virtual DbSet<VArpaymentDetail> VArpaymentDetails { get; set; }

    public virtual DbSet<VArrefund> VArrefunds { get; set; }

    public virtual DbSet<VArrefundDetail> VArrefundDetails { get; set; }

    public virtual DbSet<VBonusPointRedemption> VBonusPointRedemptions { get; set; }

    public virtual DbSet<VBonusPointRedemptionDetail> VBonusPointRedemptionDetails { get; set; }

    public virtual DbSet<VBranch> VBranches { get; set; }

    public virtual DbSet<VCancelPo> VCancelPos { get; set; }

    public virtual DbSet<VCancelPodetail> VCancelPodetails { get; set; }

    public virtual DbSet<VCancelPosubDetail> VCancelPosubDetails { get; set; }

    public virtual DbSet<VCancelSo> VCancelSos { get; set; }

    public virtual DbSet<VCancelSodetail> VCancelSodetails { get; set; }

    public virtual DbSet<VCancelSosubDetail> VCancelSosubDetails { get; set; }

    public virtual DbSet<VCashBook> VCashBooks { get; set; }

    public virtual DbSet<VCashBookDtl> VCashBookDtls { get; set; }

    public virtual DbSet<VCashBookImportedGoodsDtl> VCashBookImportedGoodsDtls { get; set; }

    public virtual DbSet<VCashBookPaymentDtl> VCashBookPaymentDtls { get; set; }

    public virtual DbSet<VCashPurchase> VCashPurchases { get; set; }

    public virtual DbSet<VCashPurchaseDetail> VCashPurchaseDetails { get; set; }

    public virtual DbSet<VCashPurchaseSubDetail> VCashPurchaseSubDetails { get; set; }

    public virtual DbSet<VCashSale> VCashSales { get; set; }

    public virtual DbSet<VCashSaleDetail> VCashSaleDetails { get; set; }

    public virtual DbSet<VCashSaleSubDetail> VCashSaleSubDetails { get; set; }

    public virtual DbSet<VCntype> VCntypes { get; set; }

    public virtual DbSet<VCompanyProfile> VCompanyProfiles { get; set; }

    public virtual DbSet<VConsignment> VConsignments { get; set; }

    public virtual DbSet<VConsignmentDetail> VConsignmentDetails { get; set; }

    public virtual DbSet<VConsignmentReturn> VConsignmentReturns { get; set; }

    public virtual DbSet<VConsignmentReturnDetail> VConsignmentReturnDetails { get; set; }

    public virtual DbSet<VConsignmentReturnSubDetail> VConsignmentReturnSubDetails { get; set; }

    public virtual DbSet<VConsignmentSubDetail> VConsignmentSubDetails { get; set; }

    public virtual DbSet<VCreditNote> VCreditNotes { get; set; }

    public virtual DbSet<VCreditNoteDetail> VCreditNoteDetails { get; set; }

    public virtual DbSet<VCreditNoteSubDetail> VCreditNoteSubDetails { get; set; }

    public virtual DbSet<VCreditor> VCreditors { get; set; }

    public virtual DbSet<VCreditorArea> VCreditorAreas { get; set; }

    public virtual DbSet<VCreditorPurchaseAgent> VCreditorPurchaseAgents { get; set; }

    public virtual DbSet<VCreditorType> VCreditorTypes { get; set; }

    public virtual DbSet<VCsgnitemBatchBalQty> VCsgnitemBatchBalQties { get; set; }

    public virtual DbSet<VCurrency> VCurrencies { get; set; }

    public virtual DbSet<VDebitNote> VDebitNotes { get; set; }

    public virtual DbSet<VDebitNoteDetail> VDebitNoteDetails { get; set; }

    public virtual DbSet<VDebitNoteSubDetail> VDebitNoteSubDetails { get; set; }

    public virtual DbSet<VDebtor> VDebtors { get; set; }

    public virtual DbSet<VDebtorArea> VDebtorAreas { get; set; }

    public virtual DbSet<VDebtorSalesAgent> VDebtorSalesAgents { get; set; }

    public virtual DbSet<VDebtorType> VDebtorTypes { get; set; }

    public virtual DbSet<VDeliveryOrder> VDeliveryOrders { get; set; }

    public virtual DbSet<VDeliveryOrderDetail> VDeliveryOrderDetails { get; set; }

    public virtual DbSet<VDeliveryOrderSubDetail> VDeliveryOrderSubDetails { get; set; }

    public virtual DbSet<VDeliveryReturn> VDeliveryReturns { get; set; }

    public virtual DbSet<VDeliveryReturnDetail> VDeliveryReturnDetails { get; set; }

    public virtual DbSet<VDeliveryReturnSubDetail> VDeliveryReturnSubDetails { get; set; }

    public virtual DbSet<VDept> VDepts { get; set; }

    public virtual DbSet<VDntype> VDntypes { get; set; }

    public virtual DbSet<VGoodsReceivedNote> VGoodsReceivedNotes { get; set; }

    public virtual DbSet<VGoodsReceivedNoteDetail> VGoodsReceivedNoteDetails { get; set; }

    public virtual DbSet<VGoodsReceivedNoteSubDetail> VGoodsReceivedNoteSubDetails { get; set; }

    public virtual DbSet<VGoodsReturn> VGoodsReturns { get; set; }

    public virtual DbSet<VGoodsReturnDetail> VGoodsReturnDetails { get; set; }

    public virtual DbSet<VGoodsReturnSubDetail> VGoodsReturnSubDetails { get; set; }

    public virtual DbSet<VInvoice> VInvoices { get; set; }

    public virtual DbSet<VInvoiceDetail> VInvoiceDetails { get; set; }

    public virtual DbSet<VInvoiceSubDetail> VInvoiceSubDetails { get; set; }

    public virtual DbSet<VItem> VItems { get; set; }

    public virtual DbSet<VItemBalQty> VItemBalQties { get; set; }

    public virtual DbSet<VItemBatch> VItemBatches { get; set; }

    public virtual DbSet<VItemBatchBalQty> VItemBatchBalQties { get; set; }

    public virtual DbSet<VItemBrand> VItemBrands { get; set; }

    public virtual DbSet<VItemCategory> VItemCategories { get; set; }

    public virtual DbSet<VItemClass> VItemClasses { get; set; }

    public virtual DbSet<VItemGroup> VItemGroups { get; set; }

    public virtual DbSet<VItemType> VItemTypes { get; set; }

    public virtual DbSet<VItemUom> VItemUoms { get; set; }

    public virtual DbSet<VItemUombalQty> VItemUombalQties { get; set; }

    public virtual DbSet<VJournalEntry> VJournalEntries { get; set; }

    public virtual DbSet<VJournalEntryDetail> VJournalEntryDetails { get; set; }

    public virtual DbSet<VJournalOfTransaction> VJournalOfTransactions { get; set; }

    public virtual DbSet<VLocation> VLocations { get; set; }

    public virtual DbSet<VMember> VMembers { get; set; }

    public virtual DbSet<VPaymentMethod> VPaymentMethods { get; set; }

    public virtual DbSet<VProject> VProjects { get; set; }

    public virtual DbSet<VPurchaseAgent> VPurchaseAgents { get; set; }

    public virtual DbSet<VPurchaseConsignment> VPurchaseConsignments { get; set; }

    public virtual DbSet<VPurchaseConsignmentDetail> VPurchaseConsignmentDetails { get; set; }

    public virtual DbSet<VPurchaseConsignmentReturn> VPurchaseConsignmentReturns { get; set; }

    public virtual DbSet<VPurchaseConsignmentReturnDetail> VPurchaseConsignmentReturnDetails { get; set; }

    public virtual DbSet<VPurchaseConsignmentReturnSubDetail> VPurchaseConsignmentReturnSubDetails { get; set; }

    public virtual DbSet<VPurchaseConsignmentSubDetail> VPurchaseConsignmentSubDetails { get; set; }

    public virtual DbSet<VPurchaseInvoice> VPurchaseInvoices { get; set; }

    public virtual DbSet<VPurchaseInvoiceDetail> VPurchaseInvoiceDetails { get; set; }

    public virtual DbSet<VPurchaseInvoiceSubDetail> VPurchaseInvoiceSubDetails { get; set; }

    public virtual DbSet<VPurchaseOrder> VPurchaseOrders { get; set; }

    public virtual DbSet<VPurchaseOrderDetail> VPurchaseOrderDetails { get; set; }

    public virtual DbSet<VPurchaseOrderSubDetail> VPurchaseOrderSubDetails { get; set; }

    public virtual DbSet<VPurchaseReturn> VPurchaseReturns { get; set; }

    public virtual DbSet<VPurchaseReturnDetail> VPurchaseReturnDetails { get; set; }

    public virtual DbSet<VPurchaseReturnSubDetail> VPurchaseReturnSubDetails { get; set; }

    public virtual DbSet<VQuotation> VQuotations { get; set; }

    public virtual DbSet<VQuotationDetail> VQuotationDetails { get; set; }

    public virtual DbSet<VQuotationSubDetail> VQuotationSubDetails { get; set; }

    public virtual DbSet<VRequestForQuotation> VRequestForQuotations { get; set; }

    public virtual DbSet<VRequestForQuotationDetail> VRequestForQuotationDetails { get; set; }

    public virtual DbSet<VRequestForQuotationSubDetail> VRequestForQuotationSubDetails { get; set; }

    public virtual DbSet<VSalesAgent> VSalesAgents { get; set; }

    public virtual DbSet<VSalesOrder> VSalesOrders { get; set; }

    public virtual DbSet<VSalesOrderDetail> VSalesOrderDetails { get; set; }

    public virtual DbSet<VSalesOrderSubDetail> VSalesOrderSubDetails { get; set; }

    public virtual DbSet<VStockAdjustment> VStockAdjustments { get; set; }

    public virtual DbSet<VStockAdjustmentDetail> VStockAdjustmentDetails { get; set; }

    public virtual DbSet<VStockAssembly> VStockAssemblies { get; set; }

    public virtual DbSet<VStockAssemblyDetail> VStockAssemblyDetails { get; set; }

    public virtual DbSet<VStockAssemblyOrder> VStockAssemblyOrders { get; set; }

    public virtual DbSet<VStockAssemblyOrderDetail> VStockAssemblyOrderDetails { get; set; }

    public virtual DbSet<VStockGroup> VStockGroups { get; set; }

    public virtual DbSet<VStockIssue> VStockIssues { get; set; }

    public virtual DbSet<VStockIssueDetail> VStockIssueDetails { get; set; }

    public virtual DbSet<VStockItemBrand> VStockItemBrands { get; set; }

    public virtual DbSet<VStockItemCategory> VStockItemCategories { get; set; }

    public virtual DbSet<VStockItemClass> VStockItemClasses { get; set; }

    public virtual DbSet<VStockItemType> VStockItemTypes { get; set; }

    public virtual DbSet<VStockReceive> VStockReceives { get; set; }

    public virtual DbSet<VStockReceiveDetail> VStockReceiveDetails { get; set; }

    public virtual DbSet<VStockTransfer> VStockTransfers { get; set; }

    public virtual DbSet<VStockTransferDetail> VStockTransferDetails { get; set; }

    public virtual DbSet<VStockUomconversion> VStockUomconversions { get; set; }

    public virtual DbSet<VStockUomconversionDetail> VStockUomconversionDetails { get; set; }

    public virtual DbSet<VStockUpdateCost> VStockUpdateCosts { get; set; }

    public virtual DbSet<VStockUpdateCostDetail> VStockUpdateCostDetails { get; set; }

    public virtual DbSet<VStockWriteOff> VStockWriteOffs { get; set; }

    public virtual DbSet<VStockWriteOffDetail> VStockWriteOffDetails { get; set; }

    public virtual DbSet<VTaxCode> VTaxCodes { get; set; }

    public virtual DbSet<VTaxEntity> VTaxEntities { get; set; }

    public virtual DbSet<VUser> VUsers { get; set; }

    public virtual DbSet<VWithholdingTax> VWithholdingTaxes { get; set; }

    public virtual DbSet<VWithholdingTaxEntryDtl> VWithholdingTaxEntryDtls { get; set; }

    public virtual DbSet<VWithholdingTaxPaymentDtl> VWithholdingTaxPaymentDtls { get; set; }

    public virtual DbSet<Whtsetting> Whtsettings { get; set; }

    public virtual DbSet<WithholdingTax> WithholdingTaxes { get; set; }

    public virtual DbSet<WithholdingTaxEntryDtl> WithholdingTaxEntryDtls { get; set; }

    public virtual DbSet<WithholdingTaxPaymentDtl> WithholdingTaxPaymentDtls { get; set; }

    public virtual DbSet<WithholdingTaxTran> WithholdingTaxTrans { get; set; }

    public virtual DbSet<Woff> Woffs { get; set; }

    public virtual DbSet<Woffdtl> Woffdtls { get; set; }

    public virtual DbSet<X> Xs { get; set; }

    public virtual DbSet<Xfer> Xfers { get; set; }

    public virtual DbSet<Xferdtl> Xferdtls { get; set; }

    public virtual DbSet<Xp> Xps { get; set; }

    public virtual DbSet<Xpdtl> Xpdtls { get; set; }

    public virtual DbSet<Xsdtl> Xsdtls { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseSqlServer("data source=DESKTOP-OHP9JI1\\A2008;initial catalog=AED_ACCOUNTSOFT;trusted_connection=true;TrustServerCertificate=True ");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<AccGroup>(entity =>
        {
            entity.HasKey(e => e.AutoKey).HasName("PK_AccGroup_AutoKey");

            entity.ToTable("AccGroup");

            entity.HasIndex(e => e.AccType, "UIX_AccGroup_AccType").IsUnique();

            entity.Property(e => e.AccType).HasMaxLength(2);
            entity.Property(e => e.Group)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NormalBalance)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.AccTypeNavigation).WithOne(p => p.AccGroup)
                .HasPrincipalKey<AccType>(p => p.AccType1)
                .HasForeignKey<AccGroup>(d => d.AccType)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AccGroup_AccType");
        });

        modelBuilder.Entity<AccPeriod>(entity =>
        {
            entity.HasKey(e => e.PeriodNo).HasName("PK_AccPeriod_PeriodNo");

            entity.ToTable("AccPeriod");

            entity.Property(e => e.PeriodNo).ValueGeneratedNever();
            entity.Property(e => e.Lock)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<AccType>(entity =>
        {
            entity.HasKey(e => e.AutoKey).HasName("PK_AccType_AutoKey");

            entity.ToTable("AccType", tb => tb.HasTrigger("UpdateAccTypeChangeCount"));

            entity.HasIndex(e => e.AccType1, "UIX_AccType_AccType").IsUnique();

            entity.Property(e => e.AccType1)
                .HasMaxLength(2)
                .HasColumnName("AccType");
            entity.Property(e => e.Desc2).HasMaxLength(40);
            entity.Property(e => e.Description).HasMaxLength(40);
            entity.Property(e => e.IsBstype)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IsBSType");
            entity.Property(e => e.IsSystemType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<AccessRight>(entity =>
        {
            entity.HasKey(e => e.AutoKey).HasName("PK_AccessRight_AutoKey");

            entity.ToTable("AccessRight");

            entity.HasIndex(e => new { e.CmdId, e.UserId }, "UIX_AccessRight_CmdID_UserID").IsUnique();

            entity.Property(e => e.CmdId)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CmdID");
            entity.Property(e => e.UserId)
                .HasMaxLength(40)
                .HasColumnName("UserID");
        });

        modelBuilder.Entity<Accountant>(entity =>
        {
            entity.HasKey(e => e.AccountantId).HasName("PK_Accountant_AccountantID");

            entity.ToTable("Accountant");

            entity.Property(e => e.AccountantId)
                .HasMaxLength(200)
                .HasColumnName("AccountantID");
            entity.Property(e => e.IsActive)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.UserId)
                .HasMaxLength(10)
                .HasColumnName("UserID");

            entity.HasOne(d => d.User).WithMany(p => p.Accountants)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Accountant_UserID");
        });

        modelBuilder.Entity<Activity>(entity =>
        {
            entity.HasKey(e => e.ActivityKey).HasName("PK_Activity_ActivityKey");

            entity.ToTable("Activity");

            entity.Property(e => e.ActivityDateTime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ComputerName).HasMaxLength(20);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.DocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.ThirdPartyAppName).HasMaxLength(20);
            entity.Property(e => e.UserId)
                .HasMaxLength(10)
                .HasColumnName("UserID");

            entity.HasOne(d => d.User).WithMany(p => p.Activities)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK_Activity_UserID");
        });

        modelBuilder.Entity<Address>(entity =>
        {
            entity.HasKey(e => e.AutoKey).HasName("PK_Address_AutoKey");

            entity.ToTable("Address", tb => tb.HasTrigger("UpdateAddressChangeCount"));

            entity.HasIndex(e => e.Name, "UIX_Address_Name").IsUnique();

            entity.Property(e => e.Address1).HasMaxLength(40);
            entity.Property(e => e.Address2).HasMaxLength(40);
            entity.Property(e => e.Address3).HasMaxLength(40);
            entity.Property(e => e.Address4).HasMaxLength(40);
            entity.Property(e => e.Contact).HasMaxLength(40);
            entity.Property(e => e.Fax1).HasMaxLength(25);
            entity.Property(e => e.Fax2).HasMaxLength(25);
            entity.Property(e => e.Name).HasMaxLength(40);
            entity.Property(e => e.Phone1).HasMaxLength(25);
            entity.Property(e => e.Phone2).HasMaxLength(25);
            entity.Property(e => e.PostCode).HasMaxLength(10);
        });

        modelBuilder.Entity<Adj>(entity =>
        {
            entity.HasKey(e => e.DocKey).HasName("PK_ADJ_DocKey");

            entity.ToTable("ADJ", tb => tb.HasTrigger("UpdateADJChangeCount"));

            entity.HasIndex(e => e.DocNo, "IX_ADJ_DocNo").IsUnique();

            entity.Property(e => e.DocKey).ValueGeneratedNever();
            entity.Property(e => e.CanSync)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.Guid).HasDefaultValueSql("(newid())");
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.RefDocNo).HasMaxLength(30);
            entity.Property(e => e.Remark1).HasMaxLength(40);
            entity.Property(e => e.Remark2).HasMaxLength(40);
            entity.Property(e => e.Remark3).HasMaxLength(40);
            entity.Property(e => e.Remark4).HasMaxLength(40);
            entity.Property(e => e.Total).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.UdfSuperAppId)
                .HasMaxLength(32)
                .HasColumnName("UDF_SuperAppId");

            entity.HasOne(d => d.CreatedUser).WithMany(p => p.AdjCreatedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.CreatedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ADJ_CreatedUserID");

            entity.HasOne(d => d.LastModifiedUser).WithMany(p => p.AdjLastModifiedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.LastModifiedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ADJ_LastModifiedUserID");
        });

        modelBuilder.Entity<Adjdtl>(entity =>
        {
            entity.HasKey(e => e.DtlKey).HasName("PK_ADJDTL_DtlKey");

            entity.ToTable("ADJDTL");

            entity.HasIndex(e => e.DocKey, "IX_ADJDTL_DocKey");

            entity.Property(e => e.DtlKey).ValueGeneratedNever();
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Desc2).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.Guid).HasDefaultValueSql("(newid())");
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.Numbering).HasMaxLength(6);
            entity.Property(e => e.PrintOut)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.UnitCost).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");

            entity.HasOne(d => d.DeptNoNavigation).WithMany(p => p.Adjdtls)
                .HasForeignKey(d => d.DeptNo)
                .HasConstraintName("FK_ADJDTL_DeptNo");

            entity.HasOne(d => d.LocationNavigation).WithMany(p => p.Adjdtls)
                .HasPrincipalKey(p => p.Location1)
                .HasForeignKey(d => d.Location)
                .HasConstraintName("FK_ADJDTL_Location");

            entity.HasOne(d => d.ProjNoNavigation).WithMany(p => p.Adjdtls)
                .HasForeignKey(d => d.ProjNo)
                .HasConstraintName("FK_ADJDTL_ProjNo");

            entity.HasOne(d => d.ItemBatch).WithMany(p => p.Adjdtls)
                .HasPrincipalKey(p => new { p.ItemCode, p.BatchNo })
                .HasForeignKey(d => new { d.ItemCode, d.BatchNo })
                .HasConstraintName("FK_ADJDTL_ItemBatch");

            entity.HasOne(d => d.ItemUom).WithMany(p => p.Adjdtls)
                .HasPrincipalKey(p => new { p.ItemCode, p.Uom })
                .HasForeignKey(d => new { d.ItemCode, d.Uom })
                .HasConstraintName("FK_ADJDTL_ItemUOM");
        });

        modelBuilder.Entity<Advqt>(entity =>
        {
            entity.HasKey(e => e.DocKey).HasName("PK_ADVQT_DocKey");

            entity.ToTable("ADVQT", tb => tb.HasTrigger("UpdateADVQTChangeCount"));

            entity.HasIndex(e => new { e.DocDate, e.ApprovalUserId, e.ParentDocKey, e.Rev, e.Qtstatus, e.Cancelled, e.DebtorCode, e.BranchCode, e.DocKey }, "IX_ADVQT_DocDate_ApprovalUserID_ParentDocKey_Rev_QTStatus_Cancelled_DebtorCode_BranchCode_DocKey");

            entity.HasIndex(e => new { e.DocNo, e.Rev }, "IX_ADVQT_DocNo").IsUnique();

            entity.HasIndex(e => new { e.Qtstatus, e.DocKey, e.ParentDocKey }, "IX_ADVQT_QTStatus_DocKey_ParentDocKey");

            entity.HasIndex(e => new { e.Qtstatus, e.Rev, e.DocKey, e.ParentDocKey }, "IX_ADVQT_QTStatus_Rev_DocKey_ParentDocKey");

            entity.HasIndex(e => new { e.Rev, e.ParentDocKey, e.DocKey }, "IX_ADVQT_Rev_ParentDocKey_DocKey");

            entity.HasIndex(e => new { e.Rev, e.ParentDocKey, e.DocKey, e.Qtstatus }, "IX_ADVQT_Rev_ParentDocKey_QTStatus");

            entity.Property(e => e.DocKey).ValueGeneratedNever();
            entity.Property(e => e.AnalysisNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ApprovalUserId)
                .HasMaxLength(10)
                .HasColumnName("ApprovalUserID");
            entity.Property(e => e.Attention).HasMaxLength(40);
            entity.Property(e => e.BranchCode).HasMaxLength(20);
            entity.Property(e => e.CalcDiscountOnUnitPrice)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CanSync)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Cc)
                .HasMaxLength(20)
                .HasColumnName("CC");
            entity.Property(e => e.ConfirmUserId)
                .HasMaxLength(10)
                .HasColumnName("ConfirmUserID");
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.CurrencyCode).HasMaxLength(5);
            entity.Property(e => e.CurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.DebtorCode).HasMaxLength(12);
            entity.Property(e => e.DebtorName).HasMaxLength(100);
            entity.Property(e => e.DeliverAddr1).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr2).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr3).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr4).HasMaxLength(40);
            entity.Property(e => e.DeliverContact).HasMaxLength(40);
            entity.Property(e => e.DeliverFax1).HasMaxLength(25);
            entity.Property(e => e.DeliverPhone1).HasMaxLength(25);
            entity.Property(e => e.DeliveryTerm).HasMaxLength(40);
            entity.Property(e => e.Description).HasMaxLength(80);
            entity.Property(e => e.DisplayTerm).HasMaxLength(30);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.ExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Fax1).HasMaxLength(25);
            entity.Property(e => e.FinalTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer1TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Footer2Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer2TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Footer3Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer3TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.FullTransferOption)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Guid).HasDefaultValueSql("(newid())");
            entity.Property(e => e.InclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("F")
                .IsFixedLength();
            entity.Property(e => e.InvAddr1).HasMaxLength(40);
            entity.Property(e => e.InvAddr2).HasMaxLength(40);
            entity.Property(e => e.InvAddr3).HasMaxLength(40);
            entity.Property(e => e.InvAddr4).HasMaxLength(40);
            entity.Property(e => e.IsRoundAdj)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("F")
                .IsFixedLength();
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.LocalAnalysisNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.MultiPrice).HasMaxLength(8);
            entity.Property(e => e.NetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.PaymentTerm).HasMaxLength(40);
            entity.Property(e => e.Phone1).HasMaxLength(25);
            entity.Property(e => e.Qtstatus).HasColumnName("QTStatus");
            entity.Property(e => e.Reason).HasMaxLength(200);
            entity.Property(e => e.Ref).HasMaxLength(40);
            entity.Property(e => e.RefDocNo).HasMaxLength(30);
            entity.Property(e => e.Remark1).HasMaxLength(40);
            entity.Property(e => e.Remark2).HasMaxLength(40);
            entity.Property(e => e.Remark3).HasMaxLength(40);
            entity.Property(e => e.Remark4).HasMaxLength(40);
            entity.Property(e => e.RoundAdj).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SalesAgent).HasMaxLength(12);
            entity.Property(e => e.SalesExemptionExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.SalesExemptionNo).HasMaxLength(60);
            entity.Property(e => e.SalesLocation).HasMaxLength(8);
            entity.Property(e => e.ShipInfo).HasMaxLength(40);
            entity.Property(e => e.ShipVia).HasMaxLength(20);
            entity.Property(e => e.SucessLostUserId)
                .HasMaxLength(10)
                .HasColumnName("SucessLostUserID");
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxEntityId).HasColumnName("TaxEntityID");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ToDocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.ToTaxCurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.Total).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Transferable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Validity).HasMaxLength(40);
            entity.Property(e => e.YourRef).HasMaxLength(30);

            entity.HasOne(d => d.ApprovalUser).WithMany(p => p.AdvqtApprovalUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.ApprovalUserId)
                .HasConstraintName("FK_ADVQT_ApprovalUserID");

            entity.HasOne(d => d.ConfirmUser).WithMany(p => p.AdvqtConfirmUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.ConfirmUserId)
                .HasConstraintName("FK_ADVQT_ConfirmUserID");

            entity.HasOne(d => d.CreatedUser).WithMany(p => p.AdvqtCreatedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.CreatedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ADVQT_CreatedUserID");

            entity.HasOne(d => d.CurrencyCodeNavigation).WithMany(p => p.Advqts)
                .HasForeignKey(d => d.CurrencyCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ADVQT_CurrencyCode");

            entity.HasOne(d => d.DebtorCodeNavigation).WithMany(p => p.Advqts)
                .HasForeignKey(d => d.DebtorCode)
                .HasConstraintName("FK_ADVQT_DebtorCode");

            entity.HasOne(d => d.DisplayTermNavigation).WithMany(p => p.Advqts)
                .HasPrincipalKey(p => p.DisplayTerm)
                .HasForeignKey(d => d.DisplayTerm)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ADVQT_DisplayTerm");

            entity.HasOne(d => d.Footer1TaxCodeNavigation).WithMany(p => p.AdvqtFooter1TaxCodeNavigations)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.Footer1TaxCode)
                .HasConstraintName("FK_ADVQT_Footer1TaxCode");

            entity.HasOne(d => d.Footer2TaxCodeNavigation).WithMany(p => p.AdvqtFooter2TaxCodeNavigations)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.Footer2TaxCode)
                .HasConstraintName("FK_ADVQT_Footer2TaxCode");

            entity.HasOne(d => d.Footer3TaxCodeNavigation).WithMany(p => p.AdvqtFooter3TaxCodeNavigations)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.Footer3TaxCode)
                .HasConstraintName("FK_ADVQT_Footer3TaxCode");

            entity.HasOne(d => d.LastModifiedUser).WithMany(p => p.AdvqtLastModifiedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.LastModifiedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ADVQT_LastModifiedUserID");

            entity.HasOne(d => d.SalesAgentNavigation).WithMany(p => p.Advqts)
                .HasPrincipalKey(p => p.SalesAgent1)
                .HasForeignKey(d => d.SalesAgent)
                .HasConstraintName("FK_ADVQT_SalesAgent");

            entity.HasOne(d => d.SalesLocationNavigation).WithMany(p => p.Advqts)
                .HasPrincipalKey(p => p.Location1)
                .HasForeignKey(d => d.SalesLocation)
                .HasConstraintName("FK_ADVQT_SalesLocation");

            entity.HasOne(d => d.ShipViaNavigation).WithMany(p => p.Advqts)
                .HasPrincipalKey(p => p.ShippingMethod1)
                .HasForeignKey(d => d.ShipVia)
                .HasConstraintName("FK_ADVQT_ShipVia");

            entity.HasOne(d => d.SucessLostUser).WithMany(p => p.AdvqtSucessLostUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.SucessLostUserId)
                .HasConstraintName("FK_ADVQT_SucessLostUserID");

            entity.HasOne(d => d.TaxEntity).WithMany(p => p.Advqts)
                .HasForeignKey(d => d.TaxEntityId)
                .HasConstraintName("FK_ADVQT_TaxEntityID");

            entity.HasOne(d => d.Branch).WithMany(p => p.Advqts)
                .HasPrincipalKey(p => new { p.AccNo, p.BranchCode })
                .HasForeignKey(d => new { d.DebtorCode, d.BranchCode })
                .HasConstraintName("FK_ADVQT_BranchCode");
        });

        modelBuilder.Entity<Advqtdtl>(entity =>
        {
            entity.HasKey(e => e.DtlKey).HasName("PK_ADVQTDTL_DtlKey");

            entity.ToTable("ADVQTDTL");

            entity.HasIndex(e => new { e.ItemCode, e.Uom }, "IX_ADVQTDTL_ItemCode_UOM");

            entity.HasIndex(e => new { e.PackageDocKey, e.ParentDtlKey, e.DocKey, e.ItemCode }, "IX_ADVQTDTL_PackageDocKey_ParentDtlKey_DocKey_ItemCode");

            entity.Property(e => e.DtlKey).ValueGeneratedNever();
            entity.Property(e => e.AddToSubTotal)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CalcByPercent).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.DeliveryDate).HasColumnType("datetime");
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Desc2).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.Discount).HasMaxLength(20);
            entity.Property(e => e.DiscountAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DtlType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EstimatedDeliveryDate).HasMaxLength(20);
            entity.Property(e => e.ExtraDiscountAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.FontStyle).HasMaxLength(8);
            entity.Property(e => e.Guid).HasDefaultValueSql("(newid())");
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.LocalSubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalSubTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxAdjustment).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.MainItem)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Numbering).HasMaxLength(6);
            entity.Property(e => e.PrintOut)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SalesExemptionNo).HasMaxLength(60);
            entity.Property(e => e.SmallestQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SmallestUnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SubTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxAdjustment).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCode).HasMaxLength(14);
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Transferable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TransferedQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
            entity.Property(e => e.UserUom)
                .HasMaxLength(8)
                .HasColumnName("UserUOM");

            entity.HasOne(d => d.DeptNoNavigation).WithMany(p => p.Advqtdtls)
                .HasForeignKey(d => d.DeptNo)
                .HasConstraintName("FK_ADVQTDTL_DeptNo");

            entity.HasOne(d => d.FontStyleNavigation).WithMany(p => p.Advqtdtls)
                .HasPrincipalKey(p => p.FontStyle1)
                .HasForeignKey(d => d.FontStyle)
                .HasConstraintName("FK_ADVQTDTL_FontStyle");

            entity.HasOne(d => d.LocationNavigation).WithMany(p => p.Advqtdtls)
                .HasPrincipalKey(p => p.Location1)
                .HasForeignKey(d => d.Location)
                .HasConstraintName("FK_ADVQTDTL_Location");

            entity.HasOne(d => d.ProjNoNavigation).WithMany(p => p.Advqtdtls)
                .HasForeignKey(d => d.ProjNo)
                .HasConstraintName("FK_ADVQTDTL_ProjNo");

            entity.HasOne(d => d.TaxCodeNavigation).WithMany(p => p.Advqtdtls)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.TaxCode)
                .HasConstraintName("FK_ADVQTDTL_TaxCode");

            entity.HasOne(d => d.ItemUom).WithMany(p => p.Advqtdtls)
                .HasPrincipalKey(p => new { p.ItemCode, p.Uom })
                .HasForeignKey(d => new { d.ItemCode, d.Uom })
                .HasConstraintName("FK_ADVQTDTL_ItemUOM");
        });

        modelBuilder.Entity<AesbPlugInDevice>(entity =>
        {
            entity.HasKey(e => new { e.PlugInGuid, e.DeviceId });

            entity.ToTable("AESB_PlugIn_Devices");

            entity.Property(e => e.PlugInGuid)
                .HasMaxLength(50)
                .HasColumnName("PlugInGUID");
            entity.Property(e => e.DeviceId)
                .HasMaxLength(50)
                .HasColumnName("DeviceID");
            entity.Property(e => e.ActivationDate).HasColumnType("datetime");
            entity.Property(e => e.LicenseKey).HasMaxLength(20);
            entity.Property(e => e.Name).HasMaxLength(50);
        });

        modelBuilder.Entity<AesbPlugInLicense>(entity =>
        {
            entity.HasKey(e => e.PlugInGuid).HasName("PK_AESB_PlugIn_License");

            entity.ToTable("AESB_PlugIn_Licenses");

            entity.Property(e => e.PlugInGuid)
                .HasMaxLength(50)
                .HasColumnName("PlugInGUID");
            entity.Property(e => e.ActivationDate).HasColumnType("datetime");
            entity.Property(e => e.LicenseKey).HasMaxLength(20);
        });

        modelBuilder.Entity<AisbA022Agrn>(entity =>
        {
            entity.HasKey(e => e.DocKey).HasName("PK_AESB_A022_AGRN");

            entity.ToTable("AISB_A022_AGRN");

            entity.Property(e => e.AnalysisNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Attention).HasMaxLength(50);
            entity.Property(e => e.BranchCode).HasMaxLength(50);
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(50)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.CreditorCode).HasMaxLength(50);
            entity.Property(e => e.CreditorName).HasMaxLength(100);
            entity.Property(e => e.CurrencyCode).HasMaxLength(50);
            entity.Property(e => e.CurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.Description).HasMaxLength(80);
            entity.Property(e => e.DisplayTerm).HasMaxLength(50);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(50);
            entity.Property(e => e.ExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ExternalLink).HasColumnType("ntext");
            entity.Property(e => e.Fax1).HasMaxLength(50);
            entity.Property(e => e.Footer1Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Footer1TaxType).HasMaxLength(50);
            entity.Property(e => e.Footer2Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Footer2TaxType).HasMaxLength(50);
            entity.Property(e => e.Footer3Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Footer3TaxType).HasMaxLength(50);
            entity.Property(e => e.ForeignCharges).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.FullTransferOption)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.InvAddr1).HasMaxLength(50);
            entity.Property(e => e.InvAddr2).HasMaxLength(50);
            entity.Property(e => e.InvAddr3).HasMaxLength(50);
            entity.Property(e => e.InvAddr4).HasMaxLength(50);
            entity.Property(e => e.LandedCostMethod)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(50)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.LocalAnalysisNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalCharges).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.NetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Note).HasColumnType("ntext");
            entity.Property(e => e.Phone1).HasMaxLength(50);
            entity.Property(e => e.PurchaseAgent).HasMaxLength(50);
            entity.Property(e => e.PurchaseLocation).HasMaxLength(50);
            entity.Property(e => e.Ref).HasMaxLength(40);
            entity.Property(e => e.RefDocNo).HasMaxLength(50);
            entity.Property(e => e.Remark1).HasMaxLength(50);
            entity.Property(e => e.Remark2).HasMaxLength(50);
            entity.Property(e => e.Remark3).HasMaxLength(50);
            entity.Property(e => e.Remark4).HasMaxLength(50);
            entity.Property(e => e.ShipInfo).HasMaxLength(40);
            entity.Property(e => e.ShipVia).HasMaxLength(50);
            entity.Property(e => e.SupplierDono)
                .HasMaxLength(50)
                .HasColumnName("SupplierDONo");
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ToDocNo).HasMaxLength(50);
            entity.Property(e => e.ToDocType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ToTaxCurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.Total).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalExTax).HasColumnType("decimal(19, 2)");
        });

        modelBuilder.Entity<AisbA022Agrndtl>(entity =>
        {
            entity.HasKey(e => e.DtlKey).HasName("PK_AESB_A022_AGRNDTL");

            entity.ToTable("AISB_A022_AGRNDTL");

            entity.Property(e => e.BatchNo).HasMaxLength(50);
            entity.Property(e => e.CalcByPercent).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Cnamt)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("CNAmt");
            entity.Property(e => e.DeliveryDate).HasColumnType("datetime");
            entity.Property(e => e.DeptNo).HasMaxLength(50);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.Discount).HasMaxLength(20);
            entity.Property(e => e.DiscountAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DtlType)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Duty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.EstimatedDeliveryDate).HasMaxLength(20);
            entity.Property(e => e.ExtraDiscountAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.FocdtlKey).HasColumnName("FOCDtlKey");
            entity.Property(e => e.Focqty)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("FOCQty");
            entity.Property(e => e.FoctransferedQty)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("FOCTransferedQty");
            entity.Property(e => e.FontStyle).HasMaxLength(50);
            entity.Property(e => e.ForeignCharges).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.FromDocNo).HasMaxLength(50);
            entity.Property(e => e.FromDocType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FullTransferFromDocList).HasColumnType("ntext");
            entity.Property(e => e.FullTransferOption)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FurtherDescription).HasColumnType("ntext");
            entity.Property(e => e.ItemCode).HasMaxLength(50);
            entity.Property(e => e.LocalCharges).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.LocalSubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalSubTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxAdjustment).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Location).HasMaxLength(50);
            entity.Property(e => e.LotNo).HasMaxLength(50);
            entity.Property(e => e.Numbering).HasMaxLength(50);
            entity.Property(e => e.OurPodate)
                .HasColumnType("datetime")
                .HasColumnName("OurPODate");
            entity.Property(e => e.OurPono)
                .HasMaxLength(50)
                .HasColumnName("OurPONo");
            entity.Property(e => e.PostToStockDate).HasColumnType("datetime");
            entity.Property(e => e.ProjNo).HasMaxLength(50);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SalesExemptionNo).HasMaxLength(60);
            entity.Property(e => e.SerialNoList).HasColumnType("ntext");
            entity.Property(e => e.SmallestQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SmallestUnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SubTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxAdjustment).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.TaxType).HasMaxLength(50);
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TransferedQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Uom)
                .HasMaxLength(50)
                .HasColumnName("UOM");
            entity.Property(e => e.UserUom)
                .HasMaxLength(50)
                .HasColumnName("UserUOM");
        });

        modelBuilder.Entity<AisbA022Am>(entity =>
        {
            entity.HasKey(e => e.Amsid);

            entity.ToTable("AISB_A022_AMS");

            entity.Property(e => e.Amsid)
                .HasMaxLength(50)
                .HasColumnName("AMSId");
            entity.Property(e => e.BranchCode).HasMaxLength(20);
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId).HasMaxLength(10);
            entity.Property(e => e.DebtorCode).HasMaxLength(12);
            entity.Property(e => e.LastModifiedDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId).HasMaxLength(10);
            entity.Property(e => e.SalesLocation).HasMaxLength(8);
        });

        modelBuilder.Entity<AisbA022Amsdtl>(entity =>
        {
            entity.HasKey(e => e.AmsdtlId);

            entity.ToTable("AISB_A022_AMSDtl");

            entity.Property(e => e.AmsdtlId)
                .HasMaxLength(50)
                .HasColumnName("AMSDtlId");
            entity.Property(e => e.Ams)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("AMS");
            entity.Property(e => e.Amsid)
                .HasMaxLength(50)
                .HasColumnName("AMSId");
            entity.Property(e => e.BufferQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Frequency).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Seq).HasDefaultValue(0);
            entity.Property(e => e.SuggestQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<AisbA022Asn>(entity =>
        {
            entity.HasKey(e => e.DocKey).HasName("PK_AESB_A022_ASN");

            entity.ToTable("AISB_A022_ASN");

            entity.Property(e => e.AnalysisNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Attention).HasMaxLength(50);
            entity.Property(e => e.BranchCode).HasMaxLength(50);
            entity.Property(e => e.CalcDiscountOnUnitPrice)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(50)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.CurrencyCode).HasMaxLength(50);
            entity.Property(e => e.CurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.DebtorCode).HasMaxLength(50);
            entity.Property(e => e.DebtorName).HasMaxLength(100);
            entity.Property(e => e.DeliverAddr1).HasMaxLength(50);
            entity.Property(e => e.DeliverAddr2).HasMaxLength(50);
            entity.Property(e => e.DeliverAddr3).HasMaxLength(50);
            entity.Property(e => e.DeliverAddr4).HasMaxLength(50);
            entity.Property(e => e.DeliverContact).HasMaxLength(50);
            entity.Property(e => e.DeliverFax1).HasMaxLength(50);
            entity.Property(e => e.DeliverPhone1).HasMaxLength(50);
            entity.Property(e => e.DeliveryDate).HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(80);
            entity.Property(e => e.DisplayTerm).HasMaxLength(50);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(50);
            entity.Property(e => e.ExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ExternalLink).HasColumnType("ntext");
            entity.Property(e => e.Fax1).HasMaxLength(50);
            entity.Property(e => e.FinalTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Footer1TaxType).HasMaxLength(50);
            entity.Property(e => e.Footer2Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Footer2TaxType).HasMaxLength(50);
            entity.Property(e => e.Footer3Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Footer3TaxType).HasMaxLength(50);
            entity.Property(e => e.FullTransferOption)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.InvAddr1).HasMaxLength(50);
            entity.Property(e => e.InvAddr2).HasMaxLength(50);
            entity.Property(e => e.InvAddr3).HasMaxLength(50);
            entity.Property(e => e.InvAddr4).HasMaxLength(50);
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(50)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.LocalAnalysisNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.NetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Note).HasColumnType("ntext");
            entity.Property(e => e.Phone1).HasMaxLength(50);
            entity.Property(e => e.Ref).HasMaxLength(40);
            entity.Property(e => e.RefDocNo).HasMaxLength(50);
            entity.Property(e => e.Remark1).HasMaxLength(50);
            entity.Property(e => e.Remark2).HasMaxLength(50);
            entity.Property(e => e.Remark3).HasMaxLength(50);
            entity.Property(e => e.Remark4).HasMaxLength(50);
            entity.Property(e => e.RoundAdj).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SalesAgent).HasMaxLength(50);
            entity.Property(e => e.SalesExemptionExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.SalesExemptionNo).HasMaxLength(60);
            entity.Property(e => e.SalesLocation).HasMaxLength(50);
            entity.Property(e => e.ShipInfo).HasMaxLength(40);
            entity.Property(e => e.ShipVia).HasMaxLength(50);
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ToDocNo).HasMaxLength(50);
            entity.Property(e => e.ToDocType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ToTaxCurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.Total).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TransferedAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.YourPodate)
                .HasColumnType("datetime")
                .HasColumnName("YourPODate");
            entity.Property(e => e.YourPono)
                .HasMaxLength(50)
                .HasColumnName("YourPONo");
        });

        modelBuilder.Entity<AisbA022Asndtl>(entity =>
        {
            entity.HasKey(e => e.DtlKey)
                .HasName("PK__AESB_A02__FB997988DF6E1DE5")
                .IsClustered(false);

            entity.ToTable("AISB_A022_ASNDTL");

            entity.Property(e => e.BatchNo).HasMaxLength(50);
            entity.Property(e => e.CalcByPercent).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.DeliveryDate).HasColumnType("datetime");
            entity.Property(e => e.DeptNo).HasMaxLength(50);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.Discount).HasMaxLength(20);
            entity.Property(e => e.DiscountAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DtlType)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EstimatedDeliveryDate).HasMaxLength(20);
            entity.Property(e => e.ExtraDiscountAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Focqty)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("FOCQty");
            entity.Property(e => e.FoctransferedPoqty)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("FOCTransferedPOQty");
            entity.Property(e => e.FoctransferedQty)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("FOCTransferedQty");
            entity.Property(e => e.FontStyle).HasMaxLength(50);
            entity.Property(e => e.FromDocNo).HasMaxLength(50);
            entity.Property(e => e.FromDocType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FullTransferFromDocList).HasColumnType("ntext");
            entity.Property(e => e.FullTransferOption)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FurtherDescription).HasColumnType("ntext");
            entity.Property(e => e.Guid).HasDefaultValueSql("(newid())");
            entity.Property(e => e.ItemCode).HasMaxLength(50);
            entity.Property(e => e.LastAorpmodified)
                .HasColumnType("datetime")
                .HasColumnName("LastAORPModified");
            entity.Property(e => e.LastAorpmodifiedUserId)
                .HasMaxLength(50)
                .HasColumnName("LastAORPModifiedUserID");
            entity.Property(e => e.LastDrpmodified)
                .HasColumnType("datetime")
                .HasColumnName("LastDRPModified");
            entity.Property(e => e.LastDrpmodifiedUserId)
                .HasMaxLength(50)
                .HasColumnName("LastDRPModifiedUserID");
            entity.Property(e => e.LastOpmodified)
                .HasColumnType("datetime")
                .HasColumnName("LastOPModified");
            entity.Property(e => e.LastOpmodifiedUserId)
                .HasMaxLength(50)
                .HasColumnName("LastOPModifiedUserID");
            entity.Property(e => e.LocalSubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalSubTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxAdjustment).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Location).HasMaxLength(50);
            entity.Property(e => e.Numbering).HasMaxLength(50);
            entity.Property(e => e.PrintOut)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProjNo).HasMaxLength(50);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SalesExemptionNo).HasMaxLength(60);
            entity.Property(e => e.SmallestQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SmallestUnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SodocKey).HasColumnName("SODocKey");
            entity.Property(e => e.SodtlKey).HasColumnName("SODtlKey");
            entity.Property(e => e.StockReceived)
                .IsRequired()
                .HasDefaultValueSql("('F')");
            entity.Property(e => e.SubQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SubTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxAdjustment).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.TaxType).HasMaxLength(50);
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ToDtlKey)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TotalAssemblyOrderRequestQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.TotalDeliveryRequestQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.TotalPurchaseRequestQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Transferable)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TransferedAoqty)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("TransferedAOQty");
            entity.Property(e => e.TransferedPoqty)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("TransferedPOQty");
            entity.Property(e => e.TransferedQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Uom)
                .HasMaxLength(50)
                .HasColumnName("UOM");
            entity.Property(e => e.UserUom)
                .HasMaxLength(50)
                .HasColumnName("UserUOM");
            entity.Property(e => e.YourSodate)
                .HasColumnType("datetime")
                .HasColumnName("YourSODate");
            entity.Property(e => e.YourSono)
                .HasMaxLength(50)
                .HasColumnName("YourSONo");
        });

        modelBuilder.Entity<AisbA022Ba>(entity =>
        {
            entity.HasKey(e => e.DocNo).HasName("PK_AESB_A022_BA");

            entity.ToTable("AISB_A022_BA");

            entity.Property(e => e.DocNo).HasMaxLength(20);
            entity.Property(e => e.CreatedBy).HasMaxLength(20);
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedBy).HasMaxLength(20);
            entity.Property(e => e.LastModifiedDateTime).HasColumnType("datetime");
            entity.Property(e => e.RefDocNo).HasMaxLength(50);
        });

        modelBuilder.Entity<AisbA022Badtl>(entity =>
        {
            entity.HasKey(e => e.DtlGuid).HasName("PK_AESB_A022_BADtl");

            entity.ToTable("AISB_A022_BADtl");

            entity.Property(e => e.DtlGuid).HasMaxLength(50);
            entity.Property(e => e.BatchNo).HasMaxLength(50);
            entity.Property(e => e.BinCode).HasMaxLength(50);
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.DocNo).HasMaxLength(20);
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.LotNo).HasMaxLength(50);
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<AisbA022BatchNo>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AISB_A022_BatchNo");

            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.DocId).HasMaxLength(50);
            entity.Property(e => e.DocType).HasMaxLength(5);
            entity.Property(e => e.DtlId).HasMaxLength(50);
            entity.Property(e => e.Guid)
                .HasMaxLength(50)
                .HasColumnName("GUID");
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
        });

        modelBuilder.Entity<AisbA022Bi>(entity =>
        {
            entity.HasKey(e => e.DocNo).HasName("PK_AESB_A022_BN");

            entity.ToTable("AISB_A022_BI");

            entity.Property(e => e.DocNo).HasMaxLength(20);
            entity.Property(e => e.CreatedBy).HasMaxLength(20);
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.FromDocLastModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.FromDocNo).HasMaxLength(20);
            entity.Property(e => e.FromDocType).HasMaxLength(10);
            entity.Property(e => e.LastModifiedBy).HasMaxLength(20);
            entity.Property(e => e.LastModifiedDateTime).HasColumnType("datetime");
            entity.Property(e => e.Status).HasMaxLength(20);
            entity.Property(e => e.SuggestedDateTime).HasColumnType("datetime");
            entity.Property(e => e.ToDocNo).HasMaxLength(20);
            entity.Property(e => e.ToDocType).HasMaxLength(10);
        });

        modelBuilder.Entity<AisbA022BiactualDtl>(entity =>
        {
            entity.HasKey(e => e.ActualDtlGuid).HasName("PK_AESB_A022_BNActualDtl");

            entity.ToTable("AISB_A022_BIActualDtl");

            entity.Property(e => e.ActualDtlGuid).HasMaxLength(50);
            entity.Property(e => e.BinCode).HasMaxLength(50);
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.DeviceGuid)
                .HasMaxLength(50)
                .HasColumnName("DeviceGUID");
            entity.Property(e => e.DeviceId)
                .HasMaxLength(50)
                .HasColumnName("DeviceID");
            entity.Property(e => e.DeviceScannedDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(20);
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.LotNo).HasMaxLength(50);
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SuggestDtlGuid).HasMaxLength(50);
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<AisbA022Bin>(entity =>
        {
            entity.HasKey(e => e.BinCode).HasName("PK_AESB_A022_Bin");

            entity.ToTable("AISB_A022_Bin");

            entity.Property(e => e.BinCode).HasMaxLength(50);
            entity.Property(e => e.BinColumn).HasMaxLength(50);
            entity.Property(e => e.BinRow).HasMaxLength(50);
            entity.Property(e => e.Depth).HasColumnType("decimal(18, 3)");
            entity.Property(e => e.Description).HasMaxLength(200);
            entity.Property(e => e.Height).HasColumnType("decimal(18, 3)");
            entity.Property(e => e.Location).HasMaxLength(50);
            entity.Property(e => e.Weight).HasColumnType("decimal(18, 3)");
            entity.Property(e => e.Width).HasColumnType("decimal(18, 3)");
            entity.Property(e => e.ZoneCode).HasMaxLength(50);
        });

        modelBuilder.Entity<AisbA022BinDtl>(entity =>
        {
            entity.HasKey(e => new { e.Guid, e.BinCode }).HasName("PK_AESB_A022_BinDtl");

            entity.ToTable("AISB_A022_BinDtl");

            entity.Property(e => e.Guid).HasMaxLength(50);
            entity.Property(e => e.BinCode).HasMaxLength(50);
            entity.Property(e => e.Description).HasMaxLength(300);
            entity.Property(e => e.FilterType).HasMaxLength(10);
            entity.Property(e => e.Keyword).HasMaxLength(50);
        });

        modelBuilder.Entity<AisbA022BinTransaction>(entity =>
        {
            entity.HasKey(e => e.DtlGuid).HasName("PK_AESB_A022_BinTransaction");

            entity.ToTable("AISB_A022_BinTransaction");

            entity.Property(e => e.DtlGuid).HasMaxLength(50);
            entity.Property(e => e.BatchNo).HasMaxLength(50);
            entity.Property(e => e.BinCode).HasMaxLength(50);
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.LotNo).HasMaxLength(50);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.RefDocCreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.RefDocDate).HasColumnType("datetime");
            entity.Property(e => e.RefDocNo).HasMaxLength(50);
            entity.Property(e => e.RefDocType).HasMaxLength(10);
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<AisbA022BisuggestBinCode>(entity =>
        {
            entity.HasKey(e => new { e.SuggestDtlGuid, e.BinCode }).HasName("PK_AESB_A022_BISuggestBinCodes");

            entity.ToTable("AISB_A022_BISuggestBinCodes");

            entity.Property(e => e.SuggestDtlGuid).HasMaxLength(50);
            entity.Property(e => e.BinCode).HasMaxLength(50);
        });

        modelBuilder.Entity<AisbA022BisuggestDtl>(entity =>
        {
            entity.HasKey(e => e.SuggestDtlGuid).HasName("PK_AESB_A022_BNSuggestDtl");

            entity.ToTable("AISB_A022_BISuggestDtl");

            entity.Property(e => e.SuggestDtlGuid).HasMaxLength(50);
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.DocNo).HasMaxLength(20);
            entity.Property(e => e.FromDocNo).HasMaxLength(20);
            entity.Property(e => e.FromDocType).HasMaxLength(10);
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.LotNo).HasMaxLength(50);
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.TotalActualQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<AisbA022Bo>(entity =>
        {
            entity.HasKey(e => e.DocNo).HasName("PK_AESB_A022_BO");

            entity.ToTable("AISB_A022_BO");

            entity.Property(e => e.DocNo).HasMaxLength(50);
            entity.Property(e => e.CreatedBy).HasMaxLength(20);
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.DeliveryDate).HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.FromDocNo).HasMaxLength(20);
            entity.Property(e => e.FromDocType).HasMaxLength(10);
            entity.Property(e => e.LastModifiedBy).HasMaxLength(20);
            entity.Property(e => e.LastModifiedDateTime).HasColumnType("datetime");
            entity.Property(e => e.Status).HasMaxLength(20);
            entity.Property(e => e.SuggestedDateTime).HasColumnType("datetime");
            entity.Property(e => e.ToDocNo).HasMaxLength(20);
            entity.Property(e => e.ToDocType).HasMaxLength(10);
        });

        modelBuilder.Entity<AisbA022BoactualDtl>(entity =>
        {
            entity.HasKey(e => e.ActualDtlGuid).HasName("PK_AESB_A022_BOActualDtl");

            entity.ToTable("AISB_A022_BOActualDtl");

            entity.Property(e => e.ActualDtlGuid).HasMaxLength(50);
            entity.Property(e => e.BinCode).HasMaxLength(50);
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.DeviceGuid)
                .HasMaxLength(50)
                .HasColumnName("DeviceGUID");
            entity.Property(e => e.DeviceId)
                .HasMaxLength(50)
                .HasColumnName("DeviceID");
            entity.Property(e => e.DeviceScannedDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(20);
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.LotNo).HasMaxLength(50);
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SuggestDtlGuid).HasMaxLength(50);
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<AisbA022BosuggestBinCode>(entity =>
        {
            entity.HasKey(e => new { e.SuggestDtlGuid, e.LotNo, e.BinCode }).HasName("PK_AESB_A022_BOSuggestBinCodes");

            entity.ToTable("AISB_A022_BOSuggestBinCodes");

            entity.Property(e => e.SuggestDtlGuid).HasMaxLength(50);
            entity.Property(e => e.LotNo).HasMaxLength(50);
            entity.Property(e => e.BinCode).HasMaxLength(50);
            entity.Property(e => e.BalQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SuggestedDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<AisbA022BosuggestDtl>(entity =>
        {
            entity.HasKey(e => e.SuggestDtlGuid).HasName("PK_AESB_A022_BOSuggestDtl");

            entity.ToTable("AISB_A022_BOSuggestDtl");

            entity.Property(e => e.SuggestDtlGuid).HasMaxLength(50);
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.DocNo).HasMaxLength(20);
            entity.Property(e => e.FromDocNo).HasMaxLength(20);
            entity.Property(e => e.FromDocType).HasMaxLength(10);
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.LotNo).HasMaxLength(50);
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SuggestQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.TotalActualQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<AisbA022Br>(entity =>
        {
            entity.HasKey(e => e.DocNo).HasName("PK_AESB_A022_BR");

            entity.ToTable("AISB_A022_BR");

            entity.Property(e => e.DocNo).HasMaxLength(20);
            entity.Property(e => e.CreatedBy).HasMaxLength(20);
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedBy).HasMaxLength(20);
            entity.Property(e => e.LastModifiedDateTime).HasColumnType("datetime");
            entity.Property(e => e.RefDocNo).HasMaxLength(50);
        });

        modelBuilder.Entity<AisbA022Brdtl>(entity =>
        {
            entity.HasKey(e => e.DtlGuid).HasName("PK_AESB_A022_BRDtl");

            entity.ToTable("AISB_A022_BRDtl");

            entity.Property(e => e.DtlGuid).HasMaxLength(50);
            entity.Property(e => e.ActualQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.BalQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.BatchNo).HasMaxLength(50);
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.DeviceFromBinDate).HasColumnType("datetime");
            entity.Property(e => e.DeviceGuid).HasMaxLength(50);
            entity.Property(e => e.DeviceId)
                .HasMaxLength(50)
                .HasColumnName("DeviceID");
            entity.Property(e => e.DeviceToBinDate).HasColumnType("datetime");
            entity.Property(e => e.DeviceUserId)
                .HasMaxLength(50)
                .HasColumnName("DeviceUserID");
            entity.Property(e => e.DocNo).HasMaxLength(20);
            entity.Property(e => e.FromActualQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.FromBinCode).HasMaxLength(50);
            entity.Property(e => e.FromDeviceGuid)
                .HasMaxLength(50)
                .HasColumnName("FromDeviceGUID");
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.LotNo).HasMaxLength(50);
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.RequestQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.ToActualQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.ToBinCode).HasMaxLength(50);
            entity.Property(e => e.ToDeviceGuid)
                .HasMaxLength(50)
                .HasColumnName("ToDeviceGUID");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<AisbA022Device>(entity =>
        {
            entity.HasKey(e => e.DeviceId).HasName("PK__AISB_A02__49E12331AFD3539C");

            entity.ToTable("AISB_A022_Device");

            entity.Property(e => e.DeviceId)
                .HasMaxLength(100)
                .HasColumnName("DeviceID");
            entity.Property(e => e.AjreportXml).HasColumnName("AJReportXML");
            entity.Property(e => e.AoreportXml).HasColumnName("AOReportXML");
            entity.Property(e => e.CnreportXml).HasColumnName("CNReportXML");
            entity.Property(e => e.CsreportXml).HasColumnName("CSReportXML");
            entity.Property(e => e.DeviceName).HasMaxLength(100);
            entity.Property(e => e.DocNoFormatAj)
                .HasMaxLength(100)
                .HasColumnName("DocNoFormatAJ");
            entity.Property(e => e.DocNoFormatAo)
                .HasMaxLength(100)
                .HasColumnName("DocNoFormatAO");
            entity.Property(e => e.DocNoFormatAs)
                .HasMaxLength(100)
                .HasColumnName("DocNoFormatAS");
            entity.Property(e => e.DocNoFormatCn)
                .HasMaxLength(100)
                .HasColumnName("DocNoFormatCN");
            entity.Property(e => e.DocNoFormatCs)
                .HasMaxLength(100)
                .HasColumnName("DocNoFormatCS");
            entity.Property(e => e.DocNoFormatDo)
                .HasMaxLength(100)
                .HasColumnName("DocNoFormatDO");
            entity.Property(e => e.DocNoFormatGrn)
                .HasMaxLength(100)
                .HasColumnName("DocNoFormatGRN");
            entity.Property(e => e.DocNoFormatIs)
                .HasMaxLength(100)
                .HasColumnName("DocNoFormatIS");
            entity.Property(e => e.DocNoFormatIv)
                .HasMaxLength(100)
                .HasColumnName("DocNoFormatIV");
            entity.Property(e => e.DocNoFormatPi)
                .HasMaxLength(100)
                .HasColumnName("DocNoFormatPI");
            entity.Property(e => e.DocNoFormatPo)
                .HasMaxLength(100)
                .HasColumnName("DocNoFormatPO");
            entity.Property(e => e.DocNoFormatPq)
                .HasMaxLength(100)
                .HasColumnName("DocNoFormatPQ");
            entity.Property(e => e.DocNoFormatPr)
                .HasMaxLength(100)
                .HasColumnName("DocNoFormatPR");
            entity.Property(e => e.DocNoFormatQt)
                .HasMaxLength(100)
                .HasColumnName("DocNoFormatQT");
            entity.Property(e => e.DocNoFormatRq)
                .HasMaxLength(100)
                .HasColumnName("DocNoFormatRQ");
            entity.Property(e => e.DocNoFormatRx)
                .HasMaxLength(100)
                .HasColumnName("DocNoFormatRX");
            entity.Property(e => e.DocNoFormatSo)
                .HasMaxLength(100)
                .HasColumnName("DocNoFormatSO");
            entity.Property(e => e.DocNoFormatSr)
                .HasMaxLength(100)
                .HasColumnName("DocNoFormatSR");
            entity.Property(e => e.DocNoFormatTx)
                .HasMaxLength(100)
                .HasColumnName("DocNoFormatTX");
            entity.Property(e => e.DoreportXml).HasColumnName("DOReportXML");
            entity.Property(e => e.EnableModule).HasMaxLength(20);
            entity.Property(e => e.FlagDigit).HasMaxLength(30);
            entity.Property(e => e.GrreportXml).HasColumnName("GRReportXML");
            entity.Property(e => e.IsreportXml).HasColumnName("ISReportXML");
            entity.Property(e => e.IvreportXml).HasColumnName("IVReportXML");
            entity.Property(e => e.Location).HasMaxLength(100);
            entity.Property(e => e.PaymentMethod).HasMaxLength(300);
            entity.Property(e => e.PireportXml).HasColumnName("PIReportXML");
            entity.Property(e => e.PoreportXml).HasColumnName("POReportXML");
            entity.Property(e => e.PqreportXml).HasColumnName("PQReportXML");
            entity.Property(e => e.PrinterName).HasMaxLength(300);
            entity.Property(e => e.PrreportXml).HasColumnName("PRReportXML");
            entity.Property(e => e.PurchaseRounding).HasMaxLength(10);
            entity.Property(e => e.QtreportXml).HasColumnName("QTReportXML");
            entity.Property(e => e.ReportAssemblyOrder).HasMaxLength(300);
            entity.Property(e => e.ReportBnadjustment)
                .HasMaxLength(300)
                .HasColumnName("ReportBNAdjustment");
            entity.Property(e => e.ReportBnallocation)
                .HasMaxLength(300)
                .HasColumnName("ReportBNAllocation");
            entity.Property(e => e.ReportBnin)
                .HasMaxLength(300)
                .HasColumnName("ReportBNIn");
            entity.Property(e => e.ReportBnout)
                .HasMaxLength(300)
                .HasColumnName("ReportBNOut");
            entity.Property(e => e.ReportCashSale).HasMaxLength(300);
            entity.Property(e => e.ReportCashSales).HasMaxLength(300);
            entity.Property(e => e.ReportCreditNote).HasMaxLength(300);
            entity.Property(e => e.ReportDeliveryOrder).HasMaxLength(300);
            entity.Property(e => e.ReportGoodsReceiveNote).HasMaxLength(300);
            entity.Property(e => e.ReportInvoice).HasMaxLength(300);
            entity.Property(e => e.ReportLotLabel).HasMaxLength(300);
            entity.Property(e => e.ReportPurchaseInvoice).HasMaxLength(300);
            entity.Property(e => e.ReportPurchaseOrder).HasMaxLength(300);
            entity.Property(e => e.ReportPurchaseRequest).HasMaxLength(300);
            entity.Property(e => e.ReportPurchaseReturn).HasMaxLength(300);
            entity.Property(e => e.ReportQuotation).HasMaxLength(300);
            entity.Property(e => e.ReportSalesOrder).HasMaxLength(300);
            entity.Property(e => e.ReportStockAdjustment).HasMaxLength(300);
            entity.Property(e => e.ReportStockAssembly).HasMaxLength(300);
            entity.Property(e => e.ReportStockIssue).HasMaxLength(300);
            entity.Property(e => e.ReportStockReceive).HasMaxLength(300);
            entity.Property(e => e.ReportStockTransfer).HasMaxLength(300);
            entity.Property(e => e.ReportStockTransferIn).HasMaxLength(300);
            entity.Property(e => e.ReportStockTransferOut).HasMaxLength(300);
            entity.Property(e => e.ReportStockTransferRequest).HasMaxLength(300);
            entity.Property(e => e.SalesRounding).HasMaxLength(10);
            entity.Property(e => e.SareportXml).HasColumnName("SAReportXML");
            entity.Property(e => e.SoreportXml).HasColumnName("SOReportXML");
            entity.Property(e => e.SrreportXml).HasColumnName("SRReportXML");
            entity.Property(e => e.StrireportXml).HasColumnName("STRIReportXML");
            entity.Property(e => e.StroreportXml).HasColumnName("STROReportXML");
            entity.Property(e => e.StrreportXml).HasColumnName("STRReportXML");
            entity.Property(e => e.TxreportXml).HasColumnName("TXReportXML");
            entity.Property(e => e.Uomtype)
                .HasMaxLength(30)
                .HasColumnName("UOMType");
        });

        modelBuilder.Entity<AisbA022DevicesQuery>(entity =>
        {
            entity.HasKey(e => e.QueryId).HasName("PK__AISB_A02__5967F7DB824E6407");

            entity.ToTable("AISB_A022_DevicesQuery");

            entity.Property(e => e.QueryId).HasMaxLength(50);
            entity.Property(e => e.Caption).HasMaxLength(50);
            entity.Property(e => e.DeviceId)
                .HasMaxLength(50)
                .HasColumnName("DeviceID");
            entity.Property(e => e.DocType)
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.Query).HasColumnType("ntext");
        });

        modelBuilder.Entity<AisbA022LoadingBay>(entity =>
        {
            entity.HasKey(e => e.LoadingBayId);

            entity.ToTable("AISB_A022_LoadingBay");

            entity.Property(e => e.LoadingBayId).HasMaxLength(50);
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedTime).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(50);
        });

        modelBuilder.Entity<AisbA022LoadingBayDtl>(entity =>
        {
            entity.HasKey(e => e.LoadingBayDtlId);

            entity.ToTable("AISB_A022_LoadingBayDtl");

            entity.Property(e => e.LoadingBayDtlId).HasMaxLength(50);
            entity.Property(e => e.Area).HasMaxLength(50);
            entity.Property(e => e.Color).HasMaxLength(16);
            entity.Property(e => e.LoadingBayId).HasMaxLength(50);
            entity.Property(e => e.Priority).HasColumnType("decimal(19, 2)");
        });

        modelBuilder.Entity<AisbA022Lorry>(entity =>
        {
            entity.HasKey(e => e.LorryNo).HasName("PK__AISB_A02__CBCABED5484F61E3");

            entity.ToTable("AISB_A022_Lorry");

            entity.Property(e => e.LorryNo).HasMaxLength(50);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.IsActive)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.IsAvailable)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.M3).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Weight).HasColumnType("decimal(18, 0)");
        });

        modelBuilder.Entity<AisbA022LorryUser>(entity =>
        {
            entity.HasKey(e => e.UserId).HasName("PK__AISB_A02__1788CCACEEB13432");

            entity.ToTable("AISB_A022_Lorry_User");

            entity.Property(e => e.UserId)
                .HasMaxLength(50)
                .HasColumnName("UserID");
            entity.Property(e => e.DefaultLorryNo).HasMaxLength(50);
            entity.Property(e => e.IsActive)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Type).HasMaxLength(50);
        });

        modelBuilder.Entity<AisbA022Lot>(entity =>
        {
            entity.HasKey(e => e.LotNo).HasName("PK_AESB_A022_Lot");

            entity.ToTable("AISB_A022_Lot");

            entity.Property(e => e.LotNo).HasMaxLength(50);
            entity.Property(e => e.BalQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.ExpiredDate).HasColumnType("datetime");
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.RefDocNo).HasMaxLength(50);
            entity.Property(e => e.RefDocType).HasMaxLength(5);
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<AisbA022Manifest>(entity =>
        {
            entity.HasKey(e => e.ManifestId).HasName("PK__AISB_A02__6064F366AED7F4BD");

            entity.ToTable("AISB_A022_Manifest");

            entity.Property(e => e.ManifestId).HasMaxLength(50);
            entity.Property(e => e.Cancelled).HasMaxLength(20);
            entity.Property(e => e.CreatedBy).HasMaxLength(10);
            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(20);
            entity.Property(e => e.Driver).HasMaxLength(50);
            entity.Property(e => e.DriverAssistant).HasMaxLength(50);
            entity.Property(e => e.FinalTotalFocVolume).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.FinalTotalFocWeight).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.FinalTotalVolume).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.FinalTotalWeight).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.GrandTotalVolume).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.GrandTotalWeight).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LastModifiedBy).HasMaxLength(10);
            entity.Property(e => e.LastModifiedTime).HasColumnType("datetime");
            entity.Property(e => e.LoadingEnd).HasColumnType("datetime");
            entity.Property(e => e.LoadingStart).HasColumnType("datetime");
            entity.Property(e => e.LorryNo).HasMaxLength(50);
            entity.Property(e => e.PostedToDo)
                .HasMaxLength(10)
                .HasColumnName("PostedToDO");
            entity.Property(e => e.Status).HasMaxLength(50);
        });

        modelBuilder.Entity<AisbA022ManifestDtl>(entity =>
        {
            entity.HasKey(e => e.ManifestDtlId).HasName("PK__AISB_A02__8748C560EC74B5D5");

            entity.ToTable("AISB_A022_ManifestDtl");

            entity.Property(e => e.ManifestDtlId).HasMaxLength(50);
            entity.Property(e => e.DodocKey).HasColumnName("DODocKey");
            entity.Property(e => e.DodocNo)
                .HasMaxLength(50)
                .HasColumnName("DODocNo");
            entity.Property(e => e.IvdocKey).HasColumnName("IVDocKey");
            entity.Property(e => e.IvdocNo)
                .HasMaxLength(50)
                .HasColumnName("IVDocNo");
            entity.Property(e => e.ManifestId).HasMaxLength(50);
            entity.Property(e => e.PickingListDocNo)
                .HasMaxLength(50)
                .IsFixedLength();
            entity.Property(e => e.PickingListId)
                .HasMaxLength(50)
                .IsFixedLength();
            entity.Property(e => e.PostedToDocNo).HasMaxLength(20);
            entity.Property(e => e.PostedToDocType).HasMaxLength(40);
            entity.Property(e => e.Soaddress1)
                .HasMaxLength(50)
                .HasColumnName("SOAddress1");
            entity.Property(e => e.Soaddress2)
                .HasMaxLength(50)
                .HasColumnName("SOAddress2");
            entity.Property(e => e.Soaddress3)
                .HasMaxLength(50)
                .HasColumnName("SOAddress3");
            entity.Property(e => e.Soaddress4)
                .HasMaxLength(50)
                .HasColumnName("SOAddress4");
            entity.Property(e => e.Soarea)
                .HasMaxLength(12)
                .HasColumnName("SOArea");
            entity.Property(e => e.SocompanyName)
                .HasMaxLength(100)
                .HasColumnName("SOCompanyName");
            entity.Property(e => e.SodebtorCode)
                .HasMaxLength(12)
                .HasColumnName("SODebtorCode");
            entity.Property(e => e.SodocDate)
                .HasColumnType("datetime")
                .HasColumnName("SODocDate");
            entity.Property(e => e.SodocKey).HasColumnName("SODocKey");
            entity.Property(e => e.SodocNo)
                .HasMaxLength(30)
                .HasColumnName("SODocNo");
            entity.Property(e => e.TotalFocVolume).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalFocWeight).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalVolume).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalWeight).HasColumnType("decimal(19, 2)");
        });

        modelBuilder.Entity<AisbA022ManifestDtlTransfer>(entity =>
        {
            entity.HasKey(e => e.ManifestDtlTransferId).HasName("PK__AISB_A02__5569E1243E4E890B");

            entity.ToTable("AISB_A022_ManifestDtlTransfer");

            entity.Property(e => e.ManifestDtlTransferId).HasMaxLength(50);
            entity.Property(e => e.ActualFocQty).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ActualQty).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.BatchNo).HasMaxLength(50);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.DodtlKey).HasColumnName("DODtlKey");
            entity.Property(e => e.FromDocType).HasMaxLength(50);
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.ManifestDtlId).HasMaxLength(50);
            entity.Property(e => e.ManifestId).HasMaxLength(50);
            entity.Property(e => e.PickedFocQty).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.PickedQty).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.PickingListDtlTransferId).HasMaxLength(50);
            entity.Property(e => e.RevertFocQty).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.RevertQty).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SodocKey)
                .HasMaxLength(50)
                .HasColumnName("SODocKey");
            entity.Property(e => e.SodocNo)
                .HasMaxLength(50)
                .HasColumnName("SODocNo");
            entity.Property(e => e.SodtlKey)
                .HasMaxLength(50)
                .HasColumnName("SODtlKey");
            entity.Property(e => e.SofocQty)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("SOFocQty");
            entity.Property(e => e.Soqty)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("SOQty");
            entity.Property(e => e.TotalVolume).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalWeight).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Transferable).HasMaxLength(10);
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
            entity.Property(e => e.VarianceQty).HasColumnType("decimal(19, 2)");
        });

        modelBuilder.Entity<AisbA022MstockTake>(entity =>
        {
            entity.HasKey(e => e.Mstid);

            entity.ToTable("AISB_A022_MStockTake");

            entity.Property(e => e.Mstid)
                .HasMaxLength(50)
                .HasColumnName("MSTId");
            entity.Property(e => e.BranchCode).HasMaxLength(20);
            entity.Property(e => e.CommittedDateTime).HasColumnType("datetime");
            entity.Property(e => e.CommittedUserId).HasMaxLength(10);
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId).HasMaxLength(10);
            entity.Property(e => e.DebtorCode).HasMaxLength(12);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.DeviceId)
                .HasMaxLength(100)
                .HasColumnName("DeviceID");
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(20);
            entity.Property(e => e.DocType).HasMaxLength(10);
            entity.Property(e => e.LastModifiedDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId).HasMaxLength(10);
            entity.Property(e => e.LocationX).HasColumnType("decimal(25, 10)");
            entity.Property(e => e.LocationY).HasColumnType("decimal(25, 10)");
            entity.Property(e => e.PhotoId).HasMaxLength(50);
            entity.Property(e => e.RefDocNo).HasMaxLength(20);
            entity.Property(e => e.SalesAgent).HasMaxLength(12);
            entity.Property(e => e.StockLocation).HasMaxLength(8);
        });

        modelBuilder.Entity<AisbA022MstockTakeDtl>(entity =>
        {
            entity.HasKey(e => e.MstdtlId);

            entity.ToTable("AISB_A022_MStockTakeDtl");

            entity.Property(e => e.MstdtlId)
                .HasMaxLength(50)
                .HasColumnName("MSTDtlId");
            entity.Property(e => e.Ams)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("AMS");
            entity.Property(e => e.Discount).HasMaxLength(20);
            entity.Property(e => e.DiscountAmt).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.FinalQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.Mstid)
                .HasMaxLength(50)
                .HasColumnName("MSTId");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.ReturnQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.StockBalance).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.StockTakeQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SuggestQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SuggestReturnQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SuggestedQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<AisbA022MstockTakeDtlBatch>(entity =>
        {
            entity.HasKey(e => e.MstdtlBid);

            entity.ToTable("AISB_A022_MStockTakeDtlBatch");

            entity.Property(e => e.MstdtlBid)
                .HasMaxLength(50)
                .HasColumnName("MSTDtlBId");
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.ExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.MstdtlId)
                .HasMaxLength(50)
                .HasColumnName("MSTDtlId");
            entity.Property(e => e.Mstid)
                .HasMaxLength(50)
                .HasColumnName("MSTId");
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
        });

        modelBuilder.Entity<AisbA022MultiLocationReorderAdvice>(entity =>
        {
            entity.HasKey(e => new { e.ItemCode, e.Uom, e.Location });

            entity.ToTable("AISB_A022_MultiLocationReorderAdvice");

            entity.Property(e => e.ItemCode).HasMaxLength(100);
            entity.Property(e => e.Uom)
                .HasMaxLength(100)
                .HasColumnName("UOM");
            entity.Property(e => e.Location).HasMaxLength(100);
            entity.Property(e => e.ReorderLevel).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ReorderQty).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<AisbA022Photo>(entity =>
        {
            entity.HasKey(e => e.PhotoId);

            entity.ToTable("AISB_A022_Photo");

            entity.Property(e => e.PhotoId).HasMaxLength(50);
            entity.Property(e => e.Photo).HasColumnType("text");
        });

        modelBuilder.Entity<AisbA022Picker>(entity =>
        {
            entity.HasKey(e => e.Guid).HasName("PK__AESB_A02__15B69B8E468D5F19");

            entity.ToTable("AISB_A022_Picker");

            entity.Property(e => e.Guid)
                .HasMaxLength(50)
                .HasColumnName("GUID");
            entity.Property(e => e.Mode).HasMaxLength(50);
            entity.Property(e => e.UserId).HasMaxLength(50);
        });

        modelBuilder.Entity<AisbA022PickerDtl>(entity =>
        {
            entity.HasKey(e => e.Guid).HasName("PK__AESB_A02__15B69B8E1F090A07");

            entity.ToTable("AISB_A022_PickerDtl");

            entity.Property(e => e.Guid)
                .HasMaxLength(50)
                .HasColumnName("GUID");
            entity.Property(e => e.Description).HasMaxLength(300);
            entity.Property(e => e.FilterType).HasMaxLength(50);
            entity.Property(e => e.Keyword).HasMaxLength(50);
            entity.Property(e => e.ParentGuid)
                .HasMaxLength(50)
                .HasColumnName("ParentGUID");
        });

        modelBuilder.Entity<AisbA022PickingList>(entity =>
        {
            entity.HasKey(e => e.PickingListId).HasName("PK__AISB_A02__23A29C68A79A8B55");

            entity.ToTable("AISB_A022_PickingList");

            entity.Property(e => e.PickingListId).HasMaxLength(50);
            entity.Property(e => e.Cancelled).HasMaxLength(20);
            entity.Property(e => e.CreatedBy).HasMaxLength(10);
            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.DeliveryDate).HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(200);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(50);
            entity.Property(e => e.FinalTotalFocVolume).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.FinalTotalFocWeight).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.FinalTotalPickedFocQty).HasColumnType("decimal(19, 8)");
            entity.Property(e => e.FinalTotalPickedQty).HasColumnType("decimal(19, 8)");
            entity.Property(e => e.FinalTotalVarianceFocQty).HasColumnType("decimal(19, 8)");
            entity.Property(e => e.FinalTotalVarianceQty)
                .HasColumnType("decimal(19, 8)")
                .HasColumnName("finalTotalVarianceQty");
            entity.Property(e => e.FinalTotalVolumn)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("finalTotalVolumn");
            entity.Property(e => e.FinalTotalWeight)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("finalTotalWeight");
            entity.Property(e => e.LastModifiedBy).HasMaxLength(10);
            entity.Property(e => e.LastModifiedTime).HasColumnType("datetime");
            entity.Property(e => e.LoadingBay).HasMaxLength(50);
            entity.Property(e => e.LorryNo).HasMaxLength(50);
            entity.Property(e => e.PickMethod).HasMaxLength(50);
            entity.Property(e => e.Status).HasMaxLength(50);
        });

        modelBuilder.Entity<AisbA022PickingListAuditTrail>(entity =>
        {
            entity.HasKey(e => e.Guid).HasName("PK__AESB_A02__15B69B8EC26B14A7");

            entity.ToTable("AISB_A022_PickingListAuditTrail");

            entity.Property(e => e.Guid)
                .HasMaxLength(50)
                .HasColumnName("GUID");
            entity.Property(e => e.ActionType).HasMaxLength(10);
            entity.Property(e => e.ItemCode).HasMaxLength(50);
            entity.Property(e => e.ModifiedTime).HasColumnType("datetime");
            entity.Property(e => e.NewQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.OriginalQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.PickingListDtlId).HasMaxLength(50);
            entity.Property(e => e.PickingListId).HasMaxLength(50);
            entity.Property(e => e.Uom)
                .HasMaxLength(50)
                .HasColumnName("UOM");
            entity.Property(e => e.UserId).HasMaxLength(10);
        });

        modelBuilder.Entity<AisbA022PickingListDtl>(entity =>
        {
            entity.HasKey(e => e.PickingListDtlId).HasName("PK__AISB_A02__8F14CB624E9AE03E");

            entity.ToTable("AISB_A022_PickingListDtl");

            entity.Property(e => e.PickingListDtlId).HasMaxLength(50);
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.Description).HasMaxLength(200);
            entity.Property(e => e.FirstAddedTime).HasColumnType("datetime");
            entity.Property(e => e.FromDocNo).HasMaxLength(50);
            entity.Property(e => e.ItemCode).HasMaxLength(50);
            entity.Property(e => e.LastModifiedTime).HasColumnType("datetime");
            entity.Property(e => e.PickingListId).HasMaxLength(50);
            entity.Property(e => e.RequestFocQty).HasColumnType("decimal(19, 8)");
            entity.Property(e => e.RequestQty).HasColumnType("decimal(19, 8)");
            entity.Property(e => e.Shelf).HasMaxLength(20);
            entity.Property(e => e.Status).HasMaxLength(10);
            entity.Property(e => e.TotalFocVolume).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalFocWeight).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalPickedFocQty).HasColumnType("decimal(19, 8)");
            entity.Property(e => e.TotalPickedQty).HasColumnType("decimal(19, 8)");
            entity.Property(e => e.TotalVarianceFocQty).HasColumnType("decimal(19, 8)");
            entity.Property(e => e.TotalVarianceQty).HasColumnType("decimal(19, 8)");
            entity.Property(e => e.TotalVolume).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalWeight).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Transferable).HasMaxLength(1);
            entity.Property(e => e.Uom)
                .HasMaxLength(50)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<AisbA022PickingListDtlSo>(entity =>
        {
            entity.HasKey(e => e.PickingListDtlId).HasName("PK__AISB_A02__8F14CB6230378874");

            entity.ToTable("AISB_A022_PickingListDtlSO");

            entity.Property(e => e.PickingListDtlId).HasMaxLength(50);
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.Description).HasMaxLength(200);
            entity.Property(e => e.FirstAddedTime).HasColumnType("datetime");
            entity.Property(e => e.FromDocNo).HasMaxLength(20);
            entity.Property(e => e.ItemCode).HasMaxLength(50);
            entity.Property(e => e.LastModifiedTime).HasColumnType("datetime");
            entity.Property(e => e.PickedStatus).HasMaxLength(50);
            entity.Property(e => e.PickingListId).HasMaxLength(50);
            entity.Property(e => e.RequestFocQty).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.RequestQty).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SalesOrderNo).HasMaxLength(50);
            entity.Property(e => e.Shelf).HasMaxLength(20);
            entity.Property(e => e.Status).HasMaxLength(10);
            entity.Property(e => e.TotalFocVolume).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalFocWeight).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalPickedFocQty).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalPickedQty).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalVarianceFocQty).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalVarianceQty).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalVolume).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalWeight).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Transferable).HasMaxLength(1);
            entity.Property(e => e.Uom)
                .HasMaxLength(50)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<AisbA022PickingListDtlTransfer>(entity =>
        {
            entity.HasKey(e => e.PickingListDtlTransferId).HasName("PK__AISB_A02__F3BD9A0E7217C0AC");

            entity.ToTable("AISB_A022_PickingListDtlTransfer");

            entity.Property(e => e.PickingListDtlTransferId).HasMaxLength(50);
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.Description).HasMaxLength(200);
            entity.Property(e => e.ItemCode).HasMaxLength(50);
            entity.Property(e => e.NewSofocQty)
                .HasColumnType("decimal(19, 8)")
                .HasColumnName("NewSOFocQty");
            entity.Property(e => e.NewSoqty)
                .HasColumnType("decimal(19, 8)")
                .HasColumnName("NewSOQty");
            entity.Property(e => e.PickedFocQty).HasColumnType("decimal(19, 8)");
            entity.Property(e => e.PickedQty).HasColumnType("decimal(19, 8)");
            entity.Property(e => e.PickingListDtlId).HasMaxLength(50);
            entity.Property(e => e.PickingListId).HasMaxLength(50);
            entity.Property(e => e.RevertFocQty).HasColumnType("decimal(19, 8)");
            entity.Property(e => e.RevertQty).HasColumnType("decimal(19, 8)");
            entity.Property(e => e.Soarea)
                .HasMaxLength(50)
                .HasColumnName("SOArea");
            entity.Property(e => e.SodocKey).HasColumnName("SODocKey");
            entity.Property(e => e.SodocNo)
                .HasMaxLength(50)
                .HasColumnName("SODocNo");
            entity.Property(e => e.SodtlKey).HasColumnName("SODtlKey");
            entity.Property(e => e.SofocOutstandingQty)
                .HasColumnType("decimal(19, 8)")
                .HasColumnName("SOFocOutstandingQty");
            entity.Property(e => e.SofocQty)
                .HasColumnType("decimal(19, 8)")
                .HasColumnName("SOFocQty");
            entity.Property(e => e.SooutstandingQty)
                .HasColumnType("decimal(19, 8)")
                .HasColumnName("SOOutstandingQty");
            entity.Property(e => e.Soqty)
                .HasColumnType("decimal(19, 8)")
                .HasColumnName("SOQty");
            entity.Property(e => e.SubVolume).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SubWeight).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TransType).HasMaxLength(50);
            entity.Property(e => e.Transferable).HasMaxLength(10);
            entity.Property(e => e.Uom)
                .HasMaxLength(50)
                .HasColumnName("UOM");
            entity.Property(e => e.VarianceFocQty).HasColumnType("decimal(19, 8)");
            entity.Property(e => e.VarianceQty).HasColumnType("decimal(19, 8)");
        });

        modelBuilder.Entity<AisbA022PickingListStatusTracking>(entity =>
        {
            entity.HasKey(e => e.TrackingId).HasName("PK__AISB_A02__3C19EDF11393EDEF");

            entity.ToTable("AISB_A022_PickingListStatusTracking");

            entity.Property(e => e.TrackingId).HasMaxLength(50);
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.Description).HasMaxLength(200);
            entity.Property(e => e.ItemCode).HasMaxLength(50);
            entity.Property(e => e.Qty).HasColumnType("decimal(19, 8)");
            entity.Property(e => e.ReferenceId).HasMaxLength(50);
            entity.Property(e => e.ReferenceTime).HasColumnType("datetime");
            entity.Property(e => e.ReferenceType).HasMaxLength(50);
            entity.Property(e => e.SodocKey).HasColumnName("SODocKey");
            entity.Property(e => e.SodocNo)
                .HasMaxLength(50)
                .HasColumnName("SODocNo");
            entity.Property(e => e.Status).HasMaxLength(50);
            entity.Property(e => e.TrackingTime).HasColumnType("datetime");
            entity.Property(e => e.Uom)
                .HasMaxLength(50)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<AisbA022PrintFormat>(entity =>
        {
            entity.HasKey(e => e.PrintFormatId).HasName("PK__AISB_A02__29A26DF195528D17");

            entity.ToTable("AISB_A022_PrintFormat");

            entity.Property(e => e.PrintFormatId).HasColumnName("PrintFormatID");
            entity.Property(e => e.DeviceId)
                .HasMaxLength(100)
                .HasColumnName("DeviceID");
            entity.Property(e => e.DocType)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LastModifiedTime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.PrintFormat).HasColumnType("text");

            entity.HasOne(d => d.Device).WithMany(p => p.AisbA022PrintFormats)
                .HasForeignKey(d => d.DeviceId)
                .HasConstraintName("FK__AISB_A022__Devic__67AA2AB0");
        });

        modelBuilder.Entity<AisbA022ReOrderSetting>(entity =>
        {
            entity.ToTable("AISB_A022_ReOrderSetting");

            entity.Property(e => e.Id)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ID");
            entity.Property(e => e.Value)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AisbA022ReportHex>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AISB_A022_ReportHex");

            entity.Property(e => e.DocGuid)
                .HasMaxLength(50)
                .HasColumnName("DocGUID");
            entity.Property(e => e.DocNo).HasMaxLength(20);
            entity.Property(e => e.DocType).HasMaxLength(10);
            entity.Property(e => e.Id)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID");
            entity.Property(e => e.LastUpdatedTime).HasColumnType("datetime");
            entity.Property(e => e.ReportHex).HasColumnType("text");
        });

        modelBuilder.Entity<AisbA022ResultA>(entity =>
        {
            entity.HasKey(e => e.Guid).HasName("PK__AESB_A02__15B69B8E19C9DBDC");

            entity.ToTable("AISB_A022_ResultAS");

            entity.Property(e => e.Guid)
                .HasMaxLength(50)
                .HasColumnName("GUID");
            entity.Property(e => e.BatchNo).HasMaxLength(50);
            entity.Property(e => e.CancelledUserId)
                .HasMaxLength(50)
                .HasColumnName("CancelledUserID");
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(50)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.DeptNo).HasMaxLength(8);
            entity.Property(e => e.Description).HasMaxLength(50);
            entity.Property(e => e.DeviceId)
                .HasMaxLength(100)
                .HasColumnName("DeviceID");
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(20);
            entity.Property(e => e.DocType).HasMaxLength(10);
            entity.Property(e => e.ExpectedCompletionDate).HasMaxLength(50);
            entity.Property(e => e.Fgdescription)
                .HasMaxLength(100)
                .HasColumnName("FGDescription");
            entity.Property(e => e.ItemCode).HasMaxLength(50);
            entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(50)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.OrderQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.ProjNo).HasMaxLength(8);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.RefDocNo).HasMaxLength(50);
            entity.Property(e => e.TransFromDoc).HasMaxLength(20);
        });

        modelBuilder.Entity<AisbA022ResultAj>(entity =>
        {
            entity.HasKey(e => e.Guid).HasName("PK__AESB_A02__15B69B8E51E3192B");

            entity.ToTable("AISB_A022_ResultAJ");

            entity.Property(e => e.Guid)
                .HasMaxLength(50)
                .HasColumnName("GUID");
            entity.Property(e => e.CancelledUserId)
                .HasMaxLength(50)
                .HasColumnName("CancelledUserID");
            entity.Property(e => e.CommitedDateTime).HasColumnType("datetime");
            entity.Property(e => e.CommittedBy).HasMaxLength(10);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(50)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.DeviceId)
                .HasMaxLength(100)
                .HasColumnName("DeviceID");
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(20);
            entity.Property(e => e.DocType).HasMaxLength(10);
            entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(50)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.RefDocNo).HasMaxLength(20);
        });

        modelBuilder.Entity<AisbA022ResultAjdtl>(entity =>
        {
            entity.HasKey(e => e.Guid).HasName("PK__AESB_A02__15B69B8E77CBA76D");

            entity.ToTable("AISB_A022_ResultAJDtl");

            entity.Property(e => e.Guid)
                .HasMaxLength(50)
                .HasColumnName("GUID");
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Desc2).HasMaxLength(500);
            entity.Property(e => e.DtlKey).ValueGeneratedOnAdd();
            entity.Property(e => e.FurtherDesc).HasMaxLength(500);
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.ParentGuid)
                .HasMaxLength(50)
                .HasColumnName("ParentGUID");
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Seq).HasMaxLength(10);
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<AisbA022ResultAo>(entity =>
        {
            entity.HasKey(e => e.Guid).HasName("PK__AESB_A02__15B69B8EB708C34A");

            entity.ToTable("AISB_A022_ResultAO");

            entity.Property(e => e.Guid)
                .HasMaxLength(50)
                .HasColumnName("GUID");
            entity.Property(e => e.BatchNo).HasMaxLength(50);
            entity.Property(e => e.CancelledUserId)
                .HasMaxLength(50)
                .HasColumnName("CancelledUserID");
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(50)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.DeptNo).HasMaxLength(8);
            entity.Property(e => e.Description).HasMaxLength(50);
            entity.Property(e => e.DeviceId)
                .HasMaxLength(100)
                .HasColumnName("DeviceID");
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(20);
            entity.Property(e => e.DocType).HasMaxLength(10);
            entity.Property(e => e.ExpectedCompletionDate).HasMaxLength(50);
            entity.Property(e => e.Fgdescription)
                .HasMaxLength(100)
                .HasColumnName("FGDescription");
            entity.Property(e => e.ItemCode).HasMaxLength(50);
            entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(50)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.OrderQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.ProjNo).HasMaxLength(8);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.RefDocNo).HasMaxLength(50);
            entity.Property(e => e.TransFromDoc).HasMaxLength(20);
        });

        modelBuilder.Entity<AisbA022ResultAodtl>(entity =>
        {
            entity.HasKey(e => e.Guid).HasName("PK__AESB_A02__15B69B8EC388599D");

            entity.ToTable("AISB_A022_ResultAODtl");

            entity.Property(e => e.Guid)
                .HasMaxLength(50)
                .HasColumnName("GUID");
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.DtlKey).ValueGeneratedOnAdd();
            entity.Property(e => e.FromQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.OverHeadCost).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.ParentGuid)
                .HasMaxLength(50)
                .HasColumnName("ParentGUID");
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Seq).HasMaxLength(10);
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<AisbA022ResultAsdtl>(entity =>
        {
            entity.HasKey(e => e.Guid).HasName("PK__AESB_A02__15B69B8E784F9779");

            entity.ToTable("AISB_A022_ResultASDtl");

            entity.Property(e => e.Guid)
                .HasMaxLength(50)
                .HasColumnName("GUID");
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.DtlKey).ValueGeneratedOnAdd();
            entity.Property(e => e.FromQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.OverHeadCost).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.ParentGuid)
                .HasMaxLength(50)
                .HasColumnName("ParentGUID");
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Seq).HasMaxLength(10);
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<AisbA022ResultBi>(entity =>
        {
            entity.HasKey(e => e.Guid).HasName("PK_AESB_A022_ResultBNIn");

            entity.ToTable("AISB_A022_ResultBI");

            entity.Property(e => e.Guid)
                .HasMaxLength(50)
                .HasColumnName("GUID");
            entity.Property(e => e.ActualBin).HasMaxLength(50);
            entity.Property(e => e.ActualQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.CommittedBy).HasMaxLength(50);
            entity.Property(e => e.CommittedDateTime).HasColumnType("datetime");
            entity.Property(e => e.DeviceId)
                .HasMaxLength(100)
                .HasColumnName("DeviceID");
            entity.Property(e => e.DocNo).HasMaxLength(50);
            entity.Property(e => e.DocType).HasMaxLength(5);
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.LotNo).HasMaxLength(50);
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SuggestDtlGuid).HasMaxLength(50);
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<AisbA022ResultBo>(entity =>
        {
            entity.HasKey(e => e.Guid).HasName("PK_AESB_A022_ResultBO");

            entity.ToTable("AISB_A022_ResultBO");

            entity.Property(e => e.Guid)
                .HasMaxLength(50)
                .HasColumnName("GUID");
            entity.Property(e => e.ActualBin).HasMaxLength(50);
            entity.Property(e => e.ActualQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.CommittedBy).HasMaxLength(50);
            entity.Property(e => e.CommittedDateTime).HasColumnType("datetime");
            entity.Property(e => e.DeviceId)
                .HasMaxLength(100)
                .HasColumnName("DeviceID");
            entity.Property(e => e.DocNo).HasMaxLength(50);
            entity.Property(e => e.DocType).HasMaxLength(5);
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.LotNo).HasMaxLength(50);
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SuggestDtlGuid).HasMaxLength(50);
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<AisbA022ResultBr>(entity =>
        {
            entity.HasKey(e => new { e.Guid, e.DtlKey }).HasName("PK_AESB_A022_ResultBNDtl");

            entity.ToTable("AISB_A022_ResultBR");

            entity.Property(e => e.Guid)
                .HasMaxLength(50)
                .HasColumnName("GUID");
            entity.Property(e => e.DtlKey).ValueGeneratedOnAdd();
            entity.Property(e => e.ActualBin).HasMaxLength(50);
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.CommittedBy).HasMaxLength(20);
            entity.Property(e => e.CommittedDateTime).HasColumnType("datetime");
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.DeviceId)
                .HasMaxLength(100)
                .HasColumnName("DeviceID");
            entity.Property(e => e.DocNo).HasMaxLength(20);
            entity.Property(e => e.DtlGuid)
                .HasMaxLength(100)
                .HasColumnName("DtlGUID");
            entity.Property(e => e.FromActualQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.FromBinCode).HasMaxLength(20);
            entity.Property(e => e.FromLotNo).HasMaxLength(20);
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.ScannedDateTime).HasColumnType("datetime");
            entity.Property(e => e.ToActualQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.ToBinCode).HasMaxLength(20);
            entity.Property(e => e.ToLotNo).HasMaxLength(20);
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<AisbA022ResultC>(entity =>
        {
            entity.HasKey(e => e.Guid).HasName("PK_AESB_A022_ResultCS");

            entity.ToTable("AISB_A022_ResultCS");

            entity.Property(e => e.Guid)
                .HasMaxLength(50)
                .HasColumnName("GUID");
            entity.Property(e => e.Address1).HasMaxLength(40);
            entity.Property(e => e.Address2).HasMaxLength(40);
            entity.Property(e => e.Address3).HasMaxLength(40);
            entity.Property(e => e.Address4).HasMaxLength(40);
            entity.Property(e => e.BranchCode).HasMaxLength(20);
            entity.Property(e => e.CancelledDate).HasColumnType("datetime");
            entity.Property(e => e.CancelledUserId)
                .HasMaxLength(50)
                .HasColumnName("CancelledUserID");
            entity.Property(e => e.CommitedDateTime).HasColumnType("datetime");
            entity.Property(e => e.CommittedBy).HasMaxLength(10);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(50)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.DebtorCode).HasMaxLength(50);
            entity.Property(e => e.DebtorName).HasMaxLength(100);
            entity.Property(e => e.DeviceId)
                .HasMaxLength(100)
                .HasColumnName("DeviceID");
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(20);
            entity.Property(e => e.DocType).HasMaxLength(10);
            entity.Property(e => e.FinalTotal).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(50)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.ResultTaxEntityId)
                .HasMaxLength(100)
                .HasColumnName("Result_TaxEntityID");
            entity.Property(e => e.ResultTinNo)
                .HasMaxLength(100)
                .HasColumnName("Result_TIN_No");
            entity.Property(e => e.RoundingAdjustment).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.TotalPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.TransFromDoc).HasMaxLength(100);
        });

        modelBuilder.Entity<AisbA022ResultCn>(entity =>
        {
            entity.HasKey(e => e.Guid).HasName("PK_AESB_A022_ResultCN");

            entity.ToTable("AISB_A022_ResultCN");

            entity.Property(e => e.Guid)
                .HasMaxLength(50)
                .HasColumnName("GUID");
            entity.Property(e => e.BranchCode).HasMaxLength(20);
            entity.Property(e => e.CancelledDate).HasColumnType("datetime");
            entity.Property(e => e.CancelledUserId)
                .HasMaxLength(50)
                .HasColumnName("CancelledUserID");
            entity.Property(e => e.CommitedDateTime).HasColumnType("datetime");
            entity.Property(e => e.CommittedBy).HasMaxLength(10);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(50)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.DebtorCode).HasMaxLength(50);
            entity.Property(e => e.DeviceId)
                .HasMaxLength(100)
                .HasColumnName("DeviceID");
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(20);
            entity.Property(e => e.DocType).HasMaxLength(10);
            entity.Property(e => e.FinalTotal).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(50)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.Reason).HasMaxLength(80);
            entity.Property(e => e.RoundingAdjustment).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.TotalPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.TransFromDoc).HasMaxLength(100);
        });

        modelBuilder.Entity<AisbA022ResultCndtl>(entity =>
        {
            entity.HasKey(e => e.Guid).HasName("PK_AESB_A022_ResultCNDtl");

            entity.ToTable("AISB_A022_ResultCNDtl");

            entity.Property(e => e.Guid)
                .HasMaxLength(50)
                .HasColumnName("GUID");
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.Discount).HasMaxLength(50);
            entity.Property(e => e.DiscountAmount).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.DtlKey).ValueGeneratedOnAdd();
            entity.Property(e => e.FocQuantity).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.FromDocNo).HasMaxLength(50);
            entity.Property(e => e.FromDocType).HasMaxLength(50);
            entity.Property(e => e.FromFocQuantity).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.FromQuantity).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.ParentGuid)
                .HasMaxLength(50)
                .HasColumnName("ParentGUID");
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Seq).HasMaxLength(10);
            entity.Property(e => e.SubTotal).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubTotalEx).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.TaxAmount).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.TaxType).HasMaxLength(50);
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<AisbA022ResultCsdtl>(entity =>
        {
            entity.HasKey(e => e.Guid).HasName("PK_AESB_ResultCSDtl");

            entity.ToTable("AISB_A022_ResultCSDtl");

            entity.Property(e => e.Guid)
                .HasMaxLength(50)
                .HasColumnName("GUID");
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.Discount).HasMaxLength(50);
            entity.Property(e => e.DiscountAmount).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.DtlKey).ValueGeneratedOnAdd();
            entity.Property(e => e.FocQuantity).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.FromDocNo).HasMaxLength(50);
            entity.Property(e => e.FromDocType).HasMaxLength(50);
            entity.Property(e => e.FromFocQuantity).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.FromQuantity).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.ParentGuid)
                .HasMaxLength(50)
                .HasColumnName("ParentGUID");
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Seq).HasMaxLength(10);
            entity.Property(e => e.SubTotal).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubTotalEx).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.TaxAmount).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.TaxType).HasMaxLength(50);
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<AisbA022ResultDeliveryApp>(entity =>
        {
            entity.HasKey(e => e.Guid).HasName("PK__AISB_A02__15B69B8E792D8C3B");

            entity.ToTable("AISB_A022_ResultDeliveryApp");

            entity.Property(e => e.Guid)
                .HasMaxLength(50)
                .HasColumnName("GUID");
            entity.Property(e => e.CancelledDate).HasColumnType("datetime");
            entity.Property(e => e.CancelledUserId)
                .HasMaxLength(50)
                .HasColumnName("CancelledUserID");
            entity.Property(e => e.CommitedDateTime).HasColumnType("datetime");
            entity.Property(e => e.CommittedBy).HasMaxLength(10);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(50)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.DeviceId)
                .HasMaxLength(100)
                .HasColumnName("DeviceID");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.DocType).HasMaxLength(10);
            entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(50)
                .HasColumnName("LastModifiedUserID");
        });

        modelBuilder.Entity<AisbA022ResultDeliveryAppDtl>(entity =>
        {
            entity.HasKey(e => e.Guid).HasName("PK__AISB_A02__15B69B8E4CC689A3");

            entity.ToTable("AISB_A022_ResultDeliveryAppDtl");

            entity.Property(e => e.Guid)
                .HasMaxLength(50)
                .HasColumnName("GUID");
            entity.Property(e => e.DeliveryFocQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.DeliveryQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Focqty)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("FOCQty");
            entity.Property(e => e.ParentGuid)
                .HasMaxLength(50)
                .HasColumnName("ParentGUID");
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
        });

        modelBuilder.Entity<AisbA022ResultDo>(entity =>
        {
            entity.HasKey(e => e.Guid).HasName("PK_AESB_A022_ResultDO");

            entity.ToTable("AISB_A022_ResultDO");

            entity.Property(e => e.Guid)
                .HasMaxLength(50)
                .HasColumnName("GUID");
            entity.Property(e => e.BranchCode).HasMaxLength(20);
            entity.Property(e => e.CancelledDate).HasColumnType("datetime");
            entity.Property(e => e.CancelledUserId)
                .HasMaxLength(50)
                .HasColumnName("CancelledUserID");
            entity.Property(e => e.CommitedDateTime).HasColumnType("datetime");
            entity.Property(e => e.CommittedBy).HasMaxLength(10);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(50)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.DebtorCode).HasMaxLength(50);
            entity.Property(e => e.DeviceId)
                .HasMaxLength(100)
                .HasColumnName("DeviceID");
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(20);
            entity.Property(e => e.DocType).HasMaxLength(10);
            entity.Property(e => e.FinalTotal).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(50)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.RoundingAdjustment).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.TotalPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.TransFromDoc).HasMaxLength(100);
        });

        modelBuilder.Entity<AisbA022ResultDodtl>(entity =>
        {
            entity.HasKey(e => e.Guid).HasName("PK_AESB_A022_ResultDODtl_1");

            entity.ToTable("AISB_A022_ResultDODtl");

            entity.Property(e => e.Guid)
                .HasMaxLength(50)
                .HasColumnName("GUID");
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.Discount).HasMaxLength(50);
            entity.Property(e => e.DiscountAmount).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.DtlKey).ValueGeneratedOnAdd();
            entity.Property(e => e.FocQuantity).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.FromDocNo).HasMaxLength(50);
            entity.Property(e => e.FromDocType).HasMaxLength(50);
            entity.Property(e => e.FromFocQuantity).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.FromQuantity).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.ItemDetailType).HasMaxLength(20);
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.ParentGuid)
                .HasMaxLength(50)
                .HasColumnName("ParentGUID");
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Seq).HasMaxLength(10);
            entity.Property(e => e.SubTotal).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubTotalEx).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.TaxAmount).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.TaxType).HasMaxLength(50);
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<AisbA022ResultGr>(entity =>
        {
            entity.HasKey(e => e.Guid).HasName("PK_AESB_A022_ResultGR");

            entity.ToTable("AISB_A022_ResultGR");

            entity.Property(e => e.Guid)
                .HasMaxLength(50)
                .HasColumnName("GUID");
            entity.Property(e => e.CancelledUserId)
                .HasMaxLength(50)
                .HasColumnName("CancelledUserID");
            entity.Property(e => e.CommitedDateTime).HasColumnType("datetime");
            entity.Property(e => e.CommittedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(50)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.CreditorCode).HasMaxLength(20);
            entity.Property(e => e.DeviceId)
                .HasMaxLength(100)
                .HasColumnName("DeviceID");
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(20);
            entity.Property(e => e.DocType).HasMaxLength(10);
            entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(50)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.SupplierDono)
                .HasMaxLength(50)
                .HasColumnName("SupplierDONo");
            entity.Property(e => e.TransFromDoc).HasMaxLength(100);
        });

        modelBuilder.Entity<AisbA022ResultGrdtl>(entity =>
        {
            entity.HasKey(e => new { e.Guid, e.DtlKey }).HasName("PK_AESB_A022_ResultGRDtl");

            entity.ToTable("AISB_A022_ResultGRDtl");

            entity.Property(e => e.Guid)
                .HasMaxLength(50)
                .HasColumnName("GUID");
            entity.Property(e => e.DtlKey).ValueGeneratedOnAdd();
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.ExpiredDate).HasColumnType("datetime");
            entity.Property(e => e.FocQuantity).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.FromDocNo).HasMaxLength(50);
            entity.Property(e => e.FromDocType).HasMaxLength(50);
            entity.Property(e => e.FromFocQuantity).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.FromQuantity).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.LotNo).HasMaxLength(50);
            entity.Property(e => e.ParentGuid)
                .HasMaxLength(50)
                .HasColumnName("ParentGUID");
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Seq).HasMaxLength(10);
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<AisbA022ResultI>(entity =>
        {
            entity.HasKey(e => e.Guid).HasName("PK__AESB_A02__15B69B8EB65F417C");

            entity.ToTable("AISB_A022_ResultIS");

            entity.Property(e => e.Guid)
                .HasMaxLength(50)
                .HasColumnName("GUID");
            entity.Property(e => e.CancelledUserId)
                .HasMaxLength(50)
                .HasColumnName("CancelledUserID");
            entity.Property(e => e.CommitedDateTime).HasColumnType("datetime");
            entity.Property(e => e.CommittedBy).HasMaxLength(10);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(50)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.DeviceId)
                .HasMaxLength(100)
                .HasColumnName("DeviceID");
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(20);
            entity.Property(e => e.DocType).HasMaxLength(10);
            entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(50)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.RefDocNo).HasMaxLength(20);
        });

        modelBuilder.Entity<AisbA022ResultIsdtl>(entity =>
        {
            entity.HasKey(e => e.Guid).HasName("PK__AESB_A02__15B69B8E69590A8D");

            entity.ToTable("AISB_A022_ResultISDtl");

            entity.Property(e => e.Guid)
                .HasMaxLength(50)
                .HasColumnName("GUID");
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Desc2).HasMaxLength(500);
            entity.Property(e => e.DtlKey).ValueGeneratedOnAdd();
            entity.Property(e => e.FurtherDesc).HasMaxLength(500);
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.ParentGuid)
                .HasMaxLength(50)
                .HasColumnName("ParentGUID");
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Seq).HasMaxLength(50);
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<AisbA022ResultIv>(entity =>
        {
            entity.HasKey(e => e.Guid).HasName("PK_AESB_A022_ResultIV");

            entity.ToTable("AISB_A022_ResultIV");

            entity.Property(e => e.Guid)
                .HasMaxLength(50)
                .HasColumnName("GUID");
            entity.Property(e => e.BranchCode).HasMaxLength(20);
            entity.Property(e => e.CancelledDate).HasColumnType("datetime");
            entity.Property(e => e.CancelledUserId)
                .HasMaxLength(50)
                .HasColumnName("CancelledUserID");
            entity.Property(e => e.CommitedDateTime).HasColumnType("datetime");
            entity.Property(e => e.CommittedBy).HasMaxLength(10);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(50)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.DebtorCode).HasMaxLength(50);
            entity.Property(e => e.DeviceId)
                .HasMaxLength(100)
                .HasColumnName("DeviceID");
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(20);
            entity.Property(e => e.DocType).HasMaxLength(10);
            entity.Property(e => e.FinalTotal).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(50)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.RoundingAdjustment).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.TotalPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.TransFromDoc).HasMaxLength(100);
        });

        modelBuilder.Entity<AisbA022ResultIvdtl>(entity =>
        {
            entity.HasKey(e => e.Guid).HasName("PK_AESB_A022_ResultIVDtl");

            entity.ToTable("AISB_A022_ResultIVDtl");

            entity.Property(e => e.Guid)
                .HasMaxLength(50)
                .HasColumnName("GUID");
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.Discount).HasMaxLength(50);
            entity.Property(e => e.DiscountAmount).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.DtlKey).ValueGeneratedOnAdd();
            entity.Property(e => e.FocQuantity).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.FromDocNo).HasMaxLength(50);
            entity.Property(e => e.FromDocType).HasMaxLength(50);
            entity.Property(e => e.FromFocQuantity).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.FromQuantity).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.ParentGuid)
                .HasMaxLength(50)
                .HasColumnName("ParentGUID");
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Seq).HasMaxLength(10);
            entity.Property(e => e.SubTotal).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubTotalEx).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.TaxAmount).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.TaxType).HasMaxLength(50);
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<AisbA022ResultPi>(entity =>
        {
            entity.HasKey(e => e.Guid).HasName("PK_AESB_A022_ResultPI");

            entity.ToTable("AISB_A022_ResultPI");

            entity.Property(e => e.Guid)
                .HasMaxLength(50)
                .HasColumnName("GUID");
            entity.Property(e => e.CancelledUserId)
                .HasMaxLength(50)
                .HasColumnName("CancelledUserID");
            entity.Property(e => e.CommitedDateTime).HasColumnType("datetime");
            entity.Property(e => e.CommittedBy).HasMaxLength(10);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(50)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.CreditorCode).HasMaxLength(20);
            entity.Property(e => e.DeviceId)
                .HasMaxLength(100)
                .HasColumnName("DeviceID");
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(20);
            entity.Property(e => e.DocType).HasMaxLength(10);
            entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(50)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.SupplierDono)
                .HasMaxLength(50)
                .HasColumnName("SupplierDONo");
            entity.Property(e => e.SupplierInvoiceNo).HasMaxLength(50);
            entity.Property(e => e.TransFromDoc).HasMaxLength(100);
        });

        modelBuilder.Entity<AisbA022ResultPidtl>(entity =>
        {
            entity.HasKey(e => e.Guid).HasName("PK_AESB_A022_ResultPIDtl_1");

            entity.ToTable("AISB_A022_ResultPIDtl");

            entity.Property(e => e.Guid)
                .HasMaxLength(50)
                .HasColumnName("GUID");
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.DtlKey).ValueGeneratedOnAdd();
            entity.Property(e => e.FocQuantity).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.FromDocNo).HasMaxLength(50);
            entity.Property(e => e.FromDocType).HasMaxLength(50);
            entity.Property(e => e.FromFocQuantity).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.FromQuantity).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.LotNo).HasMaxLength(50);
            entity.Property(e => e.ParentGuid)
                .HasMaxLength(50)
                .HasColumnName("ParentGUID");
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Seq).HasMaxLength(10);
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<AisbA022ResultPo>(entity =>
        {
            entity.HasKey(e => e.Guid).HasName("PK__AESB_A02__15B69B8ECF8B2DE8");

            entity.ToTable("AISB_A022_ResultPO");

            entity.Property(e => e.Guid)
                .HasMaxLength(50)
                .HasColumnName("GUID");
            entity.Property(e => e.CancelledUserId)
                .HasMaxLength(50)
                .HasColumnName("CancelledUserID");
            entity.Property(e => e.CommitedDateTime).HasColumnType("datetime");
            entity.Property(e => e.CommittedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(50)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.CreditorCode).HasMaxLength(20);
            entity.Property(e => e.DeviceId)
                .HasMaxLength(100)
                .HasColumnName("DeviceID");
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(20);
            entity.Property(e => e.DocType).HasMaxLength(10);
            entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(50)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.Location).HasMaxLength(8);
        });

        modelBuilder.Entity<AisbA022ResultPodtl>(entity =>
        {
            entity.HasKey(e => e.Guid).HasName("PK__AESB_A02__15B69B8E2AB4E8F2");

            entity.ToTable("AISB_A022_ResultPODtl");

            entity.Property(e => e.Guid)
                .HasMaxLength(50)
                .HasColumnName("GUID");
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.DtlKey).ValueGeneratedOnAdd();
            entity.Property(e => e.FocQuantity).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.FromFocQuantity).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.ParentGuid)
                .HasMaxLength(50)
                .HasColumnName("ParentGUID");
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.ResultPoguid)
                .HasMaxLength(50)
                .HasColumnName("ResultPOGUID");
            entity.Property(e => e.Seq).HasMaxLength(10);
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<AisbA022ResultPq>(entity =>
        {
            entity.HasKey(e => e.Guid);

            entity.ToTable("AISB_A022_ResultPQ");

            entity.Property(e => e.Guid)
                .HasMaxLength(50)
                .HasColumnName("GUID");
            entity.Property(e => e.ApprovalUserId)
                .HasMaxLength(10)
                .HasColumnName("ApprovalUserID");
            entity.Property(e => e.CancelledDate).HasColumnType("datetime");
            entity.Property(e => e.CancelledUserId)
                .HasMaxLength(10)
                .HasColumnName("CancelledUserID");
            entity.Property(e => e.CommitedDateTime).HasColumnType("datetime");
            entity.Property(e => e.CommittedBy).HasMaxLength(10);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.Description).HasMaxLength(80);
            entity.Property(e => e.DeviceId)
                .HasMaxLength(100)
                .HasColumnName("DeviceID");
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(20);
            entity.Property(e => e.DocType).HasMaxLength(10);
            entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.RequestedBy).HasMaxLength(40);
        });

        modelBuilder.Entity<AisbA022ResultPqdtl>(entity =>
        {
            entity.HasKey(e => e.Guid);

            entity.ToTable("AISB_A022_ResultPQDtl");

            entity.Property(e => e.Guid)
                .HasMaxLength(50)
                .HasColumnName("GUID");
            entity.Property(e => e.CreditorCode).HasMaxLength(12);
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.DtlKey).ValueGeneratedOnAdd();
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.ParentGuid)
                .HasMaxLength(50)
                .HasColumnName("ParentGUID");
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.RequiredDate).HasColumnType("datetime");
            entity.Property(e => e.Seq).HasMaxLength(10);
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
            entity.Property(e => e.UserUom)
                .HasMaxLength(8)
                .HasColumnName("UserUOM");
        });

        modelBuilder.Entity<AisbA022ResultPr>(entity =>
        {
            entity.HasKey(e => e.Guid).HasName("PK__AESB_A02__15B69B8EEC8F47E7");

            entity.ToTable("AISB_A022_ResultPR");

            entity.Property(e => e.Guid)
                .HasMaxLength(50)
                .HasColumnName("GUID");
            entity.Property(e => e.CancelledUserId)
                .HasMaxLength(50)
                .HasColumnName("CancelledUserID");
            entity.Property(e => e.CommitedDateTime).HasColumnType("datetime");
            entity.Property(e => e.CommittedBy).HasMaxLength(10);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(50)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.CreditorCode).HasMaxLength(20);
            entity.Property(e => e.DeviceId)
                .HasMaxLength(100)
                .HasColumnName("DeviceID");
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(20);
            entity.Property(e => e.DocType).HasMaxLength(10);
            entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(50)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.SupplierCnno)
                .HasMaxLength(50)
                .HasColumnName("SupplierCNNo");
            entity.Property(e => e.SupplierInvoiceNo).HasMaxLength(50);
            entity.Property(e => e.TransFromDoc).HasMaxLength(100);
        });

        modelBuilder.Entity<AisbA022ResultPrdtl>(entity =>
        {
            entity.HasKey(e => e.Guid).HasName("PK__AESB_A02__15B69B8EBACCB8AE");

            entity.ToTable("AISB_A022_ResultPRDtl");

            entity.Property(e => e.Guid)
                .HasMaxLength(50)
                .HasColumnName("GUID");
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.DtlKey).ValueGeneratedOnAdd();
            entity.Property(e => e.FocQuantity).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.FromDocNo).HasMaxLength(50);
            entity.Property(e => e.FromDocType).HasMaxLength(50);
            entity.Property(e => e.FromFocQuantity).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.FromQuantity).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.ParentGuid)
                .HasMaxLength(50)
                .HasColumnName("ParentGUID");
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Seq).HasMaxLength(10);
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<AisbA022ResultQt>(entity =>
        {
            entity.HasKey(e => e.Guid);

            entity.ToTable("AISB_A022_ResultQT");

            entity.Property(e => e.Guid)
                .HasMaxLength(50)
                .HasColumnName("GUID");
            entity.Property(e => e.BranchCode).HasMaxLength(20);
            entity.Property(e => e.CancelledDate).HasColumnType("datetime");
            entity.Property(e => e.CancelledUserId)
                .HasMaxLength(10)
                .HasColumnName("CancelledUserID");
            entity.Property(e => e.CommitedDateTime).HasColumnType("datetime");
            entity.Property(e => e.CommittedBy).HasMaxLength(10);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.DebtorCode).HasMaxLength(12);
            entity.Property(e => e.DeviceId)
                .HasMaxLength(100)
                .HasColumnName("DeviceID");
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(20);
            entity.Property(e => e.DocType).HasMaxLength(10);
            entity.Property(e => e.FinalTotal).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.RefDocNo).HasMaxLength(20);
            entity.Property(e => e.RoundingAdjustment).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.TotalPrice).HasColumnType("decimal(25, 8)");
        });

        modelBuilder.Entity<AisbA022ResultQtdtl>(entity =>
        {
            entity.HasKey(e => e.Guid);

            entity.ToTable("AISB_A022_ResultQTDtl");

            entity.Property(e => e.Guid)
                .HasMaxLength(50)
                .HasColumnName("GUID");
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Discount).HasMaxLength(50);
            entity.Property(e => e.DiscountAmount).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.DtlKey).ValueGeneratedOnAdd();
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.ParentGuid)
                .HasMaxLength(50)
                .HasColumnName("ParentGUID");
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Seq).HasMaxLength(10);
            entity.Property(e => e.SubTotal).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubTotalEx).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.TaxAmount).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.TaxType).HasMaxLength(50);
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<AisbA022ResultRiin>(entity =>
        {
            entity.HasKey(e => e.Guid).HasName("PK_AESB_A022_ResultRIIn");

            entity.ToTable("AISB_A022_ResultRIIn");

            entity.Property(e => e.Guid)
                .HasMaxLength(80)
                .HasColumnName("GUID");
            entity.Property(e => e.CommittedBy).HasMaxLength(50);
            entity.Property(e => e.CommittedDateTime).HasColumnType("datetime");
            entity.Property(e => e.DeviceId)
                .HasMaxLength(100)
                .HasColumnName("DeviceID");
            entity.Property(e => e.DocNo).HasMaxLength(20);
            entity.Property(e => e.FromGuid)
                .HasMaxLength(80)
                .HasColumnName("FromGUID");
            entity.Property(e => e.ScannedDateTime).HasColumnType("datetime");
            entity.Property(e => e.ToActualQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.ToBinCode).HasMaxLength(50);
            entity.Property(e => e.ToLotNo).HasMaxLength(50);
        });

        modelBuilder.Entity<AisbA022ResultRiout>(entity =>
        {
            entity.HasKey(e => e.Guid).HasName("PK_AESB_A022_ResultRIOut");

            entity.ToTable("AISB_A022_ResultRIOut");

            entity.Property(e => e.Guid)
                .HasMaxLength(80)
                .HasColumnName("GUID");
            entity.Property(e => e.CommittedBy).HasMaxLength(50);
            entity.Property(e => e.CommittedDateTime).HasColumnType("datetime");
            entity.Property(e => e.DeviceGuid)
                .HasMaxLength(80)
                .HasColumnName("DeviceGUID");
            entity.Property(e => e.DeviceId)
                .HasMaxLength(100)
                .HasColumnName("DeviceID");
            entity.Property(e => e.DocNo).HasMaxLength(20);
            entity.Property(e => e.FromActualQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.FromBinCode).HasMaxLength(50);
            entity.Property(e => e.FromLotNo).HasMaxLength(50);
            entity.Property(e => e.ScannedDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<AisbA022ResultSerialNoTran>(entity =>
        {
            entity.HasKey(e => e.Guid).HasName("PK__AESB_A02__15B69B8EA39F538D");

            entity.ToTable("AISB_A022_ResultSerialNoTrans");

            entity.Property(e => e.Guid)
                .HasMaxLength(50)
                .HasColumnName("GUID");
            entity.Property(e => e.DocGuid)
                .HasMaxLength(50)
                .HasColumnName("DocGUID");
            entity.Property(e => e.DocType).HasMaxLength(10);
            entity.Property(e => e.DtlGuid)
                .HasMaxLength(50)
                .HasColumnName("DtlGUID");
            entity.Property(e => e.ExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.LastSalesDate).HasColumnType("datetime");
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.ManufacturedDate).HasColumnType("datetime");
            entity.Property(e => e.Remarks).HasMaxLength(20);
            entity.Property(e => e.SerialNo).HasMaxLength(40);
        });

        modelBuilder.Entity<AisbA022ResultSo>(entity =>
        {
            entity.HasKey(e => e.Guid).HasName("PK_AESB_A022_ResultSO");

            entity.ToTable("AISB_A022_ResultSO");

            entity.Property(e => e.Guid)
                .HasMaxLength(50)
                .HasColumnName("GUID");
            entity.Property(e => e.BranchCode).HasMaxLength(20);
            entity.Property(e => e.CancelledDate).HasColumnType("datetime");
            entity.Property(e => e.CancelledUserId)
                .HasMaxLength(50)
                .HasColumnName("CancelledUserID");
            entity.Property(e => e.CommitedDateTime).HasColumnType("datetime");
            entity.Property(e => e.CommittedBy).HasMaxLength(10);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(50)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.DebtorCode).HasMaxLength(50);
            entity.Property(e => e.DeviceId)
                .HasMaxLength(100)
                .HasColumnName("DeviceID");
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(20);
            entity.Property(e => e.DocType).HasMaxLength(10);
            entity.Property(e => e.FinalTotal).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(50)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.RoundingAdjustment).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.TotalPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.TransFromDoc).HasMaxLength(100);
        });

        modelBuilder.Entity<AisbA022ResultSodtl>(entity =>
        {
            entity.HasKey(e => e.Guid).HasName("PK_AESB_A022_ResultSODtl_1");

            entity.ToTable("AISB_A022_ResultSODtl");

            entity.Property(e => e.Guid)
                .HasMaxLength(50)
                .HasColumnName("GUID");
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.Discount).HasMaxLength(50);
            entity.Property(e => e.DiscountAmount).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.DtlKey).ValueGeneratedOnAdd();
            entity.Property(e => e.FocQuantity).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.FromDocNo).HasMaxLength(50);
            entity.Property(e => e.FromDocType).HasMaxLength(50);
            entity.Property(e => e.FromFocQuantity).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.FromQuantity).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.ParentGuid)
                .HasMaxLength(50)
                .HasColumnName("ParentGUID");
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Seq).HasMaxLength(10);
            entity.Property(e => e.SubTotal).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubTotalEx).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.TaxAmount).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.TaxType).HasMaxLength(50);
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<AisbA022ResultSr>(entity =>
        {
            entity.HasKey(e => e.Guid).HasName("PK__AESB_A02__15B69B8E2B3942F6");

            entity.ToTable("AISB_A022_ResultSR");

            entity.Property(e => e.Guid)
                .HasMaxLength(50)
                .HasColumnName("GUID");
            entity.Property(e => e.CancelledUserId)
                .HasMaxLength(50)
                .HasColumnName("CancelledUserID");
            entity.Property(e => e.CommitedDateTime).HasColumnType("datetime");
            entity.Property(e => e.CommittedBy).HasMaxLength(10);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(50)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.DeviceId)
                .HasMaxLength(100)
                .HasColumnName("DeviceID");
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(20);
            entity.Property(e => e.DocType).HasMaxLength(10);
            entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(50)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.RefDocNo).HasMaxLength(20);
        });

        modelBuilder.Entity<AisbA022ResultSrdtl>(entity =>
        {
            entity.HasKey(e => e.Guid).HasName("PK__AESB_A02__15B69B8E56AF1A7A");

            entity.ToTable("AISB_A022_ResultSRDtl");

            entity.Property(e => e.Guid)
                .HasMaxLength(50)
                .HasColumnName("GUID");
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Desc2).HasMaxLength(500);
            entity.Property(e => e.DtlKey).ValueGeneratedOnAdd();
            entity.Property(e => e.FurtherDesc).HasMaxLength(500);
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.ParentGuid)
                .HasMaxLength(50)
                .HasColumnName("ParentGUID");
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Seq).HasMaxLength(10);
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<AisbA022ResultTx>(entity =>
        {
            entity.HasKey(e => e.Guid).HasName("PK__AESB_A02__15B69B8EB4BE2C34");

            entity.ToTable("AISB_A022_ResultTX");

            entity.Property(e => e.Guid)
                .HasMaxLength(50)
                .HasColumnName("GUID");
            entity.Property(e => e.AuthorisedBy).HasMaxLength(30);
            entity.Property(e => e.CancelledUserId)
                .HasMaxLength(50)
                .HasColumnName("CancelledUserID");
            entity.Property(e => e.CommitedDateTime).HasColumnType("datetime");
            entity.Property(e => e.CommittedBy).HasMaxLength(10);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(50)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.DeviceId)
                .HasMaxLength(100)
                .HasColumnName("DeviceID");
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(20);
            entity.Property(e => e.DocType).HasMaxLength(10);
            entity.Property(e => e.FromLocation).HasMaxLength(8);
            entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(50)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.Reason).HasMaxLength(80);
            entity.Property(e => e.Ref).HasMaxLength(40);
            entity.Property(e => e.RefDocNo).HasMaxLength(20);
            entity.Property(e => e.ToLocation).HasMaxLength(8);
        });

        modelBuilder.Entity<AisbA022ResultTxdtl>(entity =>
        {
            entity.HasKey(e => e.Guid).HasName("PK__AESB_A02__15B69B8E7ECCD4A9");

            entity.ToTable("AISB_A022_ResultTXDtl");

            entity.Property(e => e.Guid)
                .HasMaxLength(50)
                .HasColumnName("GUID");
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.DtlKey).ValueGeneratedOnAdd();
            entity.Property(e => e.FromDtlKey).HasMaxLength(20);
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.ParentGuid)
                .HasMaxLength(50)
                .HasColumnName("ParentGUID");
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Seq).HasMaxLength(10);
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<AisbA022Route>(entity =>
        {
            entity.HasKey(e => e.RoutesId);

            entity.ToTable("AISB_A022_Routes");

            entity.Property(e => e.RoutesId).HasMaxLength(50);
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedTime).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(50);
        });

        modelBuilder.Entity<AisbA022RoutesDtl>(entity =>
        {
            entity.HasKey(e => e.RoutesDtlId);

            entity.ToTable("AISB_A022_RoutesDtl");

            entity.Property(e => e.RoutesDtlId).HasMaxLength(50);
            entity.Property(e => e.Area).HasMaxLength(50);
            entity.Property(e => e.Color).HasMaxLength(16);
            entity.Property(e => e.Priority).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.RoutesId).HasMaxLength(50);
        });

        modelBuilder.Entity<AisbA022Setting>(entity =>
        {
            entity.ToTable("AISB_A022_Setting");

            entity.Property(e => e.Id)
                .HasMaxLength(20)
                .HasColumnName("ID");
            entity.Property(e => e.Value).HasColumnType("ntext");
        });

        modelBuilder.Entity<AisbA022Setting1>(entity =>
        {
            entity.HasKey(e => e.Name).HasName("PK__AISB_A02__737584F76255EEF8");

            entity.ToTable("AISB_A022_Settings");

            entity.Property(e => e.Name).HasMaxLength(50);
            entity.Property(e => e.Value).HasMaxLength(50);
        });

        modelBuilder.Entity<AisbA022SostatusTracking>(entity =>
        {
            entity.HasKey(e => e.Guid).HasName("PK__AISB_A02__15B69B8E93334C1E");

            entity.ToTable("AISB_A022_SOStatusTracking");

            entity.Property(e => e.Guid)
                .HasMaxLength(50)
                .HasColumnName("GUID");
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.FromDocId).HasMaxLength(50);
            entity.Property(e => e.FromDocType).HasMaxLength(50);
            entity.Property(e => e.SodocKey)
                .HasMaxLength(50)
                .HasColumnName("SODocKey");
            entity.Property(e => e.SodocNo)
                .HasMaxLength(50)
                .HasColumnName("SODocNo");
            entity.Property(e => e.Status).HasMaxLength(50);
        });

        modelBuilder.Entity<AisbA022StockTake>(entity =>
        {
            entity.HasKey(e => e.Guid).HasName("PK_AESB_A022_StockTake");

            entity.ToTable("AISB_A022_StockTake");

            entity.Property(e => e.Guid).HasMaxLength(50);
            entity.Property(e => e.Barcode).HasMaxLength(50);
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.BinCode).HasMaxLength(50);
            entity.Property(e => e.DeviceId)
                .HasMaxLength(100)
                .HasColumnName("DeviceID");
            entity.Property(e => e.Indicator).HasMaxLength(50);
            entity.Property(e => e.ItemCode).HasMaxLength(50);
            entity.Property(e => e.LotNo).HasMaxLength(50);
            entity.Property(e => e.PostedToDocNo).HasMaxLength(20);
            entity.Property(e => e.PostedToDocType).HasMaxLength(10);
            entity.Property(e => e.Qty).HasColumnType("decimal(18, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(18, 8)");
            entity.Property(e => e.TransactionDateTime).HasColumnType("datetime");
            entity.Property(e => e.Uom)
                .HasMaxLength(20)
                .HasColumnName("UOM");
            entity.Property(e => e.ZoneCode).HasMaxLength(50);
        });

        modelBuilder.Entity<AisbA022StockTransit>(entity =>
        {
            entity.HasKey(e => e.StockRequestId).HasName("PK_AISB_A022_StockRequest_1");

            entity.ToTable("AISB_A022_StockTransit");

            entity.Property(e => e.StockRequestId).HasMaxLength(50);
            entity.Property(e => e.AdjustmentDocumentNo).HasMaxLength(20);
            entity.Property(e => e.AdjustmentReason).HasColumnType("text");
            entity.Property(e => e.AuthorisedBy).HasMaxLength(100);
            entity.Property(e => e.CommittedBy).HasMaxLength(50);
            entity.Property(e => e.CommittedDateTime).HasColumnType("datetime");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.CreatedUser).HasMaxLength(30);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.DeviceId)
                .HasMaxLength(50)
                .HasColumnName("DeviceID");
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocKey).ValueGeneratedOnAdd();
            entity.Property(e => e.DocNo).HasMaxLength(20);
            entity.Property(e => e.DocType).HasMaxLength(2);
            entity.Property(e => e.LastModifiedDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUser).HasMaxLength(30);
            entity.Property(e => e.LocationFrom).HasMaxLength(20);
            entity.Property(e => e.LocationTo).HasMaxLength(20);
            entity.Property(e => e.LocationTransit).HasMaxLength(20);
            entity.Property(e => e.Outstanding).HasColumnType("decimal(18, 8)");
            entity.Property(e => e.OutstandingStatus).HasMaxLength(20);
            entity.Property(e => e.Reason).HasMaxLength(100);
            entity.Property(e => e.Ref).HasMaxLength(100);
            entity.Property(e => e.RefDocNo).HasMaxLength(100);
            entity.Property(e => e.Remark1).HasMaxLength(100);
            entity.Property(e => e.Remark2).HasMaxLength(100);
            entity.Property(e => e.Remark3).HasMaxLength(100);
            entity.Property(e => e.Remark4).HasMaxLength(100);
            entity.Property(e => e.StockStatus).HasMaxLength(20);
            entity.Property(e => e.TransferredDocumentNo).HasMaxLength(20);
            entity.Property(e => e.TransitDocumentNo).HasMaxLength(20);
        });

        modelBuilder.Entity<AisbA022StockTransitDtl>(entity =>
        {
            entity.HasKey(e => e.StockRequestDtlId).HasName("PK_AISB_A022_StockRequestDtl");

            entity.ToTable("AISB_A022_StockTransitDtl");

            entity.Property(e => e.StockRequestDtlId).HasMaxLength(50);
            entity.Property(e => e.AdjustedQty).HasColumnType("decimal(18, 8)");
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.DtlKey).ValueGeneratedOnAdd();
            entity.Property(e => e.ItemCode).HasMaxLength(100);
            entity.Property(e => e.Location).HasMaxLength(50);
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.Qty).HasColumnType("decimal(18, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(18, 8)");
            entity.Property(e => e.Remark).HasMaxLength(50);
            entity.Property(e => e.StockRequestId).HasMaxLength(50);
            entity.Property(e => e.TransferQty).HasColumnType("decimal(18, 8)");
            entity.Property(e => e.TransitQty).HasColumnType("decimal(18, 8)");
            entity.Property(e => e.Uom)
                .HasMaxLength(100)
                .HasColumnName("UOM");
            entity.Property(e => e.Variance).HasColumnType("decimal(18, 8)");
        });

        modelBuilder.Entity<AisbA022Tag>(entity =>
        {
            entity.HasKey(e => e.TagId);

            entity.ToTable("AISB_A022_Tags");

            entity.Property(e => e.TagId).HasColumnName("TagID");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedTime).HasColumnType("datetime");
            entity.Property(e => e.TagText).HasMaxLength(255);
        });

        modelBuilder.Entity<AisbA022Token>(entity =>
        {
            entity.HasKey(e => e.TokenId).HasName("PK__AISB_A02__658FEE8A038B3E3D");

            entity.ToTable("AISB_A022_Token");

            entity.Property(e => e.TokenId)
                .HasMaxLength(50)
                .HasColumnName("TokenID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.DeviceId).HasMaxLength(200);
            entity.Property(e => e.ExpiredDateTime).HasColumnType("datetime");
            entity.Property(e => e.LogoutDateTime).HasColumnType("datetime");
            entity.Property(e => e.PassHash).HasMaxLength(200);
            entity.Property(e => e.UserId)
                .HasMaxLength(50)
                .HasColumnName("UserID");
        });

        modelBuilder.Entity<AisbA022Zone>(entity =>
        {
            entity.HasKey(e => e.ZoneCode).HasName("PK_AESB_A022_Zone");

            entity.ToTable("AISB_A022_Zone");

            entity.Property(e => e.ZoneCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.ParentCode).HasMaxLength(50);
            entity.Property(e => e.ShortCode)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AisbA022ZoneDtl>(entity =>
        {
            entity.HasKey(e => new { e.Guid, e.ZoneCode }).HasName("PK_AESB_A022_ZoneDtl");

            entity.ToTable("AISB_A022_ZoneDtl");

            entity.Property(e => e.Guid).HasMaxLength(50);
            entity.Property(e => e.ZoneCode).HasMaxLength(50);
            entity.Property(e => e.Description).HasMaxLength(300);
            entity.Property(e => e.FilterType).HasMaxLength(10);
            entity.Property(e => e.Keyword).HasMaxLength(50);
        });

        modelBuilder.Entity<AisbA035PickingSystem>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AISB_A035_PickingSystem");

            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.CompletedId)
                .HasMaxLength(50)
                .HasColumnName("CompletedID");
            entity.Property(e => e.CompletedTime).HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(200);
            entity.Property(e => e.FirstAddedTime).HasColumnType("datetime");
            entity.Property(e => e.FromDocNo).HasMaxLength(20);
            entity.Property(e => e.ItemCode).HasMaxLength(50);
            entity.Property(e => e.LastModifiedTime).HasColumnType("datetime");
            entity.Property(e => e.PickedStatus).HasMaxLength(50);
            entity.Property(e => e.PickingListDtlId).HasMaxLength(50);
            entity.Property(e => e.PickingListId).HasMaxLength(50);
            entity.Property(e => e.RequestFocQty).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.RequestQty).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ReserveId)
                .HasMaxLength(50)
                .HasColumnName("ReserveID");
            entity.Property(e => e.ReserveTime).HasColumnType("datetime");
            entity.Property(e => e.SalesOrderNo).HasMaxLength(50);
            entity.Property(e => e.Shelf).HasMaxLength(20);
            entity.Property(e => e.Soarea)
                .HasMaxLength(50)
                .HasColumnName("SOArea");
            entity.Property(e => e.Status).HasMaxLength(10);
            entity.Property(e => e.TotalFocVolume).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalFocWeight).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalPickedFocQty).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalPickedQty).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalVarianceFocQty).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalVarianceQty).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalVolume).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalWeight).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Transferable).HasMaxLength(1);
            entity.Property(e => e.Uom)
                .HasMaxLength(50)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<AisbA035Setting>(entity =>
        {
            entity.ToTable("AISB_A035_Setting");

            entity.Property(e => e.Id)
                .HasMaxLength(20)
                .HasColumnName("ID");
            entity.Property(e => e.Value).HasColumnType("ntext");
        });

        modelBuilder.Entity<AisbB048ResultStockAssembly>(entity =>
        {
            entity.HasKey(e => e.Guid).HasName("PK_AISB_Result_StockAssembly");

            entity.ToTable("AISB_B048_Result_StockAssembly");

            entity.Property(e => e.Guid)
                .HasMaxLength(50)
                .HasColumnName("GUID");
            entity.Property(e => e.BatchNo).HasMaxLength(50);
            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(50)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.DeptNo).HasMaxLength(50);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(50);
            entity.Property(e => e.ItemCode).HasMaxLength(50);
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(50)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.Location).HasMaxLength(50);
            entity.Property(e => e.OrderQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.ProjNo).HasMaxLength(50);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.RefDocNo).HasMaxLength(50);
            entity.Property(e => e.Sono)
                .HasMaxLength(50)
                .HasColumnName("SONo");
            entity.Property(e => e.Status).HasMaxLength(20);
        });

        modelBuilder.Entity<AisbB048ResultStockAssemblyDtl>(entity =>
        {
            entity.HasKey(e => new { e.Guid, e.DocGuid }).HasName("PK_AISB_Result_StockAssemblyDTL");

            entity.ToTable("AISB_B048_Result_StockAssemblyDTL");

            entity.Property(e => e.Guid)
                .HasMaxLength(50)
                .HasColumnName("GUID");
            entity.Property(e => e.DocGuid)
                .HasMaxLength(50)
                .HasColumnName("DocGUID");
            entity.Property(e => e.BatchNo).HasMaxLength(50);
            entity.Property(e => e.DeptNo).HasMaxLength(50);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.FromAsmorderDtlKey).HasColumnName("FromASMOrderDtlKey");
            entity.Property(e => e.ItemCode).HasMaxLength(50);
            entity.Property(e => e.Location).HasMaxLength(50);
            entity.Property(e => e.OrderQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.ProjNo).HasMaxLength(50);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
        });

        modelBuilder.Entity<AisbB048Setting>(entity =>
        {
            entity.ToTable("AISB_B048_Setting");

            entity.Property(e => e.Id)
                .HasMaxLength(50)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Value).HasColumnType("text");
        });

        modelBuilder.Entity<AisbB048Token>(entity =>
        {
            entity.HasKey(e => e.TokenId).HasName("PK__AISB_B04__658FEE8A6A4C73D1");

            entity.ToTable("AISB_B048_Token");

            entity.Property(e => e.TokenId)
                .HasMaxLength(50)
                .HasColumnName("TokenID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.DeviceId).HasMaxLength(200);
            entity.Property(e => e.ExpiredDateTime).HasColumnType("datetime");
            entity.Property(e => e.LogoutDateTime).HasColumnType("datetime");
            entity.Property(e => e.PassHash).HasMaxLength(200);
            entity.Property(e => e.UserId)
                .HasMaxLength(50)
                .HasColumnName("UserID");
        });

        modelBuilder.Entity<AisbB063Auction>(entity =>
        {
            entity.HasKey(e => e.Guid).HasName("PK__AISB_B06__15B69B8EAED9B563");

            entity.ToTable("AISB_B063_Auction");

            entity.Property(e => e.Guid)
                .HasMaxLength(50)
                .HasColumnName("GUID");
            entity.Property(e => e.AlamatPembeli)
                .HasMaxLength(50)
                .HasColumnName("Alamat_Pembeli");
            entity.Property(e => e.AmaunPinjaman)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("Amaun_Pinjaman");
            entity.Property(e => e.BilanganSandaranYangDijual)
                .HasMaxLength(50)
                .HasColumnName("Bilangan_Sandaran_Yang_Dijual");
            entity.Property(e => e.CaraBayaran)
                .HasMaxLength(50)
                .HasColumnName("Cara_Bayaran");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Created_At");
            entity.Property(e => e.FiPelelong)
                .HasMaxLength(50)
                .HasColumnName("Fi_Pelelong");
            entity.Property(e => e.Gst)
                .HasMaxLength(50)
                .HasColumnName("GST");
            entity.Property(e => e.GuidTicket)
                .HasMaxLength(50)
                .HasColumnName("GUID_Ticket");
            entity.Property(e => e.Jantina).HasMaxLength(50);
            entity.Property(e => e.JumlahJualan)
                .HasMaxLength(50)
                .HasColumnName("Jumlah_Jualan");
            entity.Property(e => e.Kerakyatan).HasMaxLength(50);
            entity.Property(e => e.KeuntunganYangPatutDibayarFaedah)
                .HasMaxLength(50)
                .HasColumnName("Keuntungan_Yang_Patut_Dibayar_Faedah");
            entity.Property(e => e.KeuntunganYangPatutDibayarLain)
                .HasMaxLength(50)
                .HasColumnName("Keuntungan_Yang_Patut_Dibayar_Lain");
            entity.Property(e => e.KeuntunganYangPatutDikenakanFaedah)
                .HasMaxLength(50)
                .HasColumnName("Keuntungan_Yang_Patut_Dikenakan_Faedah");
            entity.Property(e => e.KeuntunganYangPatutDikenakanLain)
                .HasMaxLength(50)
                .HasColumnName("Keuntungan_Yang_Patut_Dikenakan_Lain");
            entity.Property(e => e.LebihanDiserahBalikKepadaPemajak)
                .HasMaxLength(50)
                .HasColumnName("Lebihan_Diserah_Balik_Kepada_Pemajak");
            entity.Property(e => e.LebihanJualanLelongDiTanganPpg)
                .HasMaxLength(50)
                .HasColumnName("Lebihan_Jualan_Lelong_Di_Tangan_PPG");
            entity.Property(e => e.LebihanJualanLelongYangDiserahBalikKepadaPemajak)
                .HasMaxLength(50)
                .HasColumnName("Lebihan_Jualan_Lelong_Yang_Diserah_Balik_Kepada_Pemajak");
            entity.Property(e => e.LebihanJualanLelongYangTidakDituntutOlehPemajak)
                .HasMaxLength(50)
                .HasColumnName("Lebihan_Jualan_Lelong_Yang_Tidak_Dituntut_Oleh_Pemajak");
            entity.Property(e => e.NamaPembeli)
                .HasMaxLength(50)
                .HasColumnName("Nama_Pembeli");
            entity.Property(e => e.NamaPenggadai)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Nama_Penggadai");
            entity.Property(e => e.NoAkaunPenggadai)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("No_Akaun_Penggadai");
            entity.Property(e => e.NoKadPengenalan)
                .HasMaxLength(50)
                .HasColumnName("No_Kad_Pengenalan");
            entity.Property(e => e.NoKadPengenalanPenggadai)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("No_Kad_Pengenalan_Penggadai");
            entity.Property(e => e.NumberRujukan)
                .HasMaxLength(50)
                .HasColumnName("Number_Rujukan");
            entity.Property(e => e.PerihalSandaranYangDijual)
                .HasMaxLength(50)
                .HasColumnName("Perihal_Sandaran_Yang_Dijual");
            entity.Property(e => e.Schedule).HasMaxLength(50);
            entity.Property(e => e.TarikhGadai).HasColumnName("Tarikh_Gadai");
            entity.Property(e => e.TarikhJualanLelong).HasColumnName("Tarikh_Jualan_Lelong");
            entity.Property(e => e.TarikhLahir).HasColumnName("Tarikh_Lahir");
            entity.Property(e => e.TarikhLuput).HasColumnName("Tarikh_Luput");
        });

        modelBuilder.Entity<AisbB063Berat>(entity =>
        {
            entity.HasKey(e => e.Guid).HasName("PK__AISB_B06__15B69B8E7902C5FD");

            entity.ToTable("AISB_B063_Berat");

            entity.Property(e => e.Guid)
                .HasMaxLength(50)
                .HasColumnName("GUID");
            entity.Property(e => e.BeratEmas375)
                .HasColumnType("decimal(10, 3)")
                .HasColumnName("Berat_Emas375");
            entity.Property(e => e.BeratEmas585)
                .HasColumnType("decimal(10, 3)")
                .HasColumnName("Berat_Emas585");
            entity.Property(e => e.BeratEmas750)
                .HasColumnType("decimal(10, 3)")
                .HasColumnName("Berat_Emas750");
            entity.Property(e => e.BeratEmas835)
                .HasColumnType("decimal(10, 3)")
                .HasColumnName("Berat_Emas835");
            entity.Property(e => e.BeratEmas875)
                .HasColumnType("decimal(10, 3)")
                .HasColumnName("Berat_Emas875");
            entity.Property(e => e.BeratEmas916)
                .HasColumnType("decimal(10, 3)")
                .HasColumnName("Berat_Emas916");
            entity.Property(e => e.BeratEmas950)
                .HasColumnType("decimal(10, 3)")
                .HasColumnName("Berat_Emas950");
            entity.Property(e => e.BeratEmas999)
                .HasColumnType("decimal(10, 3)")
                .HasColumnName("Berat_Emas999");
            entity.Property(e => e.BeratLain)
                .HasColumnType("decimal(10, 3)")
                .HasColumnName("Berat_Lain");
            entity.Property(e => e.BeratLkEmas375)
                .HasColumnType("decimal(10, 3)")
                .HasColumnName("BeratLK_Emas375");
            entity.Property(e => e.BeratLkEmas585)
                .HasColumnType("decimal(10, 3)")
                .HasColumnName("BeratLK_Emas585");
            entity.Property(e => e.BeratLkEmas750)
                .HasColumnType("decimal(10, 3)")
                .HasColumnName("BeratLK_Emas750");
            entity.Property(e => e.BeratLkEmas835)
                .HasColumnType("decimal(10, 3)")
                .HasColumnName("BeratLK_Emas835");
            entity.Property(e => e.BeratLkEmas875)
                .HasColumnType("decimal(10, 3)")
                .HasColumnName("BeratLK_Emas875");
            entity.Property(e => e.BeratLkEmas916)
                .HasColumnType("decimal(10, 3)")
                .HasColumnName("BeratLK_Emas916");
            entity.Property(e => e.BeratLkEmas950)
                .HasColumnType("decimal(10, 3)")
                .HasColumnName("BeratLK_Emas950");
            entity.Property(e => e.BeratLkEmas999)
                .HasColumnType("decimal(10, 3)")
                .HasColumnName("BeratLK_Emas999");
            entity.Property(e => e.BeratLkLain)
                .HasColumnType("decimal(10, 3)")
                .HasColumnName("BeratLK_Lain");
            entity.Property(e => e.BeratLkPerak925)
                .HasColumnType("decimal(10, 3)")
                .HasColumnName("BeratLK_Perak925");
            entity.Property(e => e.BeratPerak925)
                .HasColumnType("decimal(10, 3)")
                .HasColumnName("Berat_Perak925");
            entity.Property(e => e.TicketGuid)
                .HasMaxLength(50)
                .HasColumnName("Ticket_GUID");

            entity.HasOne(d => d.Ticket).WithMany(p => p.AisbB063Berats)
                .HasForeignKey(d => d.TicketGuid)
                .HasConstraintName("FK_Berat");
        });

        modelBuilder.Entity<AisbB063HargaHarian>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__AISB_B06__3214EC07497A2ECA");

            entity.ToTable("AISB_B063_Harga_Harian");

            entity.Property(e => e.BeratEmas375)
                .HasColumnType("decimal(10, 3)")
                .HasColumnName("Berat_Emas375");
            entity.Property(e => e.BeratEmas585)
                .HasColumnType("decimal(10, 3)")
                .HasColumnName("Berat_Emas585");
            entity.Property(e => e.BeratEmas750)
                .HasColumnType("decimal(10, 3)")
                .HasColumnName("Berat_Emas750");
            entity.Property(e => e.BeratEmas835)
                .HasColumnType("decimal(10, 3)")
                .HasColumnName("Berat_Emas835");
            entity.Property(e => e.BeratEmas875)
                .HasColumnType("decimal(10, 3)")
                .HasColumnName("Berat_Emas875");
            entity.Property(e => e.BeratEmas916)
                .HasColumnType("decimal(10, 3)")
                .HasColumnName("Berat_Emas916");
            entity.Property(e => e.BeratEmas950)
                .HasColumnType("decimal(10, 3)")
                .HasColumnName("Berat_Emas950");
            entity.Property(e => e.BeratEmas999)
                .HasColumnType("decimal(10, 3)")
                .HasColumnName("Berat_Emas999");
            entity.Property(e => e.BeratLain)
                .HasColumnType("decimal(10, 3)")
                .HasColumnName("Berat_Lain");
            entity.Property(e => e.BeratPerak925)
                .HasColumnType("decimal(10, 3)")
                .HasColumnName("Berat_Perak925");
        });

        modelBuilder.Entity<AisbB063PluginVer>(entity =>
        {
            entity.HasKey(e => e.Guid).HasName("PK__AISB_B06__15B69B8E882ED087");

            entity.ToTable("AISB_B063_Plugin_Ver");

            entity.Property(e => e.Guid)
                .HasMaxLength(50)
                .HasColumnName("GUID");
            entity.Property(e => e.Name).HasMaxLength(50);
            entity.Property(e => e.PluginVersion)
                .HasMaxLength(14)
                .HasColumnName("Plugin_Version");
        });

        modelBuilder.Entity<AisbB063Redemption>(entity =>
        {
            entity.HasKey(e => e.Guid).HasName("PK__AISB_B06__A2B5777C5D87AB2C");

            entity.ToTable("AISB_B063_Redemption");

            entity.Property(e => e.Guid).HasMaxLength(50);
            entity.Property(e => e.AlamatPenebus).HasColumnName("Alamat_Penebus");
            entity.Property(e => e.AmaunPinjaman)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("Amaun_Pinjaman");
            entity.Property(e => e.Bangsa).HasMaxLength(50);
            entity.Property(e => e.Bangsa2)
                .HasMaxLength(50)
                .HasColumnName("Bangsa_2");
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Created_At");
            entity.Property(e => e.FaedahDikenakan)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("Faedah_Dikenakan");
            entity.Property(e => e.Jantina).HasMaxLength(10);
            entity.Property(e => e.JumlahKeseluruhanBayaran)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("Jumlah_Keseluruhan_Bayaran");
            entity.Property(e => e.Kerakyatan).HasMaxLength(50);
            entity.Property(e => e.KeuntunganBulanan)
                .HasColumnType("decimal(6, 2)")
                .HasColumnName("Keuntungan_Bulanan");
            entity.Property(e => e.NamaPenebus)
                .HasMaxLength(100)
                .HasColumnName("Nama_Penebus");
            entity.Property(e => e.NoAkaunPenebus)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("No_Akaun_Penebus");
            entity.Property(e => e.NoKadPengenalanPenebus)
                .HasMaxLength(20)
                .HasColumnName("No_Kad_Pengenalan_Penebus");
            entity.Property(e => e.NoPenebusan)
                .HasMaxLength(30)
                .HasColumnName("No_Penebusan");
            entity.Property(e => e.NoSiri)
                .HasMaxLength(30)
                .HasColumnName("No_Siri");
            entity.Property(e => e.PerihalSadaran).HasColumnName("Perihal_Sadaran");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TarikhGadai).HasColumnName("Tarikh_Gadai");
            entity.Property(e => e.TarikhLahir).HasColumnName("Tarikh_Lahir");
            entity.Property(e => e.TarikhPenebus).HasColumnName("Tarikh_Penebus");
            entity.Property(e => e.TicketGuid)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Ticket_Guid");
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Updated_At");
        });

        modelBuilder.Entity<AisbB063Setting>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_AISB_B063_Setting_X");

            entity.ToTable("AISB_B063_Setting");

            entity.Property(e => e.Id)
                .HasMaxLength(50)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Value).HasColumnType("text");
        });

        modelBuilder.Entity<AisbB063StatusHistory>(entity =>
        {
            entity.HasKey(e => e.Guid).HasName("PK__AISB_B06__15B69B8EF55CE689");

            entity.ToTable("AISB_B063_Status_History");

            entity.Property(e => e.Guid)
                .HasMaxLength(50)
                .HasColumnName("GUID");
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Created_At");
            entity.Property(e => e.MasaPenebus).HasColumnName("Masa_Penebus");
            entity.Property(e => e.ParentGuid)
                .HasMaxLength(50)
                .HasColumnName("ParentGUID");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TarikhGadai).HasColumnName("Tarikh_Gadai");
            entity.Property(e => e.TarikhLuput).HasColumnName("Tarikh_Luput");
            entity.Property(e => e.TarikhLuputExtended).HasColumnName("Tarikh_Luput_Extended");
        });

        modelBuilder.Entity<AisbB063Ticket>(entity =>
        {
            entity.HasKey(e => e.Guid).HasName("PK__AISB_B06__15B69B8E0EA5658D");

            entity.ToTable("AISB_B063_Tickets");

            entity.Property(e => e.Guid)
                .HasMaxLength(50)
                .HasColumnName("GUID");
            entity.Property(e => e.AlamatPemilik)
                .HasColumnType("text")
                .HasColumnName("Alamat_Pemilik");
            entity.Property(e => e.AlamatPenggadai)
                .HasColumnType("text")
                .HasColumnName("Alamat_Penggadai");
            entity.Property(e => e.AlamatSuratMenyurat)
                .HasColumnType("text")
                .HasColumnName("Alamat_Surat_Menyurat");
            entity.Property(e => e.AmaunPinjaman)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("Amaun_Pinjaman");
            entity.Property(e => e.AnggaranBerat)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("Anggaran_Berat");
            entity.Property(e => e.ArPaymentDocNo).HasMaxLength(30);
            entity.Property(e => e.ArRefundDocNo).HasMaxLength(30);
            entity.Property(e => e.Bangsa1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Bangsa2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BangsaPemilik1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Bangsa_Pemilik1");
            entity.Property(e => e.BangsaPemilik2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Bangsa_Pemilik2");
            entity.Property(e => e.Berat).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.BernilaiBersihTinggi)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Bernilai_Bersih_Tinggi");
            entity.Property(e => e.BilanganSadaran).HasColumnName("Bilangan_Sadaran");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Created_At");
            entity.Property(e => e.Insurance).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.IvDocNo).HasMaxLength(30);
            entity.Property(e => e.Jantina)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.JantinaPemilik)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Jantina_Pemilik");
            entity.Property(e => e.JenisPerjaanMajikan)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Jenis_Perjaan_Majikan");
            entity.Property(e => e.Kerakyatan)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.KerakyatanPemilik)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Kerakyatan_Pemilik");
            entity.Property(e => e.KeuntunganBulanan)
                .HasColumnType("decimal(6, 2)")
                .HasColumnName("Keuntungan_Bulanan");
            entity.Property(e => e.MasaPenebusan).HasColumnName("Masa_Penebusan");
            entity.Property(e => e.NamaMajikan)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Nama_Majikan");
            entity.Property(e => e.NamaPemilik)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Nama_Pemilik");
            entity.Property(e => e.NamaPenggadai)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Nama_Penggadai");
            entity.Property(e => e.NilaiSandaran)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("Nilai_Sandaran");
            entity.Property(e => e.NoAkaunPenggadai)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("No_Akaun_Penggadai");
            entity.Property(e => e.NoFile)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("No_File");
            entity.Property(e => e.NoKadPengenalan)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("No_Kad_Pengenalan");
            entity.Property(e => e.NoKadPengenalanPemilik)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("No_Kad_Pengenalan_Pemilik");
            entity.Property(e => e.NoSiri)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("No_Siri");
            entity.Property(e => e.NomborTelefon1)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Nombor_Telefon1");
            entity.Property(e => e.NomborTelefon2)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Nombor_Telefon2");
            entity.Property(e => e.NomborTelefon3)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Nombor_Telefon3");
            entity.Property(e => e.PerihalSadaran)
                .HasColumnType("text")
                .HasColumnName("Perihal_Sadaran");
            entity.Property(e => e.RenewFromSiri)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Renew_From_Siri");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TarikhGadai).HasColumnName("Tarikh_Gadai");
            entity.Property(e => e.TarikhHarga).HasColumnName("Tarikh_Harga");
            entity.Property(e => e.TarikhLahir).HasColumnName("Tarikh_Lahir");
            entity.Property(e => e.TarikhLahirPemilik).HasColumnName("Tarikh_Lahir_Pemilik");
            entity.Property(e => e.TarikhLuput).HasColumnName("Tarikh_Luput");
            entity.Property(e => e.Tfs)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TFS");
            entity.Property(e => e.TujuanTransaksi)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("Tujuan_Transaksi");
        });

        modelBuilder.Entity<Aorprocessing>(entity =>
        {
            entity.HasKey(e => e.DocKey).HasName("PK_AORProcessing_DocKey");

            entity.ToTable("AORProcessing");

            entity.Property(e => e.DocKey).ValueGeneratedNever();
            entity.Property(e => e.AodocKey).HasColumnName("AODocKey");
            entity.Property(e => e.AodocNo)
                .HasMaxLength(30)
                .HasColumnName("AODocNo");
            entity.Property(e => e.AodtlKey).HasColumnName("AODtlKey");
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.DeliveryDate).HasColumnType("datetime");
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.EstimatedDeliveryDate).HasMaxLength(20);
            entity.Property(e => e.FromDocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.Remark).HasMaxLength(100);
            entity.Property(e => e.RequestQty).HasColumnType("decimal(25, 8)");

            entity.HasOne(d => d.CreatedUser).WithMany(p => p.AorprocessingCreatedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.CreatedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AORProcessing_CreatedUserID");

            entity.HasOne(d => d.DeptNoNavigation).WithMany(p => p.Aorprocessings)
                .HasForeignKey(d => d.DeptNo)
                .HasConstraintName("FK_AORProcessing_DeptNo");

            entity.HasOne(d => d.ItemCodeNavigation).WithMany(p => p.Aorprocessings)
                .HasPrincipalKey(p => p.ItemCode)
                .HasForeignKey(d => d.ItemCode)
                .HasConstraintName("FK_AORProcessing_ItemCode");

            entity.HasOne(d => d.LastModifiedUser).WithMany(p => p.AorprocessingLastModifiedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.LastModifiedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AORProcessing_LastModifiedUserID");

            entity.HasOne(d => d.LocationNavigation).WithMany(p => p.Aorprocessings)
                .HasPrincipalKey(p => p.Location1)
                .HasForeignKey(d => d.Location)
                .HasConstraintName("FK_AORProcessing_Location");

            entity.HasOne(d => d.ProjNoNavigation).WithMany(p => p.Aorprocessings)
                .HasForeignKey(d => d.ProjNo)
                .HasConstraintName("FK_AORProcessing_ProjNo");
        });

        modelBuilder.Entity<Apcn>(entity =>
        {
            entity.HasKey(e => e.DocKey).HasName("PK_APCN_DocKey");

            entity.ToTable("APCN", tb => tb.HasTrigger("UpdateAPCNChangeCount"));

            entity.HasIndex(e => e.DocNo, "IX_APCN_DocNo").IsUnique();

            entity.HasIndex(e => new { e.DocStatus, e.ExpiryTimeStamp }, "IX_APCN_DocStatus_ExpiryTimeStamp");

            entity.HasIndex(e => new { e.DocStatus, e.ExpiryTimeStamp, e.DocKey }, "IX_APCN_DocStatus_ExpiryTimeStamp_DocKey");

            entity.Property(e => e.DocKey).ValueGeneratedNever();
            entity.Property(e => e.BranchCode).HasMaxLength(20);
            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Cntype)
                .HasMaxLength(12)
                .HasColumnName("CNType");
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.CreditorCode).HasMaxLength(12);
            entity.Property(e => e.CurrencyCode).HasMaxLength(5);
            entity.Property(e => e.CurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.Description).HasMaxLength(80);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocDate2).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.DocStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EinvoiceSelfBilledDocNo)
                .HasMaxLength(30)
                .HasColumnName("EInvoiceSelfBilledDocNo");
            entity.Property(e => e.EinvoiceStatus)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceStatus");
            entity.Property(e => e.EinvoiceSubmitDocType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("EInvoiceSubmitDocType");
            entity.Property(e => e.EinvoiceUuid)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceUuid");
            entity.Property(e => e.EinvoiceValidatedDateTime)
                .HasColumnType("datetime")
                .HasColumnName("EInvoiceValidatedDateTime");
            entity.Property(e => e.EinvoiceValidationLink)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("EInvoiceValidationLink");
            entity.Property(e => e.ExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ExpiryTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.GltrxId).HasColumnName("GLTrxID");
            entity.Property(e => e.InclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("F")
                .IsFixedLength();
            entity.Property(e => e.IsJournal)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Jekey).HasColumnName("JEKey");
            entity.Property(e => e.JournalType).HasMaxLength(10);
            entity.Property(e => e.KnockOffAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.LocalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTotal2).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalWithholdingTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalWithholdingVat)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("LocalWithholdingVAT");
            entity.Property(e => e.NetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Reason).HasMaxLength(80);
            entity.Property(e => e.Ref).HasMaxLength(40);
            entity.Property(e => e.RefNo2).HasMaxLength(30);
            entity.Property(e => e.ReferCajedocKey).HasColumnName("ReferCAJEDocKey");
            entity.Property(e => e.ReferCajedocNo)
                .HasMaxLength(30)
                .HasColumnName("ReferCAJEDocNo");
            entity.Property(e => e.RefundAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.RevalueRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.SourceType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.SupplierCnno)
                .HasMaxLength(30)
                .HasColumnName("SupplierCNNo");
            entity.Property(e => e.SupplierInvoiceNo).HasMaxLength(100);
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyWithholdingTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyWithholdingVat)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("TaxCurrencyWithholdingVAT");
            entity.Property(e => e.TaxDate).HasColumnType("datetime");
            entity.Property(e => e.TaxDocNo).HasMaxLength(20);
            entity.Property(e => e.TaxEntityId).HasColumnName("TaxEntityID");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ToTaxCurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.Total).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Total2).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalRevalueGainLoss).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.WithholdingTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.WithholdingVat)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("WithholdingVAT");

            entity.HasOne(d => d.CntypeNavigation).WithMany(p => p.Apcns)
                .HasPrincipalKey(p => p.Cntype1)
                .HasForeignKey(d => d.Cntype)
                .HasConstraintName("FK_APCN_CNType");

            entity.HasOne(d => d.CreatedUser).WithMany(p => p.ApcnCreatedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.CreatedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_APCN_CreatedUserID");

            entity.HasOne(d => d.CreditorCodeNavigation).WithMany(p => p.Apcns)
                .HasForeignKey(d => d.CreditorCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_APCN_CreditorCode");

            entity.HasOne(d => d.CurrencyCodeNavigation).WithMany(p => p.Apcns)
                .HasForeignKey(d => d.CurrencyCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_APCN_CurrencyCode");

            entity.HasOne(d => d.JournalTypeNavigation).WithMany(p => p.Apcns)
                .HasPrincipalKey(p => p.JournalType)
                .HasForeignKey(d => d.JournalType)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_APCN_JournalType");

            entity.HasOne(d => d.LastModifiedUser).WithMany(p => p.ApcnLastModifiedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.LastModifiedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_APCN_LastModifiedUserID");

            entity.HasOne(d => d.TaxEntity).WithMany(p => p.Apcns)
                .HasForeignKey(d => d.TaxEntityId)
                .HasConstraintName("FK_APCN_TaxEntityID");

            entity.HasOne(d => d.Branch).WithMany(p => p.Apcns)
                .HasPrincipalKey(p => new { p.AccNo, p.BranchCode })
                .HasForeignKey(d => new { d.CreditorCode, d.BranchCode })
                .HasConstraintName("FK_APCN_BranchCode");
        });

        modelBuilder.Entity<Apcndtl>(entity =>
        {
            entity.HasKey(e => e.DtlKey).HasName("PK_APCNDTL_DtlKey");

            entity.ToTable("APCNDTL");

            entity.HasIndex(e => e.DocKey, "IX_APCNDTL_DocKey");

            entity.Property(e => e.DtlKey).ValueGeneratedNever();
            entity.Property(e => e.AccNo).HasMaxLength(12);
            entity.Property(e => e.Amount).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.KnockOffAmount).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalNetAmount).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalSubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxAdjustment).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalUnappliedAmount).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.NetAmount).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.SourceDtlType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SupplyPurchase)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TariffCode).HasMaxLength(12);
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxAdjustment).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCode).HasMaxLength(14);
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxPermitNo).HasMaxLength(20);
            entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ToAccountRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.UnappliedAmount).HasColumnType("decimal(19, 2)");

            entity.HasOne(d => d.AccNoNavigation).WithMany(p => p.Apcndtls)
                .HasForeignKey(d => d.AccNo)
                .HasConstraintName("FK_APCNDTL_AccNo");

            entity.HasOne(d => d.DeptNoNavigation).WithMany(p => p.Apcndtls)
                .HasForeignKey(d => d.DeptNo)
                .HasConstraintName("FK_APCNDTL_DeptNo");

            entity.HasOne(d => d.ProjNoNavigation).WithMany(p => p.Apcndtls)
                .HasForeignKey(d => d.ProjNo)
                .HasConstraintName("FK_APCNDTL_ProjNo");

            entity.HasOne(d => d.TariffCodeNavigation).WithMany(p => p.Apcndtls)
                .HasPrincipalKey(p => p.TariffCode)
                .HasForeignKey(d => d.TariffCode)
                .HasConstraintName("FK_APCNDTL_TariffCode");

            entity.HasOne(d => d.TaxCodeNavigation).WithMany(p => p.Apcndtls)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.TaxCode)
                .HasConstraintName("FK_APCNDTL_TaxCode");
        });

        modelBuilder.Entity<ApcnknockOff>(entity =>
        {
            entity.HasKey(e => e.KnockOffKey).HasName("PK_APCNKnockOff_KnockOffKey");

            entity.ToTable("APCNKnockOff");

            entity.HasIndex(e => e.DocKey, "IX_APCNKnockOff_DocKey");

            entity.Property(e => e.KnockOffKey).ValueGeneratedNever();
            entity.Property(e => e.Amount).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.FcrevalueKey).HasColumnName("FCRevalueKey");
            entity.Property(e => e.GainLossDate).HasColumnType("datetime");
            entity.Property(e => e.KnockOffDocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.Revalue)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.UseProjDept)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.DeptNoNavigation).WithMany(p => p.ApcnknockOffs)
                .HasForeignKey(d => d.DeptNo)
                .HasConstraintName("FK_APCNKnockOff_DeptNo");

            entity.HasOne(d => d.ProjNoNavigation).WithMany(p => p.ApcnknockOffs)
                .HasForeignKey(d => d.ProjNo)
                .HasConstraintName("FK_APCNKnockOff_ProjNo");
        });

        modelBuilder.Entity<ApcnknockOffDetail>(entity =>
        {
            entity.HasKey(e => e.AutoKey).HasName("PK_APCNKnockOffDetail_AutoKey");

            entity.ToTable("APCNKnockOffDetail");

            entity.HasIndex(e => new { e.KnockOffKey, e.KnockOffDtlKey }, "UIX_APCNKnockOffDetail_KnockOffKey_KnockOffDtlKey").IsUnique();

            entity.Property(e => e.Amount).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalCnamt)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("LocalCNAmt");
            entity.Property(e => e.LocalInvoiceAmt).HasColumnType("decimal(19, 2)");
        });

        modelBuilder.Entity<ApcontraKnockOff>(entity =>
        {
            entity.HasKey(e => e.KnockOffKey).HasName("PK_APContraKnockOff_KnockOffKey");

            entity.ToTable("APContraKnockOff");

            entity.HasIndex(e => e.DocKey, "IX_APContraKnockOff_DocKey");

            entity.Property(e => e.KnockOffKey).ValueGeneratedNever();
            entity.Property(e => e.Amount).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.FcrevalueKey).HasColumnName("FCRevalueKey");
            entity.Property(e => e.GainLossDate).HasColumnType("datetime");
            entity.Property(e => e.KnockOffDocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.Revalue)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.UseProjDept)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.DeptNoNavigation).WithMany(p => p.ApcontraKnockOffs)
                .HasForeignKey(d => d.DeptNo)
                .HasConstraintName("FK_APContraKnockOff_DeptNo");

            entity.HasOne(d => d.ProjNoNavigation).WithMany(p => p.ApcontraKnockOffs)
                .HasForeignKey(d => d.ProjNo)
                .HasConstraintName("FK_APContraKnockOff_ProjNo");
        });

        modelBuilder.Entity<ApcontraKnockOffDetail>(entity =>
        {
            entity.HasKey(e => e.AutoKey).HasName("PK_APContraKnockOffDetail_AutoKey");

            entity.ToTable("APContraKnockOffDetail");

            entity.HasIndex(e => new { e.KnockOffKey, e.KnockOffDtlKey }, "UIX_APContraKnockOffDetail_KnockOffKey_KnockOffDtlKey").IsUnique();

            entity.Property(e => e.Amount).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalContraAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalInvoiceAmt).HasColumnType("decimal(19, 2)");
        });

        modelBuilder.Entity<Apdeposit>(entity =>
        {
            entity.HasKey(e => e.DocKey).HasName("PK_APDeposit_DocKey");

            entity.ToTable("APDeposit", tb => tb.HasTrigger("UpdateAPDepositChangeCount"));

            entity.HasIndex(e => e.DocNo, "IX_APDeposit_DocNo").IsUnique();

            entity.Property(e => e.DocKey).ValueGeneratedNever();
            entity.Property(e => e.Attention).HasMaxLength(40);
            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Cbkey).HasColumnName("CBKey");
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.CreditorCode).HasMaxLength(12);
            entity.Property(e => e.CreditorName).HasMaxLength(100);
            entity.Property(e => e.CurrencyCode).HasMaxLength(5);
            entity.Property(e => e.DepositPaymentMethod).HasMaxLength(20);
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Description).HasMaxLength(80);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.Fax1).HasMaxLength(25);
            entity.Property(e => e.GltrxId).HasColumnName("GLTrxID");
            entity.Property(e => e.InvAddr1).HasMaxLength(40);
            entity.Property(e => e.InvAddr2).HasMaxLength(40);
            entity.Property(e => e.InvAddr3).HasMaxLength(40);
            entity.Property(e => e.InvAddr4).HasMaxLength(40);
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.Outstanding).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.PaymentAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Phone1).HasMaxLength(25);
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.SourceType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.ToDepositRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.ToHomeRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.TransferedAmt).HasColumnType("decimal(19, 2)");

            entity.HasOne(d => d.CreatedUser).WithMany(p => p.ApdepositCreatedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.CreatedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_APDeposit_CreatedUserID");

            entity.HasOne(d => d.CreditorCodeNavigation).WithMany(p => p.Apdeposits)
                .HasForeignKey(d => d.CreditorCode)
                .HasConstraintName("FK_APDeposit_CreditorCode");

            entity.HasOne(d => d.CurrencyCodeNavigation).WithMany(p => p.Apdeposits)
                .HasForeignKey(d => d.CurrencyCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_APDeposit_CurrencyCode");

            entity.HasOne(d => d.DepositPaymentMethodNavigation).WithMany(p => p.Apdeposits)
                .HasPrincipalKey(p => p.PaymentMethod1)
                .HasForeignKey(d => d.DepositPaymentMethod)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_APDeposit_DepositPaymentMethod");

            entity.HasOne(d => d.DeptNoNavigation).WithMany(p => p.Apdeposits)
                .HasForeignKey(d => d.DeptNo)
                .HasConstraintName("FK_APDeposit_DeptNo");

            entity.HasOne(d => d.LastModifiedUser).WithMany(p => p.ApdepositLastModifiedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.LastModifiedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_APDeposit_LastModifiedUserID");

            entity.HasOne(d => d.ProjNoNavigation).WithMany(p => p.Apdeposits)
                .HasForeignKey(d => d.ProjNo)
                .HasConstraintName("FK_APDeposit_ProjNo");
        });

        modelBuilder.Entity<ApdepositForfeit>(entity =>
        {
            entity.HasKey(e => e.ForfeitKey).HasName("PK_APDepositForfeit_ForfeitKey");

            entity.ToTable("APDepositForfeit");

            entity.Property(e => e.ForfeitKey).ValueGeneratedNever();
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.Description).HasMaxLength(40);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.ForfeitedAccNo).HasMaxLength(12);
            entity.Property(e => e.ForfeitedAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");

            entity.HasOne(d => d.CreatedUser).WithMany(p => p.ApdepositForfeitCreatedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.CreatedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_APDepositForfeit_CreatedUserID");

            entity.HasOne(d => d.ForfeitedAccNoNavigation).WithMany(p => p.ApdepositForfeits)
                .HasForeignKey(d => d.ForfeitedAccNo)
                .HasConstraintName("FK_APDepositForfeit_ForfeitedAccNo");

            entity.HasOne(d => d.LastModifiedUser).WithMany(p => p.ApdepositForfeitLastModifiedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.LastModifiedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_APDepositForfeit_LastModifiedUserID");
        });

        modelBuilder.Entity<ApdepositPaymentDtl>(entity =>
        {
            entity.HasKey(e => e.DtlKey).HasName("PK_APDepositPaymentDTL_DtlKey");

            entity.ToTable("APDepositPaymentDTL");

            entity.Property(e => e.DtlKey).ValueGeneratedNever();
            entity.Property(e => e.BankCharge).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.BankChargeDeptNo).HasMaxLength(10);
            entity.Property(e => e.BankChargeProjNo).HasMaxLength(10);
            entity.Property(e => e.BankChargeTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.BankChargeTaxCode).HasMaxLength(14);
            entity.Property(e => e.BankChargeTaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.BankChargeTaxRefNo).HasMaxLength(30);
            entity.Property(e => e.ChequeNo).HasMaxLength(30);
            entity.Property(e => e.IsRchq)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IsRCHQ");
            entity.Property(e => e.PaymentAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.PaymentBy).HasMaxLength(20);
            entity.Property(e => e.PaymentMethod).HasMaxLength(20);
            entity.Property(e => e.Rchqdate)
                .HasColumnType("datetime")
                .HasColumnName("RCHQDate");
            entity.Property(e => e.ToBankRate).HasColumnType("decimal(19, 12)");

            entity.HasOne(d => d.BankChargeDeptNoNavigation).WithMany(p => p.ApdepositPaymentDtls)
                .HasForeignKey(d => d.BankChargeDeptNo)
                .HasConstraintName("FK_APDepositPaymentDTL_BankChargeDeptNo");

            entity.HasOne(d => d.BankChargeProjNoNavigation).WithMany(p => p.ApdepositPaymentDtls)
                .HasForeignKey(d => d.BankChargeProjNo)
                .HasConstraintName("FK_APDepositPaymentDTL_BankChargeProjNo");

            entity.HasOne(d => d.BankChargeTaxCodeNavigation).WithMany(p => p.ApdepositPaymentDtls)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.BankChargeTaxCode)
                .HasConstraintName("FK_APDepositPaymentDTL_BankChargeTaxCode");

            entity.HasOne(d => d.PaymentMethodNavigation).WithMany(p => p.ApdepositPaymentDtls)
                .HasPrincipalKey(p => p.PaymentMethod1)
                .HasForeignKey(d => d.PaymentMethod)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_APDepositPaymentDTL_PaymentMethod");
        });

        modelBuilder.Entity<ApdepositRefund>(entity =>
        {
            entity.HasKey(e => e.RefundKey).HasName("PK_APDepositRefund_RefundKey");

            entity.ToTable("APDepositRefund");

            entity.HasIndex(e => e.DocNo, "IX_APDepositRefund_DocNo").IsUnique();

            entity.Property(e => e.RefundKey).ValueGeneratedNever();
            entity.Property(e => e.Cbkey).HasColumnName("CBKey");
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.Description).HasMaxLength(40);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.Name).HasMaxLength(100);
            entity.Property(e => e.RefundAmt).HasColumnType("decimal(19, 2)");

            entity.HasOne(d => d.CreatedUser).WithMany(p => p.ApdepositRefundCreatedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.CreatedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_APDepositRefund_CreatedUserID");

            entity.HasOne(d => d.LastModifiedUser).WithMany(p => p.ApdepositRefundLastModifiedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.LastModifiedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_APDepositRefund_LastModifiedUserID");
        });

        modelBuilder.Entity<ApdepositRefundPaymentDtl>(entity =>
        {
            entity.HasKey(e => e.DtlKey).HasName("PK_APDepositRefundPaymentDTL_DtlKey");

            entity.ToTable("APDepositRefundPaymentDTL");

            entity.Property(e => e.DtlKey).ValueGeneratedNever();
            entity.Property(e => e.BankCharge).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.BankChargeDeptNo).HasMaxLength(10);
            entity.Property(e => e.BankChargeProjNo).HasMaxLength(10);
            entity.Property(e => e.BankChargeTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.BankChargeTaxCode).HasMaxLength(14);
            entity.Property(e => e.BankChargeTaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.BankChargeTaxRefNo).HasMaxLength(30);
            entity.Property(e => e.ChequeNo).HasMaxLength(30);
            entity.Property(e => e.IsRchq)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IsRCHQ");
            entity.Property(e => e.PaymentAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.PaymentBy).HasMaxLength(20);
            entity.Property(e => e.PaymentMethod).HasMaxLength(20);
            entity.Property(e => e.Rchqdate)
                .HasColumnType("datetime")
                .HasColumnName("RCHQDate");
            entity.Property(e => e.ToBankRate).HasColumnType("decimal(19, 12)");

            entity.HasOne(d => d.BankChargeDeptNoNavigation).WithMany(p => p.ApdepositRefundPaymentDtls)
                .HasForeignKey(d => d.BankChargeDeptNo)
                .HasConstraintName("FK_APDepositRefundPaymentDTL_BankChargeDeptNo");

            entity.HasOne(d => d.BankChargeProjNoNavigation).WithMany(p => p.ApdepositRefundPaymentDtls)
                .HasForeignKey(d => d.BankChargeProjNo)
                .HasConstraintName("FK_APDepositRefundPaymentDTL_BankChargeProjNo");

            entity.HasOne(d => d.BankChargeTaxCodeNavigation).WithMany(p => p.ApdepositRefundPaymentDtls)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.BankChargeTaxCode)
                .HasConstraintName("FK_APDepositRefundPaymentDTL_BankChargeTaxCode");

            entity.HasOne(d => d.PaymentMethodNavigation).WithMany(p => p.ApdepositRefundPaymentDtls)
                .HasPrincipalKey(p => p.PaymentMethod1)
                .HasForeignKey(d => d.PaymentMethod)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_APDepositRefundPaymentDTL_PaymentMethod");
        });

        modelBuilder.Entity<Apdn>(entity =>
        {
            entity.HasKey(e => e.DocKey).HasName("PK_APDN_DocKey");

            entity.ToTable("APDN", tb => tb.HasTrigger("UpdateAPDNChangeCount"));

            entity.HasIndex(e => new { e.CreditorCode, e.DocKey, e.DocStatus, e.Cancelled }, "IX_APDN_CreditorCode_DocKey_DocStatus_Cancelled");

            entity.HasIndex(e => e.DocNo, "IX_APDN_DocNo").IsUnique();

            entity.HasIndex(e => new { e.DocStatus, e.ExpiryTimeStamp }, "IX_APDN_DocStatus_ExpiryTimeStamp");

            entity.Property(e => e.DocKey).ValueGeneratedNever();
            entity.Property(e => e.AgingDate).HasColumnType("datetime");
            entity.Property(e => e.BranchCode).HasMaxLength(20);
            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.CreditorCode).HasMaxLength(12);
            entity.Property(e => e.CurrencyCode).HasMaxLength(5);
            entity.Property(e => e.CurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.Description).HasMaxLength(80);
            entity.Property(e => e.DisplayTerm).HasMaxLength(30);
            entity.Property(e => e.Dntype)
                .HasMaxLength(12)
                .HasColumnName("DNType");
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocDate2).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.DocStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DueDate).HasColumnType("datetime");
            entity.Property(e => e.EinvoiceSelfBilledDocNo)
                .HasMaxLength(30)
                .HasColumnName("EInvoiceSelfBilledDocNo");
            entity.Property(e => e.EinvoiceStatus)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceStatus");
            entity.Property(e => e.EinvoiceUuid)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceUuid");
            entity.Property(e => e.EinvoiceValidatedDateTime)
                .HasColumnType("datetime")
                .HasColumnName("EInvoiceValidatedDateTime");
            entity.Property(e => e.EinvoiceValidationLink)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("EInvoiceValidationLink");
            entity.Property(e => e.ExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ExpiryTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.ForecastDueDate).HasColumnType("datetime");
            entity.Property(e => e.GltrxId).HasColumnName("GLTrxID");
            entity.Property(e => e.InclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("F")
                .IsFixedLength();
            entity.Property(e => e.IsJournal)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Jekey).HasColumnName("JEKey");
            entity.Property(e => e.JournalType).HasMaxLength(10);
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.LocalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalPaymentAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTotal2).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalWithholdingTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalWithholdingVat)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("LocalWithholdingVAT");
            entity.Property(e => e.NetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Outstanding).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.PaymentAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.PurchaseAgent).HasMaxLength(12);
            entity.Property(e => e.Reason).HasMaxLength(80);
            entity.Property(e => e.Ref).HasMaxLength(40);
            entity.Property(e => e.RefNo2).HasMaxLength(30);
            entity.Property(e => e.RevalueRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.SourceType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.SupplierDnno)
                .HasMaxLength(30)
                .HasColumnName("SupplierDNNo");
            entity.Property(e => e.SupplierInvoiceNo).HasMaxLength(100);
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyWithholdingTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyWithholdingVat)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("TaxCurrencyWithholdingVAT");
            entity.Property(e => e.TaxDate).HasColumnType("datetime");
            entity.Property(e => e.TaxDocNo).HasMaxLength(20);
            entity.Property(e => e.TaxEntityId).HasColumnName("TaxEntityID");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ToTaxCurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.Total).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Total2).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalRevalueGainLoss).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.WhtpostingDate)
                .HasColumnType("datetime")
                .HasColumnName("WHTPostingDate");
            entity.Property(e => e.WithholdingTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.WithholdingVat)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("WithholdingVAT");

            entity.HasOne(d => d.CreatedUser).WithMany(p => p.ApdnCreatedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.CreatedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_APDN_CreatedUserID");

            entity.HasOne(d => d.CreditorCodeNavigation).WithMany(p => p.Apdns)
                .HasForeignKey(d => d.CreditorCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_APDN_CreditorCode");

            entity.HasOne(d => d.CurrencyCodeNavigation).WithMany(p => p.Apdns)
                .HasForeignKey(d => d.CurrencyCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_APDN_CurrencyCode");

            entity.HasOne(d => d.DisplayTermNavigation).WithMany(p => p.Apdns)
                .HasPrincipalKey(p => p.DisplayTerm)
                .HasForeignKey(d => d.DisplayTerm)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_APDN_DisplayTerm");

            entity.HasOne(d => d.DntypeNavigation).WithMany(p => p.Apdns)
                .HasPrincipalKey(p => p.Dntype1)
                .HasForeignKey(d => d.Dntype)
                .HasConstraintName("FK_APDN_DNType");

            entity.HasOne(d => d.JournalTypeNavigation).WithMany(p => p.Apdns)
                .HasPrincipalKey(p => p.JournalType)
                .HasForeignKey(d => d.JournalType)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_APDN_JournalType");

            entity.HasOne(d => d.LastModifiedUser).WithMany(p => p.ApdnLastModifiedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.LastModifiedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_APDN_LastModifiedUserID");

            entity.HasOne(d => d.PurchaseAgentNavigation).WithMany(p => p.Apdns)
                .HasPrincipalKey(p => p.PurchaseAgent1)
                .HasForeignKey(d => d.PurchaseAgent)
                .HasConstraintName("FK_APDN_PurchaseAgent");

            entity.HasOne(d => d.TaxEntity).WithMany(p => p.Apdns)
                .HasForeignKey(d => d.TaxEntityId)
                .HasConstraintName("FK_APDN_TaxEntityID");

            entity.HasOne(d => d.Branch).WithMany(p => p.Apdns)
                .HasPrincipalKey(p => new { p.AccNo, p.BranchCode })
                .HasForeignKey(d => new { d.CreditorCode, d.BranchCode })
                .HasConstraintName("FK_APDN_BranchCode");
        });

        modelBuilder.Entity<Apdndtl>(entity =>
        {
            entity.HasKey(e => e.DtlKey).HasName("PK_APDNDTL_DtlKey");

            entity.ToTable("APDNDTL");

            entity.HasIndex(e => e.DocKey, "IX_APDNDTL_DocKey");

            entity.Property(e => e.DtlKey).ValueGeneratedNever();
            entity.Property(e => e.AccNo).HasMaxLength(12);
            entity.Property(e => e.Amount).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.KnockOffAmount).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalNetAmount).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalSubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxAdjustment).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.NetAmount).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.SourceDtlType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SupplyPurchase)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TariffCode).HasMaxLength(12);
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxAdjustment).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCode).HasMaxLength(14);
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxPermitNo).HasMaxLength(20);
            entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ToAccountRate).HasColumnType("decimal(19, 12)");

            entity.HasOne(d => d.AccNoNavigation).WithMany(p => p.Apdndtls)
                .HasForeignKey(d => d.AccNo)
                .HasConstraintName("FK_APDNDTL_AccNo");

            entity.HasOne(d => d.DeptNoNavigation).WithMany(p => p.Apdndtls)
                .HasForeignKey(d => d.DeptNo)
                .HasConstraintName("FK_APDNDTL_DeptNo");

            entity.HasOne(d => d.ProjNoNavigation).WithMany(p => p.Apdndtls)
                .HasForeignKey(d => d.ProjNo)
                .HasConstraintName("FK_APDNDTL_ProjNo");

            entity.HasOne(d => d.TariffCodeNavigation).WithMany(p => p.Apdndtls)
                .HasPrincipalKey(p => p.TariffCode)
                .HasForeignKey(d => d.TariffCode)
                .HasConstraintName("FK_APDNDTL_TariffCode");

            entity.HasOne(d => d.TaxCodeNavigation).WithMany(p => p.Apdndtls)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.TaxCode)
                .HasConstraintName("FK_APDNDTL_TaxCode");
        });

        modelBuilder.Entity<Apinvoice>(entity =>
        {
            entity.HasKey(e => e.DocKey).HasName("PK_APInvoice_DocKey");

            entity.ToTable("APInvoice", tb => tb.HasTrigger("UpdateAPInvoiceChangeCount"));

            entity.HasIndex(e => new { e.CreditorCode, e.DocKey, e.DocStatus, e.Cancelled }, "IX_APInvoice_CreditorCode_DocKey_DocStatus_Cancelled");

            entity.HasIndex(e => e.DocNo, "IX_APInvoice_DocNo").IsUnique();

            entity.HasIndex(e => new { e.DocStatus, e.ExpiryTimeStamp }, "IX_APInvoice_DocStatus_ExpiryTimeStamp");

            entity.Property(e => e.DocKey).ValueGeneratedNever();
            entity.Property(e => e.AgingDate).HasColumnType("datetime");
            entity.Property(e => e.AuthorisationNumberForCertifiedExporter)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.BranchCode).HasMaxLength(20);
            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.CreditorCode).HasMaxLength(12);
            entity.Property(e => e.CurrencyCode).HasMaxLength(5);
            entity.Property(e => e.CurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.DeliveryTaxEntityId).HasColumnName("DeliveryTaxEntityID");
            entity.Property(e => e.Description).HasMaxLength(80);
            entity.Property(e => e.DisplayTerm).HasMaxLength(30);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocDate2).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.DocStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DueDate).HasColumnType("datetime");
            entity.Property(e => e.EinvoiceSelfBilledDocNo)
                .HasMaxLength(30)
                .HasColumnName("EInvoiceSelfBilledDocNo");
            entity.Property(e => e.EinvoiceStatus)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceStatus");
            entity.Property(e => e.EinvoiceUuid)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceUuid");
            entity.Property(e => e.EinvoiceValidatedDateTime)
                .HasColumnType("datetime")
                .HasColumnName("EInvoiceValidatedDateTime");
            entity.Property(e => e.EinvoiceValidationLink)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("EInvoiceValidationLink");
            entity.Property(e => e.ExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ExpiryTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.ForecastDueDate).HasColumnType("datetime");
            entity.Property(e => e.FreeTradeAgreementInformation)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.FreightAllowanceChargeAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.FreightAllowanceChargeReason)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.GltrxId).HasColumnName("GLTrxID");
            entity.Property(e => e.InclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("F")
                .IsFixedLength();
            entity.Property(e => e.Incoterms)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.JournalType).HasMaxLength(10);
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.LocalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalPaymentAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTotal2).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalWithholdingTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalWithholdingVat)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("LocalWithholdingVAT");
            entity.Property(e => e.NetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Outstanding).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.PaymentAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.PurchaseAgent).HasMaxLength(12);
            entity.Property(e => e.RefNo2).HasMaxLength(30);
            entity.Property(e => e.ReferAtmsjedocKey).HasColumnName("ReferATMSJEDocKey");
            entity.Property(e => e.ReferAtmsjedocNo)
                .HasMaxLength(30)
                .HasColumnName("ReferATMSJEDocNo");
            entity.Property(e => e.ReferAtmsjeisNonTaxableSupply)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ReferATMSJEIsNonTaxableSupply");
            entity.Property(e => e.ReferCajedocKey).HasColumnName("ReferCAJEDocKey");
            entity.Property(e => e.ReferCajedocNo)
                .HasMaxLength(30)
                .HasColumnName("ReferCAJEDocNo");
            entity.Property(e => e.ReferCajeisPayment)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ReferCAJEIsPayment");
            entity.Property(e => e.ReferIsjedocKey).HasColumnName("ReferISJEDocKey");
            entity.Property(e => e.ReferIsjedocNo)
                .HasMaxLength(30)
                .HasColumnName("ReferISJEDocNo");
            entity.Property(e => e.ReferIsjeisNonTaxableSupply)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ReferISJEIsNonTaxableSupply");
            entity.Property(e => e.ReferIsjeisPayment)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ReferISJEIsPayment");
            entity.Property(e => e.ReferSstisjedocKey).HasColumnName("ReferSSTISJEDocKey");
            entity.Property(e => e.ReferSstisjedocNo)
                .HasMaxLength(30)
                .HasColumnName("ReferSSTISJEDocNo");
            entity.Property(e => e.ReferSstsdjedocKey).HasColumnName("ReferSSTSDJEDocKey");
            entity.Property(e => e.ReferSstsdjedocNo)
                .HasMaxLength(30)
                .HasColumnName("ReferSSTSDJEDocNo");
            entity.Property(e => e.ReferenceNumberOfCustomsFormNo1And9)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.ReferenceNumberOfCustomsFormNo2)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.RevalueRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.SourceType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.SupplierInvoiceNo).HasMaxLength(30);
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyWithholdingTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyWithholdingVat)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("TaxCurrencyWithholdingVAT");
            entity.Property(e => e.TaxDate).HasColumnType("datetime");
            entity.Property(e => e.TaxDocNo).HasMaxLength(20);
            entity.Property(e => e.TaxEntityId).HasColumnName("TaxEntityID");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ToTaxCurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.Total).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Total2).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalRevalueGainLoss).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.WhtpostingDate)
                .HasColumnType("datetime")
                .HasColumnName("WHTPostingDate");
            entity.Property(e => e.WithholdingTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.WithholdingVat)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("WithholdingVAT");

            entity.HasOne(d => d.CreatedUser).WithMany(p => p.ApinvoiceCreatedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.CreatedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_APInvoice_CreatedUserID");

            entity.HasOne(d => d.CreditorCodeNavigation).WithMany(p => p.Apinvoices)
                .HasForeignKey(d => d.CreditorCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_APInvoice_CreditorCode");

            entity.HasOne(d => d.CurrencyCodeNavigation).WithMany(p => p.Apinvoices)
                .HasForeignKey(d => d.CurrencyCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_APInvoice_CurrencyCode");

            entity.HasOne(d => d.DisplayTermNavigation).WithMany(p => p.Apinvoices)
                .HasPrincipalKey(p => p.DisplayTerm)
                .HasForeignKey(d => d.DisplayTerm)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_APInvoice_DisplayTerm");

            entity.HasOne(d => d.JournalTypeNavigation).WithMany(p => p.Apinvoices)
                .HasPrincipalKey(p => p.JournalType)
                .HasForeignKey(d => d.JournalType)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_APInvoice_JournalType");

            entity.HasOne(d => d.LastModifiedUser).WithMany(p => p.ApinvoiceLastModifiedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.LastModifiedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_APInvoice_LastModifiedUserID");

            entity.HasOne(d => d.PurchaseAgentNavigation).WithMany(p => p.Apinvoices)
                .HasPrincipalKey(p => p.PurchaseAgent1)
                .HasForeignKey(d => d.PurchaseAgent)
                .HasConstraintName("FK_APInvoice_PurchaseAgent");

            entity.HasOne(d => d.TaxEntity).WithMany(p => p.Apinvoices)
                .HasForeignKey(d => d.TaxEntityId)
                .HasConstraintName("FK_APInvoice_TaxEntityID");

            entity.HasOne(d => d.Branch).WithMany(p => p.Apinvoices)
                .HasPrincipalKey(p => new { p.AccNo, p.BranchCode })
                .HasForeignKey(d => new { d.CreditorCode, d.BranchCode })
                .HasConstraintName("FK_APInvoice_BranchCode");
        });

        modelBuilder.Entity<ApinvoiceDtl>(entity =>
        {
            entity.HasKey(e => e.DtlKey).HasName("PK_APInvoiceDTL_DtlKey");

            entity.ToTable("APInvoiceDTL");

            entity.HasIndex(e => e.DocKey, "IX_APInvoiceDTL_DocKey");

            entity.Property(e => e.DtlKey).ValueGeneratedNever();
            entity.Property(e => e.AccNo).HasMaxLength(12);
            entity.Property(e => e.Amount).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.KnockOffAmount).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalNetAmount).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalSubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxAdjustment).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.NetAmount).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.SourceDtlType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TariffCode).HasMaxLength(12);
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxAdjustment).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCode).HasMaxLength(14);
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxPermitNo).HasMaxLength(20);
            entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ToAccountRate).HasColumnType("decimal(19, 12)");

            entity.HasOne(d => d.AccNoNavigation).WithMany(p => p.ApinvoiceDtls)
                .HasForeignKey(d => d.AccNo)
                .HasConstraintName("FK_APInvoiceDTL_AccNo");

            entity.HasOne(d => d.DeptNoNavigation).WithMany(p => p.ApinvoiceDtls)
                .HasForeignKey(d => d.DeptNo)
                .HasConstraintName("FK_APInvoiceDTL_DeptNo");

            entity.HasOne(d => d.ProjNoNavigation).WithMany(p => p.ApinvoiceDtls)
                .HasForeignKey(d => d.ProjNo)
                .HasConstraintName("FK_APInvoiceDTL_ProjNo");

            entity.HasOne(d => d.TariffCodeNavigation).WithMany(p => p.ApinvoiceDtls)
                .HasPrincipalKey(p => p.TariffCode)
                .HasForeignKey(d => d.TariffCode)
                .HasConstraintName("FK_APInvoiceDTL_TariffCode");

            entity.HasOne(d => d.TaxCodeNavigation).WithMany(p => p.ApinvoiceDtls)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.TaxCode)
                .HasConstraintName("FK_APInvoiceDTL_TaxCode");
        });

        modelBuilder.Entity<Appayment>(entity =>
        {
            entity.HasKey(e => e.DocKey).HasName("PK_APPayment_DocKey");

            entity.ToTable("APPayment", tb => tb.HasTrigger("UpdateAPPaymentChangeCount"));

            entity.HasIndex(e => e.DocNo, "IX_APPayment_DocNo").IsUnique();

            entity.HasIndex(e => new { e.DocStatus, e.ExpiryTimeStamp }, "IX_APPayment_DocStatus_ExpiryTimeStamp");

            entity.HasIndex(e => new { e.DocStatus, e.ExpiryTimeStamp, e.DocKey }, "IX_APPayment_DocStatus_ExpiryTimeStamp_DocKey");

            entity.Property(e => e.DocKey).ValueGeneratedNever();
            entity.Property(e => e.BranchCode).HasMaxLength(20);
            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Cbkey).HasColumnName("CBKey");
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.CreditorCode).HasMaxLength(12);
            entity.Property(e => e.CurrencyCode).HasMaxLength(5);
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Description).HasMaxLength(80);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.DocNo2).HasMaxLength(25);
            entity.Property(e => e.DocStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ExpiryTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.GltrxId).HasColumnName("GLTrxID");
            entity.Property(e => e.HandOverDate).HasColumnType("datetime");
            entity.Property(e => e.KnockOffAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.LocalPaymentAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalUnappliedAmount).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalWithholdingTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.PaymentAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.ReferCajedocKey).HasColumnName("ReferCAJEDocKey");
            entity.Property(e => e.ReferCajedocNo)
                .HasMaxLength(30)
                .HasColumnName("ReferCAJEDocNo");
            entity.Property(e => e.ReferCndocDate)
                .HasColumnType("datetime")
                .HasColumnName("ReferCNDocDate");
            entity.Property(e => e.ReferCndocKey).HasColumnName("ReferCNDocKey");
            entity.Property(e => e.ReferCndocNo)
                .HasMaxLength(30)
                .HasColumnName("ReferCNDocNo");
            entity.Property(e => e.ReferCnreason)
                .HasMaxLength(80)
                .HasColumnName("ReferCNReason");
            entity.Property(e => e.ReferIsjedocKey).HasColumnName("ReferISJEDocKey");
            entity.Property(e => e.ReferIsjedocNo)
                .HasMaxLength(30)
                .HasColumnName("ReferISJEDocNo");
            entity.Property(e => e.ReferIsjeisNonTaxableSupply)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ReferISJEIsNonTaxableSupply");
            entity.Property(e => e.RefundAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.RevalueRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.SourceType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.TaxCurrencyWithholdingTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ToCreditorRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.ToHomeRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.TotalRevalueGainLoss).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.WithholdingTax).HasColumnType("decimal(19, 2)");

            entity.HasOne(d => d.CreatedUser).WithMany(p => p.AppaymentCreatedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.CreatedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_APPayment_CreatedUserID");

            entity.HasOne(d => d.CreditorCodeNavigation).WithMany(p => p.Appayments)
                .HasForeignKey(d => d.CreditorCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_APPayment_CreditorCode");

            entity.HasOne(d => d.CurrencyCodeNavigation).WithMany(p => p.Appayments)
                .HasForeignKey(d => d.CurrencyCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_APPayment_CurrencyCode");

            entity.HasOne(d => d.DeptNoNavigation).WithMany(p => p.Appayments)
                .HasForeignKey(d => d.DeptNo)
                .HasConstraintName("FK_APPayment_DeptNo");

            entity.HasOne(d => d.LastModifiedUser).WithMany(p => p.AppaymentLastModifiedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.LastModifiedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_APPayment_LastModifiedUserID");

            entity.HasOne(d => d.ProjNoNavigation).WithMany(p => p.Appayments)
                .HasForeignKey(d => d.ProjNo)
                .HasConstraintName("FK_APPayment_ProjNo");

            entity.HasOne(d => d.Branch).WithMany(p => p.Appayments)
                .HasPrincipalKey(p => new { p.AccNo, p.BranchCode })
                .HasForeignKey(d => new { d.CreditorCode, d.BranchCode })
                .HasConstraintName("FK_APPayment_BranchCode");
        });

        modelBuilder.Entity<AppaymentDtl>(entity =>
        {
            entity.HasKey(e => e.DtlKey).HasName("PK_APPaymentDTL_DtlKey");

            entity.ToTable("APPaymentDTL");

            entity.HasIndex(e => e.DocKey, "IX_APPaymentDTL_DocKey");

            entity.Property(e => e.DtlKey).ValueGeneratedNever();
            entity.Property(e => e.BankCharge).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.BankChargeDeptNo).HasMaxLength(10);
            entity.Property(e => e.BankChargeProjNo).HasMaxLength(10);
            entity.Property(e => e.BankChargeTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.BankChargeTaxCode).HasMaxLength(14);
            entity.Property(e => e.BankChargeTaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.BankChargeTaxRefNo).HasMaxLength(30);
            entity.Property(e => e.ChequeNo).HasMaxLength(30);
            entity.Property(e => e.CreditorPaymentAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.IsRchq)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IsRCHQ");
            entity.Property(e => e.LocalPaymentAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.PaymentAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.PaymentBy).HasMaxLength(20);
            entity.Property(e => e.PaymentMethod).HasMaxLength(20);
            entity.Property(e => e.Rchqdate)
                .HasColumnType("datetime")
                .HasColumnName("RCHQDate");
            entity.Property(e => e.ToBankRate).HasColumnType("decimal(19, 12)");

            entity.HasOne(d => d.BankChargeDeptNoNavigation).WithMany(p => p.AppaymentDtls)
                .HasForeignKey(d => d.BankChargeDeptNo)
                .HasConstraintName("FK_APPaymentDTL_BankChargeDeptNo");

            entity.HasOne(d => d.BankChargeProjNoNavigation).WithMany(p => p.AppaymentDtls)
                .HasForeignKey(d => d.BankChargeProjNo)
                .HasConstraintName("FK_APPaymentDTL_BankChargeProjNo");

            entity.HasOne(d => d.BankChargeTaxCodeNavigation).WithMany(p => p.AppaymentDtls)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.BankChargeTaxCode)
                .HasConstraintName("FK_APPaymentDTL_BankChargeTaxCode");

            entity.HasOne(d => d.PaymentMethodNavigation).WithMany(p => p.AppaymentDtls)
                .HasPrincipalKey(p => p.PaymentMethod1)
                .HasForeignKey(d => d.PaymentMethod)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_APPaymentDTL_PaymentMethod");
        });

        modelBuilder.Entity<AppaymentKnockOff>(entity =>
        {
            entity.HasKey(e => e.KnockOffKey).HasName("PK_APPaymentKnockOff_KnockOffKey");

            entity.ToTable("APPaymentKnockOff");

            entity.HasIndex(e => e.DocKey, "IX_APPaymentKnockOff_DocKey");

            entity.Property(e => e.KnockOffKey).ValueGeneratedNever();
            entity.Property(e => e.Amount).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.DiscountAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.FcrevalueKey).HasColumnName("FCRevalueKey");
            entity.Property(e => e.GainLossDate).HasColumnType("datetime");
            entity.Property(e => e.KnockOffDocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.Revalue)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.UseProjDept)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.DeptNoNavigation).WithMany(p => p.AppaymentKnockOffs)
                .HasForeignKey(d => d.DeptNo)
                .HasConstraintName("FK_APPaymentKnockOff_DeptNo");

            entity.HasOne(d => d.ProjNoNavigation).WithMany(p => p.AppaymentKnockOffs)
                .HasForeignKey(d => d.ProjNo)
                .HasConstraintName("FK_APPaymentKnockOff_ProjNo");
        });

        modelBuilder.Entity<AppaymentKnockOffDetail>(entity =>
        {
            entity.HasKey(e => e.AutoKey).HasName("PK_APPaymentKnockOffDetail_AutoKey");

            entity.ToTable("APPaymentKnockOffDetail");

            entity.HasIndex(e => new { e.KnockOffKey, e.KnockOffDtlKey }, "UIX_APPaymentKnockOffDetail_KnockOffKey_KnockOffDtlKey").IsUnique();

            entity.Property(e => e.Amount).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalInvoiceAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalPaymentAmt).HasColumnType("decimal(19, 2)");
        });

        modelBuilder.Entity<Aprefund>(entity =>
        {
            entity.HasKey(e => e.DocKey).HasName("PK_APRefund_DocKey");

            entity.ToTable("APRefund", tb => tb.HasTrigger("UpdateAPRefundChangeCount"));

            entity.HasIndex(e => e.DocNo, "IX_APRefund_DocNo").IsUnique();

            entity.HasIndex(e => new { e.DocStatus, e.ExpiryTimeStamp }, "IX_APRefund_DocStatus_ExpiryTimeStamp");

            entity.Property(e => e.DocKey).ValueGeneratedNever();
            entity.Property(e => e.BranchCode).HasMaxLength(20);
            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Cbkey).HasColumnName("CBKey");
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.CreditorCode).HasMaxLength(12);
            entity.Property(e => e.CurrencyCode).HasMaxLength(5);
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Description).HasMaxLength(80);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.DocNo2).HasMaxLength(25);
            entity.Property(e => e.DocStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ExpiryTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.GltrxId).HasColumnName("GLTrxID");
            entity.Property(e => e.HandOverDate).HasColumnType("datetime");
            entity.Property(e => e.KnockOffAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.LocalPaymentAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalWithholdingTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.PaymentAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.RevalueRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.SourceType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.TaxCurrencyWithholdingTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ToCreditorRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.ToHomeRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.WithholdingTax).HasColumnType("decimal(19, 2)");

            entity.HasOne(d => d.CreatedUser).WithMany(p => p.AprefundCreatedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.CreatedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_APRefund_CreatedUserID");

            entity.HasOne(d => d.CreditorCodeNavigation).WithMany(p => p.Aprefunds)
                .HasForeignKey(d => d.CreditorCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_APRefund_CreditorCode");

            entity.HasOne(d => d.CurrencyCodeNavigation).WithMany(p => p.Aprefunds)
                .HasForeignKey(d => d.CurrencyCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_APRefund_CurrencyCode");

            entity.HasOne(d => d.DeptNoNavigation).WithMany(p => p.Aprefunds)
                .HasForeignKey(d => d.DeptNo)
                .HasConstraintName("FK_APRefund_DeptNo");

            entity.HasOne(d => d.LastModifiedUser).WithMany(p => p.AprefundLastModifiedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.LastModifiedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_APRefund_LastModifiedUserID");

            entity.HasOne(d => d.ProjNoNavigation).WithMany(p => p.Aprefunds)
                .HasForeignKey(d => d.ProjNo)
                .HasConstraintName("FK_APRefund_ProjNo");

            entity.HasOne(d => d.Branch).WithMany(p => p.Aprefunds)
                .HasPrincipalKey(p => new { p.AccNo, p.BranchCode })
                .HasForeignKey(d => new { d.CreditorCode, d.BranchCode })
                .HasConstraintName("FK_APRefund_BranchCode");
        });

        modelBuilder.Entity<AprefundDtl>(entity =>
        {
            entity.HasKey(e => e.DtlKey).HasName("PK_APRefundDTL_DtlKey");

            entity.ToTable("APRefundDTL");

            entity.Property(e => e.DtlKey).ValueGeneratedNever();
            entity.Property(e => e.BankCharge).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.BankChargeDeptNo).HasMaxLength(10);
            entity.Property(e => e.BankChargeProjNo).HasMaxLength(10);
            entity.Property(e => e.BankChargeTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.BankChargeTaxCode).HasMaxLength(14);
            entity.Property(e => e.BankChargeTaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.BankChargeTaxRefNo).HasMaxLength(30);
            entity.Property(e => e.ChequeNo).HasMaxLength(30);
            entity.Property(e => e.CreditorPaymentAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.IsRchq)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IsRCHQ");
            entity.Property(e => e.LocalPaymentAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.PaymentAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.PaymentBy).HasMaxLength(20);
            entity.Property(e => e.PaymentMethod).HasMaxLength(20);
            entity.Property(e => e.Rchqdate)
                .HasColumnType("datetime")
                .HasColumnName("RCHQDate");
            entity.Property(e => e.ToBankRate).HasColumnType("decimal(19, 12)");

            entity.HasOne(d => d.BankChargeDeptNoNavigation).WithMany(p => p.AprefundDtls)
                .HasForeignKey(d => d.BankChargeDeptNo)
                .HasConstraintName("FK_APRefundDTL_BankChargeDeptNo");

            entity.HasOne(d => d.BankChargeProjNoNavigation).WithMany(p => p.AprefundDtls)
                .HasForeignKey(d => d.BankChargeProjNo)
                .HasConstraintName("FK_APRefundDTL_BankChargeProjNo");

            entity.HasOne(d => d.BankChargeTaxCodeNavigation).WithMany(p => p.AprefundDtls)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.BankChargeTaxCode)
                .HasConstraintName("FK_APRefundDTL_BankChargeTaxCode");

            entity.HasOne(d => d.PaymentMethodNavigation).WithMany(p => p.AprefundDtls)
                .HasPrincipalKey(p => p.PaymentMethod1)
                .HasForeignKey(d => d.PaymentMethod)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_APRefundDTL_PaymentMethod");
        });

        modelBuilder.Entity<AprefundKnockOff>(entity =>
        {
            entity.HasKey(e => e.KnockOffKey).HasName("PK_APRefundKnockOff_KnockOffKey");

            entity.ToTable("APRefundKnockOff");

            entity.HasIndex(e => e.DocKey, "IX_APRefundKnockOff_DocKey");

            entity.Property(e => e.KnockOffKey).ValueGeneratedNever();
            entity.Property(e => e.Amount).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.FcrevalueKey).HasColumnName("FCRevalueKey");
            entity.Property(e => e.GainLossDate).HasColumnType("datetime");
            entity.Property(e => e.KnockOffDocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.Revalue)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.UseProjDept)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.DeptNoNavigation).WithMany(p => p.AprefundKnockOffs)
                .HasForeignKey(d => d.DeptNo)
                .HasConstraintName("FK_APRefundKnockOff_DeptNo");

            entity.HasOne(d => d.ProjNoNavigation).WithMany(p => p.AprefundKnockOffs)
                .HasForeignKey(d => d.ProjNo)
                .HasConstraintName("FK_APRefundKnockOff_ProjNo");
        });

        modelBuilder.Entity<AprefundKnockOffDetail>(entity =>
        {
            entity.HasKey(e => e.AutoKey).HasName("PK_APRefundKnockOffDetail_AutoKey");

            entity.ToTable("APRefundKnockOffDetail");

            entity.HasIndex(e => new { e.KnockOffKey, e.KnockOffDtlKey }, "UIX_APRefundKnockOffDetail_KnockOffKey_KnockOffDtlKey").IsUnique();

            entity.Property(e => e.Amount).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalPaymentAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalRefundAmt).HasColumnType("decimal(19, 2)");
        });

        modelBuilder.Entity<ArapbadDebt>(entity =>
        {
            entity.HasKey(e => new { e.DocType, e.DocKey }).HasName("PK_ARAPBadDebt_DocType_DocKey");

            entity.ToTable("ARAPBadDebt");

            entity.Property(e => e.DocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.BdcndocDate)
                .HasColumnType("datetime")
                .HasColumnName("BDCNDocDate");
            entity.Property(e => e.BdcndocKey).HasColumnName("BDCNDocKey");
            entity.Property(e => e.BdwithBdrcndocDate)
                .HasColumnType("datetime")
                .HasColumnName("BDWithBDRCNDocDate");
            entity.Property(e => e.BdwithBdrcndocKey).HasColumnName("BDWithBDRCNDocKey");
            entity.Property(e => e.JedocDate)
                .HasColumnType("datetime")
                .HasColumnName("JEDocDate");
            entity.Property(e => e.JedocKey).HasColumnName("JEDocKey");
        });

        modelBuilder.Entity<ArapbadDebtRecovery>(entity =>
        {
            entity.HasKey(e => new { e.DocType, e.DocKey, e.PaymentDocType, e.PaymentDocKey }).HasName("PK_ARAPBadDebtRecovery_DocType_DocKey_PaymentDocType_PaymentDocKey");

            entity.ToTable("ARAPBadDebtRecovery");

            entity.Property(e => e.DocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.PaymentDocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.JecrdtlKey).HasColumnName("JECRDtlKey");
            entity.Property(e => e.JedocDate)
                .HasColumnType("datetime")
                .HasColumnName("JEDocDate");
            entity.Property(e => e.JedocKey).HasColumnName("JEDocKey");
            entity.Property(e => e.JedrdtlKey).HasColumnName("JEDRDtlKey");

            entity.HasOne(d => d.ArapbadDebt).WithMany(p => p.ArapbadDebtRecoveries)
                .HasForeignKey(d => new { d.DocType, d.DocKey })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ARAPBadDebtRecovery_Doc");
        });

        modelBuilder.Entity<Arapcontra>(entity =>
        {
            entity.HasKey(e => e.DocKey).HasName("PK_ARAPContra_DocKey");

            entity.ToTable("ARAPContra", tb => tb.HasTrigger("UpdateARAPContraChangeCount"));

            entity.HasIndex(e => e.DocNo, "IX_ARAPContra_DocNo").IsUnique();

            entity.HasIndex(e => new { e.DocStatus, e.ExpiryTimeStamp }, "IX_ARAPContra_DocStatus_ExpiryTimeStamp");

            entity.HasIndex(e => new { e.DocStatus, e.ExpiryTimeStamp, e.DocKey }, "IX_ARAPContra_DocStatus_ExpiryTimeStamp_DocKey");

            entity.Property(e => e.DocKey).ValueGeneratedNever();
            entity.Property(e => e.ApknockOffAmt)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("APKnockOffAmt");
            entity.Property(e => e.AplocalNetTotal)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("APLocalNetTotal");
            entity.Property(e => e.ArknockOffAmt)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("ARKnockOffAmt");
            entity.Property(e => e.ArlocalNetTotal)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("ARLocalNetTotal");
            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.CreditorBranchCode).HasMaxLength(20);
            entity.Property(e => e.CreditorCode).HasMaxLength(12);
            entity.Property(e => e.CurrencyCode).HasMaxLength(5);
            entity.Property(e => e.CurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.DebtorBranchCode).HasMaxLength(20);
            entity.Property(e => e.DebtorCode).HasMaxLength(12);
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Description).HasMaxLength(80);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.DocStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ExpiryTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.GltrxId).HasColumnName("GLTrxID");
            entity.Property(e => e.Jekey).HasColumnName("JEKey");
            entity.Property(e => e.JournalType).HasMaxLength(10);
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.NetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.Ref).HasMaxLength(40);
            entity.Property(e => e.RefNo2).HasMaxLength(30);
            entity.Property(e => e.RevalueRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.SourceType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.TempAccNo).HasMaxLength(12);

            entity.HasOne(d => d.CreatedUser).WithMany(p => p.ArapcontraCreatedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.CreatedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ARAPContra_CreatedUserID");

            entity.HasOne(d => d.CreditorCodeNavigation).WithMany(p => p.ArapcontraCreditorCodeNavigations)
                .HasForeignKey(d => d.CreditorCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ARAPContra_CreditorCode");

            entity.HasOne(d => d.CurrencyCodeNavigation).WithMany(p => p.Arapcontras)
                .HasForeignKey(d => d.CurrencyCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ARAPContra_CurrencyCode");

            entity.HasOne(d => d.DebtorCodeNavigation).WithMany(p => p.ArapcontraDebtorCodeNavigations)
                .HasForeignKey(d => d.DebtorCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ARAPContra_DebtorCode");

            entity.HasOne(d => d.DeptNoNavigation).WithMany(p => p.Arapcontras)
                .HasForeignKey(d => d.DeptNo)
                .HasConstraintName("FK_ARAPContra_DeptNo");

            entity.HasOne(d => d.JournalTypeNavigation).WithMany(p => p.Arapcontras)
                .HasPrincipalKey(p => p.JournalType)
                .HasForeignKey(d => d.JournalType)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ARAPContra_JournalType");

            entity.HasOne(d => d.LastModifiedUser).WithMany(p => p.ArapcontraLastModifiedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.LastModifiedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ARAPContra_LastModifiedUserID");

            entity.HasOne(d => d.ProjNoNavigation).WithMany(p => p.Arapcontras)
                .HasForeignKey(d => d.ProjNo)
                .HasConstraintName("FK_ARAPContra_ProjNo");

            entity.HasOne(d => d.TempAccNoNavigation).WithMany(p => p.ArapcontraTempAccNoNavigations)
                .HasForeignKey(d => d.TempAccNo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ARAPContra_TempAccNo");

            entity.HasOne(d => d.Branch).WithMany(p => p.ArapcontraBranches)
                .HasPrincipalKey(p => new { p.AccNo, p.BranchCode })
                .HasForeignKey(d => new { d.CreditorCode, d.CreditorBranchCode })
                .HasConstraintName("FK_ARAPContra_CreditorBranchCode");

            entity.HasOne(d => d.BranchNavigation).WithMany(p => p.ArapcontraBranchNavigations)
                .HasPrincipalKey(p => new { p.AccNo, p.BranchCode })
                .HasForeignKey(d => new { d.DebtorCode, d.DebtorBranchCode })
                .HasConstraintName("FK_ARAPContra_DebtorBranchCode");
        });

        modelBuilder.Entity<Arcn>(entity =>
        {
            entity.HasKey(e => e.DocKey).HasName("PK_ARCN_DocKey");

            entity.ToTable("ARCN", tb => tb.HasTrigger("UpdateARCNChangeCount"));

            entity.HasIndex(e => e.DocNo, "IX_ARCN_DocNo").IsUnique();

            entity.HasIndex(e => new { e.DocStatus, e.ExpiryTimeStamp }, "IX_ARCN_DocStatus_ExpiryTimeStamp");

            entity.HasIndex(e => new { e.DocStatus, e.ExpiryTimeStamp, e.DocKey }, "IX_ARCN_DocStatus_ExpiryTimeStamp_DocKey");

            entity.Property(e => e.DocKey).ValueGeneratedNever();
            entity.Property(e => e.BranchCode).HasMaxLength(20);
            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CidocKey).HasColumnName("CIDocKey");
            entity.Property(e => e.CidocNo)
                .HasMaxLength(30)
                .HasColumnName("CIDocNo");
            entity.Property(e => e.Cntype)
                .HasMaxLength(12)
                .HasColumnName("CNType");
            entity.Property(e => e.ConsolidatedEinvoice)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ConsolidatedEInvoice");
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.CurrencyCode).HasMaxLength(5);
            entity.Property(e => e.CurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.DebtorCode).HasMaxLength(12);
            entity.Property(e => e.Description).HasMaxLength(80);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.DocStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EinvoiceAipsubmissionDateTime)
                .HasColumnType("datetime")
                .HasColumnName("EInvoiceAIPSubmissionDateTime");
            entity.Property(e => e.EinvoiceCancelDateTime)
                .HasColumnType("datetime")
                .HasColumnName("EInvoiceCancelDateTime");
            entity.Property(e => e.EinvoiceCancelReason)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceCancelReason");
            entity.Property(e => e.EinvoiceError)
                .IsUnicode(false)
                .HasColumnName("EInvoiceError");
            entity.Property(e => e.EinvoiceIssueDateTime)
                .HasColumnType("datetime")
                .HasColumnName("EInvoiceIssueDateTime");
            entity.Property(e => e.EinvoiceSelfBilledDocNo)
                .HasMaxLength(30)
                .HasColumnName("EInvoiceSelfBilledDocNo");
            entity.Property(e => e.EinvoiceStatus)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceStatus");
            entity.Property(e => e.EinvoiceSubmissionDateTime)
                .HasColumnType("datetime")
                .HasColumnName("EInvoiceSubmissionDateTime");
            entity.Property(e => e.EinvoiceSubmissionUuid)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceSubmissionUuid");
            entity.Property(e => e.EinvoiceSubmitDocType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("EInvoiceSubmitDocType");
            entity.Property(e => e.EinvoiceTraceId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceTraceId");
            entity.Property(e => e.EinvoiceUuid)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceUuid");
            entity.Property(e => e.EinvoiceValidatedDateTime)
                .HasColumnType("datetime")
                .HasColumnName("EInvoiceValidatedDateTime");
            entity.Property(e => e.EinvoiceValidationLink)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("EInvoiceValidationLink");
            entity.Property(e => e.ExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ExpiryTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.GltrxId).HasColumnName("GLTrxID");
            entity.Property(e => e.GstjedocKey).HasColumnName("GSTJEDocKey");
            entity.Property(e => e.InclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("F")
                .IsFixedLength();
            entity.Property(e => e.IsJournal)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Jekey).HasColumnName("JEKey");
            entity.Property(e => e.JournalType).HasMaxLength(10);
            entity.Property(e => e.KnockOffAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.LocalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTotal2).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalWithholdingTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalWithholdingVat)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("LocalWithholdingVAT");
            entity.Property(e => e.NetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.OurInvoiceNo).HasMaxLength(100);
            entity.Property(e => e.Reason).HasMaxLength(80);
            entity.Property(e => e.Ref).HasMaxLength(40);
            entity.Property(e => e.RefNo2).HasMaxLength(30);
            entity.Property(e => e.RefundAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.RevalueRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.SourceType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.SstjedocKey).HasColumnName("SSTJEDocKey");
            entity.Property(e => e.SubmitEinvoice)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SubmitEInvoice");
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyWithholdingTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyWithholdingVat)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("TaxCurrencyWithholdingVAT");
            entity.Property(e => e.TaxDate).HasColumnType("datetime");
            entity.Property(e => e.TaxDocNo).HasMaxLength(20);
            entity.Property(e => e.TaxEntityId).HasColumnName("TaxEntityID");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ToTaxCurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.Total).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Total2).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalRevalueGainLoss).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.WithholdingTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.WithholdingVat)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("WithholdingVAT");

            entity.HasOne(d => d.CntypeNavigation).WithMany(p => p.Arcns)
                .HasPrincipalKey(p => p.Cntype1)
                .HasForeignKey(d => d.Cntype)
                .HasConstraintName("FK_ARCN_CNType");

            entity.HasOne(d => d.CreatedUser).WithMany(p => p.ArcnCreatedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.CreatedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ARCN_CreatedUserID");

            entity.HasOne(d => d.CurrencyCodeNavigation).WithMany(p => p.Arcns)
                .HasForeignKey(d => d.CurrencyCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ARCN_CurrencyCode");

            entity.HasOne(d => d.DebtorCodeNavigation).WithMany(p => p.Arcns)
                .HasForeignKey(d => d.DebtorCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ARCN_DebtorCode");

            entity.HasOne(d => d.JournalTypeNavigation).WithMany(p => p.Arcns)
                .HasPrincipalKey(p => p.JournalType)
                .HasForeignKey(d => d.JournalType)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ARCN_JournalType");

            entity.HasOne(d => d.LastModifiedUser).WithMany(p => p.ArcnLastModifiedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.LastModifiedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ARCN_LastModifiedUserID");

            entity.HasOne(d => d.TaxEntity).WithMany(p => p.Arcns)
                .HasForeignKey(d => d.TaxEntityId)
                .HasConstraintName("FK_ARCN_TaxEntityID");

            entity.HasOne(d => d.Branch).WithMany(p => p.Arcns)
                .HasPrincipalKey(p => new { p.AccNo, p.BranchCode })
                .HasForeignKey(d => new { d.DebtorCode, d.BranchCode })
                .HasConstraintName("FK_ARCN_BranchCode");
        });

        modelBuilder.Entity<Arcndtl>(entity =>
        {
            entity.HasKey(e => e.DtlKey).HasName("PK_ARCNDTL_DtlKey");

            entity.ToTable("ARCNDTL");

            entity.HasIndex(e => e.DocKey, "IX_ARCNDTL_DocKey");

            entity.Property(e => e.DtlKey).ValueGeneratedNever();
            entity.Property(e => e.AccNo).HasMaxLength(12);
            entity.Property(e => e.Amount).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Atc)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("ATC");
            entity.Property(e => e.Classification)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.KnockOffAmount).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalNetAmount).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalSubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxAdjustment).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalUnappliedAmount).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.NetAmount).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.SalesExemptionNo).HasMaxLength(60);
            entity.Property(e => e.SourceDtlType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SupplyPurchase)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TariffCode).HasMaxLength(12);
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxAdjustment).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCode).HasMaxLength(14);
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxExportCountry).HasMaxLength(50);
            entity.Property(e => e.TaxPermitNo).HasMaxLength(20);
            entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ToAccountRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.UnappliedAmount).HasColumnType("decimal(19, 2)");

            entity.HasOne(d => d.AccNoNavigation).WithMany(p => p.Arcndtls)
                .HasForeignKey(d => d.AccNo)
                .HasConstraintName("FK_ARCNDTL_AccNo");

            entity.HasOne(d => d.AtcNavigation).WithMany(p => p.Arcndtls)
                .HasForeignKey(d => d.Atc)
                .HasConstraintName("FK_ARCNDTL_ATC");

            entity.HasOne(d => d.DeptNoNavigation).WithMany(p => p.Arcndtls)
                .HasForeignKey(d => d.DeptNo)
                .HasConstraintName("FK_ARCNDTL_DeptNo");

            entity.HasOne(d => d.ProjNoNavigation).WithMany(p => p.Arcndtls)
                .HasForeignKey(d => d.ProjNo)
                .HasConstraintName("FK_ARCNDTL_ProjNo");

            entity.HasOne(d => d.TariffCodeNavigation).WithMany(p => p.Arcndtls)
                .HasPrincipalKey(p => p.TariffCode)
                .HasForeignKey(d => d.TariffCode)
                .HasConstraintName("FK_ARCNDTL_TariffCode");

            entity.HasOne(d => d.TaxCodeNavigation).WithMany(p => p.Arcndtls)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.TaxCode)
                .HasConstraintName("FK_ARCNDTL_TaxCode");
        });

        modelBuilder.Entity<ArcnknockOff>(entity =>
        {
            entity.HasKey(e => e.KnockOffKey).HasName("PK_ARCNKnockOff_KnockOffKey");

            entity.ToTable("ARCNKnockOff");

            entity.HasIndex(e => e.DocKey, "IX_ARCNKnockOff_DocKey");

            entity.Property(e => e.KnockOffKey).ValueGeneratedNever();
            entity.Property(e => e.Amount).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.FcrevalueKey).HasColumnName("FCRevalueKey");
            entity.Property(e => e.GainLossDate).HasColumnType("datetime");
            entity.Property(e => e.KnockOffDocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.Revalue)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.UseProjDept)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.DeptNoNavigation).WithMany(p => p.ArcnknockOffs)
                .HasForeignKey(d => d.DeptNo)
                .HasConstraintName("FK_ARCNKnockOff_DeptNo");

            entity.HasOne(d => d.ProjNoNavigation).WithMany(p => p.ArcnknockOffs)
                .HasForeignKey(d => d.ProjNo)
                .HasConstraintName("FK_ARCNKnockOff_ProjNo");
        });

        modelBuilder.Entity<ArcnknockOffDetail>(entity =>
        {
            entity.HasKey(e => e.AutoKey).HasName("PK_ARCNKnockOffDetail_AutoKey");

            entity.ToTable("ARCNKnockOffDetail");

            entity.HasIndex(e => new { e.KnockOffKey, e.KnockOffDtlKey }, "UIX_ARCNKnockOffDetail_KnockOffKey_KnockOffDtlKey").IsUnique();

            entity.Property(e => e.Amount).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalCnamt)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("LocalCNAmt");
            entity.Property(e => e.LocalInvoiceAmt).HasColumnType("decimal(19, 2)");
        });

        modelBuilder.Entity<ArcontraKnockOff>(entity =>
        {
            entity.HasKey(e => e.KnockOffKey).HasName("PK_ARContraKnockOff_KnockOffKey");

            entity.ToTable("ARContraKnockOff");

            entity.HasIndex(e => e.DocKey, "IX_ARContraKnockOff_DocKey");

            entity.Property(e => e.KnockOffKey).ValueGeneratedNever();
            entity.Property(e => e.Amount).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.FcrevalueKey).HasColumnName("FCRevalueKey");
            entity.Property(e => e.GainLossDate).HasColumnType("datetime");
            entity.Property(e => e.KnockOffDocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.Revalue)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.UseProjDept)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.DeptNoNavigation).WithMany(p => p.ArcontraKnockOffs)
                .HasForeignKey(d => d.DeptNo)
                .HasConstraintName("FK_ARContraKnockOff_DeptNo");

            entity.HasOne(d => d.ProjNoNavigation).WithMany(p => p.ArcontraKnockOffs)
                .HasForeignKey(d => d.ProjNo)
                .HasConstraintName("FK_ARContraKnockOff_ProjNo");
        });

        modelBuilder.Entity<ArcontraKnockOffDetail>(entity =>
        {
            entity.HasKey(e => e.AutoKey).HasName("PK_ARContraKnockOffDetail_AutoKey");

            entity.ToTable("ARContraKnockOffDetail");

            entity.HasIndex(e => new { e.KnockOffKey, e.KnockOffDtlKey }, "UIX_ARContraKnockOffDetail_KnockOffKey_KnockOffDtlKey").IsUnique();

            entity.Property(e => e.Amount).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalContraAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalInvoiceAmt).HasColumnType("decimal(19, 2)");
        });

        modelBuilder.Entity<Ardeposit>(entity =>
        {
            entity.HasKey(e => e.DocKey).HasName("PK_ARDeposit_DocKey");

            entity.ToTable("ARDeposit", tb => tb.HasTrigger("UpdateARDepositChangeCount"));

            entity.HasIndex(e => e.DocNo, "IX_ARDeposit_DocNo").IsUnique();

            entity.Property(e => e.DocKey).ValueGeneratedNever();
            entity.Property(e => e.Attention).HasMaxLength(40);
            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Cbkey).HasColumnName("CBKey");
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.CurrencyCode).HasMaxLength(5);
            entity.Property(e => e.DebtorCode).HasMaxLength(12);
            entity.Property(e => e.DebtorName).HasMaxLength(100);
            entity.Property(e => e.DepositPaymentMethod).HasMaxLength(20);
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Description).HasMaxLength(80);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.Fax1).HasMaxLength(25);
            entity.Property(e => e.GltrxId).HasColumnName("GLTrxID");
            entity.Property(e => e.GstjedocKey).HasColumnName("GSTJEDocKey");
            entity.Property(e => e.InvAddr1).HasMaxLength(40);
            entity.Property(e => e.InvAddr2).HasMaxLength(40);
            entity.Property(e => e.InvAddr3).HasMaxLength(40);
            entity.Property(e => e.InvAddr4).HasMaxLength(40);
            entity.Property(e => e.IsSecurityDeposit)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.Outstanding).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.PaymentAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Phone1).HasMaxLength(25);
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.SourceType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.SstjedocKey).HasColumnName("SSTJEDocKey");
            entity.Property(e => e.ToDepositRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.ToHomeRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.TransferedAmt).HasColumnType("decimal(19, 2)");

            entity.HasOne(d => d.CreatedUser).WithMany(p => p.ArdepositCreatedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.CreatedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ARDeposit_CreatedUserID");

            entity.HasOne(d => d.CurrencyCodeNavigation).WithMany(p => p.Ardeposits)
                .HasForeignKey(d => d.CurrencyCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ARDeposit_CurrencyCode");

            entity.HasOne(d => d.DebtorCodeNavigation).WithMany(p => p.Ardeposits)
                .HasForeignKey(d => d.DebtorCode)
                .HasConstraintName("FK_ARDeposit_DebtorCode");

            entity.HasOne(d => d.DepositPaymentMethodNavigation).WithMany(p => p.Ardeposits)
                .HasPrincipalKey(p => p.PaymentMethod1)
                .HasForeignKey(d => d.DepositPaymentMethod)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ARDeposit_DepositPaymentMethod");

            entity.HasOne(d => d.DeptNoNavigation).WithMany(p => p.Ardeposits)
                .HasForeignKey(d => d.DeptNo)
                .HasConstraintName("FK_ARDeposit_DeptNo");

            entity.HasOne(d => d.LastModifiedUser).WithMany(p => p.ArdepositLastModifiedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.LastModifiedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ARDeposit_LastModifiedUserID");

            entity.HasOne(d => d.ProjNoNavigation).WithMany(p => p.Ardeposits)
                .HasForeignKey(d => d.ProjNo)
                .HasConstraintName("FK_ARDeposit_ProjNo");
        });

        modelBuilder.Entity<ArdepositForfeit>(entity =>
        {
            entity.HasKey(e => e.ForfeitKey).HasName("PK_ARDepositForfeit_ForfeitKey");

            entity.ToTable("ARDepositForfeit");

            entity.Property(e => e.ForfeitKey).ValueGeneratedNever();
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.Description).HasMaxLength(40);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.ForfeitedAccNo).HasMaxLength(12);
            entity.Property(e => e.ForfeitedAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");

            entity.HasOne(d => d.CreatedUser).WithMany(p => p.ArdepositForfeitCreatedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.CreatedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ARDepositForfeit_CreatedUserID");

            entity.HasOne(d => d.ForfeitedAccNoNavigation).WithMany(p => p.ArdepositForfeits)
                .HasForeignKey(d => d.ForfeitedAccNo)
                .HasConstraintName("FK_ARDepositForfeit_ForfeitedAccNo");

            entity.HasOne(d => d.LastModifiedUser).WithMany(p => p.ArdepositForfeitLastModifiedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.LastModifiedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ARDepositForfeit_LastModifiedUserID");
        });

        modelBuilder.Entity<ArdepositPaymentDtl>(entity =>
        {
            entity.HasKey(e => e.DtlKey).HasName("PK_ARDepositPaymentDTL_DtlKey");

            entity.ToTable("ARDepositPaymentDTL");

            entity.Property(e => e.DtlKey).ValueGeneratedNever();
            entity.Property(e => e.BankCharge).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.BankChargeDeptNo).HasMaxLength(10);
            entity.Property(e => e.BankChargeProjNo).HasMaxLength(10);
            entity.Property(e => e.BankChargeTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.BankChargeTaxCode).HasMaxLength(14);
            entity.Property(e => e.BankChargeTaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.BankChargeTaxRefNo).HasMaxLength(30);
            entity.Property(e => e.ChequeNo).HasMaxLength(30);
            entity.Property(e => e.IsRchq)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IsRCHQ");
            entity.Property(e => e.PaymentAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.PaymentBy).HasMaxLength(20);
            entity.Property(e => e.PaymentMethod).HasMaxLength(20);
            entity.Property(e => e.Rchqdate)
                .HasColumnType("datetime")
                .HasColumnName("RCHQDate");
            entity.Property(e => e.ToBankRate).HasColumnType("decimal(19, 12)");

            entity.HasOne(d => d.BankChargeDeptNoNavigation).WithMany(p => p.ArdepositPaymentDtls)
                .HasForeignKey(d => d.BankChargeDeptNo)
                .HasConstraintName("FK_ARDepositPaymentDTL_BankChargeDeptNo");

            entity.HasOne(d => d.BankChargeProjNoNavigation).WithMany(p => p.ArdepositPaymentDtls)
                .HasForeignKey(d => d.BankChargeProjNo)
                .HasConstraintName("FK_ARDepositPaymentDTL_BankChargeProjNo");

            entity.HasOne(d => d.BankChargeTaxCodeNavigation).WithMany(p => p.ArdepositPaymentDtls)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.BankChargeTaxCode)
                .HasConstraintName("FK_ARDepositPaymentDTL_BankChargeTaxCode");

            entity.HasOne(d => d.PaymentMethodNavigation).WithMany(p => p.ArdepositPaymentDtls)
                .HasPrincipalKey(p => p.PaymentMethod1)
                .HasForeignKey(d => d.PaymentMethod)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ARDepositPaymentDTL_PaymentMethod");
        });

        modelBuilder.Entity<ArdepositRefund>(entity =>
        {
            entity.HasKey(e => e.RefundKey).HasName("PK_ARDepositRefund_RefundKey");

            entity.ToTable("ARDepositRefund");

            entity.HasIndex(e => e.DocNo, "IX_ARDepositRefund_DocNo").IsUnique();

            entity.Property(e => e.RefundKey).ValueGeneratedNever();
            entity.Property(e => e.Cbkey).HasColumnName("CBKey");
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.Description).HasMaxLength(40);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.Name).HasMaxLength(100);
            entity.Property(e => e.RefundAmt).HasColumnType("decimal(19, 2)");

            entity.HasOne(d => d.CreatedUser).WithMany(p => p.ArdepositRefundCreatedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.CreatedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ARDepositRefund_CreatedUserID");

            entity.HasOne(d => d.LastModifiedUser).WithMany(p => p.ArdepositRefundLastModifiedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.LastModifiedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ARDepositRefund_LastModifiedUserID");
        });

        modelBuilder.Entity<ArdepositRefundPaymentDtl>(entity =>
        {
            entity.HasKey(e => e.DtlKey).HasName("PK_ARDepositRefundPaymentDTL_DtlKey");

            entity.ToTable("ARDepositRefundPaymentDTL");

            entity.Property(e => e.DtlKey).ValueGeneratedNever();
            entity.Property(e => e.BankCharge).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.BankChargeDeptNo).HasMaxLength(10);
            entity.Property(e => e.BankChargeProjNo).HasMaxLength(10);
            entity.Property(e => e.BankChargeTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.BankChargeTaxCode).HasMaxLength(14);
            entity.Property(e => e.BankChargeTaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.BankChargeTaxRefNo).HasMaxLength(30);
            entity.Property(e => e.ChequeNo).HasMaxLength(30);
            entity.Property(e => e.IsRchq)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IsRCHQ");
            entity.Property(e => e.PaymentAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.PaymentBy).HasMaxLength(20);
            entity.Property(e => e.PaymentMethod).HasMaxLength(20);
            entity.Property(e => e.Rchqdate)
                .HasColumnType("datetime")
                .HasColumnName("RCHQDate");
            entity.Property(e => e.ToBankRate).HasColumnType("decimal(19, 12)");

            entity.HasOne(d => d.BankChargeDeptNoNavigation).WithMany(p => p.ArdepositRefundPaymentDtls)
                .HasForeignKey(d => d.BankChargeDeptNo)
                .HasConstraintName("FK_ARDepositRefundPaymentDTL_BankChargeDeptNo");

            entity.HasOne(d => d.BankChargeProjNoNavigation).WithMany(p => p.ArdepositRefundPaymentDtls)
                .HasForeignKey(d => d.BankChargeProjNo)
                .HasConstraintName("FK_ARDepositRefundPaymentDTL_BankChargeProjNo");

            entity.HasOne(d => d.BankChargeTaxCodeNavigation).WithMany(p => p.ArdepositRefundPaymentDtls)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.BankChargeTaxCode)
                .HasConstraintName("FK_ARDepositRefundPaymentDTL_BankChargeTaxCode");

            entity.HasOne(d => d.PaymentMethodNavigation).WithMany(p => p.ArdepositRefundPaymentDtls)
                .HasPrincipalKey(p => p.PaymentMethod1)
                .HasForeignKey(d => d.PaymentMethod)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ARDepositRefundPaymentDTL_PaymentMethod");
        });

        modelBuilder.Entity<Ardn>(entity =>
        {
            entity.HasKey(e => e.DocKey).HasName("PK_ARDN_DocKey");

            entity.ToTable("ARDN", tb => tb.HasTrigger("UpdateARDNChangeCount"));

            entity.HasIndex(e => new { e.DebtorCode, e.DocKey, e.DocStatus, e.Cancelled }, "IX_ARDN_DebtorCode_DocKey_DocStatus_Cancelled");

            entity.HasIndex(e => e.DocNo, "IX_ARDN_DocNo").IsUnique();

            entity.HasIndex(e => new { e.DocStatus, e.ExpiryTimeStamp }, "IX_ARDN_DocStatus_ExpiryTimeStamp");

            entity.Property(e => e.DocKey).ValueGeneratedNever();
            entity.Property(e => e.AgingDate).HasColumnType("datetime");
            entity.Property(e => e.BranchCode).HasMaxLength(20);
            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.CurrencyCode).HasMaxLength(5);
            entity.Property(e => e.CurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.DebtorCode).HasMaxLength(12);
            entity.Property(e => e.Description).HasMaxLength(80);
            entity.Property(e => e.DisplayTerm).HasMaxLength(30);
            entity.Property(e => e.Dntype)
                .HasMaxLength(12)
                .HasColumnName("DNType");
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.DocStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DueDate).HasColumnType("datetime");
            entity.Property(e => e.ExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ExpiryTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.ForecastDueDate).HasColumnType("datetime");
            entity.Property(e => e.GltrxId).HasColumnName("GLTrxID");
            entity.Property(e => e.InclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("F")
                .IsFixedLength();
            entity.Property(e => e.IsJournal)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Jekey).HasColumnName("JEKey");
            entity.Property(e => e.JournalType).HasMaxLength(10);
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.LocalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalPaymentAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTotal2).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalWithholdingTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalWithholdingVat)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("LocalWithholdingVAT");
            entity.Property(e => e.NetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.OurInvoiceNo).HasMaxLength(100);
            entity.Property(e => e.Outstanding).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.PaymentAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Reason).HasMaxLength(80);
            entity.Property(e => e.Ref).HasMaxLength(40);
            entity.Property(e => e.RefNo2).HasMaxLength(30);
            entity.Property(e => e.RevalueRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.SalesAgent).HasMaxLength(12);
            entity.Property(e => e.SourceType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyWithholdingTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyWithholdingVat)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("TaxCurrencyWithholdingVAT");
            entity.Property(e => e.TaxDate).HasColumnType("datetime");
            entity.Property(e => e.TaxDocNo).HasMaxLength(20);
            entity.Property(e => e.TaxEntityId).HasColumnName("TaxEntityID");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ToTaxCurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.Total).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Total2).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalRevalueGainLoss).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.WhtpostingDate)
                .HasColumnType("datetime")
                .HasColumnName("WHTPostingDate");
            entity.Property(e => e.WithholdingTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.WithholdingVat)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("WithholdingVAT");

            entity.HasOne(d => d.CreatedUser).WithMany(p => p.ArdnCreatedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.CreatedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ARDN_CreatedUserID");

            entity.HasOne(d => d.CurrencyCodeNavigation).WithMany(p => p.Ardns)
                .HasForeignKey(d => d.CurrencyCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ARDN_CurrencyCode");

            entity.HasOne(d => d.DebtorCodeNavigation).WithMany(p => p.Ardns)
                .HasForeignKey(d => d.DebtorCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ARDN_DebtorCode");

            entity.HasOne(d => d.DisplayTermNavigation).WithMany(p => p.Ardns)
                .HasPrincipalKey(p => p.DisplayTerm)
                .HasForeignKey(d => d.DisplayTerm)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ARDN_DisplayTerm");

            entity.HasOne(d => d.DntypeNavigation).WithMany(p => p.Ardns)
                .HasPrincipalKey(p => p.Dntype1)
                .HasForeignKey(d => d.Dntype)
                .HasConstraintName("FK_ARDN_DNType");

            entity.HasOne(d => d.JournalTypeNavigation).WithMany(p => p.Ardns)
                .HasPrincipalKey(p => p.JournalType)
                .HasForeignKey(d => d.JournalType)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ARDN_JournalType");

            entity.HasOne(d => d.LastModifiedUser).WithMany(p => p.ArdnLastModifiedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.LastModifiedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ARDN_LastModifiedUserID");

            entity.HasOne(d => d.SalesAgentNavigation).WithMany(p => p.Ardns)
                .HasPrincipalKey(p => p.SalesAgent1)
                .HasForeignKey(d => d.SalesAgent)
                .HasConstraintName("FK_ARDN_SalesAgent");

            entity.HasOne(d => d.TaxEntity).WithMany(p => p.Ardns)
                .HasForeignKey(d => d.TaxEntityId)
                .HasConstraintName("FK_ARDN_TaxEntityID");

            entity.HasOne(d => d.Branch).WithMany(p => p.Ardns)
                .HasPrincipalKey(p => new { p.AccNo, p.BranchCode })
                .HasForeignKey(d => new { d.DebtorCode, d.BranchCode })
                .HasConstraintName("FK_ARDN_BranchCode");
        });

        modelBuilder.Entity<Ardndtl>(entity =>
        {
            entity.HasKey(e => e.DtlKey).HasName("PK_ARDNDTL_DtlKey");

            entity.ToTable("ARDNDTL");

            entity.HasIndex(e => e.DocKey, "IX_ARDNDTL_DocKey");

            entity.Property(e => e.DtlKey).ValueGeneratedNever();
            entity.Property(e => e.AccNo).HasMaxLength(12);
            entity.Property(e => e.Amount).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Atc)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("ATC");
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.KnockOffAmount).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalNetAmount).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalSubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxAdjustment).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.NetAmount).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.SourceDtlType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SupplyPurchase)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TariffCode).HasMaxLength(12);
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxAdjustment).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCode).HasMaxLength(14);
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxExportCountry).HasMaxLength(50);
            entity.Property(e => e.TaxPermitNo).HasMaxLength(20);
            entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ToAccountRate).HasColumnType("decimal(19, 12)");

            entity.HasOne(d => d.AccNoNavigation).WithMany(p => p.Ardndtls)
                .HasForeignKey(d => d.AccNo)
                .HasConstraintName("FK_ARDNDTL_AccNo");

            entity.HasOne(d => d.AtcNavigation).WithMany(p => p.Ardndtls)
                .HasForeignKey(d => d.Atc)
                .HasConstraintName("FK_ARDNDTL_ATC");

            entity.HasOne(d => d.DeptNoNavigation).WithMany(p => p.Ardndtls)
                .HasForeignKey(d => d.DeptNo)
                .HasConstraintName("FK_ARDNDTL_DeptNo");

            entity.HasOne(d => d.ProjNoNavigation).WithMany(p => p.Ardndtls)
                .HasForeignKey(d => d.ProjNo)
                .HasConstraintName("FK_ARDNDTL_ProjNo");

            entity.HasOne(d => d.TariffCodeNavigation).WithMany(p => p.Ardndtls)
                .HasPrincipalKey(p => p.TariffCode)
                .HasForeignKey(d => d.TariffCode)
                .HasConstraintName("FK_ARDNDTL_TariffCode");

            entity.HasOne(d => d.TaxCodeNavigation).WithMany(p => p.Ardndtls)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.TaxCode)
                .HasConstraintName("FK_ARDNDTL_TaxCode");
        });

        modelBuilder.Entity<Area>(entity =>
        {
            entity.HasKey(e => e.AutoKey).HasName("PK_Area_AutoKey");

            entity.ToTable("Area", tb =>
                {
                    tb.HasTrigger("AreaChangeLog");
                    tb.HasTrigger("UpdateAreaChangeCount");
                });

            entity.HasIndex(e => e.AreaCode, "UIX_Area_AreaCode").IsUnique();

            entity.HasIndex(e => e.Guid, "UIX_Area_Guid").IsUnique();

            entity.Property(e => e.AreaCode).HasMaxLength(12);
            entity.Property(e => e.Desc2).HasMaxLength(40);
            entity.Property(e => e.Description).HasMaxLength(40);
        });

        modelBuilder.Entity<Arinvoice>(entity =>
        {
            entity.HasKey(e => e.DocKey).HasName("PK_ARInvoice_DocKey");

            entity.ToTable("ARInvoice", tb => tb.HasTrigger("UpdateARInvoiceChangeCount"));

            entity.HasIndex(e => new { e.DebtorCode, e.DocKey, e.DocStatus, e.Cancelled }, "IX_ARInvoice_DebtorCode_DocKey_DocStatus_Cancelled");

            entity.HasIndex(e => e.DocNo, "IX_ARInvoice_DocNo").IsUnique();

            entity.HasIndex(e => new { e.DocStatus, e.ExpiryTimeStamp }, "IX_ARInvoice_DocStatus_ExpiryTimeStamp");

            entity.Property(e => e.DocKey).ValueGeneratedNever();
            entity.Property(e => e.AgingDate).HasColumnType("datetime");
            entity.Property(e => e.BranchCode).HasMaxLength(20);
            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.CurrencyCode).HasMaxLength(5);
            entity.Property(e => e.CurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.DebtorCode).HasMaxLength(12);
            entity.Property(e => e.Description).HasMaxLength(80);
            entity.Property(e => e.DisplayTerm).HasMaxLength(30);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.DocStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DueDate).HasColumnType("datetime");
            entity.Property(e => e.ExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ExpiryTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.ForecastDueDate).HasColumnType("datetime");
            entity.Property(e => e.GltrxId).HasColumnName("GLTrxID");
            entity.Property(e => e.InclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("F")
                .IsFixedLength();
            entity.Property(e => e.JournalType).HasMaxLength(10);
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.LocalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalPaymentAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTotal2).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalWithholdingTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalWithholdingVat)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("LocalWithholdingVAT");
            entity.Property(e => e.NetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Outstanding).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.PaymentAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.RefNo2).HasMaxLength(30);
            entity.Property(e => e.RevalueRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.SalesAgent).HasMaxLength(12);
            entity.Property(e => e.SourceType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyWithholdingTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyWithholdingVat)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("TaxCurrencyWithholdingVAT");
            entity.Property(e => e.TaxDate).HasColumnType("datetime");
            entity.Property(e => e.TaxDocNo).HasMaxLength(20);
            entity.Property(e => e.TaxEntityId).HasColumnName("TaxEntityID");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ToTaxCurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.Total).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Total2).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalRevalueGainLoss).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.WhtpostingDate)
                .HasColumnType("datetime")
                .HasColumnName("WHTPostingDate");
            entity.Property(e => e.WithholdingTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.WithholdingVat)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("WithholdingVAT");

            entity.HasOne(d => d.CreatedUser).WithMany(p => p.ArinvoiceCreatedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.CreatedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ARInvoice_CreatedUserID");

            entity.HasOne(d => d.CurrencyCodeNavigation).WithMany(p => p.Arinvoices)
                .HasForeignKey(d => d.CurrencyCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ARInvoice_CurrencyCode");

            entity.HasOne(d => d.DebtorCodeNavigation).WithMany(p => p.Arinvoices)
                .HasForeignKey(d => d.DebtorCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ARInvoice_DebtorCode");

            entity.HasOne(d => d.DisplayTermNavigation).WithMany(p => p.Arinvoices)
                .HasPrincipalKey(p => p.DisplayTerm)
                .HasForeignKey(d => d.DisplayTerm)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ARInvoice_DisplayTerm");

            entity.HasOne(d => d.JournalTypeNavigation).WithMany(p => p.Arinvoices)
                .HasPrincipalKey(p => p.JournalType)
                .HasForeignKey(d => d.JournalType)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ARInvoice_JournalType");

            entity.HasOne(d => d.LastModifiedUser).WithMany(p => p.ArinvoiceLastModifiedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.LastModifiedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ARInvoice_LastModifiedUserID");

            entity.HasOne(d => d.SalesAgentNavigation).WithMany(p => p.Arinvoices)
                .HasPrincipalKey(p => p.SalesAgent1)
                .HasForeignKey(d => d.SalesAgent)
                .HasConstraintName("FK_ARInvoice_SalesAgent");

            entity.HasOne(d => d.TaxEntity).WithMany(p => p.Arinvoices)
                .HasForeignKey(d => d.TaxEntityId)
                .HasConstraintName("FK_ARInvoice_TaxEntityID");

            entity.HasOne(d => d.Branch).WithMany(p => p.Arinvoices)
                .HasPrincipalKey(p => new { p.AccNo, p.BranchCode })
                .HasForeignKey(d => new { d.DebtorCode, d.BranchCode })
                .HasConstraintName("FK_ARInvoice_BranchCode");
        });

        modelBuilder.Entity<ArinvoiceDtl>(entity =>
        {
            entity.HasKey(e => e.DtlKey).HasName("PK_ARInvoiceDTL_DtlKey");

            entity.ToTable("ARInvoiceDTL");

            entity.HasIndex(e => e.DocKey, "IX_ARInvoiceDTL_DocKey");

            entity.Property(e => e.DtlKey).ValueGeneratedNever();
            entity.Property(e => e.AccNo).HasMaxLength(12);
            entity.Property(e => e.Amount).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Atc)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("ATC");
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.KnockOffAmount).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalNetAmount).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalSubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxAdjustment).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.NetAmount).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.SourceDtlType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TariffCode).HasMaxLength(12);
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxAdjustment).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCode).HasMaxLength(14);
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxExportCountry).HasMaxLength(50);
            entity.Property(e => e.TaxPermitNo).HasMaxLength(20);
            entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ToAccountRate).HasColumnType("decimal(19, 12)");

            entity.HasOne(d => d.AccNoNavigation).WithMany(p => p.ArinvoiceDtls)
                .HasForeignKey(d => d.AccNo)
                .HasConstraintName("FK_ARInvoiceDTL_AccNo");

            entity.HasOne(d => d.AtcNavigation).WithMany(p => p.ArinvoiceDtls)
                .HasForeignKey(d => d.Atc)
                .HasConstraintName("FK_ARInvoiceDTL_ATC");

            entity.HasOne(d => d.DeptNoNavigation).WithMany(p => p.ArinvoiceDtls)
                .HasForeignKey(d => d.DeptNo)
                .HasConstraintName("FK_ARInvoiceDTL_DeptNo");

            entity.HasOne(d => d.ProjNoNavigation).WithMany(p => p.ArinvoiceDtls)
                .HasForeignKey(d => d.ProjNo)
                .HasConstraintName("FK_ARInvoiceDTL_ProjNo");

            entity.HasOne(d => d.TariffCodeNavigation).WithMany(p => p.ArinvoiceDtls)
                .HasPrincipalKey(p => p.TariffCode)
                .HasForeignKey(d => d.TariffCode)
                .HasConstraintName("FK_ARInvoiceDTL_TariffCode");

            entity.HasOne(d => d.TaxCodeNavigation).WithMany(p => p.ArinvoiceDtls)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.TaxCode)
                .HasConstraintName("FK_ARInvoiceDTL_TaxCode");
        });

        modelBuilder.Entity<Arpayment>(entity =>
        {
            entity.HasKey(e => e.DocKey).HasName("PK_ARPayment_DocKey");

            entity.ToTable("ARPayment", tb => tb.HasTrigger("UpdateARPaymentChangeCount"));

            entity.HasIndex(e => e.DocNo, "IX_ARPayment_DocNo").IsUnique();

            entity.HasIndex(e => new { e.DocStatus, e.ExpiryTimeStamp }, "IX_ARPayment_DocStatus_ExpiryTimeStamp");

            entity.HasIndex(e => new { e.DocStatus, e.ExpiryTimeStamp, e.DocKey }, "IX_ARPayment_DocStatus_ExpiryTimeStamp_DocKey");

            entity.Property(e => e.DocKey).ValueGeneratedNever();
            entity.Property(e => e.BranchCode).HasMaxLength(20);
            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Cbkey).HasColumnName("CBKey");
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.CurrencyCode).HasMaxLength(5);
            entity.Property(e => e.DebtorCode).HasMaxLength(12);
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Description).HasMaxLength(80);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.DocNo2).HasMaxLength(25);
            entity.Property(e => e.DocStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ExpiryTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.GltrxId).HasColumnName("GLTrxID");
            entity.Property(e => e.GstjedocKey).HasColumnName("GSTJEDocKey");
            entity.Property(e => e.HandOverDate).HasColumnType("datetime");
            entity.Property(e => e.KnockOffAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.LocalPaymentAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalUnappliedAmount).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalWithholdingTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.PaymentAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.ReferCndocDate)
                .HasColumnType("datetime")
                .HasColumnName("ReferCNDocDate");
            entity.Property(e => e.ReferCndocKey).HasColumnName("ReferCNDocKey");
            entity.Property(e => e.ReferCndocNo)
                .HasMaxLength(30)
                .HasColumnName("ReferCNDocNo");
            entity.Property(e => e.ReferCnreason)
                .HasMaxLength(80)
                .HasColumnName("ReferCNReason");
            entity.Property(e => e.RefundAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.RevalueRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.SourceType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.SstjedocKey).HasColumnName("SSTJEDocKey");
            entity.Property(e => e.TaxCurrencyWithholdingTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ToDebtorRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.ToHomeRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.TotalRevalueGainLoss).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.WithholdingTax).HasColumnType("decimal(19, 2)");

            entity.HasOne(d => d.CreatedUser).WithMany(p => p.ArpaymentCreatedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.CreatedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ARPayment_CreatedUserID");

            entity.HasOne(d => d.CurrencyCodeNavigation).WithMany(p => p.Arpayments)
                .HasForeignKey(d => d.CurrencyCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ARPayment_CurrencyCode");

            entity.HasOne(d => d.DebtorCodeNavigation).WithMany(p => p.Arpayments)
                .HasForeignKey(d => d.DebtorCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ARPayment_DebtorCode");

            entity.HasOne(d => d.DeptNoNavigation).WithMany(p => p.Arpayments)
                .HasForeignKey(d => d.DeptNo)
                .HasConstraintName("FK_ARPayment_DeptNo");

            entity.HasOne(d => d.LastModifiedUser).WithMany(p => p.ArpaymentLastModifiedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.LastModifiedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ARPayment_LastModifiedUserID");

            entity.HasOne(d => d.ProjNoNavigation).WithMany(p => p.Arpayments)
                .HasForeignKey(d => d.ProjNo)
                .HasConstraintName("FK_ARPayment_ProjNo");

            entity.HasOne(d => d.Branch).WithMany(p => p.Arpayments)
                .HasPrincipalKey(p => new { p.AccNo, p.BranchCode })
                .HasForeignKey(d => new { d.DebtorCode, d.BranchCode })
                .HasConstraintName("FK_ARPayment_BranchCode");
        });

        modelBuilder.Entity<ArpaymentDtl>(entity =>
        {
            entity.HasKey(e => e.DtlKey).HasName("PK_ARPaymentDTL_DtlKey");

            entity.ToTable("ARPaymentDTL");

            entity.HasIndex(e => e.DocKey, "IX_ARPaymentDTL_DocKey");

            entity.Property(e => e.DtlKey).ValueGeneratedNever();
            entity.Property(e => e.BankCharge).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.BankChargeDeptNo).HasMaxLength(10);
            entity.Property(e => e.BankChargeProjNo).HasMaxLength(10);
            entity.Property(e => e.BankChargeTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.BankChargeTaxCode).HasMaxLength(14);
            entity.Property(e => e.BankChargeTaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.BankChargeTaxRefNo).HasMaxLength(30);
            entity.Property(e => e.ChequeNo).HasMaxLength(30);
            entity.Property(e => e.DebtorPaymentAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.IsRchq)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IsRCHQ");
            entity.Property(e => e.LocalPaymentAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.PaymentAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.PaymentBy).HasMaxLength(20);
            entity.Property(e => e.PaymentMethod).HasMaxLength(20);
            entity.Property(e => e.Rchqdate)
                .HasColumnType("datetime")
                .HasColumnName("RCHQDate");
            entity.Property(e => e.ToBankRate).HasColumnType("decimal(19, 12)");

            entity.HasOne(d => d.BankChargeDeptNoNavigation).WithMany(p => p.ArpaymentDtls)
                .HasForeignKey(d => d.BankChargeDeptNo)
                .HasConstraintName("FK_ARPaymentDTL_BankChargeDeptNo");

            entity.HasOne(d => d.BankChargeProjNoNavigation).WithMany(p => p.ArpaymentDtls)
                .HasForeignKey(d => d.BankChargeProjNo)
                .HasConstraintName("FK_ARPaymentDTL_BankChargeProjNo");

            entity.HasOne(d => d.BankChargeTaxCodeNavigation).WithMany(p => p.ArpaymentDtls)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.BankChargeTaxCode)
                .HasConstraintName("FK_ARPaymentDTL_BankChargeTaxCode");

            entity.HasOne(d => d.PaymentMethodNavigation).WithMany(p => p.ArpaymentDtls)
                .HasPrincipalKey(p => p.PaymentMethod1)
                .HasForeignKey(d => d.PaymentMethod)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ARPaymentDTL_PaymentMethod");
        });

        modelBuilder.Entity<ArpaymentKnockOff>(entity =>
        {
            entity.HasKey(e => e.KnockOffKey).HasName("PK_ARPaymentKnockOff_KnockOffKey");

            entity.ToTable("ARPaymentKnockOff");

            entity.HasIndex(e => e.DocKey, "IX_ARPaymentKnockOff_DocKey");

            entity.Property(e => e.KnockOffKey).ValueGeneratedNever();
            entity.Property(e => e.Amount).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.DiscountAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.FcrevalueKey).HasColumnName("FCRevalueKey");
            entity.Property(e => e.GainLossDate).HasColumnType("datetime");
            entity.Property(e => e.KnockOffDocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.Revalue)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.UseProjDept)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.DeptNoNavigation).WithMany(p => p.ArpaymentKnockOffs)
                .HasForeignKey(d => d.DeptNo)
                .HasConstraintName("FK_ARPaymentKnockOff_DeptNo");

            entity.HasOne(d => d.ProjNoNavigation).WithMany(p => p.ArpaymentKnockOffs)
                .HasForeignKey(d => d.ProjNo)
                .HasConstraintName("FK_ARPaymentKnockOff_ProjNo");
        });

        modelBuilder.Entity<ArpaymentKnockOffDetail>(entity =>
        {
            entity.HasKey(e => e.AutoKey).HasName("PK_ARPaymentKnockOffDetail_AutoKey");

            entity.ToTable("ARPaymentKnockOffDetail");

            entity.HasIndex(e => new { e.KnockOffKey, e.KnockOffDtlKey }, "UIX_ARPaymentKnockOffDetail_KnockOffKey_KnockOffDtlKey").IsUnique();

            entity.Property(e => e.Amount).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalInvoiceAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalPaymentAmt).HasColumnType("decimal(19, 2)");
        });

        modelBuilder.Entity<Arrefund>(entity =>
        {
            entity.HasKey(e => e.DocKey).HasName("PK_ARRefund_DocKey");

            entity.ToTable("ARRefund", tb => tb.HasTrigger("UpdateARRefundChangeCount"));

            entity.HasIndex(e => e.DocNo, "IX_ARRefund_DocNo").IsUnique();

            entity.HasIndex(e => new { e.DocStatus, e.ExpiryTimeStamp }, "IX_ARRefund_DocStatus_ExpiryTimeStamp");

            entity.HasIndex(e => e.EinvoiceTraceId, "IX_ARRefund_EInvoiceTraceId");

            entity.Property(e => e.DocKey).ValueGeneratedNever();
            entity.Property(e => e.BranchCode).HasMaxLength(20);
            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Cbkey).HasColumnName("CBKey");
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.CurrencyCode).HasMaxLength(5);
            entity.Property(e => e.DebtorCode).HasMaxLength(12);
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Description).HasMaxLength(80);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.DocNo2).HasMaxLength(25);
            entity.Property(e => e.DocStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EinvoiceAipsubmissionDateTime)
                .HasColumnType("datetime")
                .HasColumnName("EInvoiceAIPSubmissionDateTime");
            entity.Property(e => e.EinvoiceCancelDateTime)
                .HasColumnType("datetime")
                .HasColumnName("EInvoiceCancelDateTime");
            entity.Property(e => e.EinvoiceCancelReason)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceCancelReason");
            entity.Property(e => e.EinvoiceError)
                .IsUnicode(false)
                .HasColumnName("EInvoiceError");
            entity.Property(e => e.EinvoiceIssueDateTime)
                .HasColumnType("datetime")
                .HasColumnName("EInvoiceIssueDateTime");
            entity.Property(e => e.EinvoiceStatus)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceStatus");
            entity.Property(e => e.EinvoiceSubmissionDateTime)
                .HasColumnType("datetime")
                .HasColumnName("EInvoiceSubmissionDateTime");
            entity.Property(e => e.EinvoiceSubmissionUuid)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceSubmissionUuid");
            entity.Property(e => e.EinvoiceTraceId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceTraceId");
            entity.Property(e => e.EinvoiceUuid)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceUuid");
            entity.Property(e => e.EinvoiceValidatedDateTime)
                .HasColumnType("datetime")
                .HasColumnName("EInvoiceValidatedDateTime");
            entity.Property(e => e.EinvoiceValidationLink)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("EInvoiceValidationLink");
            entity.Property(e => e.ExpiryTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.GltrxId).HasColumnName("GLTrxID");
            entity.Property(e => e.HandOverDate).HasColumnType("datetime");
            entity.Property(e => e.KnockOffAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.LocalPaymentAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalWithholdingTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.PaymentAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.ReferenceInvoiceNo).HasMaxLength(100);
            entity.Property(e => e.RevalueRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.SourceType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.SubmitEinvoice)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SubmitEInvoice");
            entity.Property(e => e.TaxCurrencyWithholdingTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ToDebtorRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.ToHomeRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.WithholdingTax).HasColumnType("decimal(19, 2)");

            entity.HasOne(d => d.CreatedUser).WithMany(p => p.ArrefundCreatedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.CreatedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ARRefund_CreatedUserID");

            entity.HasOne(d => d.CurrencyCodeNavigation).WithMany(p => p.Arrefunds)
                .HasForeignKey(d => d.CurrencyCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ARRefund_CurrencyCode");

            entity.HasOne(d => d.DebtorCodeNavigation).WithMany(p => p.Arrefunds)
                .HasForeignKey(d => d.DebtorCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ARRefund_DebtorCode");

            entity.HasOne(d => d.DeptNoNavigation).WithMany(p => p.Arrefunds)
                .HasForeignKey(d => d.DeptNo)
                .HasConstraintName("FK_ARRefund_DeptNo");

            entity.HasOne(d => d.LastModifiedUser).WithMany(p => p.ArrefundLastModifiedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.LastModifiedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ARRefund_LastModifiedUserID");

            entity.HasOne(d => d.ProjNoNavigation).WithMany(p => p.Arrefunds)
                .HasForeignKey(d => d.ProjNo)
                .HasConstraintName("FK_ARRefund_ProjNo");

            entity.HasOne(d => d.Branch).WithMany(p => p.Arrefunds)
                .HasPrincipalKey(p => new { p.AccNo, p.BranchCode })
                .HasForeignKey(d => new { d.DebtorCode, d.BranchCode })
                .HasConstraintName("FK_ARRefund_BranchCode");
        });

        modelBuilder.Entity<ArrefundDtl>(entity =>
        {
            entity.HasKey(e => e.DtlKey).HasName("PK_ARRefundDTL_DtlKey");

            entity.ToTable("ARRefundDTL");

            entity.Property(e => e.DtlKey).ValueGeneratedNever();
            entity.Property(e => e.BankCharge).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.BankChargeDeptNo).HasMaxLength(10);
            entity.Property(e => e.BankChargeProjNo).HasMaxLength(10);
            entity.Property(e => e.BankChargeTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.BankChargeTaxCode).HasMaxLength(14);
            entity.Property(e => e.BankChargeTaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.BankChargeTaxRefNo).HasMaxLength(30);
            entity.Property(e => e.ChequeNo).HasMaxLength(30);
            entity.Property(e => e.DebtorPaymentAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.IsRchq)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IsRCHQ");
            entity.Property(e => e.LocalPaymentAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.PaymentAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.PaymentBy).HasMaxLength(20);
            entity.Property(e => e.PaymentMethod).HasMaxLength(20);
            entity.Property(e => e.Rchqdate)
                .HasColumnType("datetime")
                .HasColumnName("RCHQDate");
            entity.Property(e => e.ToBankRate).HasColumnType("decimal(19, 12)");

            entity.HasOne(d => d.BankChargeDeptNoNavigation).WithMany(p => p.ArrefundDtls)
                .HasForeignKey(d => d.BankChargeDeptNo)
                .HasConstraintName("FK_ARRefundDTL_BankChargeDeptNo");

            entity.HasOne(d => d.BankChargeProjNoNavigation).WithMany(p => p.ArrefundDtls)
                .HasForeignKey(d => d.BankChargeProjNo)
                .HasConstraintName("FK_ARRefundDTL_BankChargeProjNo");

            entity.HasOne(d => d.BankChargeTaxCodeNavigation).WithMany(p => p.ArrefundDtls)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.BankChargeTaxCode)
                .HasConstraintName("FK_ARRefundDTL_BankChargeTaxCode");

            entity.HasOne(d => d.PaymentMethodNavigation).WithMany(p => p.ArrefundDtls)
                .HasPrincipalKey(p => p.PaymentMethod1)
                .HasForeignKey(d => d.PaymentMethod)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ARRefundDTL_PaymentMethod");
        });

        modelBuilder.Entity<ArrefundKnockOff>(entity =>
        {
            entity.HasKey(e => e.KnockOffKey).HasName("PK_ARRefundKnockOff_KnockOffKey");

            entity.ToTable("ARRefundKnockOff");

            entity.HasIndex(e => e.DocKey, "IX_ARRefundKnockOff_DocKey");

            entity.Property(e => e.KnockOffKey).ValueGeneratedNever();
            entity.Property(e => e.Amount).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.FcrevalueKey).HasColumnName("FCRevalueKey");
            entity.Property(e => e.GainLossDate).HasColumnType("datetime");
            entity.Property(e => e.KnockOffDocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.Revalue)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.UseProjDept)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.DeptNoNavigation).WithMany(p => p.ArrefundKnockOffs)
                .HasForeignKey(d => d.DeptNo)
                .HasConstraintName("FK_ARRefundKnockOff_DeptNo");

            entity.HasOne(d => d.ProjNoNavigation).WithMany(p => p.ArrefundKnockOffs)
                .HasForeignKey(d => d.ProjNo)
                .HasConstraintName("FK_ARRefundKnockOff_ProjNo");
        });

        modelBuilder.Entity<ArrefundKnockOffDetail>(entity =>
        {
            entity.HasKey(e => e.AutoKey).HasName("PK_ARRefundKnockOffDetail_AutoKey");

            entity.ToTable("ARRefundKnockOffDetail");

            entity.HasIndex(e => new { e.KnockOffKey, e.KnockOffDtlKey }, "UIX_ARRefundKnockOffDetail_KnockOffKey_KnockOffDtlKey").IsUnique();

            entity.Property(e => e.Amount).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalPaymentAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalRefundAmt).HasColumnType("decimal(19, 2)");
        });

        modelBuilder.Entity<Asm>(entity =>
        {
            entity.HasKey(e => e.DocKey).HasName("PK_ASM_DocKey");

            entity.ToTable("ASM", tb => tb.HasTrigger("UpdateASMChangeCount"));

            entity.HasIndex(e => e.DocNo, "IX_ASM_DocNo").IsUnique();

            entity.Property(e => e.DocKey).ValueGeneratedNever();
            entity.Property(e => e.AssemblyCost).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.CanSync)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.Dismantled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("F")
                .IsFixedLength();
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.FromAsmorderDocKey).HasColumnName("FromASMOrderDocKey");
            entity.Property(e => e.Guid).HasDefaultValueSql("(newid())");
            entity.Property(e => e.IsMultilevel)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.NetTotal).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.RefDocNo).HasMaxLength(30);
            entity.Property(e => e.Remark1).HasMaxLength(40);
            entity.Property(e => e.Remark2).HasMaxLength(40);
            entity.Property(e => e.Remark3).HasMaxLength(40);
            entity.Property(e => e.Remark4).HasMaxLength(40);
            entity.Property(e => e.Total).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.UdfSuperAppId)
                .HasMaxLength(32)
                .HasColumnName("UDF_SuperAppId");

            entity.HasOne(d => d.CreatedUser).WithMany(p => p.AsmCreatedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.CreatedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ASM_CreatedUserID");

            entity.HasOne(d => d.DeptNoNavigation).WithMany(p => p.Asms)
                .HasForeignKey(d => d.DeptNo)
                .HasConstraintName("FK_ASM_DeptNo");

            entity.HasOne(d => d.LastModifiedUser).WithMany(p => p.AsmLastModifiedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.LastModifiedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ASM_LastModifiedUserID");

            entity.HasOne(d => d.LocationNavigation).WithMany(p => p.Asms)
                .HasPrincipalKey(p => p.Location1)
                .HasForeignKey(d => d.Location)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ASM_Location");

            entity.HasOne(d => d.ProjNoNavigation).WithMany(p => p.Asms)
                .HasForeignKey(d => d.ProjNo)
                .HasConstraintName("FK_ASM_ProjNo");

            entity.HasOne(d => d.ItemBatch).WithMany(p => p.Asms)
                .HasPrincipalKey(p => new { p.ItemCode, p.BatchNo })
                .HasForeignKey(d => new { d.ItemCode, d.BatchNo })
                .HasConstraintName("FK_ASM_ItemBatch");
        });

        modelBuilder.Entity<AsmRprocessing>(entity =>
        {
            entity.HasKey(e => e.DocKey).HasName("PK_AsmRProcessing_DocKey");

            entity.ToTable("AsmRProcessing");

            entity.Property(e => e.DocKey).ValueGeneratedNever();
            entity.Property(e => e.AodocKey).HasColumnName("AODocKey");
            entity.Property(e => e.AsmdocKey).HasColumnName("ASMDocKey");
            entity.Property(e => e.AsmdocNo)
                .HasMaxLength(30)
                .HasColumnName("ASMDocNo");
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.Remark).HasMaxLength(100);
            entity.Property(e => e.RequestQty).HasColumnType("decimal(25, 8)");

            entity.HasOne(d => d.CreatedUser).WithMany(p => p.AsmRprocessingCreatedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.CreatedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AsmRProcessing_CreatedUserID");

            entity.HasOne(d => d.DeptNoNavigation).WithMany(p => p.AsmRprocessings)
                .HasForeignKey(d => d.DeptNo)
                .HasConstraintName("FK_AsmRProcessing_DeptNo");

            entity.HasOne(d => d.ItemCodeNavigation).WithMany(p => p.AsmRprocessings)
                .HasPrincipalKey(p => p.ItemCode)
                .HasForeignKey(d => d.ItemCode)
                .HasConstraintName("FK_AsmRProcessing_ItemCode");

            entity.HasOne(d => d.LastModifiedUser).WithMany(p => p.AsmRprocessingLastModifiedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.LastModifiedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AsmRProcessing_LastModifiedUserID");

            entity.HasOne(d => d.LocationNavigation).WithMany(p => p.AsmRprocessings)
                .HasPrincipalKey(p => p.Location1)
                .HasForeignKey(d => d.Location)
                .HasConstraintName("FK_AsmRProcessing_Location");

            entity.HasOne(d => d.ProjNoNavigation).WithMany(p => p.AsmRprocessings)
                .HasForeignKey(d => d.ProjNo)
                .HasConstraintName("FK_AsmRProcessing_ProjNo");
        });

        modelBuilder.Entity<Asmbomoptional>(entity =>
        {
            entity.HasKey(e => e.DtlKey).HasName("PK_ASMBOMOptional_DtlKey");

            entity.ToTable("ASMBOMOptional");

            entity.Property(e => e.DtlKey).ValueGeneratedNever();
            entity.Property(e => e.BomoptionalKey).HasColumnName("BOMOptionalKey");
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
        });

        modelBuilder.Entity<Asmdtl>(entity =>
        {
            entity.HasKey(e => e.DtlKey).HasName("PK_ASMDTL_DtlKey");

            entity.ToTable("ASMDTL");

            entity.HasIndex(e => e.DocKey, "IX_ASMDTL_DocKey");

            entity.Property(e => e.DtlKey).ValueGeneratedNever();
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Desc2).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.DismantledQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.FromAsmorderDtlKey).HasColumnName("FromASMOrderDtlKey");
            entity.Property(e => e.Guid).HasDefaultValueSql("(newid())");
            entity.Property(e => e.IsBomitem)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IsBOMItem");
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.ItemCost).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.Numbering).HasMaxLength(6);
            entity.Property(e => e.OrderQty)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(25, 8)");
            entity.Property(e => e.OverHeadCost).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.PrintOut)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Remark).HasMaxLength(40);
            entity.Property(e => e.SubTotalCost).HasColumnType("decimal(25, 8)");

            entity.HasOne(d => d.DeptNoNavigation).WithMany(p => p.Asmdtls)
                .HasForeignKey(d => d.DeptNo)
                .HasConstraintName("FK_ASMDTL_DeptNo");

            entity.HasOne(d => d.ItemCodeNavigation).WithMany(p => p.Asmdtls)
                .HasPrincipalKey(p => p.ItemCode)
                .HasForeignKey(d => d.ItemCode)
                .HasConstraintName("FK_ASMDTL_ItemCode");

            entity.HasOne(d => d.LocationNavigation).WithMany(p => p.Asmdtls)
                .HasPrincipalKey(p => p.Location1)
                .HasForeignKey(d => d.Location)
                .HasConstraintName("FK_ASMDTL_Location");

            entity.HasOne(d => d.ProjNoNavigation).WithMany(p => p.Asmdtls)
                .HasForeignKey(d => d.ProjNo)
                .HasConstraintName("FK_ASMDTL_ProjNo");

            entity.HasOne(d => d.ItemBatch).WithMany(p => p.Asmdtls)
                .HasPrincipalKey(p => new { p.ItemCode, p.BatchNo })
                .HasForeignKey(d => new { d.ItemCode, d.BatchNo })
                .HasConstraintName("FK_ASMDTL_ItemBatch");
        });

        modelBuilder.Entity<Asmorder>(entity =>
        {
            entity.HasKey(e => e.DocKey).HasName("PK_ASMOrder_DocKey");

            entity.ToTable("ASMOrder", tb => tb.HasTrigger("UpdateASMOrderChangeCount"));

            entity.HasIndex(e => e.DocNo, "IX_ASMOrder_DocNo").IsUnique();

            entity.HasIndex(e => e.FromDocDtlKey, "IX_ASMOrder_FromDocDtlKey");

            entity.Property(e => e.DocKey).ValueGeneratedNever();
            entity.Property(e => e.AssemblyCost).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.CanSync)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.ExpectedCompletedDate).HasMaxLength(20);
            entity.Property(e => e.FromDocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.Guid).HasDefaultValueSql("(newid())");
            entity.Property(e => e.IsMultilevel)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.LastAopmodified)
                .HasColumnType("datetime")
                .HasColumnName("LastAOPModified");
            entity.Property(e => e.LastAopmodifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastAOPModifiedUserID");
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.NetTotal).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.RefDocNo).HasMaxLength(30);
            entity.Property(e => e.Remark1).HasMaxLength(40);
            entity.Property(e => e.Remark2).HasMaxLength(40);
            entity.Property(e => e.Remark3).HasMaxLength(40);
            entity.Property(e => e.Remark4).HasMaxLength(40);
            entity.Property(e => e.Total).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.TotalAssemblyRequestQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.TransferedQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.UdfSuperAppId)
                .HasMaxLength(32)
                .HasColumnName("UDF_SuperAppId");

            entity.HasOne(d => d.CreatedUser).WithMany(p => p.AsmorderCreatedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.CreatedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ASMOrder_CreatedUserID");

            entity.HasOne(d => d.DeptNoNavigation).WithMany(p => p.Asmorders)
                .HasForeignKey(d => d.DeptNo)
                .HasConstraintName("FK_ASMOrder_DeptNo");

            entity.HasOne(d => d.ItemCodeNavigation).WithMany(p => p.Asmorders)
                .HasPrincipalKey(p => p.ItemCode)
                .HasForeignKey(d => d.ItemCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ASMOrder_ItemCode");

            entity.HasOne(d => d.LastAopmodifiedUser).WithMany(p => p.AsmorderLastAopmodifiedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.LastAopmodifiedUserId)
                .HasConstraintName("FK_ASMOrder_LastAOPModifiedUserID");

            entity.HasOne(d => d.LastModifiedUser).WithMany(p => p.AsmorderLastModifiedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.LastModifiedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ASMOrder_LastModifiedUserID");

            entity.HasOne(d => d.LocationNavigation).WithMany(p => p.Asmorders)
                .HasPrincipalKey(p => p.Location1)
                .HasForeignKey(d => d.Location)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ASMOrder_Location");

            entity.HasOne(d => d.ProjNoNavigation).WithMany(p => p.Asmorders)
                .HasForeignKey(d => d.ProjNo)
                .HasConstraintName("FK_ASMOrder_ProjNo");

            entity.HasOne(d => d.ItemBatch).WithMany(p => p.Asmorders)
                .HasPrincipalKey(p => new { p.ItemCode, p.BatchNo })
                .HasForeignKey(d => new { d.ItemCode, d.BatchNo })
                .HasConstraintName("FK_ASMOrder_ItemBatch");
        });

        modelBuilder.Entity<AsmorderDtl>(entity =>
        {
            entity.HasKey(e => e.DtlKey).HasName("PK_ASMOrderDTL_DtlKey");

            entity.ToTable("ASMOrderDTL");

            entity.HasIndex(e => e.DocKey, "IX_ASMOrderDTL_DocKey");

            entity.Property(e => e.DtlKey).ValueGeneratedNever();
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Desc2).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.Guid).HasDefaultValueSql("(newid())");
            entity.Property(e => e.IsBomitem)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IsBOMItem");
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.ItemCost).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.LastAorpmodified)
                .HasColumnType("datetime")
                .HasColumnName("LastAORPModified");
            entity.Property(e => e.LastAorpmodifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastAORPModifiedUserID");
            entity.Property(e => e.LastPrmodified)
                .HasColumnType("datetime")
                .HasColumnName("LastPRModified");
            entity.Property(e => e.LastPrmodifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastPRModifiedUserID");
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.Numbering).HasMaxLength(6);
            entity.Property(e => e.OverHeadCost).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.PrintOut)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Remark).HasMaxLength(40);
            entity.Property(e => e.StockReceived)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("F")
                .IsFixedLength();
            entity.Property(e => e.SubTotalCost).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.TotalAssemblyOrderRequestQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.TotalPurchaseRequestQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.TransferPoqty)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("TransferPOQty");
            entity.Property(e => e.TransferedQty).HasColumnType("decimal(25, 8)");

            entity.HasOne(d => d.DeptNoNavigation).WithMany(p => p.AsmorderDtls)
                .HasForeignKey(d => d.DeptNo)
                .HasConstraintName("FK_ASMOrderDTL_DeptNo");

            entity.HasOne(d => d.ItemCodeNavigation).WithMany(p => p.AsmorderDtls)
                .HasPrincipalKey(p => p.ItemCode)
                .HasForeignKey(d => d.ItemCode)
                .HasConstraintName("FK_ASMOrderDTL_ItemCode");

            entity.HasOne(d => d.LastAorpmodifiedUser).WithMany(p => p.AsmorderDtlLastAorpmodifiedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.LastAorpmodifiedUserId)
                .HasConstraintName("FK_ASMOrderDTL_LastAORPModifiedUserID");

            entity.HasOne(d => d.LastPrmodifiedUser).WithMany(p => p.AsmorderDtlLastPrmodifiedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.LastPrmodifiedUserId)
                .HasConstraintName("FK_ASMOrderDTL_LastPRModifiedUserID");

            entity.HasOne(d => d.LocationNavigation).WithMany(p => p.AsmorderDtls)
                .HasPrincipalKey(p => p.Location1)
                .HasForeignKey(d => d.Location)
                .HasConstraintName("FK_ASMOrderDTL_Location");

            entity.HasOne(d => d.ProjNoNavigation).WithMany(p => p.AsmorderDtls)
                .HasForeignKey(d => d.ProjNo)
                .HasConstraintName("FK_ASMOrderDTL_ProjNo");

            entity.HasOne(d => d.ItemBatch).WithMany(p => p.AsmorderDtls)
                .HasPrincipalKey(p => new { p.ItemCode, p.BatchNo })
                .HasForeignKey(d => new { d.ItemCode, d.BatchNo })
                .HasConstraintName("FK_ASMOrderDTL_ItemBatch");
        });

        modelBuilder.Entity<AssetDisposal>(entity =>
        {
            entity.HasKey(e => e.DisposalKey).HasName("PK_AssetDisposal_DisposalKey");

            entity.ToTable("AssetDisposal");

            entity.Property(e => e.CurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.Description).HasMaxLength(80);
            entity.Property(e => e.DisposalValue).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.FixedAssetAccNo).HasMaxLength(12);
            entity.Property(e => e.LocalDisposalValue).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TransDate).HasColumnType("datetime");

            entity.HasOne(d => d.FixedAssetAccNoNavigation).WithMany(p => p.AssetDisposals)
                .HasForeignKey(d => d.FixedAssetAccNo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssetDisposal_FixedAssetAccNo");
        });

        modelBuilder.Entity<AssetLink>(entity =>
        {
            entity.HasKey(e => e.AutoKey).HasName("PK_AssetLink_AutoKey");

            entity.ToTable("AssetLink");

            entity.HasIndex(e => new { e.AssetAccNo, e.AssetDeprnAccNo }, "UIX_AssetLink_AssetAccNo_AssetDeprnAccNo").IsUnique();

            entity.Property(e => e.AssetAccNo).HasMaxLength(12);
            entity.Property(e => e.AssetDeprnAccNo).HasMaxLength(12);

            entity.HasOne(d => d.AssetAccNoNavigation).WithMany(p => p.AssetLinkAssetAccNoNavigations)
                .HasForeignKey(d => d.AssetAccNo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssetLink_AssetAccNo");

            entity.HasOne(d => d.AssetDeprnAccNoNavigation).WithMany(p => p.AssetLinkAssetDeprnAccNoNavigations)
                .HasForeignKey(d => d.AssetDeprnAccNo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssetLink_AssetDeprnAccNo");
        });

        modelBuilder.Entity<AutoPrice>(entity =>
        {
            entity.HasKey(e => e.AutoPriceKey).HasName("PK_AutoPrice_AutoPriceKey");

            entity.ToTable("AutoPrice");

            entity.Property(e => e.AutoPriceType).HasMaxLength(10);
            entity.Property(e => e.Enable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ForSale)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Name).HasMaxLength(60);
        });

        modelBuilder.Entity<BankRecon>(entity =>
        {
            entity.HasKey(e => e.AutoKey).HasName("PK_BankRecon_AutoKey");

            entity.ToTable("BankRecon");

            entity.HasIndex(e => new { e.AccNo, e.BankStatementDate }, "UIX_BankRecon_AccNo_BankStatementDate").IsUnique();

            entity.Property(e => e.AccNo).HasMaxLength(12);
            entity.Property(e => e.ActualBankStatementBalance).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.BankStatementDate).HasColumnType("datetime");

            entity.HasOne(d => d.AccNoNavigation).WithMany(p => p.BankRecons)
                .HasForeignKey(d => d.AccNo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BankRecon_AccNo");
        });

        modelBuilder.Entity<BankSlip>(entity =>
        {
            entity.HasKey(e => e.DocKey).HasName("PK_BankSlip_DocKey");

            entity.ToTable("BankSlip");

            entity.Property(e => e.DocKey).ValueGeneratedNever();
            entity.Property(e => e.BankAccNo).HasMaxLength(12);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
        });

        modelBuilder.Entity<BankTran>(entity =>
        {
            entity.HasKey(e => e.BankTransKey).HasName("PK_BankTrans_BankTransKey");

            entity.HasIndex(e => e.AccNo, "IX_BankTrans_AccNo");

            entity.HasIndex(e => e.BankStatementDate, "IX_BankTrans_BankStatementDate");

            entity.HasIndex(e => e.DtlKey, "IX_BankTrans_DtlKey");

            entity.HasIndex(e => new { e.SourceType, e.SourceKey }, "IX_BankTrans_SourceType_SourceKey");

            entity.Property(e => e.AccNo).HasMaxLength(12);
            entity.Property(e => e.BankStatementDate).HasColumnType("datetime");
            entity.Property(e => e.ChequeNo).HasMaxLength(30);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.PaymentAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SourceType)
                .HasMaxLength(2)
                .IsUnicode(false);

            entity.HasOne(d => d.AccNoNavigation).WithMany(p => p.BankTrans)
                .HasForeignKey(d => d.AccNo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BankTrans_AccNo");

            entity.HasOne(d => d.BankRecon).WithMany(p => p.BankTrans)
                .HasPrincipalKey(p => new { p.AccNo, p.BankStatementDate })
                .HasForeignKey(d => new { d.AccNo, d.BankStatementDate })
                .HasConstraintName("FK_BankTrans_AccNo_BankStatementDate");
        });

        modelBuilder.Entity<Bomoptional>(entity =>
        {
            entity.HasKey(e => e.BomoptionalKey).HasName("PK_BOMOptional_BOMOptionalKey");

            entity.ToTable("BOMOptional", tb => tb.HasTrigger("UpdateBOMOptionalChangeCount"));

            entity.Property(e => e.BomoptionalKey)
                .ValueGeneratedNever()
                .HasColumnName("BOMOptionalKey");
            entity.Property(e => e.BomoptionalCode)
                .HasMaxLength(30)
                .HasColumnName("BOMOptionalCode");
            entity.Property(e => e.Desc2).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.IsActive)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<BomoptionalDtl>(entity =>
        {
            entity.HasKey(e => e.DtlKey).HasName("PK_BOMOptionalDTL_DtlKey");

            entity.ToTable("BOMOptionalDTL");

            entity.Property(e => e.DtlKey).ValueGeneratedNever();
            entity.Property(e => e.BomoptionalKey).HasColumnName("BOMOptionalKey");
            entity.Property(e => e.OverheadCost).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubItemCode).HasMaxLength(30);

            entity.HasOne(d => d.SubItemCodeNavigation).WithMany(p => p.BomoptionalDtls)
                .HasPrincipalKey(p => p.ItemCode)
                .HasForeignKey(d => d.SubItemCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BOMOptionalDTL_SubItemCode");
        });

        modelBuilder.Entity<BomoptionalLink>(entity =>
        {
            entity.HasKey(e => e.BomoptionalLinkKey).HasName("PK_BOMOptionalLink_BOMOptionalLinkKey");

            entity.ToTable("BOMOptionalLink");

            entity.Property(e => e.BomoptionalLinkKey)
                .ValueGeneratedNever()
                .HasColumnName("BOMOptionalLinkKey");
            entity.Property(e => e.BomitemCode)
                .HasMaxLength(30)
                .HasColumnName("BOMItemCode");
            entity.Property(e => e.BomoptionalKey).HasColumnName("BOMOptionalKey");
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");

            entity.HasOne(d => d.BomitemCodeNavigation).WithMany(p => p.BomoptionalLinks)
                .HasPrincipalKey(p => p.ItemCode)
                .HasForeignKey(d => d.BomitemCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BOMOptionalLink_BOMItemCode");
        });

        modelBuilder.Entity<BonusPointAdj>(entity =>
        {
            entity.HasKey(e => e.DocKey).HasName("PK_BonusPointADJ_DocKey");

            entity.ToTable("BonusPointADJ", tb => tb.HasTrigger("UpdateBonusPointADJChangeCount"));

            entity.HasIndex(e => e.DocNo, "IX_BonusPointADJ_DocNo").IsUnique();

            entity.Property(e => e.DocKey).ValueGeneratedNever();
            entity.Property(e => e.CanSync)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.RefDocNo).HasMaxLength(30);
            entity.Property(e => e.Remark1).HasMaxLength(40);
            entity.Property(e => e.Remark2).HasMaxLength(40);
            entity.Property(e => e.Remark3).HasMaxLength(40);
            entity.Property(e => e.Remark4).HasMaxLength(40);

            entity.HasOne(d => d.CreatedUser).WithMany(p => p.BonusPointAdjCreatedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.CreatedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BonusPointADJ_CreatedUserID");

            entity.HasOne(d => d.LastModifiedUser).WithMany(p => p.BonusPointAdjLastModifiedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.LastModifiedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BonusPointADJ_LastModifiedUserID");
        });

        modelBuilder.Entity<BonusPointAdjdtl>(entity =>
        {
            entity.HasKey(e => e.DtlKey).HasName("PK_BonusPointADJDTL_DtlKey");

            entity.ToTable("BonusPointADJDTL");

            entity.Property(e => e.DtlKey).ValueGeneratedNever();
            entity.Property(e => e.MemberNo).HasMaxLength(20);
            entity.Property(e => e.Point).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.PrintOut)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.MemberNoNavigation).WithMany(p => p.BonusPointAdjdtls)
                .HasPrincipalKey(p => p.MemberNo)
                .HasForeignKey(d => d.MemberNo)
                .HasConstraintName("FK_BonusPointADJDTL_MemberNo");
        });

        modelBuilder.Entity<BonusPointRedemption>(entity =>
        {
            entity.HasKey(e => e.DocKey).HasName("PK_BonusPointRedemption_DocKey");

            entity.ToTable("BonusPointRedemption", tb => tb.HasTrigger("UpdateBonusPointRedemptionChangeCount"));

            entity.HasIndex(e => e.MemberNo, "IX_BonusPointAccNo");

            entity.HasIndex(e => e.DocNo, "IX_BonusPointRedemption_DocNo").IsUnique();

            entity.HasIndex(e => e.DebtorCode, "IX_DebtorCode");

            entity.HasIndex(e => e.DocNo, "IX_DocNo");

            entity.Property(e => e.DocKey).ValueGeneratedNever();
            entity.Property(e => e.CanSync)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.DebtorCode).HasMaxLength(12);
            entity.Property(e => e.Description).HasMaxLength(40);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.Guid).HasDefaultValueSql("(newid())");
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.MemberNo).HasMaxLength(20);
            entity.Property(e => e.PostToStock)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TotalPointRedeem).HasColumnType("decimal(19, 2)");

            entity.HasOne(d => d.CreatedUser).WithMany(p => p.BonusPointRedemptionCreatedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.CreatedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BonusPointRedemption_CreatedUserID");

            entity.HasOne(d => d.DebtorCodeNavigation).WithMany(p => p.BonusPointRedemptions)
                .HasForeignKey(d => d.DebtorCode)
                .HasConstraintName("FK_BonusPointRedemption_Debtor");

            entity.HasOne(d => d.LastModifiedUser).WithMany(p => p.BonusPointRedemptionLastModifiedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.LastModifiedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BonusPointRedemption_LastModifiedUserID");

            entity.HasOne(d => d.MemberNoNavigation).WithMany(p => p.BonusPointRedemptions)
                .HasPrincipalKey(p => p.MemberNo)
                .HasForeignKey(d => d.MemberNo)
                .HasConstraintName("FK_BonusPointRedemption_MemberNo");
        });

        modelBuilder.Entity<BonusPointRedemptionDtl>(entity =>
        {
            entity.HasKey(e => e.DtlKey).HasName("PK_BonusPointRedemptionDTL_DtlKey");

            entity.ToTable("BonusPointRedemptionDTL");

            entity.HasIndex(e => e.ItemCode, "IX_ItemCode");

            entity.Property(e => e.DtlKey).ValueGeneratedNever();
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.Guid).HasDefaultValueSql("(newid())");
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.PostToStockDate).HasColumnType("datetime");
            entity.Property(e => e.PrintOut)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SerialNoList).HasColumnType("ntext");
            entity.Property(e => e.SmallestQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.UnitPoint).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");

            entity.HasOne(d => d.DeptNoNavigation).WithMany(p => p.BonusPointRedemptionDtls)
                .HasForeignKey(d => d.DeptNo)
                .HasConstraintName("FK_BonusPointRedemptionDTL_DeptNo");

            entity.HasOne(d => d.DocKeyNavigation).WithMany(p => p.BonusPointRedemptionDtls)
                .HasForeignKey(d => d.DocKey)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BonusPointRedemptionDTL_DocKey");

            entity.HasOne(d => d.LocationNavigation).WithMany(p => p.BonusPointRedemptionDtls)
                .HasPrincipalKey(p => p.Location1)
                .HasForeignKey(d => d.Location)
                .HasConstraintName("FK_BonusPointRedemptionDTL_Location");

            entity.HasOne(d => d.ProjNoNavigation).WithMany(p => p.BonusPointRedemptionDtls)
                .HasForeignKey(d => d.ProjNo)
                .HasConstraintName("FK_BonusPointRedemptionDTL_ProjNo");

            entity.HasOne(d => d.ItemBatch).WithMany(p => p.BonusPointRedemptionDtls)
                .HasPrincipalKey(p => new { p.ItemCode, p.BatchNo })
                .HasForeignKey(d => new { d.ItemCode, d.BatchNo })
                .HasConstraintName("FK_BonusPointRedemptionDTL_ItemBatch");

            entity.HasOne(d => d.ItemUom).WithMany(p => p.BonusPointRedemptionDtls)
                .HasPrincipalKey(p => new { p.ItemCode, p.Uom })
                .HasForeignKey(d => new { d.ItemCode, d.Uom })
                .HasConstraintName("FK_BonusPointRedemptionDTL_ItemUOM");
        });

        modelBuilder.Entity<Branch>(entity =>
        {
            entity.HasKey(e => e.AutoKey).HasName("PK_Branch_AutoKey");

            entity.ToTable("Branch", tb => tb.HasTrigger("UpdateBranchChangeCount"));

            entity.HasIndex(e => new { e.AccNo, e.BranchCode }, "UIX_Branch_AccNo_BranchCode").IsUnique();

            entity.Property(e => e.AccNo).HasMaxLength(12);
            entity.Property(e => e.Address1).HasMaxLength(40);
            entity.Property(e => e.Address2).HasMaxLength(40);
            entity.Property(e => e.Address3).HasMaxLength(40);
            entity.Property(e => e.Address4).HasMaxLength(40);
            entity.Property(e => e.AreaCode).HasMaxLength(12);
            entity.Property(e => e.BranchCode).HasMaxLength(20);
            entity.Property(e => e.BranchName).HasMaxLength(100);
            entity.Property(e => e.Contact).HasMaxLength(40);
            entity.Property(e => e.EmailAddress).HasMaxLength(80);
            entity.Property(e => e.Fax1).HasMaxLength(25);
            entity.Property(e => e.Fax2).HasMaxLength(25);
            entity.Property(e => e.IsActive)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("T")
                .IsFixedLength();
            entity.Property(e => e.Mobile).HasMaxLength(25);
            entity.Property(e => e.Phone1).HasMaxLength(25);
            entity.Property(e => e.Phone2).HasMaxLength(25);
            entity.Property(e => e.PostCode).HasMaxLength(10);
            entity.Property(e => e.PurchaseAgent).HasMaxLength(12);
            entity.Property(e => e.SalesAgent).HasMaxLength(12);
            entity.Property(e => e.TaxEntityId).HasColumnName("TaxEntityID");

            entity.HasOne(d => d.AccNoNavigation).WithMany(p => p.Branches)
                .HasForeignKey(d => d.AccNo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Branch_AccNo");

            entity.HasOne(d => d.AreaCodeNavigation).WithMany(p => p.Branches)
                .HasPrincipalKey(p => p.AreaCode)
                .HasForeignKey(d => d.AreaCode)
                .HasConstraintName("FK_Branch_AreaCode");

            entity.HasOne(d => d.PurchaseAgentNavigation).WithMany(p => p.Branches)
                .HasPrincipalKey(p => p.PurchaseAgent1)
                .HasForeignKey(d => d.PurchaseAgent)
                .HasConstraintName("FK_Branch_PurchaseAgent");

            entity.HasOne(d => d.SalesAgentNavigation).WithMany(p => p.Branches)
                .HasPrincipalKey(p => p.SalesAgent1)
                .HasForeignKey(d => d.SalesAgent)
                .HasConstraintName("FK_Branch_SalesAgent");

            entity.HasOne(d => d.TaxEntity).WithMany(p => p.Branches)
                .HasForeignKey(d => d.TaxEntityId)
                .HasConstraintName("FK_Branch_TaxEntityID");
        });

        modelBuilder.Entity<Bsformat>(entity =>
        {
            entity.HasKey(e => e.AutoKey).HasName("PK_BSFormat_AutoKey");

            entity.ToTable("BSFormat");

            entity.Property(e => e.AccType).HasMaxLength(2);
            entity.Property(e => e.CreditAsPositive)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.RowType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.AccTypeNavigation).WithMany(p => p.Bsformats)
                .HasPrincipalKey(p => p.AccType1)
                .HasForeignKey(d => d.AccType)
                .HasConstraintName("FK_BSFormat_AccType");
        });

        modelBuilder.Entity<Budget>(entity =>
        {
            entity.HasKey(e => e.BudgetKey).HasName("PK_Budget_BudgetKey");

            entity.ToTable("Budget");

            entity.Property(e => e.BudgetKey).ValueGeneratedNever();
            entity.Property(e => e.BudgetName).HasMaxLength(20);
        });

        modelBuilder.Entity<BudgetPbalance>(entity =>
        {
            entity.HasKey(e => e.AutoKey).HasName("PK_BudgetPBalance_AutoKey");

            entity.ToTable("BudgetPBalance");

            entity.HasIndex(e => new { e.BudgetKey, e.PeriodNo, e.AccNo, e.ProjNo, e.DeptNo }, "IX_BudgetPBalance");

            entity.HasIndex(e => new { e.BudgetKey, e.PeriodNo, e.AccNo, e.ProjNo, e.DeptNo }, "UIX_BudgetPBalance_BudgetKey_PeriodNo_AccNo_ProjNo_DeptNo").IsUnique();

            entity.Property(e => e.AccNo)
                .HasMaxLength(12)
                .HasColumnName("AccNO");
            entity.Property(e => e.Amount).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.ProjNo).HasMaxLength(10);

            entity.HasOne(d => d.AccNoNavigation).WithMany(p => p.BudgetPbalances)
                .HasForeignKey(d => d.AccNo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BudgetPBalance_AccNo");

            entity.HasOne(d => d.DeptNoNavigation).WithMany(p => p.BudgetPbalances)
                .HasForeignKey(d => d.DeptNo)
                .HasConstraintName("FK_BudgetPBalance_DeptNo");

            entity.HasOne(d => d.ProjNoNavigation).WithMany(p => p.BudgetPbalances)
                .HasForeignKey(d => d.ProjNo)
                .HasConstraintName("FK_BudgetPBalance_ProjNo");
        });

        modelBuilder.Entity<C>(entity =>
        {
            entity.HasKey(e => e.DocKey).HasName("PK_CS_DocKey");

            entity.ToTable("CS", tb => tb.HasTrigger("UpdateCSChangeCount"));

            entity.HasIndex(e => e.DocNo, "IX_CS_DocNo").IsUnique();

            entity.HasIndex(e => e.EinvoiceTraceId, "IX_CS_EInvoiceTraceId");

            entity.HasIndex(e => new { e.ToDocType, e.ToDocKey }, "IX_CS_ToDocTypeKey");

            entity.Property(e => e.DocKey).ValueGeneratedNever();
            entity.Property(e => e.AnalysisNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Attention).HasMaxLength(40);
            entity.Property(e => e.AuthorisationNumberForCertifiedExporter)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.BranchCode).HasMaxLength(20);
            entity.Property(e => e.CalcDiscountOnUnitPrice)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CanSync)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CashPayment).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.CcapprovalCode)
                .HasMaxLength(10)
                .HasColumnName("CCApprovalCode");
            entity.Property(e => e.CidocKey).HasColumnName("CIDocKey");
            entity.Property(e => e.CidocNo)
                .HasMaxLength(30)
                .HasColumnName("CIDocNo");
            entity.Property(e => e.ConsolidatedEinvoice)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ConsolidatedEInvoice");
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.CurrencyCode).HasMaxLength(5);
            entity.Property(e => e.CurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.DebtorCode).HasMaxLength(12);
            entity.Property(e => e.DebtorName).HasMaxLength(100);
            entity.Property(e => e.DeliverAddr1).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr2).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr3).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr4).HasMaxLength(40);
            entity.Property(e => e.DeliverContact).HasMaxLength(40);
            entity.Property(e => e.DeliverFax1).HasMaxLength(25);
            entity.Property(e => e.DeliverPhone1).HasMaxLength(25);
            entity.Property(e => e.DeliveryTaxEntityId).HasColumnName("DeliveryTaxEntityID");
            entity.Property(e => e.Description).HasMaxLength(80);
            entity.Property(e => e.DisplayTerm).HasMaxLength(30);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.EinvoiceAipsubmissionDateTime)
                .HasColumnType("datetime")
                .HasColumnName("EInvoiceAIPSubmissionDateTime");
            entity.Property(e => e.EinvoiceCancelDateTime)
                .HasColumnType("datetime")
                .HasColumnName("EInvoiceCancelDateTime");
            entity.Property(e => e.EinvoiceCancelReason)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceCancelReason");
            entity.Property(e => e.EinvoiceError)
                .IsUnicode(false)
                .HasColumnName("EInvoiceError");
            entity.Property(e => e.EinvoiceIssueDateTime)
                .HasColumnType("datetime")
                .HasColumnName("EInvoiceIssueDateTime");
            entity.Property(e => e.EinvoiceStatus)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceStatus");
            entity.Property(e => e.EinvoiceSubmissionDateTime)
                .HasColumnType("datetime")
                .HasColumnName("EInvoiceSubmissionDateTime");
            entity.Property(e => e.EinvoiceSubmissionUuid)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceSubmissionUuid");
            entity.Property(e => e.EinvoiceTraceId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceTraceId");
            entity.Property(e => e.EinvoiceUuid)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceUuid");
            entity.Property(e => e.EinvoiceValidatedDateTime)
                .HasColumnType("datetime")
                .HasColumnName("EInvoiceValidatedDateTime");
            entity.Property(e => e.EinvoiceValidationLink)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("EInvoiceValidationLink");
            entity.Property(e => e.ExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Fax1).HasMaxLength(25);
            entity.Property(e => e.FinalTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer1TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Footer2Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer2TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Footer3Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer3TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.FreeTradeAgreementInformation)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.FreightAllowanceChargeAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.FreightAllowanceChargeReason)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FullTransferOption)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Guid).HasDefaultValueSql("(newid())");
            entity.Property(e => e.InclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("F")
                .IsFixedLength();
            entity.Property(e => e.Incoterms)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.InvAddr1).HasMaxLength(40);
            entity.Property(e => e.InvAddr2).HasMaxLength(40);
            entity.Property(e => e.InvAddr3).HasMaxLength(40);
            entity.Property(e => e.InvAddr4).HasMaxLength(40);
            entity.Property(e => e.IsRoundAdj)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("F")
                .IsFixedLength();
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.LocalAnalysisNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTotalCost).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.LocalWithholdingTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalWithholdingVat)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("LocalWithholdingVAT");
            entity.Property(e => e.MemberNo).HasMaxLength(20);
            entity.Property(e => e.MultiPrice).HasMaxLength(8);
            entity.Property(e => e.NetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.PaymentMode).HasDefaultValue((byte)0);
            entity.Property(e => e.Phone1).HasMaxLength(25);
            entity.Property(e => e.PostToGl)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PostToGL");
            entity.Property(e => e.PostToStock)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ReallocatePurchaseByProject)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("F")
                .IsFixedLength();
            entity.Property(e => e.ReallocatePurchaseByProjectJedocKey).HasColumnName("ReallocatePurchaseByProjectJEDocKey");
            entity.Property(e => e.ReallocatePurchaseByProjectNo).HasMaxLength(10);
            entity.Property(e => e.Ref).HasMaxLength(40);
            entity.Property(e => e.RefDocNo).HasMaxLength(30);
            entity.Property(e => e.RefNo2).HasMaxLength(30);
            entity.Property(e => e.ReferenceNumberOfCustomsFormNo1And9)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.ReferenceNumberOfCustomsFormNo2)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.Remark1).HasMaxLength(40);
            entity.Property(e => e.Remark2).HasMaxLength(40);
            entity.Property(e => e.Remark3).HasMaxLength(40);
            entity.Property(e => e.Remark4).HasMaxLength(40);
            entity.Property(e => e.RoundAdj).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SalesAgent).HasMaxLength(12);
            entity.Property(e => e.SalesExemptionExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.SalesExemptionNo).HasMaxLength(60);
            entity.Property(e => e.SalesLocation).HasMaxLength(8);
            entity.Property(e => e.SgeinvoiceAtdocKey).HasColumnName("SGEInvoiceATDocKey");
            entity.Property(e => e.SgeinvoiceAtdocNo)
                .HasMaxLength(100)
                .HasColumnName("SGEInvoiceATDocNo");
            entity.Property(e => e.ShipInfo).HasMaxLength(40);
            entity.Property(e => e.ShipVia).HasMaxLength(20);
            entity.Property(e => e.SubmitEinvoice)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SubmitEInvoice");
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyWithholdingTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyWithholdingVat)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("TaxCurrencyWithholdingVAT");
            entity.Property(e => e.TaxDate).HasColumnType("datetime");
            entity.Property(e => e.TaxDocNo).HasMaxLength(20);
            entity.Property(e => e.TaxEntityId).HasColumnName("TaxEntityID");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ToDocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.ToTaxCurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.Total).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalBonusPoint).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Transferable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.UdfDeliveredQty222)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("UDF_DeliveredQty222");
            entity.Property(e => e.UdfSuperAppId)
                .HasMaxLength(32)
                .HasColumnName("UDF_SuperAppId");
            entity.Property(e => e.WhtpostingDate)
                .HasColumnType("datetime")
                .HasColumnName("WHTPostingDate");
            entity.Property(e => e.WithholdingTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.WithholdingVat)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("WithholdingVAT");
            entity.Property(e => e.YourPodate)
                .HasColumnType("datetime")
                .HasColumnName("YourPODate");
            entity.Property(e => e.YourPono)
                .HasMaxLength(25)
                .HasColumnName("YourPONo");

            entity.HasOne(d => d.CreatedUser).WithMany(p => p.CCreatedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.CreatedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CS_CreatedUserID");

            entity.HasOne(d => d.CurrencyCodeNavigation).WithMany(p => p.Cs)
                .HasForeignKey(d => d.CurrencyCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CS_CurrencyCode");

            entity.HasOne(d => d.DebtorCodeNavigation).WithMany(p => p.Cs)
                .HasForeignKey(d => d.DebtorCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CS_DebtorCode");

            entity.HasOne(d => d.DisplayTermNavigation).WithMany(p => p.Cs)
                .HasPrincipalKey(p => p.DisplayTerm)
                .HasForeignKey(d => d.DisplayTerm)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CS_DisplayTerm");

            entity.HasOne(d => d.Footer1TaxCodeNavigation).WithMany(p => p.CFooter1TaxCodeNavigations)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.Footer1TaxCode)
                .HasConstraintName("FK_CS_Footer1TaxCode");

            entity.HasOne(d => d.Footer2TaxCodeNavigation).WithMany(p => p.CFooter2TaxCodeNavigations)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.Footer2TaxCode)
                .HasConstraintName("FK_CS_Footer2TaxCode");

            entity.HasOne(d => d.Footer3TaxCodeNavigation).WithMany(p => p.CFooter3TaxCodeNavigations)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.Footer3TaxCode)
                .HasConstraintName("FK_CS_Footer3TaxCode");

            entity.HasOne(d => d.LastModifiedUser).WithMany(p => p.CLastModifiedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.LastModifiedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CS_LastModifiedUserID");

            entity.HasOne(d => d.MemberNoNavigation).WithMany(p => p.Cs)
                .HasPrincipalKey(p => p.MemberNo)
                .HasForeignKey(d => d.MemberNo)
                .HasConstraintName("FK_CS_MemberNo");

            entity.HasOne(d => d.ReallocatePurchaseByProjectNoNavigation).WithMany(p => p.Cs)
                .HasForeignKey(d => d.ReallocatePurchaseByProjectNo)
                .HasConstraintName("FK_CS_ReallocatePurchaseByProjectNo");

            entity.HasOne(d => d.SalesAgentNavigation).WithMany(p => p.Cs)
                .HasPrincipalKey(p => p.SalesAgent1)
                .HasForeignKey(d => d.SalesAgent)
                .HasConstraintName("FK_CS_SalesAgent");

            entity.HasOne(d => d.SalesLocationNavigation).WithMany(p => p.Cs)
                .HasPrincipalKey(p => p.Location1)
                .HasForeignKey(d => d.SalesLocation)
                .HasConstraintName("FK_CS_SalesLocation");

            entity.HasOne(d => d.ShipViaNavigation).WithMany(p => p.Cs)
                .HasPrincipalKey(p => p.ShippingMethod1)
                .HasForeignKey(d => d.ShipVia)
                .HasConstraintName("FK_CS_ShipVia");

            entity.HasOne(d => d.TaxEntity).WithMany(p => p.Cs)
                .HasForeignKey(d => d.TaxEntityId)
                .HasConstraintName("FK_CS_TaxEntityID");

            entity.HasOne(d => d.Branch).WithMany(p => p.Cs)
                .HasPrincipalKey(p => new { p.AccNo, p.BranchCode })
                .HasForeignKey(d => new { d.DebtorCode, d.BranchCode })
                .HasConstraintName("FK_CS_BranchCode");
        });

        modelBuilder.Entity<CashFlowForecast>(entity =>
        {
            entity.HasKey(e => e.DocKey).HasName("PK_CashFlowForecast_DocKey");

            entity.ToTable("CashFlowForecast");

            entity.Property(e => e.DocKey).ValueGeneratedNever();
            entity.Property(e => e.Amount).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Description).HasMaxLength(50);
            entity.Property(e => e.EndDate).HasColumnType("datetime");
            entity.Property(e => e.Frequency).HasMaxLength(12);
            entity.Property(e => e.Section).HasMaxLength(20);
            entity.Property(e => e.StartDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Cb>(entity =>
        {
            entity.HasKey(e => e.DocKey).HasName("PK_CB_DocKey");

            entity.ToTable("CB", tb => tb.HasTrigger("UpdateCBChangeCount"));

            entity.HasIndex(e => e.DocNo, "IX_CB_DocNo").IsUnique();

            entity.HasIndex(e => new { e.DocStatus, e.ExpiryTimeStamp }, "IX_CB_DocStatus_ExpiryTimeStamp");

            entity.HasIndex(e => e.EinvoiceTraceId, "IX_CB_EInvoiceTraceId");

            entity.HasIndex(e => e.SourceKey, "IX_CB_SourceKey");

            entity.Property(e => e.DocKey).ValueGeneratedNever();
            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.CurrencyCode).HasMaxLength(5);
            entity.Property(e => e.CurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.DealWith).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(80);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.DocNo2).HasMaxLength(25);
            entity.Property(e => e.DocStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.EinvoiceAipsubmissionDateTime)
                .HasColumnType("datetime")
                .HasColumnName("EInvoiceAIPSubmissionDateTime");
            entity.Property(e => e.EinvoiceCancelDateTime)
                .HasColumnType("datetime")
                .HasColumnName("EInvoiceCancelDateTime");
            entity.Property(e => e.EinvoiceCancelReason)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceCancelReason");
            entity.Property(e => e.EinvoiceError)
                .IsUnicode(false)
                .HasColumnName("EInvoiceError");
            entity.Property(e => e.EinvoiceIssueDateTime)
                .HasColumnType("datetime")
                .HasColumnName("EInvoiceIssueDateTime");
            entity.Property(e => e.EinvoiceSelfBilledDocNo)
                .HasMaxLength(30)
                .HasColumnName("EInvoiceSelfBilledDocNo");
            entity.Property(e => e.EinvoiceStatus)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceStatus");
            entity.Property(e => e.EinvoiceSubmissionDateTime)
                .HasColumnType("datetime")
                .HasColumnName("EInvoiceSubmissionDateTime");
            entity.Property(e => e.EinvoiceSubmissionUuid)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceSubmissionUuid");
            entity.Property(e => e.EinvoiceTraceId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceTraceId");
            entity.Property(e => e.EinvoiceUuid)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceUuid");
            entity.Property(e => e.EinvoiceValidatedDateTime)
                .HasColumnType("datetime")
                .HasColumnName("EInvoiceValidatedDateTime");
            entity.Property(e => e.EinvoiceValidationLink)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("EInvoiceValidationLink");
            entity.Property(e => e.ExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ExpiryTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.GltrxId).HasColumnName("GLTrxID");
            entity.Property(e => e.HandOverDate).HasColumnType("datetime");
            entity.Property(e => e.InclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("F")
                .IsFixedLength();
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.LocalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalWithholdingTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalWithholdingVat)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("LocalWithholdingVAT");
            entity.Property(e => e.NetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.PostDetailDesc)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.RchqtaxTransKeymap).HasColumnName("RCHQTaxTransKeymap");
            entity.Property(e => e.ReferenceInvoiceNo).HasMaxLength(100);
            entity.Property(e => e.SgeinvoiceAtdocKey).HasColumnName("SGEInvoiceATDocKey");
            entity.Property(e => e.SgeinvoiceAtdocNo)
                .HasMaxLength(100)
                .HasColumnName("SGEInvoiceATDocNo");
            entity.Property(e => e.SourceType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.SubmitEinvoice)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SubmitEInvoice");
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyWithholdingTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyWithholdingVat)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("TaxCurrencyWithholdingVAT");
            entity.Property(e => e.TaxDate).HasColumnType("datetime");
            entity.Property(e => e.TaxEntityId).HasColumnName("TaxEntityID");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ToTaxCurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.Total).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalPayment).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.WithholdingTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.WithholdingVat)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("WithholdingVAT");

            entity.HasOne(d => d.CreatedUser).WithMany(p => p.CbCreatedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.CreatedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CB_CreatedUserID");

            entity.HasOne(d => d.CurrencyCodeNavigation).WithMany(p => p.Cbs)
                .HasForeignKey(d => d.CurrencyCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CB_CurrencyCode");

            entity.HasOne(d => d.LastModifiedUser).WithMany(p => p.CbLastModifiedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.LastModifiedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CB_LastModifiedUserID");

            entity.HasOne(d => d.TaxEntity).WithMany(p => p.Cbs)
                .HasForeignKey(d => d.TaxEntityId)
                .HasConstraintName("FK_CB_TaxEntityID");
        });

        modelBuilder.Entity<Cbdtl>(entity =>
        {
            entity.HasKey(e => e.DtlKey).HasName("PK_CBDTL_DtlKey");

            entity.ToTable("CBDTL");

            entity.HasIndex(e => e.DocKey, "IX_CBDTL_DocKey");

            entity.Property(e => e.DtlKey).ValueGeneratedNever();
            entity.Property(e => e.AccNo).HasMaxLength(12);
            entity.Property(e => e.Amount).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.AmountExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.AmountWithTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Atc)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("ATC");
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.InclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("F")
                .IsFixedLength();
            entity.Property(e => e.LocalAmount).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalAmountExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalAmountWithTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxAdjustment).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.NegativeKopayment)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NegativeKOPayment");
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.Rchqamount)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("RCHQAmount");
            entity.Property(e => e.SalesAgent).HasMaxLength(12);
            entity.Property(e => e.TariffCode).HasMaxLength(12);
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxAdjustment).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxBillDate).HasColumnType("datetime");
            entity.Property(e => e.TaxCode).HasMaxLength(14);
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxEntityId).HasColumnName("TaxEntityID");
            entity.Property(e => e.TaxExportCountry).HasMaxLength(50);
            entity.Property(e => e.TaxPermitNo).HasMaxLength(20);
            entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.TaxRefNo).HasMaxLength(30);
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ToAccountRate).HasColumnType("decimal(19, 12)");

            entity.HasOne(d => d.AccNoNavigation).WithMany(p => p.Cbdtls)
                .HasForeignKey(d => d.AccNo)
                .HasConstraintName("FK_CBDTL_AccNo");

            entity.HasOne(d => d.AtcNavigation).WithMany(p => p.Cbdtls)
                .HasForeignKey(d => d.Atc)
                .HasConstraintName("FK_CBDTL_ATC");

            entity.HasOne(d => d.DeptNoNavigation).WithMany(p => p.Cbdtls)
                .HasForeignKey(d => d.DeptNo)
                .HasConstraintName("FK_CBDTL_DeptNo");

            entity.HasOne(d => d.ProjNoNavigation).WithMany(p => p.Cbdtls)
                .HasForeignKey(d => d.ProjNo)
                .HasConstraintName("FK_CBDTL_ProjNo");

            entity.HasOne(d => d.SalesAgentNavigation).WithMany(p => p.Cbdtls)
                .HasPrincipalKey(p => p.SalesAgent1)
                .HasForeignKey(d => d.SalesAgent)
                .HasConstraintName("FK_CBDTL_SalesAgent");

            entity.HasOne(d => d.TariffCodeNavigation).WithMany(p => p.Cbdtls)
                .HasPrincipalKey(p => p.TariffCode)
                .HasForeignKey(d => d.TariffCode)
                .HasConstraintName("FK_CBDTL_TariffCode");

            entity.HasOne(d => d.TaxCodeNavigation).WithMany(p => p.Cbdtls)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.TaxCode)
                .HasConstraintName("FK_CBDTL_TaxCode");

            entity.HasOne(d => d.TaxEntity).WithMany(p => p.Cbdtls)
                .HasForeignKey(d => d.TaxEntityId)
                .HasConstraintName("FK_CBDTL_TaxEntityID");
        });

        modelBuilder.Entity<Cbigdtl>(entity =>
        {
            entity.HasKey(e => e.DtlKey).HasName("PK_CBIGDTL_DtlKey");

            entity.ToTable("CBIGDTL");

            entity.HasIndex(e => new { e.SourceType, e.SourceDtlKey, e.SourceDtlType }, "UC_CBIGDTL_SourceType_SourceDtlKey_SourceDtlType").IsUnique();

            entity.Property(e => e.DtlKey).ValueGeneratedNever();
            entity.Property(e => e.CbdtlKey).HasColumnName("CBDtlKey");
            entity.Property(e => e.CurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxAdjustment).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SourceDtlType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SourceType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxAdjustment).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCode).HasMaxLength(14);
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxPermitNo).HasMaxLength(20);
            entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");

            entity.HasOne(d => d.TaxCodeNavigation).WithMany(p => p.Cbigdtls)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.TaxCode)
                .HasConstraintName("FK_CBIGDTL_TaxCode");
        });

        modelBuilder.Entity<CbpaymentDtl>(entity =>
        {
            entity.HasKey(e => e.DtlKey).HasName("PK_CBPaymentDTL_DtlKey");

            entity.ToTable("CBPaymentDTL");

            entity.HasIndex(e => e.DocKey, "IX_CBPaymentDTL_DocKey");

            entity.Property(e => e.DtlKey).ValueGeneratedNever();
            entity.Property(e => e.BankCharge).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.BankChargeDeptNo).HasMaxLength(10);
            entity.Property(e => e.BankChargeProjNo).HasMaxLength(10);
            entity.Property(e => e.BankChargeTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.BankChargeTaxCode).HasMaxLength(14);
            entity.Property(e => e.BankChargeTaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.BankChargeTaxRefNo).HasMaxLength(30);
            entity.Property(e => e.ChequeNo).HasMaxLength(30);
            entity.Property(e => e.IsRchq)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IsRCHQ");
            entity.Property(e => e.PaymentAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.PaymentBy).HasMaxLength(20);
            entity.Property(e => e.PaymentMethod).HasMaxLength(20);
            entity.Property(e => e.Rchqdate)
                .HasColumnType("datetime")
                .HasColumnName("RCHQDate");
            entity.Property(e => e.ToBankRate).HasColumnType("decimal(19, 12)");

            entity.HasOne(d => d.BankChargeTaxCodeNavigation).WithMany(p => p.CbpaymentDtls)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.BankChargeTaxCode)
                .HasConstraintName("FK_CBPaymentDTL_BankChargeTaxCode");

            entity.HasOne(d => d.PaymentMethodNavigation).WithMany(p => p.CbpaymentDtls)
                .HasPrincipalKey(p => p.PaymentMethod1)
                .HasForeignKey(d => d.PaymentMethod)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CBPaymentDTL_PaymentMethod");
        });

        modelBuilder.Entity<ChangeCount>(entity =>
        {
            entity.HasKey(e => e.AutoKey).HasName("PK_ChangeCount_AutoKey");

            entity.ToTable("ChangeCount");

            entity.HasIndex(e => e.TableName, "UIX_ChangeCount_TableName").IsUnique();

            entity.Property(e => e.TableName).HasMaxLength(40);
        });

        modelBuilder.Entity<ChangeLog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_ChangeLog_ID");

            entity.ToTable("ChangeLog");

            entity.HasIndex(e => new { e.TransactionId, e.Id, e.Guid }, "IX_ChangeLog_TransactionID_ID_Guid").IsUnique();

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.ChangeTime).HasColumnType("datetime");
            entity.Property(e => e.ChangeType)
                .HasMaxLength(1)
                .IsFixedLength();
            entity.Property(e => e.ContentType)
                .HasMaxLength(1)
                .IsFixedLength();
            entity.Property(e => e.TableName).HasMaxLength(30);
            entity.Property(e => e.TransactionId).HasColumnName("TransactionID");
        });

        modelBuilder.Entity<Cn>(entity =>
        {
            entity.HasKey(e => e.DocKey).HasName("PK_CN_DocKey");

            entity.ToTable("CN", tb => tb.HasTrigger("UpdateCNChangeCount"));

            entity.HasIndex(e => e.DocNo, "IX_CN_DocNo").IsUnique();

            entity.HasIndex(e => new { e.DocStatus, e.ExpiryTimeStamp }, "IX_CN_DocStatus_ExpiryTimeStamp");

            entity.HasIndex(e => e.EinvoiceTraceId, "IX_CN_EInvoiceTraceId");

            entity.Property(e => e.DocKey).ValueGeneratedNever();
            entity.Property(e => e.AnalysisNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Attention).HasMaxLength(40);
            entity.Property(e => e.AuthorisationNumberForCertifiedExporter)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.BranchCode).HasMaxLength(20);
            entity.Property(e => e.CalcDiscountOnUnitPrice)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CanSync)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CidocKey).HasColumnName("CIDocKey");
            entity.Property(e => e.CidocNo)
                .HasMaxLength(30)
                .HasColumnName("CIDocNo");
            entity.Property(e => e.Cntype)
                .HasMaxLength(12)
                .HasColumnName("CNType");
            entity.Property(e => e.ConsolidatedEinvoice)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ConsolidatedEInvoice");
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.CurrencyCode).HasMaxLength(5);
            entity.Property(e => e.CurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.DebtorCode).HasMaxLength(12);
            entity.Property(e => e.DebtorName).HasMaxLength(100);
            entity.Property(e => e.DeliverAddr1).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr2).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr3).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr4).HasMaxLength(40);
            entity.Property(e => e.DeliverContact).HasMaxLength(40);
            entity.Property(e => e.DeliverFax1).HasMaxLength(25);
            entity.Property(e => e.DeliverPhone1).HasMaxLength(25);
            entity.Property(e => e.DeliveryTaxEntityId).HasColumnName("DeliveryTaxEntityID");
            entity.Property(e => e.Description).HasMaxLength(80);
            entity.Property(e => e.DisplayTerm).HasMaxLength(30);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.DocStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EinvoiceAipsubmissionDateTime)
                .HasColumnType("datetime")
                .HasColumnName("EInvoiceAIPSubmissionDateTime");
            entity.Property(e => e.EinvoiceCancelDateTime)
                .HasColumnType("datetime")
                .HasColumnName("EInvoiceCancelDateTime");
            entity.Property(e => e.EinvoiceCancelReason)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceCancelReason");
            entity.Property(e => e.EinvoiceError)
                .IsUnicode(false)
                .HasColumnName("EInvoiceError");
            entity.Property(e => e.EinvoiceIssueDateTime)
                .HasColumnType("datetime")
                .HasColumnName("EInvoiceIssueDateTime");
            entity.Property(e => e.EinvoiceStatus)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceStatus");
            entity.Property(e => e.EinvoiceSubmissionDateTime)
                .HasColumnType("datetime")
                .HasColumnName("EInvoiceSubmissionDateTime");
            entity.Property(e => e.EinvoiceSubmissionUuid)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceSubmissionUuid");
            entity.Property(e => e.EinvoiceSubmitDocType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("EInvoiceSubmitDocType");
            entity.Property(e => e.EinvoiceTraceId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceTraceId");
            entity.Property(e => e.EinvoiceUuid)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceUuid");
            entity.Property(e => e.EinvoiceValidatedDateTime)
                .HasColumnType("datetime")
                .HasColumnName("EInvoiceValidatedDateTime");
            entity.Property(e => e.EinvoiceValidationLink)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("EInvoiceValidationLink");
            entity.Property(e => e.ExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ExpiryTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.Fax1).HasMaxLength(25);
            entity.Property(e => e.FinalTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer1TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Footer2Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer2TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Footer3Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer3TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.FreeTradeAgreementInformation)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.FreightAllowanceChargeAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.FreightAllowanceChargeReason)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Guid).HasDefaultValueSql("(newid())");
            entity.Property(e => e.InclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("F")
                .IsFixedLength();
            entity.Property(e => e.Incoterms)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.InvAddr1).HasMaxLength(40);
            entity.Property(e => e.InvAddr2).HasMaxLength(40);
            entity.Property(e => e.InvAddr3).HasMaxLength(40);
            entity.Property(e => e.InvAddr4).HasMaxLength(40);
            entity.Property(e => e.IsRoundAdj)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("F")
                .IsFixedLength();
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.LocalAnalysisNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTotalCost).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.LocalWithholdingTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalWithholdingVat)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("LocalWithholdingVAT");
            entity.Property(e => e.MemberNo).HasMaxLength(20);
            entity.Property(e => e.MultiPrice).HasMaxLength(8);
            entity.Property(e => e.NetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.OurInvoiceNo).HasMaxLength(100);
            entity.Property(e => e.Phone1).HasMaxLength(25);
            entity.Property(e => e.PostToGl)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PostToGL");
            entity.Property(e => e.PostToStock)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Reason).HasMaxLength(80);
            entity.Property(e => e.Ref).HasMaxLength(40);
            entity.Property(e => e.RefDocNo).HasMaxLength(30);
            entity.Property(e => e.RefNo2).HasMaxLength(30);
            entity.Property(e => e.ReferenceNumberOfCustomsFormNo1And9)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.ReferenceNumberOfCustomsFormNo2)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.Remark1).HasMaxLength(40);
            entity.Property(e => e.Remark2).HasMaxLength(40);
            entity.Property(e => e.Remark3).HasMaxLength(40);
            entity.Property(e => e.Remark4).HasMaxLength(40);
            entity.Property(e => e.RoundAdj).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SalesAgent).HasMaxLength(12);
            entity.Property(e => e.SalesExemptionExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.SalesExemptionNo).HasMaxLength(60);
            entity.Property(e => e.SalesLocation).HasMaxLength(8);
            entity.Property(e => e.SgeinvoiceAipsubmissionDateTime)
                .HasColumnType("datetime")
                .HasColumnName("SGEInvoiceAIPSubmissionDateTime");
            entity.Property(e => e.SgeinvoiceAtdocKey).HasColumnName("SGEInvoiceATDocKey");
            entity.Property(e => e.SgeinvoiceAtdocNo)
                .HasMaxLength(100)
                .HasColumnName("SGEInvoiceATDocNo");
            entity.Property(e => e.SgeinvoiceDocumentUuid)
                .HasMaxLength(100)
                .HasColumnName("SGEInvoiceDocumentUUID");
            entity.Property(e => e.SgeinvoiceError).HasColumnName("SGEInvoiceError");
            entity.Property(e => e.SgeinvoiceIraserror).HasColumnName("SGEInvoiceIRASError");
            entity.Property(e => e.SgeinvoiceIrassubmissionStatus)
                .HasMaxLength(100)
                .HasColumnName("SGEInvoiceIRASSubmissionStatus");
            entity.Property(e => e.SgeinvoiceIrastransmissionId)
                .HasMaxLength(100)
                .HasColumnName("SGEInvoiceIRASTransmissionId");
            entity.Property(e => e.SgeinvoicePeppolError).HasColumnName("SGEInvoicePeppolError");
            entity.Property(e => e.SgeinvoicePeppolInstanceId)
                .HasMaxLength(100)
                .HasColumnName("SGEInvoicePeppolInstanceId");
            entity.Property(e => e.SgeinvoicePeppolSubmissionStatus)
                .HasMaxLength(100)
                .HasColumnName("SGEInvoicePeppolSubmissionStatus");
            entity.Property(e => e.SgeinvoiceSendToPeppol)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SGEInvoiceSendToPeppol");
            entity.Property(e => e.SgeinvoiceSubmissionUuid)
                .HasMaxLength(100)
                .HasColumnName("SGEInvoiceSubmissionUUID");
            entity.Property(e => e.SgeinvoiceTraceId)
                .HasMaxLength(100)
                .HasColumnName("SGEInvoiceTraceId");
            entity.Property(e => e.SubmitEinvoice)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SubmitEInvoice");
            entity.Property(e => e.SubmitInvoiceNow)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyWithholdingTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyWithholdingVat)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("TaxCurrencyWithholdingVAT");
            entity.Property(e => e.TaxDate).HasColumnType("datetime");
            entity.Property(e => e.TaxDocNo).HasMaxLength(20);
            entity.Property(e => e.TaxEntityId).HasColumnName("TaxEntityID");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ToTaxCurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.Total).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalBonusPoint).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.UdfSuperAppId)
                .HasMaxLength(32)
                .HasColumnName("UDF_SuperAppId");
            entity.Property(e => e.WithholdingTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.WithholdingVat)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("WithholdingVAT");
            entity.Property(e => e.YourPodate)
                .HasColumnType("datetime")
                .HasColumnName("YourPODate");
            entity.Property(e => e.YourPono)
                .HasMaxLength(25)
                .HasColumnName("YourPONo");

            entity.HasOne(d => d.CntypeNavigation).WithMany(p => p.Cns)
                .HasPrincipalKey(p => p.Cntype1)
                .HasForeignKey(d => d.Cntype)
                .HasConstraintName("FK_CN_CNType");

            entity.HasOne(d => d.CreatedUser).WithMany(p => p.CnCreatedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.CreatedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CN_CreatedUserID");

            entity.HasOne(d => d.CurrencyCodeNavigation).WithMany(p => p.Cns)
                .HasForeignKey(d => d.CurrencyCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CN_CurrencyCode");

            entity.HasOne(d => d.DebtorCodeNavigation).WithMany(p => p.Cns)
                .HasForeignKey(d => d.DebtorCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CN_DebtorCode");

            entity.HasOne(d => d.DisplayTermNavigation).WithMany(p => p.Cns)
                .HasPrincipalKey(p => p.DisplayTerm)
                .HasForeignKey(d => d.DisplayTerm)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CN_DisplayTerm");

            entity.HasOne(d => d.Footer1TaxCodeNavigation).WithMany(p => p.CnFooter1TaxCodeNavigations)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.Footer1TaxCode)
                .HasConstraintName("FK_CN_Footer1TaxCode");

            entity.HasOne(d => d.Footer2TaxCodeNavigation).WithMany(p => p.CnFooter2TaxCodeNavigations)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.Footer2TaxCode)
                .HasConstraintName("FK_CN_Footer2TaxCode");

            entity.HasOne(d => d.Footer3TaxCodeNavigation).WithMany(p => p.CnFooter3TaxCodeNavigations)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.Footer3TaxCode)
                .HasConstraintName("FK_CN_Footer3TaxCode");

            entity.HasOne(d => d.LastModifiedUser).WithMany(p => p.CnLastModifiedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.LastModifiedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CN_LastModifiedUserID");

            entity.HasOne(d => d.MemberNoNavigation).WithMany(p => p.Cns)
                .HasPrincipalKey(p => p.MemberNo)
                .HasForeignKey(d => d.MemberNo)
                .HasConstraintName("FK_CN_MemberNo");

            entity.HasOne(d => d.SalesAgentNavigation).WithMany(p => p.Cns)
                .HasPrincipalKey(p => p.SalesAgent1)
                .HasForeignKey(d => d.SalesAgent)
                .HasConstraintName("FK_CN_SalesAgent");

            entity.HasOne(d => d.SalesLocationNavigation).WithMany(p => p.Cns)
                .HasPrincipalKey(p => p.Location1)
                .HasForeignKey(d => d.SalesLocation)
                .HasConstraintName("FK_CN_SalesLocation");

            entity.HasOne(d => d.TaxEntity).WithMany(p => p.Cns)
                .HasForeignKey(d => d.TaxEntityId)
                .HasConstraintName("FK_CN_TaxEntityID");

            entity.HasOne(d => d.Branch).WithMany(p => p.Cns)
                .HasPrincipalKey(p => new { p.AccNo, p.BranchCode })
                .HasForeignKey(d => new { d.DebtorCode, d.BranchCode })
                .HasConstraintName("FK_CN_BranchCode");
        });

        modelBuilder.Entity<Cndtl>(entity =>
        {
            entity.HasKey(e => e.DtlKey).HasName("PK_CNDTL_DtlKey");

            entity.ToTable("CNDTL");

            entity.HasIndex(e => e.DocKey, "IX_CNDTL_DocKey");

            entity.HasIndex(e => e.FromDocDtlKey, "IX_CNDTL_FromDocDtlKey");

            entity.HasIndex(e => new { e.ItemCode, e.Uom }, "IX_CNDTL_ItemCode_UOM");

            entity.Property(e => e.DtlKey).ValueGeneratedNever();
            entity.Property(e => e.AccNo).HasMaxLength(12);
            entity.Property(e => e.AddToSubTotal)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Atc)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("ATC");
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.BonusPoint).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.CalcByPercent).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Classification)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Desc2).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.Discount).HasMaxLength(20);
            entity.Property(e => e.DiscountAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DtlType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ExtraDiscountAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.FocdtlKey).HasColumnName("FOCDtlKey");
            entity.Property(e => e.Focqty)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("FOCQty");
            entity.Property(e => e.FocunitCost)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("FOCUnitCost");
            entity.Property(e => e.FontStyle).HasMaxLength(8);
            entity.Property(e => e.FromDocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.FullTransferOption)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.GoodsReturn)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Guid).HasDefaultValueSql("(newid())");
            entity.Property(e => e.IsCalcBonusPoint)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.LocalSubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalSubTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxAdjustment).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.MainItem)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Numbering).HasMaxLength(6);
            entity.Property(e => e.OriginCountryCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.PostToStockDate).HasColumnType("datetime");
            entity.Property(e => e.PrintOut)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SalesExemptionNo).HasMaxLength(60);
            entity.Property(e => e.SmallestQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SmallestUnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SubTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SupplyPurchase)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TariffCode).HasMaxLength(12);
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxAdjustment).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCode).HasMaxLength(14);
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxExportCountry).HasMaxLength(50);
            entity.Property(e => e.TaxPermitNo).HasMaxLength(20);
            entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.UnitCost).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
            entity.Property(e => e.UserUom)
                .HasMaxLength(8)
                .HasColumnName("UserUOM");
            entity.Property(e => e.YourPodate)
                .HasColumnType("datetime")
                .HasColumnName("YourPODate");
            entity.Property(e => e.YourPono)
                .HasMaxLength(25)
                .HasColumnName("YourPONo");

            entity.HasOne(d => d.AccNoNavigation).WithMany(p => p.Cndtls)
                .HasForeignKey(d => d.AccNo)
                .HasConstraintName("FK_CNDTL_AccNo");

            entity.HasOne(d => d.AtcNavigation).WithMany(p => p.Cndtls)
                .HasForeignKey(d => d.Atc)
                .HasConstraintName("FK_CNDTL_ATC");

            entity.HasOne(d => d.DeptNoNavigation).WithMany(p => p.Cndtls)
                .HasForeignKey(d => d.DeptNo)
                .HasConstraintName("FK_CNDTL_DeptNo");

            entity.HasOne(d => d.FontStyleNavigation).WithMany(p => p.Cndtls)
                .HasPrincipalKey(p => p.FontStyle1)
                .HasForeignKey(d => d.FontStyle)
                .HasConstraintName("FK_CNDTL_FontStyle");

            entity.HasOne(d => d.LocationNavigation).WithMany(p => p.Cndtls)
                .HasPrincipalKey(p => p.Location1)
                .HasForeignKey(d => d.Location)
                .HasConstraintName("FK_CNDTL_Location");

            entity.HasOne(d => d.ProjNoNavigation).WithMany(p => p.Cndtls)
                .HasForeignKey(d => d.ProjNo)
                .HasConstraintName("FK_CNDTL_ProjNo");

            entity.HasOne(d => d.TariffCodeNavigation).WithMany(p => p.Cndtls)
                .HasPrincipalKey(p => p.TariffCode)
                .HasForeignKey(d => d.TariffCode)
                .HasConstraintName("FK_CNDTL_TariffCode");

            entity.HasOne(d => d.TaxCodeNavigation).WithMany(p => p.Cndtls)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.TaxCode)
                .HasConstraintName("FK_CNDTL_TaxCode");

            entity.HasOne(d => d.ItemBatch).WithMany(p => p.Cndtls)
                .HasPrincipalKey(p => new { p.ItemCode, p.BatchNo })
                .HasForeignKey(d => new { d.ItemCode, d.BatchNo })
                .HasConstraintName("FK_CNDTL_ItemBatch");

            entity.HasOne(d => d.ItemUom).WithMany(p => p.Cndtls)
                .HasPrincipalKey(p => new { p.ItemCode, p.Uom })
                .HasForeignKey(d => new { d.ItemCode, d.Uom })
                .HasConstraintName("FK_CNDTL_ItemUOM");
        });

        modelBuilder.Entity<Cntype>(entity =>
        {
            entity.HasKey(e => e.AutoKey).HasName("PK_CNType_AutoKey");

            entity.ToTable("CNType", tb => tb.HasTrigger("UpdateCNTypeChangeCount"));

            entity.HasIndex(e => e.Cntype1, "UIX_CNType_CNType").IsUnique();

            entity.Property(e => e.Cntype1)
                .HasMaxLength(12)
                .HasColumnName("CNType");
            entity.Property(e => e.Desc2).HasMaxLength(40);
            entity.Property(e => e.Description).HasMaxLength(40);
            entity.Property(e => e.IsActive)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<ColumnLock>(entity =>
        {
            entity.HasKey(e => new { e.DocType, e.DtlType }).HasName("PK_ColumnLock_DocType_DtlType");

            entity.ToTable("ColumnLock");

            entity.Property(e => e.DocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.DtlType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AccNo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BatchNo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BonusPoint)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DeliveryDate)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DeptNo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Description)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Discount)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Duty)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EstimatedDeliveryDate)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("F")
                .IsFixedLength();
            entity.Property(e => e.Focqty)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FOCQty");
            entity.Property(e => e.FontStyle)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ForeignCharges)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FurtherDescription)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Indent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LocalCharges)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Location)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.MainItem)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Numbering)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.OurPodate)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OurPODate");
            entity.Property(e => e.OurPono)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OurPONo");
            entity.Property(e => e.PostToStockDate)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PrintOut)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProjNo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Qty)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubTotal)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Tax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TaxCode)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TaxRate)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("T")
                .IsFixedLength();
            entity.Property(e => e.UnitPrice)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.YourDodate)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("YourDODate");
            entity.Property(e => e.YourDono)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("YourDONo");
            entity.Property(e => e.YourPodate)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("YourPODate");
            entity.Property(e => e.YourPono)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("YourPONo");
        });

        modelBuilder.Entity<Comment>(entity =>
        {
            entity.HasKey(e => e.CommentKey).HasName("PK_Comment_CommentKey");

            entity.ToTable("Comment");

            entity.Property(e => e.Comment1).HasColumnName("Comment");
            entity.Property(e => e.CommentDateTime).HasColumnType("datetime");
            entity.Property(e => e.DocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.UserId)
                .HasMaxLength(10)
                .HasColumnName("UserID");

            entity.HasOne(d => d.User).WithMany(p => p.Comments)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK_Comment_UserID");
        });

        modelBuilder.Entity<Commission>(entity =>
        {
            entity.HasKey(e => e.AutoKey).HasName("PK_Commission_AutoKey");

            entity.ToTable("Commission");

            entity.HasIndex(e => new { e.SalesAgent, e.WithinDay }, "UIX_Commission_SalesAgent_WithinDay").IsUnique();

            entity.Property(e => e.Percentage).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.SalesAgent).HasMaxLength(12);

            entity.HasOne(d => d.SalesAgentNavigation).WithMany(p => p.Commissions)
                .HasPrincipalKey(p => p.SalesAgent1)
                .HasForeignKey(d => d.SalesAgent)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Commission_SalesAgent");
        });

        modelBuilder.Entity<Consignment>(entity =>
        {
            entity.HasKey(e => e.DocKey).HasName("PK_Consignment_DocKey");

            entity.ToTable("Consignment", tb => tb.HasTrigger("UpdateConsignmentChangeCount"));

            entity.HasIndex(e => e.DocNo, "IX_Consignment_DocNo").IsUnique();

            entity.HasIndex(e => new { e.DocStatus, e.ExpiryTimeStamp }, "IX_Consignment_DocStatus_ExpiryTimeStamp");

            entity.HasIndex(e => new { e.ToDocType, e.ToDocKey }, "IX_Consignment_ToDocTypeKey");

            entity.Property(e => e.DocKey).ValueGeneratedNever();
            entity.Property(e => e.AnalysisNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Attention).HasMaxLength(40);
            entity.Property(e => e.BranchCode).HasMaxLength(20);
            entity.Property(e => e.CalcDiscountOnUnitPrice)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CanSync)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.CurrencyCode).HasMaxLength(5);
            entity.Property(e => e.CurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.DebtorCode).HasMaxLength(12);
            entity.Property(e => e.DebtorName).HasMaxLength(100);
            entity.Property(e => e.DeliverAddr1).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr2).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr3).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr4).HasMaxLength(40);
            entity.Property(e => e.DeliverContact).HasMaxLength(40);
            entity.Property(e => e.DeliverFax1).HasMaxLength(25);
            entity.Property(e => e.DeliverPhone1).HasMaxLength(25);
            entity.Property(e => e.Description).HasMaxLength(80);
            entity.Property(e => e.DisplayTerm).HasMaxLength(30);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.DocStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ExpiryTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.Fax1).HasMaxLength(25);
            entity.Property(e => e.FullTransferOption)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Guid).HasDefaultValueSql("(newid())");
            entity.Property(e => e.InclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("F")
                .IsFixedLength();
            entity.Property(e => e.InvAddr1).HasMaxLength(40);
            entity.Property(e => e.InvAddr2).HasMaxLength(40);
            entity.Property(e => e.InvAddr3).HasMaxLength(40);
            entity.Property(e => e.InvAddr4).HasMaxLength(40);
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.LocalAnalysisNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.MultiPrice).HasMaxLength(8);
            entity.Property(e => e.NetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Phone1).HasMaxLength(25);
            entity.Property(e => e.Ref).HasMaxLength(40);
            entity.Property(e => e.RefDocNo).HasMaxLength(30);
            entity.Property(e => e.RefNo2).HasMaxLength(30);
            entity.Property(e => e.Remark1).HasMaxLength(40);
            entity.Property(e => e.Remark2).HasMaxLength(40);
            entity.Property(e => e.Remark3).HasMaxLength(40);
            entity.Property(e => e.Remark4).HasMaxLength(40);
            entity.Property(e => e.SalesAgent).HasMaxLength(12);
            entity.Property(e => e.SalesExemptionExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.SalesExemptionNo).HasMaxLength(60);
            entity.Property(e => e.SalesLocation).HasMaxLength(8);
            entity.Property(e => e.ShipInfo).HasMaxLength(40);
            entity.Property(e => e.ShipVia).HasMaxLength(20);
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxEntityId).HasColumnName("TaxEntityID");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ToDocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.ToTaxCurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.Total).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.YourPodate)
                .HasColumnType("datetime")
                .HasColumnName("YourPODate");
            entity.Property(e => e.YourPono)
                .HasMaxLength(25)
                .HasColumnName("YourPONo");

            entity.HasOne(d => d.CreatedUser).WithMany(p => p.ConsignmentCreatedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.CreatedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Consignment_CreatedUserID");

            entity.HasOne(d => d.CurrencyCodeNavigation).WithMany(p => p.Consignments)
                .HasForeignKey(d => d.CurrencyCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Consignment_CurrencyCode");

            entity.HasOne(d => d.DebtorCodeNavigation).WithMany(p => p.Consignments)
                .HasForeignKey(d => d.DebtorCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Consignment_DebtorCode");

            entity.HasOne(d => d.DisplayTermNavigation).WithMany(p => p.Consignments)
                .HasPrincipalKey(p => p.DisplayTerm)
                .HasForeignKey(d => d.DisplayTerm)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Consignment_DisplayTerm");

            entity.HasOne(d => d.LastModifiedUser).WithMany(p => p.ConsignmentLastModifiedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.LastModifiedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Consignment_LastModifiedUserID");

            entity.HasOne(d => d.SalesAgentNavigation).WithMany(p => p.Consignments)
                .HasPrincipalKey(p => p.SalesAgent1)
                .HasForeignKey(d => d.SalesAgent)
                .HasConstraintName("FK_Consignment_SalesAgent");

            entity.HasOne(d => d.SalesLocationNavigation).WithMany(p => p.Consignments)
                .HasPrincipalKey(p => p.Location1)
                .HasForeignKey(d => d.SalesLocation)
                .HasConstraintName("FK_Consignment_SalesLocation");

            entity.HasOne(d => d.ShipViaNavigation).WithMany(p => p.Consignments)
                .HasPrincipalKey(p => p.ShippingMethod1)
                .HasForeignKey(d => d.ShipVia)
                .HasConstraintName("FK_Consignment_ShipVia");

            entity.HasOne(d => d.TaxEntity).WithMany(p => p.Consignments)
                .HasForeignKey(d => d.TaxEntityId)
                .HasConstraintName("FK_Consignment_TaxEntityID");

            entity.HasOne(d => d.Branch).WithMany(p => p.Consignments)
                .HasPrincipalKey(p => new { p.AccNo, p.BranchCode })
                .HasForeignKey(d => new { d.DebtorCode, d.BranchCode })
                .HasConstraintName("FK_Consignment_BranchCode");
        });

        modelBuilder.Entity<ConsignmentDtl>(entity =>
        {
            entity.HasKey(e => e.DtlKey).HasName("PK_ConsignmentDTL_DtlKey");

            entity.ToTable("ConsignmentDTL");

            entity.HasIndex(e => e.DocKey, "IX_ConsignmentDTL_DocKey");

            entity.HasIndex(e => e.FromDocDtlKey, "IX_ConsignmentDTL_FromDocDtlKey");

            entity.Property(e => e.DtlKey).ValueGeneratedNever();
            entity.Property(e => e.AddToSubTotal)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.CalcByPercent).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.DeliveryDate).HasColumnType("datetime");
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Desc2).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.Discount).HasMaxLength(20);
            entity.Property(e => e.DiscountAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DtlType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EstimatedDeliveryDate).HasMaxLength(20);
            entity.Property(e => e.ExtraDiscountAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.FontStyle).HasMaxLength(8);
            entity.Property(e => e.FromDocNo).HasMaxLength(30);
            entity.Property(e => e.FromDocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.FullTransferOption)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Guid).HasDefaultValueSql("(newid())");
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.LocalSubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalSubTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxAdjustment).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.MainItem)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Numbering).HasMaxLength(6);
            entity.Property(e => e.PrintOut)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Remark).HasMaxLength(100);
            entity.Property(e => e.SmallestQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SmallestUnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SubTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxAdjustment).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCode).HasMaxLength(14);
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxExportCountry).HasMaxLength(50);
            entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TransferedQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
            entity.Property(e => e.UserUom)
                .HasMaxLength(8)
                .HasColumnName("UserUOM");
            entity.Property(e => e.YourPodate)
                .HasColumnType("datetime")
                .HasColumnName("YourPODate");
            entity.Property(e => e.YourPono)
                .HasMaxLength(25)
                .HasColumnName("YourPONo");

            entity.HasOne(d => d.DeptNoNavigation).WithMany(p => p.ConsignmentDtls)
                .HasForeignKey(d => d.DeptNo)
                .HasConstraintName("FK_ConsignmentDTL_DeptNo");

            entity.HasOne(d => d.FontStyleNavigation).WithMany(p => p.ConsignmentDtls)
                .HasPrincipalKey(p => p.FontStyle1)
                .HasForeignKey(d => d.FontStyle)
                .HasConstraintName("FK_ConsignmentDTL_FontStyle");

            entity.HasOne(d => d.LocationNavigation).WithMany(p => p.ConsignmentDtls)
                .HasPrincipalKey(p => p.Location1)
                .HasForeignKey(d => d.Location)
                .HasConstraintName("FK_ConsignmentDTL_Location");

            entity.HasOne(d => d.ProjNoNavigation).WithMany(p => p.ConsignmentDtls)
                .HasForeignKey(d => d.ProjNo)
                .HasConstraintName("FK_ConsignmentDTL_ProjNo");

            entity.HasOne(d => d.TaxCodeNavigation).WithMany(p => p.ConsignmentDtls)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.TaxCode)
                .HasConstraintName("FK_ConsignmentDTL_TaxCode");

            entity.HasOne(d => d.ItemBatch).WithMany(p => p.ConsignmentDtls)
                .HasPrincipalKey(p => new { p.ItemCode, p.BatchNo })
                .HasForeignKey(d => new { d.ItemCode, d.BatchNo })
                .HasConstraintName("FK_ConsignmentDTL_ItemBatch");

            entity.HasOne(d => d.ItemUom).WithMany(p => p.ConsignmentDtls)
                .HasPrincipalKey(p => new { p.ItemCode, p.Uom })
                .HasForeignKey(d => new { d.ItemCode, d.Uom })
                .HasConstraintName("FK_ConsignmentDTL_ItemUOM");
        });

        modelBuilder.Entity<ConsignmentReturn>(entity =>
        {
            entity.HasKey(e => e.DocKey).HasName("PK_ConsignmentReturn_DocKey");

            entity.ToTable("ConsignmentReturn", tb => tb.HasTrigger("UpdateConsignmentReturnChangeCount"));

            entity.HasIndex(e => e.DocNo, "IX_ConsignmentReturn_DocNo").IsUnique();

            entity.HasIndex(e => new { e.DocStatus, e.ExpiryTimeStamp }, "IX_ConsignmentReturn_DocStatus_ExpiryTimeStamp");

            entity.Property(e => e.DocKey).ValueGeneratedNever();
            entity.Property(e => e.AnalysisNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Attention).HasMaxLength(40);
            entity.Property(e => e.BranchCode).HasMaxLength(20);
            entity.Property(e => e.CalcDiscountOnUnitPrice)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CanSync)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.CurrencyCode).HasMaxLength(5);
            entity.Property(e => e.CurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.DebtorCode).HasMaxLength(12);
            entity.Property(e => e.DebtorName).HasMaxLength(100);
            entity.Property(e => e.DeliverAddr1).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr2).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr3).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr4).HasMaxLength(40);
            entity.Property(e => e.DeliverContact).HasMaxLength(40);
            entity.Property(e => e.DeliverFax1).HasMaxLength(25);
            entity.Property(e => e.DeliverPhone1).HasMaxLength(25);
            entity.Property(e => e.Description).HasMaxLength(80);
            entity.Property(e => e.DisplayTerm).HasMaxLength(30);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.DocStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ExpiryTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.Fax1).HasMaxLength(25);
            entity.Property(e => e.Guid).HasDefaultValueSql("(newid())");
            entity.Property(e => e.InclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("F")
                .IsFixedLength();
            entity.Property(e => e.InvAddr1).HasMaxLength(40);
            entity.Property(e => e.InvAddr2).HasMaxLength(40);
            entity.Property(e => e.InvAddr3).HasMaxLength(40);
            entity.Property(e => e.InvAddr4).HasMaxLength(40);
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.LocalAnalysisNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.MultiPrice).HasMaxLength(8);
            entity.Property(e => e.NetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Phone1).HasMaxLength(25);
            entity.Property(e => e.Ref).HasMaxLength(40);
            entity.Property(e => e.RefDocNo).HasMaxLength(30);
            entity.Property(e => e.Remark1).HasMaxLength(40);
            entity.Property(e => e.Remark2).HasMaxLength(40);
            entity.Property(e => e.Remark3).HasMaxLength(40);
            entity.Property(e => e.Remark4).HasMaxLength(40);
            entity.Property(e => e.SalesAgent).HasMaxLength(12);
            entity.Property(e => e.SalesExemptionExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.SalesExemptionNo).HasMaxLength(60);
            entity.Property(e => e.SalesLocation).HasMaxLength(8);
            entity.Property(e => e.ShipInfo).HasMaxLength(40);
            entity.Property(e => e.ShipVia).HasMaxLength(20);
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxEntityId).HasColumnName("TaxEntityID");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ToDocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.ToTaxCurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.Total).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.YourPodate)
                .HasColumnType("datetime")
                .HasColumnName("YourPODate");
            entity.Property(e => e.YourPono)
                .HasMaxLength(25)
                .HasColumnName("YourPONo");

            entity.HasOne(d => d.CreatedUser).WithMany(p => p.ConsignmentReturnCreatedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.CreatedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ConsignmentReturn_CreatedUserID");

            entity.HasOne(d => d.CurrencyCodeNavigation).WithMany(p => p.ConsignmentReturns)
                .HasForeignKey(d => d.CurrencyCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ConsignmentReturn_CurrencyCode");

            entity.HasOne(d => d.DebtorCodeNavigation).WithMany(p => p.ConsignmentReturns)
                .HasForeignKey(d => d.DebtorCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ConsignmentReturn_DebtorCode");

            entity.HasOne(d => d.DisplayTermNavigation).WithMany(p => p.ConsignmentReturns)
                .HasPrincipalKey(p => p.DisplayTerm)
                .HasForeignKey(d => d.DisplayTerm)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ConsignmentReturn_DisplayTerm");

            entity.HasOne(d => d.LastModifiedUser).WithMany(p => p.ConsignmentReturnLastModifiedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.LastModifiedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ConsignmentReturn_LastModifiedUserID");

            entity.HasOne(d => d.SalesAgentNavigation).WithMany(p => p.ConsignmentReturns)
                .HasPrincipalKey(p => p.SalesAgent1)
                .HasForeignKey(d => d.SalesAgent)
                .HasConstraintName("FK_ConsignmentReturn_SalesAgent");

            entity.HasOne(d => d.SalesLocationNavigation).WithMany(p => p.ConsignmentReturns)
                .HasPrincipalKey(p => p.Location1)
                .HasForeignKey(d => d.SalesLocation)
                .HasConstraintName("FK_ConsignmentReturn_SalesLocation");

            entity.HasOne(d => d.ShipViaNavigation).WithMany(p => p.ConsignmentReturns)
                .HasPrincipalKey(p => p.ShippingMethod1)
                .HasForeignKey(d => d.ShipVia)
                .HasConstraintName("FK_ConsignmentReturn_ShipVia");

            entity.HasOne(d => d.TaxEntity).WithMany(p => p.ConsignmentReturns)
                .HasForeignKey(d => d.TaxEntityId)
                .HasConstraintName("FK_ConsignmentReturn_TaxEntityID");

            entity.HasOne(d => d.Branch).WithMany(p => p.ConsignmentReturns)
                .HasPrincipalKey(p => new { p.AccNo, p.BranchCode })
                .HasForeignKey(d => new { d.DebtorCode, d.BranchCode })
                .HasConstraintName("FK_ConsignmentReturn_BranchCode");
        });

        modelBuilder.Entity<ConsignmentReturnDtl>(entity =>
        {
            entity.HasKey(e => e.DtlKey).HasName("PK_ConsignmentReturnDTL_DtlKey");

            entity.ToTable("ConsignmentReturnDTL");

            entity.HasIndex(e => e.DocKey, "IX_ConsignmentReturnDTL_DocKey");

            entity.HasIndex(e => e.FromDocDtlKey, "IX_ConsignmentReturnDTL_FromDocDtlKey");

            entity.Property(e => e.DtlKey).ValueGeneratedNever();
            entity.Property(e => e.AddToSubTotal)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.CalcByPercent).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.DeliveryDate).HasColumnType("datetime");
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Desc2).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.Discount).HasMaxLength(20);
            entity.Property(e => e.DiscountAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DtlType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EstimatedDeliveryDate).HasMaxLength(20);
            entity.Property(e => e.ExtraDiscountAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.FontStyle).HasMaxLength(8);
            entity.Property(e => e.FromDocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.FullTransferOption)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Guid).HasDefaultValueSql("(newid())");
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.LocalSubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalSubTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxAdjustment).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.Lost)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.MainItem)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Numbering).HasMaxLength(6);
            entity.Property(e => e.PrintOut)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Remark).HasMaxLength(100);
            entity.Property(e => e.SmallestQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SmallestUnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SubTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxAdjustment).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCode).HasMaxLength(14);
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TransferedQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
            entity.Property(e => e.UserUom)
                .HasMaxLength(8)
                .HasColumnName("UserUOM");
            entity.Property(e => e.YourPodate)
                .HasColumnType("datetime")
                .HasColumnName("YourPODate");
            entity.Property(e => e.YourPono)
                .HasMaxLength(25)
                .HasColumnName("YourPONo");

            entity.HasOne(d => d.DeptNoNavigation).WithMany(p => p.ConsignmentReturnDtls)
                .HasForeignKey(d => d.DeptNo)
                .HasConstraintName("FK_ConsignmentReturnDTL_DeptNo");

            entity.HasOne(d => d.FontStyleNavigation).WithMany(p => p.ConsignmentReturnDtls)
                .HasPrincipalKey(p => p.FontStyle1)
                .HasForeignKey(d => d.FontStyle)
                .HasConstraintName("FK_ConsignmentReturnDTL_FontStyle");

            entity.HasOne(d => d.LocationNavigation).WithMany(p => p.ConsignmentReturnDtls)
                .HasPrincipalKey(p => p.Location1)
                .HasForeignKey(d => d.Location)
                .HasConstraintName("FK_ConsignmentReturnDTL_Location");

            entity.HasOne(d => d.ProjNoNavigation).WithMany(p => p.ConsignmentReturnDtls)
                .HasForeignKey(d => d.ProjNo)
                .HasConstraintName("FK_ConsignmentReturnDTL_ProjNo");

            entity.HasOne(d => d.TaxCodeNavigation).WithMany(p => p.ConsignmentReturnDtls)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.TaxCode)
                .HasConstraintName("FK_ConsignmentReturnDTL_TaxCode");

            entity.HasOne(d => d.ItemBatch).WithMany(p => p.ConsignmentReturnDtls)
                .HasPrincipalKey(p => new { p.ItemCode, p.BatchNo })
                .HasForeignKey(d => new { d.ItemCode, d.BatchNo })
                .HasConstraintName("FK_ConsignmentReturnDTL_ItemBatch");

            entity.HasOne(d => d.ItemUom).WithMany(p => p.ConsignmentReturnDtls)
                .HasPrincipalKey(p => new { p.ItemCode, p.Uom })
                .HasForeignKey(d => new { d.ItemCode, d.Uom })
                .HasConstraintName("FK_ConsignmentReturnDTL_ItemUOM");
        });

        modelBuilder.Entity<Contact>(entity =>
        {
            entity.HasKey(e => e.AutoKey).HasName("PK_Contact_AutoKey");

            entity.ToTable("Contact");

            entity.HasIndex(e => new { e.AccNo, e.Name }, "UIX_Contact_AccNo_Name").IsUnique();

            entity.Property(e => e.AccNo).HasMaxLength(12);
            entity.Property(e => e.Department).HasMaxLength(30);
            entity.Property(e => e.DirectFax).HasMaxLength(25);
            entity.Property(e => e.DirectPhone).HasMaxLength(25);
            entity.Property(e => e.EmailAddress).HasMaxLength(200);
            entity.Property(e => e.Imaddress)
                .HasMaxLength(40)
                .HasColumnName("IMAddress");
            entity.Property(e => e.IncludeInContactInfo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.MobilePhone).HasMaxLength(25);
            entity.Property(e => e.Name).HasMaxLength(40);
            entity.Property(e => e.Title).HasMaxLength(40);

            entity.HasOne(d => d.AccNoNavigation).WithMany(p => p.Contacts)
                .HasForeignKey(d => d.AccNo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Contact_AccNo");
        });

        modelBuilder.Entity<Cp>(entity =>
        {
            entity.HasKey(e => e.DocKey).HasName("PK_CP_DocKey");

            entity.ToTable("CP", tb => tb.HasTrigger("UpdateCPChangeCount"));

            entity.HasIndex(e => e.DocNo, "IX_CP_DocNo").IsUnique();

            entity.Property(e => e.DocKey).ValueGeneratedNever();
            entity.Property(e => e.AnalysisNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Attention).HasMaxLength(40);
            entity.Property(e => e.BranchCode).HasMaxLength(20);
            entity.Property(e => e.CalcDiscountOnUnitPrice)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CanSync)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CashPayment).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.CcapprovalCode)
                .HasMaxLength(10)
                .HasColumnName("CCApprovalCode");
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.CreditorCode).HasMaxLength(12);
            entity.Property(e => e.CreditorName).HasMaxLength(100);
            entity.Property(e => e.CurrencyCode).HasMaxLength(5);
            entity.Property(e => e.CurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.Description).HasMaxLength(80);
            entity.Property(e => e.DisplayTerm).HasMaxLength(30);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocDate2).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.EinvoiceSelfBilledDocNo)
                .HasMaxLength(30)
                .HasColumnName("EInvoiceSelfBilledDocNo");
            entity.Property(e => e.EinvoiceStatus)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceStatus");
            entity.Property(e => e.EinvoiceUuid)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceUuid");
            entity.Property(e => e.EinvoiceValidatedDateTime)
                .HasColumnType("datetime")
                .HasColumnName("EInvoiceValidatedDateTime");
            entity.Property(e => e.EinvoiceValidationLink)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("EInvoiceValidationLink");
            entity.Property(e => e.ExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Fax1).HasMaxLength(25);
            entity.Property(e => e.FinalTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer1TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Footer2Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer2TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Footer3Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer3TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.ForeignCharges).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.FullTransferOption)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Guid).HasDefaultValueSql("(newid())");
            entity.Property(e => e.InclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("F")
                .IsFixedLength();
            entity.Property(e => e.InvAddr1).HasMaxLength(40);
            entity.Property(e => e.InvAddr2).HasMaxLength(40);
            entity.Property(e => e.InvAddr3).HasMaxLength(40);
            entity.Property(e => e.InvAddr4).HasMaxLength(40);
            entity.Property(e => e.IsRoundAdj)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("F")
                .IsFixedLength();
            entity.Property(e => e.LandedCostMethod)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.LocalAnalysisNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalCharges).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalWithholdingTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalWithholdingVat)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("LocalWithholdingVAT");
            entity.Property(e => e.NetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Phone1).HasMaxLength(25);
            entity.Property(e => e.PostToGl)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PostToGL");
            entity.Property(e => e.PostToStock)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PurchaseAgent).HasMaxLength(12);
            entity.Property(e => e.PurchaseLocation).HasMaxLength(8);
            entity.Property(e => e.Ref).HasMaxLength(40);
            entity.Property(e => e.RefDocNo).HasMaxLength(30);
            entity.Property(e => e.RefNo2).HasMaxLength(30);
            entity.Property(e => e.Remark1).HasMaxLength(40);
            entity.Property(e => e.Remark2).HasMaxLength(40);
            entity.Property(e => e.Remark3).HasMaxLength(40);
            entity.Property(e => e.Remark4).HasMaxLength(40);
            entity.Property(e => e.RoundAdj).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SelfBilledApprovalNo).HasMaxLength(30);
            entity.Property(e => e.SgeinvoiceAtdocKey).HasColumnName("SGEInvoiceATDocKey");
            entity.Property(e => e.SgeinvoiceAtdocNo)
                .HasMaxLength(100)
                .HasColumnName("SGEInvoiceATDocNo");
            entity.Property(e => e.ShipInfo).HasMaxLength(40);
            entity.Property(e => e.ShipVia).HasMaxLength(20);
            entity.Property(e => e.SupplierDono)
                .HasMaxLength(30)
                .HasColumnName("SupplierDONo");
            entity.Property(e => e.SupplierInvoiceNo).HasMaxLength(30);
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyWithholdingTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyWithholdingVat)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("TaxCurrencyWithholdingVAT");
            entity.Property(e => e.TaxDate).HasColumnType("datetime");
            entity.Property(e => e.TaxDocNo).HasMaxLength(20);
            entity.Property(e => e.TaxEntityId).HasColumnName("TaxEntityID");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ToDocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.ToTaxCurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.Total).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Transferable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.WhtpostingDate)
                .HasColumnType("datetime")
                .HasColumnName("WHTPostingDate");
            entity.Property(e => e.WithholdingTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.WithholdingVat)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("WithholdingVAT");

            entity.HasOne(d => d.CreatedUser).WithMany(p => p.CpCreatedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.CreatedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CP_CreatedUserID");

            entity.HasOne(d => d.CreditorCodeNavigation).WithMany(p => p.Cps)
                .HasForeignKey(d => d.CreditorCode)
                .HasConstraintName("FK_CP_CreditorCode");

            entity.HasOne(d => d.CurrencyCodeNavigation).WithMany(p => p.Cps)
                .HasForeignKey(d => d.CurrencyCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CP_CurrencyCode");

            entity.HasOne(d => d.DisplayTermNavigation).WithMany(p => p.Cps)
                .HasPrincipalKey(p => p.DisplayTerm)
                .HasForeignKey(d => d.DisplayTerm)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CP_DisplayTerm");

            entity.HasOne(d => d.Footer1TaxCodeNavigation).WithMany(p => p.CpFooter1TaxCodeNavigations)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.Footer1TaxCode)
                .HasConstraintName("FK_CP_Footer1TaxCode");

            entity.HasOne(d => d.Footer2TaxCodeNavigation).WithMany(p => p.CpFooter2TaxCodeNavigations)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.Footer2TaxCode)
                .HasConstraintName("FK_CP_Footer2TaxCode");

            entity.HasOne(d => d.Footer3TaxCodeNavigation).WithMany(p => p.CpFooter3TaxCodeNavigations)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.Footer3TaxCode)
                .HasConstraintName("FK_CP_Footer3TaxCode");

            entity.HasOne(d => d.LastModifiedUser).WithMany(p => p.CpLastModifiedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.LastModifiedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CP_LastModifiedUserID");

            entity.HasOne(d => d.PurchaseAgentNavigation).WithMany(p => p.Cps)
                .HasPrincipalKey(p => p.PurchaseAgent1)
                .HasForeignKey(d => d.PurchaseAgent)
                .HasConstraintName("FK_CP_PurchaseAgent");

            entity.HasOne(d => d.PurchaseLocationNavigation).WithMany(p => p.Cps)
                .HasPrincipalKey(p => p.Location1)
                .HasForeignKey(d => d.PurchaseLocation)
                .HasConstraintName("FK_CP_PurchaseLocation");

            entity.HasOne(d => d.ShipViaNavigation).WithMany(p => p.Cps)
                .HasPrincipalKey(p => p.ShippingMethod1)
                .HasForeignKey(d => d.ShipVia)
                .HasConstraintName("FK_CP_ShipVia");

            entity.HasOne(d => d.TaxEntity).WithMany(p => p.Cps)
                .HasForeignKey(d => d.TaxEntityId)
                .HasConstraintName("FK_CP_TaxEntityID");

            entity.HasOne(d => d.Branch).WithMany(p => p.Cps)
                .HasPrincipalKey(p => new { p.AccNo, p.BranchCode })
                .HasForeignKey(d => new { d.CreditorCode, d.BranchCode })
                .HasConstraintName("FK_CP_BranchCode");
        });

        modelBuilder.Entity<Cpdtl>(entity =>
        {
            entity.HasKey(e => e.DtlKey).HasName("PK_CPDTL_DtlKey");

            entity.ToTable("CPDTL");

            entity.HasIndex(e => e.DocKey, "IX_CPDTL_DocKey");

            entity.HasIndex(e => e.FromDocDtlKey, "IX_CPDTL_FromDocDtlKey");

            entity.HasIndex(e => new { e.ItemCode, e.Uom }, "IX_CPDTL_ItemCode_UOM");

            entity.Property(e => e.DtlKey).ValueGeneratedNever();
            entity.Property(e => e.AccNo).HasMaxLength(12);
            entity.Property(e => e.AddToSubTotal)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.CalcByPercent).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Cnamt)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("CNAmt");
            entity.Property(e => e.DeliveryDate).HasColumnType("datetime");
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Desc2).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.Discount).HasMaxLength(20);
            entity.Property(e => e.DiscountAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DtlType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Duty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.EstimatedDeliveryDate).HasMaxLength(20);
            entity.Property(e => e.ExtraDiscountAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.FocdtlKey).HasColumnName("FOCDtlKey");
            entity.Property(e => e.Focqty)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("FOCQty");
            entity.Property(e => e.FoctransferedQty)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("FOCTransferedQty");
            entity.Property(e => e.FontStyle).HasMaxLength(8);
            entity.Property(e => e.ForeignCharges).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.FromDocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.FullTransferOption)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Guid).HasDefaultValueSql("(newid())");
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.LocalCharges).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.LocalSubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalSubTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxAdjustment).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.MainItem)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Numbering).HasMaxLength(6);
            entity.Property(e => e.OurPodate)
                .HasColumnType("datetime")
                .HasColumnName("OurPODate");
            entity.Property(e => e.OurPono)
                .HasMaxLength(30)
                .HasColumnName("OurPONo");
            entity.Property(e => e.PostToStockDate).HasColumnType("datetime");
            entity.Property(e => e.PrintOut)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SalesExemptionNo).HasMaxLength(60);
            entity.Property(e => e.SmallestQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SmallestUnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SubTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TariffCode).HasMaxLength(12);
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxAdjustment).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCode).HasMaxLength(14);
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxPermitNo).HasMaxLength(20);
            entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Transferable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TransferedQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
            entity.Property(e => e.UserUom)
                .HasMaxLength(8)
                .HasColumnName("UserUOM");

            entity.HasOne(d => d.AccNoNavigation).WithMany(p => p.Cpdtls)
                .HasForeignKey(d => d.AccNo)
                .HasConstraintName("FK_CPDTL_AccNo");

            entity.HasOne(d => d.DeptNoNavigation).WithMany(p => p.Cpdtls)
                .HasForeignKey(d => d.DeptNo)
                .HasConstraintName("FK_CPDTL_DeptNo");

            entity.HasOne(d => d.FontStyleNavigation).WithMany(p => p.Cpdtls)
                .HasPrincipalKey(p => p.FontStyle1)
                .HasForeignKey(d => d.FontStyle)
                .HasConstraintName("FK_CPDTL_FontStyle");

            entity.HasOne(d => d.LocationNavigation).WithMany(p => p.Cpdtls)
                .HasPrincipalKey(p => p.Location1)
                .HasForeignKey(d => d.Location)
                .HasConstraintName("FK_CPDTL_Location");

            entity.HasOne(d => d.ProjNoNavigation).WithMany(p => p.Cpdtls)
                .HasForeignKey(d => d.ProjNo)
                .HasConstraintName("FK_CPDTL_ProjNo");

            entity.HasOne(d => d.TariffCodeNavigation).WithMany(p => p.Cpdtls)
                .HasPrincipalKey(p => p.TariffCode)
                .HasForeignKey(d => d.TariffCode)
                .HasConstraintName("FK_CPDTL_TariffCode");

            entity.HasOne(d => d.TaxCodeNavigation).WithMany(p => p.Cpdtls)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.TaxCode)
                .HasConstraintName("FK_CPDTL_TaxCode");

            entity.HasOne(d => d.ItemBatch).WithMany(p => p.Cpdtls)
                .HasPrincipalKey(p => new { p.ItemCode, p.BatchNo })
                .HasForeignKey(d => new { d.ItemCode, d.BatchNo })
                .HasConstraintName("FK_CPDTL_ItemBatch");

            entity.HasOne(d => d.ItemUom).WithMany(p => p.Cpdtls)
                .HasPrincipalKey(p => new { p.ItemCode, p.Uom })
                .HasForeignKey(d => new { d.ItemCode, d.Uom })
                .HasConstraintName("FK_CPDTL_ItemUOM");
        });

        modelBuilder.Entity<CreditControlSync>(entity =>
        {
            entity.HasKey(e => e.DocKey).HasName("PK_CreditControlSync_DocKey");

            entity.ToTable("CreditControlSync");

            entity.Property(e => e.DocKey).ValueGeneratedNever();
            entity.Property(e => e.AccNo).HasMaxLength(12);
            entity.Property(e => e.Action)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompanyName).HasMaxLength(100);
            entity.Property(e => e.ComputerName).HasMaxLength(50);
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.CreditLimit).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.CurrentCredit).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.CurrentOverdue).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(50);
            entity.Property(e => e.OverdueLimit).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.RequestDateTime).HasColumnType("datetime");

            entity.HasOne(d => d.AccNoNavigation).WithMany(p => p.CreditControlSyncs)
                .HasForeignKey(d => d.AccNo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CreditControlSync_AccNo");

            entity.HasOne(d => d.CreatedUser).WithMany(p => p.CreditControlSyncs)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.CreatedUserId)
                .HasConstraintName("FK_CreditControlSync_CreatedUserID");
        });

        modelBuilder.Entity<Creditor>(entity =>
        {
            entity.HasKey(e => e.AutoKey).HasName("PK_Creditor_AutoKey");

            entity.ToTable("Creditor", tb => tb.HasTrigger("UpdateCreditorChangeCount"));

            entity.HasIndex(e => e.AccNo, "UIX_Creditor_AccNo").IsUnique();

            entity.Property(e => e.AccNo).HasMaxLength(12);
            entity.Property(e => e.AccountGroup).HasMaxLength(12);
            entity.Property(e => e.Address1).HasMaxLength(40);
            entity.Property(e => e.Address2).HasMaxLength(40);
            entity.Property(e => e.Address3).HasMaxLength(40);
            entity.Property(e => e.Address4).HasMaxLength(40);
            entity.Property(e => e.AgingOn)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AllowExceedCreditLimit)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AreaCode).HasMaxLength(12);
            entity.Property(e => e.Attention).HasMaxLength(40);
            entity.Property(e => e.CalcDiscountOnUnitPrice)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompanyName).HasMaxLength(100);
            entity.Property(e => e.CpblockMessage)
                .HasMaxLength(40)
                .HasColumnName("CPBlockMessage");
            entity.Property(e => e.CpblockStatus).HasColumnName("CPBlockStatus");
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.CreditLimit).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.CreditorType).HasMaxLength(20);
            entity.Property(e => e.CurrencyCode).HasMaxLength(5);
            entity.Property(e => e.DeliverAddr1).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr2).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr3).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr4).HasMaxLength(40);
            entity.Property(e => e.DeliverPostCode).HasMaxLength(10);
            entity.Property(e => e.Desc2).HasMaxLength(100);
            entity.Property(e => e.DetailDiscount).HasMaxLength(20);
            entity.Property(e => e.DiscountPercent).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.DisplayTerm).HasMaxLength(30);
            entity.Property(e => e.EmailAddress).HasMaxLength(200);
            entity.Property(e => e.ExemptNo).HasMaxLength(60);
            entity.Property(e => e.ExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.Fax1).HasMaxLength(25);
            entity.Property(e => e.Fax2).HasMaxLength(25);
            entity.Property(e => e.GnblockMessage)
                .HasMaxLength(40)
                .HasColumnName("GNBlockMessage");
            entity.Property(e => e.GnblockStatus).HasColumnName("GNBlockStatus");
            entity.Property(e => e.GststatusVerifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("GSTStatusVerifiedDate");
            entity.Property(e => e.InclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("F")
                .IsFixedLength();
            entity.Property(e => e.IsActive)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.IsGroupCompany)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.MarkupRatio).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Mobile).HasMaxLength(25);
            entity.Property(e => e.NatureOfBusiness).HasMaxLength(40);
            entity.Property(e => e.OverdueLimit).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.PgblockMessage)
                .HasMaxLength(40)
                .HasColumnName("PGBlockMessage");
            entity.Property(e => e.PgblockStatus).HasColumnName("PGBlockStatus");
            entity.Property(e => e.Phone1).HasMaxLength(25);
            entity.Property(e => e.Phone2).HasMaxLength(25);
            entity.Property(e => e.PiblockMessage)
                .HasMaxLength(40)
                .HasColumnName("PIBlockMessage");
            entity.Property(e => e.PiblockStatus).HasColumnName("PIBlockStatus");
            entity.Property(e => e.PoblockMessage)
                .HasMaxLength(40)
                .HasColumnName("POBlockMessage");
            entity.Property(e => e.PoblockStatus).HasColumnName("POBlockStatus");
            entity.Property(e => e.PostCode).HasMaxLength(10);
            entity.Property(e => e.PriceCategory).HasMaxLength(12);
            entity.Property(e => e.PurchaseAgent).HasMaxLength(12);
            entity.Property(e => e.RegisterNo).HasMaxLength(30);
            entity.Property(e => e.SelfBilledApprovalNo).HasMaxLength(30);
            entity.Property(e => e.SgeinvoiceBusinessUnit)
                .HasMaxLength(10)
                .HasColumnName("SGEInvoiceBusinessUnit");
            entity.Property(e => e.SgeinvoicePeppolId)
                .HasMaxLength(50)
                .HasColumnName("SGEInvoicePeppolID");
            entity.Property(e => e.StatementType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TaxCode).HasMaxLength(14);
            entity.Property(e => e.TaxEntityId).HasColumnName("TaxEntityID");
            entity.Property(e => e.WebUrl)
                .HasMaxLength(80)
                .HasColumnName("WebURL");
            entity.Property(e => e.WithholdingTaxCode).HasMaxLength(14);
            entity.Property(e => e.WithholdingVatcode)
                .HasMaxLength(14)
                .HasColumnName("WithholdingVATCode");

            entity.HasOne(d => d.AccNoNavigation).WithOne(p => p.Creditor)
                .HasForeignKey<Creditor>(d => d.AccNo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Creditor_AccNo");

            entity.HasOne(d => d.AreaCodeNavigation).WithMany(p => p.Creditors)
                .HasPrincipalKey(p => p.AreaCode)
                .HasForeignKey(d => d.AreaCode)
                .HasConstraintName("FK_Creditor_AreaCode");

            entity.HasOne(d => d.CreatedUser).WithMany(p => p.CreditorCreatedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.CreatedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Creditor_CreatedUserID");

            entity.HasOne(d => d.CreditorTypeNavigation).WithMany(p => p.Creditors)
                .HasPrincipalKey(p => p.CreditorType1)
                .HasForeignKey(d => d.CreditorType)
                .HasConstraintName("FK_Creditor_CreditorType");

            entity.HasOne(d => d.CurrencyCodeNavigation).WithMany(p => p.Creditors)
                .HasForeignKey(d => d.CurrencyCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Creditor_CurrencyCode");

            entity.HasOne(d => d.DisplayTermNavigation).WithMany(p => p.Creditors)
                .HasPrincipalKey(p => p.DisplayTerm)
                .HasForeignKey(d => d.DisplayTerm)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Creditor_DisplayTerm");

            entity.HasOne(d => d.LastModifiedUser).WithMany(p => p.CreditorLastModifiedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.LastModifiedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Creditor_LastModifiedUserID");

            entity.HasOne(d => d.PriceCategoryNavigation).WithMany(p => p.Creditors)
                .HasPrincipalKey(p => p.PriceCategory1)
                .HasForeignKey(d => d.PriceCategory)
                .HasConstraintName("FK_Creditor_PriceCategory");

            entity.HasOne(d => d.PurchaseAgentNavigation).WithMany(p => p.Creditors)
                .HasPrincipalKey(p => p.PurchaseAgent1)
                .HasForeignKey(d => d.PurchaseAgent)
                .HasConstraintName("FK_Creditor_PurchaseAgent");

            entity.HasOne(d => d.TaxCodeNavigation).WithMany(p => p.Creditors)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.TaxCode)
                .HasConstraintName("FK_Creditor_TaxCode");

            entity.HasOne(d => d.TaxEntity).WithMany(p => p.Creditors)
                .HasForeignKey(d => d.TaxEntityId)
                .HasConstraintName("FK_Creditor_TaxEntityID");

            entity.HasOne(d => d.WithholdingTaxCodeNavigation).WithMany(p => p.CreditorWithholdingTaxCodeNavigations)
                .HasForeignKey(d => d.WithholdingTaxCode)
                .HasConstraintName("FK_Creditor_WithholdingTaxCode");

            entity.HasOne(d => d.WithholdingVatcodeNavigation).WithMany(p => p.CreditorWithholdingVatcodeNavigations)
                .HasForeignKey(d => d.WithholdingVatcode)
                .HasConstraintName("FK_Creditor_WithholdingVATCode");
        });

        modelBuilder.Entity<CreditorType>(entity =>
        {
            entity.HasKey(e => e.AutoKey).HasName("PK_CreditorType_AutoKey");

            entity.ToTable("CreditorType", tb => tb.HasTrigger("UpdateCreditorTypeChangeCount"));

            entity.HasIndex(e => e.CreditorType1, "UIX_CreditorType_CreditorType").IsUnique();

            entity.Property(e => e.CreditorType1)
                .HasMaxLength(20)
                .HasColumnName("CreditorType");
            entity.Property(e => e.Desc2).HasMaxLength(40);
            entity.Property(e => e.Description).HasMaxLength(40);
            entity.Property(e => e.IsActive)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<Criterion>(entity =>
        {
            entity.HasKey(e => e.AutoKey).HasName("PK_Criteria_AutoKey");

            entity.HasIndex(e => e.CriteriaType, "IX_Criteria_CriteriaType");

            entity.HasIndex(e => new { e.CriteriaName, e.CriteriaType }, "UIX_Criteria_CriteriaName").IsUnique();

            entity.Property(e => e.CriteriaName).HasMaxLength(80);
            entity.Property(e => e.CriteriaType).HasMaxLength(8);
        });

        modelBuilder.Entity<Csdtl>(entity =>
        {
            entity.HasKey(e => e.DtlKey).HasName("PK_CSDTL_DtlKey");

            entity.ToTable("CSDTL");

            entity.HasIndex(e => e.DocKey, "IX_CSDTL_DocKey");

            entity.HasIndex(e => e.FromDocDtlKey, "IX_CSDTL_FromDocDtlKey");

            entity.HasIndex(e => new { e.ItemCode, e.Uom }, "IX_CSDTL_ItemCode_UOM");

            entity.Property(e => e.DtlKey).ValueGeneratedNever();
            entity.Property(e => e.AccNo).HasMaxLength(12);
            entity.Property(e => e.AddToSubTotal)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Atc)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("ATC");
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.BonusPoint).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.CalcByPercent).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Classification)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.DeliveryDate).HasColumnType("datetime");
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Desc2).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.Discount).HasMaxLength(20);
            entity.Property(e => e.DiscountAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DtlType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EstimatedDeliveryDate).HasMaxLength(20);
            entity.Property(e => e.ExtraDiscountAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.FocdtlKey).HasColumnName("FOCDtlKey");
            entity.Property(e => e.Focqty)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("FOCQty");
            entity.Property(e => e.FoctransferedQty)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("FOCTransferedQty");
            entity.Property(e => e.FontStyle).HasMaxLength(8);
            entity.Property(e => e.FromDocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.FullTransferOption)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Guid).HasDefaultValueSql("(newid())");
            entity.Property(e => e.IsCalcBonusPoint)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.LocalFoctotalCost)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("LocalFOCTotalCost");
            entity.Property(e => e.LocalSubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalSubTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxAdjustment).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTotalCost).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.MainItem)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Numbering).HasMaxLength(6);
            entity.Property(e => e.OriginCountryCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.OurDodate)
                .HasColumnType("datetime")
                .HasColumnName("OurDODate");
            entity.Property(e => e.OurDono)
                .HasMaxLength(30)
                .HasColumnName("OurDONo");
            entity.Property(e => e.PostToStockDate).HasColumnType("datetime");
            entity.Property(e => e.PrintOut)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SalesExemptionNo).HasMaxLength(60);
            entity.Property(e => e.SmallestQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SmallestUnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SubTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TariffCode).HasMaxLength(12);
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxAdjustment).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCode).HasMaxLength(14);
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxExportCountry).HasMaxLength(50);
            entity.Property(e => e.TaxPermitNo).HasMaxLength(20);
            entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Transferable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TransferedQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.UdfDeliveryFocQty)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UDF_DeliveryFocQty");
            entity.Property(e => e.UdfDeliveryQty)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UDF_DeliveryQty");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
            entity.Property(e => e.UserUom)
                .HasMaxLength(8)
                .HasColumnName("UserUOM");
            entity.Property(e => e.YourPodate)
                .HasColumnType("datetime")
                .HasColumnName("YourPODate");
            entity.Property(e => e.YourPono)
                .HasMaxLength(25)
                .HasColumnName("YourPONo");

            entity.HasOne(d => d.AccNoNavigation).WithMany(p => p.Csdtls)
                .HasForeignKey(d => d.AccNo)
                .HasConstraintName("FK_CSDTL_AccNo");

            entity.HasOne(d => d.AtcNavigation).WithMany(p => p.Csdtls)
                .HasForeignKey(d => d.Atc)
                .HasConstraintName("FK_CSDTL_ATC");

            entity.HasOne(d => d.DeptNoNavigation).WithMany(p => p.Csdtls)
                .HasForeignKey(d => d.DeptNo)
                .HasConstraintName("FK_CSDTL_DeptNo");

            entity.HasOne(d => d.FontStyleNavigation).WithMany(p => p.Csdtls)
                .HasPrincipalKey(p => p.FontStyle1)
                .HasForeignKey(d => d.FontStyle)
                .HasConstraintName("FK_CSDTL_FontStyle");

            entity.HasOne(d => d.LocationNavigation).WithMany(p => p.Csdtls)
                .HasPrincipalKey(p => p.Location1)
                .HasForeignKey(d => d.Location)
                .HasConstraintName("FK_CSDTL_Location");

            entity.HasOne(d => d.ProjNoNavigation).WithMany(p => p.Csdtls)
                .HasForeignKey(d => d.ProjNo)
                .HasConstraintName("FK_CSDTL_ProjNo");

            entity.HasOne(d => d.TariffCodeNavigation).WithMany(p => p.Csdtls)
                .HasPrincipalKey(p => p.TariffCode)
                .HasForeignKey(d => d.TariffCode)
                .HasConstraintName("FK_CSDTL_TariffCode");

            entity.HasOne(d => d.TaxCodeNavigation).WithMany(p => p.Csdtls)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.TaxCode)
                .HasConstraintName("FK_CSDTL_TaxCode");

            entity.HasOne(d => d.ItemBatch).WithMany(p => p.Csdtls)
                .HasPrincipalKey(p => new { p.ItemCode, p.BatchNo })
                .HasForeignKey(d => new { d.ItemCode, d.BatchNo })
                .HasConstraintName("FK_CSDTL_ItemBatch");

            entity.HasOne(d => d.ItemUom).WithMany(p => p.Csdtls)
                .HasPrincipalKey(p => new { p.ItemCode, p.Uom })
                .HasForeignKey(d => new { d.ItemCode, d.Uom })
                .HasConstraintName("FK_CSDTL_ItemUOM");
        });

        modelBuilder.Entity<CsgnitemBalQty>(entity =>
        {
            entity.HasKey(e => e.AutoKey).HasName("PK_CSGNItemBalQty_AutoKey");

            entity.ToTable("CSGNItemBalQty");

            entity.HasIndex(e => new { e.AccNo, e.ItemCode, e.Uom, e.Location, e.BranchCode, e.BatchNo, e.ProjNo, e.DeptNo }, "IX_CSGNItemBalQty");

            entity.Property(e => e.AccNo).HasMaxLength(12);
            entity.Property(e => e.BalQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.BranchCode).HasMaxLength(20);
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");

            entity.HasOne(d => d.DeptNoNavigation).WithMany(p => p.CsgnitemBalQties)
                .HasForeignKey(d => d.DeptNo)
                .HasConstraintName("FK_CSGNItemBalQty_DeptNo");

            entity.HasOne(d => d.LocationNavigation).WithMany(p => p.CsgnitemBalQties)
                .HasPrincipalKey(p => p.Location1)
                .HasForeignKey(d => d.Location)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CSGNItemBalQty_Location");

            entity.HasOne(d => d.ProjNoNavigation).WithMany(p => p.CsgnitemBalQties)
                .HasForeignKey(d => d.ProjNo)
                .HasConstraintName("FK_CSGNItemBalQty_ProjNo");

            entity.HasOne(d => d.Branch).WithMany(p => p.CsgnitemBalQties)
                .HasPrincipalKey(p => new { p.AccNo, p.BranchCode })
                .HasForeignKey(d => new { d.AccNo, d.BranchCode })
                .HasConstraintName("FK_CSGNItemBalQty_Branch");

            entity.HasOne(d => d.ItemBatch).WithMany(p => p.CsgnitemBalQties)
                .HasPrincipalKey(p => new { p.ItemCode, p.BatchNo })
                .HasForeignKey(d => new { d.ItemCode, d.BatchNo })
                .HasConstraintName("FK_CSGNItemBalQty_ItemBatch");

            entity.HasOne(d => d.ItemUom).WithMany(p => p.CsgnitemBalQties)
                .HasPrincipalKey(p => new { p.ItemCode, p.Uom })
                .HasForeignKey(d => new { d.ItemCode, d.Uom })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CSGNItemBalQty_ItemUOM");
        });

        modelBuilder.Entity<Csgnxfer>(entity =>
        {
            entity.HasKey(e => e.DocKey).HasName("PK_CSGNXFER_DocKey");

            entity.ToTable("CSGNXFER");

            entity.HasIndex(e => e.DocNo, "IX_CSGNXFER_DocNo").IsUnique();

            entity.Property(e => e.DocKey).ValueGeneratedNever();
            entity.Property(e => e.CanSync)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.Description).HasMaxLength(40);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.FromBranchCode).HasMaxLength(20);
            entity.Property(e => e.FromDebtorCode).HasMaxLength(12);
            entity.Property(e => e.FromDebtorName).HasMaxLength(100);
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.Ref).HasMaxLength(40);
            entity.Property(e => e.RefDocNo).HasMaxLength(30);
            entity.Property(e => e.Remark1).HasMaxLength(40);
            entity.Property(e => e.Remark2).HasMaxLength(40);
            entity.Property(e => e.Remark3).HasMaxLength(40);
            entity.Property(e => e.Remark4).HasMaxLength(40);
            entity.Property(e => e.SalesAgent).HasMaxLength(12);
            entity.Property(e => e.ToAttention).HasMaxLength(40);
            entity.Property(e => e.ToBranchCode).HasMaxLength(20);
            entity.Property(e => e.ToDebtorCode).HasMaxLength(12);
            entity.Property(e => e.ToDebtorName).HasMaxLength(100);
            entity.Property(e => e.ToDeliverAddr1).HasMaxLength(40);
            entity.Property(e => e.ToDeliverAddr2).HasMaxLength(40);
            entity.Property(e => e.ToDeliverAddr3).HasMaxLength(40);
            entity.Property(e => e.ToDeliverAddr4).HasMaxLength(40);
            entity.Property(e => e.ToDeliverContact).HasMaxLength(40);
            entity.Property(e => e.ToDeliverFax1).HasMaxLength(25);
            entity.Property(e => e.ToDeliverPhone1).HasMaxLength(25);
            entity.Property(e => e.ToFax1).HasMaxLength(25);
            entity.Property(e => e.ToInvAddr1).HasMaxLength(40);
            entity.Property(e => e.ToInvAddr2).HasMaxLength(40);
            entity.Property(e => e.ToInvAddr3).HasMaxLength(40);
            entity.Property(e => e.ToInvAddr4).HasMaxLength(40);
            entity.Property(e => e.ToPhone1).HasMaxLength(25);

            entity.HasOne(d => d.CreatedUser).WithMany(p => p.CsgnxferCreatedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.CreatedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CSGNXFER_CreatedUserID");

            entity.HasOne(d => d.FromDebtorCodeNavigation).WithMany(p => p.CsgnxferFromDebtorCodeNavigations)
                .HasForeignKey(d => d.FromDebtorCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CSGNXFER_FromDebtorCode");

            entity.HasOne(d => d.LastModifiedUser).WithMany(p => p.CsgnxferLastModifiedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.LastModifiedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CSGNXFER_LastModifiedUserID");

            entity.HasOne(d => d.SalesAgentNavigation).WithMany(p => p.Csgnxfers)
                .HasPrincipalKey(p => p.SalesAgent1)
                .HasForeignKey(d => d.SalesAgent)
                .HasConstraintName("FK_CSGNXFER_SalesAgent");

            entity.HasOne(d => d.ToDebtorCodeNavigation).WithMany(p => p.CsgnxferToDebtorCodeNavigations)
                .HasForeignKey(d => d.ToDebtorCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CSGNXFER_ToDebtorCode");

            entity.HasOne(d => d.Branch).WithMany(p => p.CsgnxferBranches)
                .HasPrincipalKey(p => new { p.AccNo, p.BranchCode })
                .HasForeignKey(d => new { d.FromDebtorCode, d.FromBranchCode })
                .HasConstraintName("FK_CSGNXFER_FromBranchCode");

            entity.HasOne(d => d.BranchNavigation).WithMany(p => p.CsgnxferBranchNavigations)
                .HasPrincipalKey(p => new { p.AccNo, p.BranchCode })
                .HasForeignKey(d => new { d.ToDebtorCode, d.ToBranchCode })
                .HasConstraintName("FK_CSGNXFER_ToBranchCode");
        });

        modelBuilder.Entity<Csgnxferdtl>(entity =>
        {
            entity.HasKey(e => e.DtlKey).HasName("PK_CSGNXFERDTL_DtlKey");

            entity.ToTable("CSGNXFERDTL");

            entity.HasIndex(e => e.DocKey, "IX_CSGNXFERDTL_DocKey");

            entity.Property(e => e.DtlKey).ValueGeneratedNever();
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Remark).HasMaxLength(100);
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");

            entity.HasOne(d => d.DeptNoNavigation).WithMany(p => p.Csgnxferdtls)
                .HasForeignKey(d => d.DeptNo)
                .HasConstraintName("FK_CSGNXFERDTL_DeptNo");

            entity.HasOne(d => d.LocationNavigation).WithMany(p => p.Csgnxferdtls)
                .HasPrincipalKey(p => p.Location1)
                .HasForeignKey(d => d.Location)
                .HasConstraintName("FK_CSGNXFERDTL_Location");

            entity.HasOne(d => d.ProjNoNavigation).WithMany(p => p.Csgnxferdtls)
                .HasForeignKey(d => d.ProjNo)
                .HasConstraintName("FK_CSGNXFERDTL_ProjNo");

            entity.HasOne(d => d.ItemBatch).WithMany(p => p.Csgnxferdtls)
                .HasPrincipalKey(p => new { p.ItemCode, p.BatchNo })
                .HasForeignKey(d => new { d.ItemCode, d.BatchNo })
                .HasConstraintName("FK_CSGNXFERDTL_ItemBatch");

            entity.HasOne(d => d.ItemUom).WithMany(p => p.Csgnxferdtls)
                .HasPrincipalKey(p => new { p.ItemCode, p.Uom })
                .HasForeignKey(d => new { d.ItemCode, d.Uom })
                .HasConstraintName("FK_CSGNXFERDTL_ItemUOM");
        });

        modelBuilder.Entity<CurrRate>(entity =>
        {
            entity.HasKey(e => e.AutoKey).HasName("PK_CurrRate_AutoKey");

            entity.ToTable("CurrRate", tb =>
                {
                    tb.HasTrigger("CurrRateChangeLog");
                    tb.HasTrigger("UpdateCurrRateChangeCount");
                });

            entity.HasIndex(e => new { e.CurrencyCode, e.FromDate, e.ToDate }, "UIX_CurrRate_CurrencyCode_FromDate_ToDate").IsUnique();

            entity.HasIndex(e => e.Guid, "UIX_CurrRate_Guid").IsUnique();

            entity.Property(e => e.BankBuyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.BankSellRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.CurrencyCode).HasMaxLength(5);
            entity.Property(e => e.FromDate).HasColumnType("datetime");
            entity.Property(e => e.ToDate).HasColumnType("datetime");

            entity.HasOne(d => d.CurrencyCodeNavigation).WithMany(p => p.CurrRates)
                .HasForeignKey(d => d.CurrencyCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CurrRate_CurrencyCode");
        });

        modelBuilder.Entity<Currency>(entity =>
        {
            entity.HasKey(e => e.CurrencyCode).HasName("PK_CURRENCY_CurrencyCode");

            entity.ToTable("CURRENCY", tb =>
                {
                    tb.HasTrigger("CurrencyChangeLog");
                    tb.HasTrigger("UpdateCurrencyChangeCount");
                });

            entity.HasIndex(e => e.Guid, "UIX_CURRENCY_Guid").IsUnique();

            entity.Property(e => e.CurrencyCode).HasMaxLength(5);
            entity.Property(e => e.BankBuyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.BankSellRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.CurrencySymbol).HasMaxLength(6);
            entity.Property(e => e.CurrencyWord).HasMaxLength(40);
            entity.Property(e => e.CurrencyWord2).HasMaxLength(40);
            entity.Property(e => e.FcgainAccount)
                .HasMaxLength(12)
                .HasColumnName("FCGainAccount");
            entity.Property(e => e.FclossAccount)
                .HasMaxLength(12)
                .HasColumnName("FCLossAccount");
            entity.Property(e => e.GainLossJournalType).HasMaxLength(10);

            entity.HasOne(d => d.FcgainAccountNavigation).WithMany(p => p.CurrencyFcgainAccountNavigations)
                .HasForeignKey(d => d.FcgainAccount)
                .HasConstraintName("FK_Currency_FCGainAccount");

            entity.HasOne(d => d.FclossAccountNavigation).WithMany(p => p.CurrencyFclossAccountNavigations)
                .HasForeignKey(d => d.FclossAccount)
                .HasConstraintName("FK_Currency_FCLossAccount");

            entity.HasOne(d => d.GainLossJournalTypeNavigation).WithMany(p => p.Currencies)
                .HasPrincipalKey(p => p.JournalType)
                .HasForeignKey(d => d.GainLossJournalType)
                .HasConstraintName("FK_Currency_GainLossJournalType");
        });

        modelBuilder.Entity<Debtor>(entity =>
        {
            entity.HasKey(e => e.AutoKey).HasName("PK_Debtor_AutoKey");

            entity.ToTable("Debtor", tb =>
                {
                    tb.HasTrigger("DebtorChangeLog");
                    tb.HasTrigger("UpdateDebtorChangeCount");
                });

            entity.HasIndex(e => new { e.AccNo, e.AutoKey }, "IX_Debtor_AccNo_AutoKey");

            entity.HasIndex(e => e.AccNo, "UIX_Debtor_AccNo").IsUnique();

            entity.HasIndex(e => e.Guid, "UIX_Debtor_Guid").IsUnique();

            entity.Property(e => e.AccNo).HasMaxLength(12);
            entity.Property(e => e.AccountGroup).HasMaxLength(12);
            entity.Property(e => e.Address1).HasMaxLength(40);
            entity.Property(e => e.Address2).HasMaxLength(40);
            entity.Property(e => e.Address3).HasMaxLength(40);
            entity.Property(e => e.Address4).HasMaxLength(40);
            entity.Property(e => e.AgingOn)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AllowChangeMultiPrice)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AllowExceedCreditLimit)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AreaCode).HasMaxLength(12);
            entity.Property(e => e.Attention).HasMaxLength(40);
            entity.Property(e => e.CalcDiscountOnUnitPrice)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CgblockMessage)
                .HasMaxLength(40)
                .HasColumnName("CGBlockMessage");
            entity.Property(e => e.CgblockStatus).HasColumnName("CGBlockStatus");
            entity.Property(e => e.CompanyName).HasMaxLength(100);
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.CreditLimit).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.CsblockMessage)
                .HasMaxLength(40)
                .HasColumnName("CSBlockMessage");
            entity.Property(e => e.CsblockStatus).HasColumnName("CSBlockStatus");
            entity.Property(e => e.CurrencyCode).HasMaxLength(5);
            entity.Property(e => e.DebtorType).HasMaxLength(20);
            entity.Property(e => e.DeliverAddr1).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr2).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr3).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr4).HasMaxLength(40);
            entity.Property(e => e.DeliverPostCode).HasMaxLength(10);
            entity.Property(e => e.Desc2).HasMaxLength(100);
            entity.Property(e => e.DetailDiscount).HasMaxLength(20);
            entity.Property(e => e.DiscountPercent).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.DisplayTerm).HasMaxLength(30);
            entity.Property(e => e.DoNotSubmitEinvoice)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DoNotSubmitEInvoice");
            entity.Property(e => e.DoblockMessage)
                .HasMaxLength(40)
                .HasColumnName("DOBlockMessage");
            entity.Property(e => e.DoblockStatus).HasColumnName("DOBlockStatus");
            entity.Property(e => e.EmailAddress).HasMaxLength(200);
            entity.Property(e => e.ExemptNo).HasMaxLength(60);
            entity.Property(e => e.ExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.Fax1).HasMaxLength(25);
            entity.Property(e => e.Fax2).HasMaxLength(25);
            entity.Property(e => e.GststatusVerifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("GSTStatusVerifiedDate");
            entity.Property(e => e.HasBonusPoint)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.InclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("F")
                .IsFixedLength();
            entity.Property(e => e.IsActive)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.IsCashSaleDebtor)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.IsGroupCompany)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.IsTaxRegistered)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.IvblockMessage)
                .HasMaxLength(40)
                .HasColumnName("IVBlockMessage");
            entity.Property(e => e.IvblockStatus).HasColumnName("IVBlockStatus");
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.MarkupRatio).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Mobile).HasMaxLength(25);
            entity.Property(e => e.MultiPrice).HasMaxLength(8);
            entity.Property(e => e.NatureOfBusiness).HasMaxLength(40);
            entity.Property(e => e.OpeningBonusPoint).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.OverdueLimit).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Phone1).HasMaxLength(25);
            entity.Property(e => e.Phone2).HasMaxLength(25);
            entity.Property(e => e.PostCode).HasMaxLength(10);
            entity.Property(e => e.PriceCategory).HasMaxLength(12);
            entity.Property(e => e.QtblockMessage)
                .HasMaxLength(40)
                .HasColumnName("QTBlockMessage");
            entity.Property(e => e.QtblockStatus).HasColumnName("QTBlockStatus");
            entity.Property(e => e.RegisterNo).HasMaxLength(30);
            entity.Property(e => e.SalesAgent).HasMaxLength(12);
            entity.Property(e => e.SelfBilledApprovalNo).HasMaxLength(30);
            entity.Property(e => e.SgeinvoiceBusinessUnit)
                .HasMaxLength(10)
                .HasColumnName("SGEInvoiceBusinessUnit");
            entity.Property(e => e.SgeinvoicePeppolId)
                .HasMaxLength(50)
                .HasColumnName("SGEInvoicePeppolID");
            entity.Property(e => e.SoblockMessage)
                .HasMaxLength(40)
                .HasColumnName("SOBlockMessage");
            entity.Property(e => e.SoblockStatus).HasColumnName("SOBlockStatus");
            entity.Property(e => e.StatementType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TaxCode).HasMaxLength(14);
            entity.Property(e => e.TaxEntityId).HasColumnName("TaxEntityID");
            entity.Property(e => e.UdfBangsa1)
                .HasMaxLength(50)
                .HasColumnName("UDF_Bangsa1");
            entity.Property(e => e.UdfBangsa2)
                .HasMaxLength(50)
                .HasColumnName("UDF_Bangsa2");
            entity.Property(e => e.UdfJantina)
                .HasMaxLength(20)
                .HasColumnName("UDF_Jantina");
            entity.Property(e => e.UdfKerakyatan)
                .HasMaxLength(50)
                .HasColumnName("UDF_Kerakyatan");
            entity.Property(e => e.UdfTarikhLahir)
                .HasColumnType("datetime")
                .HasColumnName("UDF_TarikhLahir");
            entity.Property(e => e.WebUrl)
                .HasMaxLength(80)
                .HasColumnName("WebURL");
            entity.Property(e => e.WithholdingTaxCode).HasMaxLength(14);
            entity.Property(e => e.WithholdingVatcode)
                .HasMaxLength(14)
                .HasColumnName("WithholdingVATCode");

            entity.HasOne(d => d.AccNoNavigation).WithOne(p => p.Debtor)
                .HasForeignKey<Debtor>(d => d.AccNo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Debtor_AccNo");

            entity.HasOne(d => d.AreaCodeNavigation).WithMany(p => p.Debtors)
                .HasPrincipalKey(p => p.AreaCode)
                .HasForeignKey(d => d.AreaCode)
                .HasConstraintName("FK_Debtor_AreaCode");

            entity.HasOne(d => d.CreatedUser).WithMany(p => p.DebtorCreatedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.CreatedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Debtor_CreatedUserID");

            entity.HasOne(d => d.CurrencyCodeNavigation).WithMany(p => p.Debtors)
                .HasForeignKey(d => d.CurrencyCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Debtor_CurrencyCode");

            entity.HasOne(d => d.DebtorTypeNavigation).WithMany(p => p.Debtors)
                .HasPrincipalKey(p => p.DebtorType1)
                .HasForeignKey(d => d.DebtorType)
                .HasConstraintName("FK_Debtor_DebtorType");

            entity.HasOne(d => d.DisplayTermNavigation).WithMany(p => p.Debtors)
                .HasPrincipalKey(p => p.DisplayTerm)
                .HasForeignKey(d => d.DisplayTerm)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Debtor_DisplayTerm");

            entity.HasOne(d => d.LastModifiedUser).WithMany(p => p.DebtorLastModifiedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.LastModifiedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Debtor_LastModifiedUserID");

            entity.HasOne(d => d.PriceCategoryNavigation).WithMany(p => p.Debtors)
                .HasPrincipalKey(p => p.PriceCategory1)
                .HasForeignKey(d => d.PriceCategory)
                .HasConstraintName("FK_Debtor_PriceCategory");

            entity.HasOne(d => d.SalesAgentNavigation).WithMany(p => p.Debtors)
                .HasPrincipalKey(p => p.SalesAgent1)
                .HasForeignKey(d => d.SalesAgent)
                .HasConstraintName("FK_Debtor_SalesAgent");

            entity.HasOne(d => d.TaxCodeNavigation).WithMany(p => p.Debtors)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.TaxCode)
                .HasConstraintName("FK_Debtor_TaxCode");

            entity.HasOne(d => d.TaxEntity).WithMany(p => p.Debtors)
                .HasForeignKey(d => d.TaxEntityId)
                .HasConstraintName("FK_Debtor_TaxEntityID");

            entity.HasOne(d => d.WithholdingTaxCodeNavigation).WithMany(p => p.DebtorWithholdingTaxCodeNavigations)
                .HasForeignKey(d => d.WithholdingTaxCode)
                .HasConstraintName("FK_Debtor_WithholdingTaxCode");

            entity.HasOne(d => d.WithholdingVatcodeNavigation).WithMany(p => p.DebtorWithholdingVatcodeNavigations)
                .HasForeignKey(d => d.WithholdingVatcode)
                .HasConstraintName("FK_Debtor_WithholdingVATCode");
        });

        modelBuilder.Entity<DebtorType>(entity =>
        {
            entity.HasKey(e => e.AutoKey).HasName("PK_DebtorType_AutoKey");

            entity.ToTable("DebtorType", tb =>
                {
                    tb.HasTrigger("DebtorTypeChangeLog");
                    tb.HasTrigger("UpdateDebtorTypeChangeCount");
                });

            entity.HasIndex(e => e.DebtorType1, "UIX_DebtorType_DebtorType").IsUnique();

            entity.HasIndex(e => e.Guid, "UIX_DebtorType_Guid").IsUnique();

            entity.Property(e => e.DebtorType1)
                .HasMaxLength(20)
                .HasColumnName("DebtorType");
            entity.Property(e => e.Desc2).HasMaxLength(40);
            entity.Property(e => e.Description).HasMaxLength(40);
            entity.Property(e => e.IsActive)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<DefaultReport>(entity =>
        {
            entity.HasKey(e => e.AutoKey).HasName("PK_DefaultReport_AutoKey");

            entity.ToTable("DefaultReport");

            entity.HasIndex(e => e.ReportType, "UIX_DefaultReport_ReportType_ReportType").IsUnique();

            entity.Property(e => e.ReportName).HasMaxLength(100);
            entity.Property(e => e.ReportType).HasMaxLength(60);
        });

        modelBuilder.Entity<Dept>(entity =>
        {
            entity.HasKey(e => e.DeptNo).HasName("PK_Dept_DeptNo");

            entity.ToTable("Dept", tb =>
                {
                    tb.HasTrigger("DeptChangeLog");
                    tb.HasTrigger("UpdateDepartmentChangeCount");
                });

            entity.HasIndex(e => e.Guid, "UIX_Dept_Guid").IsUnique();

            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Desc2).HasMaxLength(40);
            entity.Property(e => e.Description).HasMaxLength(40);
            entity.Property(e => e.Guid).HasDefaultValueSql("(newid())");
            entity.Property(e => e.IsActive)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ParentDeptNo).HasMaxLength(10);

            entity.HasOne(d => d.ParentDeptNoNavigation).WithMany(p => p.InverseParentDeptNoNavigation)
                .HasForeignKey(d => d.ParentDeptNo)
                .HasConstraintName("FK_Dept_ParentDeptNo");
        });

        modelBuilder.Entity<Dn>(entity =>
        {
            entity.HasKey(e => e.DocKey).HasName("PK_DN_DocKey");

            entity.ToTable("DN", tb => tb.HasTrigger("UpdateDNChangeCount"));

            entity.HasIndex(e => e.DocNo, "IX_DN_DocNo").IsUnique();

            entity.HasIndex(e => new { e.DocStatus, e.ExpiryTimeStamp }, "IX_DN_DocStatus_ExpiryTimeStamp");

            entity.HasIndex(e => e.EinvoiceTraceId, "IX_DN_EInvoiceTraceId");

            entity.Property(e => e.DocKey).ValueGeneratedNever();
            entity.Property(e => e.AnalysisNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Attention).HasMaxLength(40);
            entity.Property(e => e.AuthorisationNumberForCertifiedExporter)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.BranchCode).HasMaxLength(20);
            entity.Property(e => e.CalcDiscountOnUnitPrice)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CanSync)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CidocKey).HasColumnName("CIDocKey");
            entity.Property(e => e.CidocNo)
                .HasMaxLength(30)
                .HasColumnName("CIDocNo");
            entity.Property(e => e.ConsolidatedEinvoice)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ConsolidatedEInvoice");
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.CurrencyCode).HasMaxLength(5);
            entity.Property(e => e.CurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.DebtorCode).HasMaxLength(12);
            entity.Property(e => e.DebtorName).HasMaxLength(100);
            entity.Property(e => e.DeliverAddr1).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr2).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr3).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr4).HasMaxLength(40);
            entity.Property(e => e.DeliverContact).HasMaxLength(40);
            entity.Property(e => e.DeliverFax1).HasMaxLength(25);
            entity.Property(e => e.DeliverPhone1).HasMaxLength(25);
            entity.Property(e => e.DeliveryTaxEntityId).HasColumnName("DeliveryTaxEntityID");
            entity.Property(e => e.Description).HasMaxLength(80);
            entity.Property(e => e.DisplayTerm).HasMaxLength(30);
            entity.Property(e => e.Dntype)
                .HasMaxLength(12)
                .HasColumnName("DNType");
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.DocStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EinvoiceAipsubmissionDateTime)
                .HasColumnType("datetime")
                .HasColumnName("EInvoiceAIPSubmissionDateTime");
            entity.Property(e => e.EinvoiceCancelDateTime)
                .HasColumnType("datetime")
                .HasColumnName("EInvoiceCancelDateTime");
            entity.Property(e => e.EinvoiceCancelReason)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceCancelReason");
            entity.Property(e => e.EinvoiceError)
                .IsUnicode(false)
                .HasColumnName("EInvoiceError");
            entity.Property(e => e.EinvoiceIssueDateTime)
                .HasColumnType("datetime")
                .HasColumnName("EInvoiceIssueDateTime");
            entity.Property(e => e.EinvoiceStatus)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceStatus");
            entity.Property(e => e.EinvoiceSubmissionDateTime)
                .HasColumnType("datetime")
                .HasColumnName("EInvoiceSubmissionDateTime");
            entity.Property(e => e.EinvoiceSubmissionUuid)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceSubmissionUuid");
            entity.Property(e => e.EinvoiceTraceId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceTraceId");
            entity.Property(e => e.EinvoiceUuid)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceUuid");
            entity.Property(e => e.EinvoiceValidatedDateTime)
                .HasColumnType("datetime")
                .HasColumnName("EInvoiceValidatedDateTime");
            entity.Property(e => e.EinvoiceValidationLink)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("EInvoiceValidationLink");
            entity.Property(e => e.ExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ExpiryTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.Fax1).HasMaxLength(25);
            entity.Property(e => e.Footer1Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer1TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Footer2Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer2TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Footer3Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer3TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.FreeTradeAgreementInformation)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.FreightAllowanceChargeAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.FreightAllowanceChargeReason)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Guid).HasDefaultValueSql("(newid())");
            entity.Property(e => e.InclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("F")
                .IsFixedLength();
            entity.Property(e => e.Incoterms)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.InvAddr1).HasMaxLength(40);
            entity.Property(e => e.InvAddr2).HasMaxLength(40);
            entity.Property(e => e.InvAddr3).HasMaxLength(40);
            entity.Property(e => e.InvAddr4).HasMaxLength(40);
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.LocalAnalysisNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTotalCost).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.LocalWithholdingTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalWithholdingVat)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("LocalWithholdingVAT");
            entity.Property(e => e.MemberNo).HasMaxLength(20);
            entity.Property(e => e.MultiPrice).HasMaxLength(8);
            entity.Property(e => e.NetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.OurInvoiceNo).HasMaxLength(100);
            entity.Property(e => e.Phone1).HasMaxLength(25);
            entity.Property(e => e.PostToGl)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PostToGL");
            entity.Property(e => e.PostToStock)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ReallocatePurchaseByProject)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("F")
                .IsFixedLength();
            entity.Property(e => e.ReallocatePurchaseByProjectJedocKey).HasColumnName("ReallocatePurchaseByProjectJEDocKey");
            entity.Property(e => e.ReallocatePurchaseByProjectNo).HasMaxLength(10);
            entity.Property(e => e.Reason).HasMaxLength(80);
            entity.Property(e => e.Ref).HasMaxLength(40);
            entity.Property(e => e.RefDocNo).HasMaxLength(30);
            entity.Property(e => e.RefNo2).HasMaxLength(30);
            entity.Property(e => e.ReferenceNumberOfCustomsFormNo1And9)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.ReferenceNumberOfCustomsFormNo2)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.Remark1).HasMaxLength(40);
            entity.Property(e => e.Remark2).HasMaxLength(40);
            entity.Property(e => e.Remark3).HasMaxLength(40);
            entity.Property(e => e.Remark4).HasMaxLength(40);
            entity.Property(e => e.SalesAgent).HasMaxLength(12);
            entity.Property(e => e.SalesExemptionExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.SalesExemptionNo).HasMaxLength(60);
            entity.Property(e => e.SalesLocation).HasMaxLength(8);
            entity.Property(e => e.SubmitEinvoice)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SubmitEInvoice");
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyWithholdingTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyWithholdingVat)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("TaxCurrencyWithholdingVAT");
            entity.Property(e => e.TaxDate).HasColumnType("datetime");
            entity.Property(e => e.TaxDocNo).HasMaxLength(20);
            entity.Property(e => e.TaxEntityId).HasColumnName("TaxEntityID");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ToTaxCurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.Total).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalBonusPoint).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.WhtpostingDate)
                .HasColumnType("datetime")
                .HasColumnName("WHTPostingDate");
            entity.Property(e => e.WithholdingTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.WithholdingVat)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("WithholdingVAT");
            entity.Property(e => e.YourPodate)
                .HasColumnType("datetime")
                .HasColumnName("YourPODate");
            entity.Property(e => e.YourPono)
                .HasMaxLength(25)
                .HasColumnName("YourPONo");

            entity.HasOne(d => d.CreatedUser).WithMany(p => p.DnCreatedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.CreatedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DN_CreatedUserID");

            entity.HasOne(d => d.CurrencyCodeNavigation).WithMany(p => p.Dns)
                .HasForeignKey(d => d.CurrencyCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DN_CurrencyCode");

            entity.HasOne(d => d.DebtorCodeNavigation).WithMany(p => p.Dns)
                .HasForeignKey(d => d.DebtorCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DN_DebtorCode");

            entity.HasOne(d => d.DisplayTermNavigation).WithMany(p => p.Dns)
                .HasPrincipalKey(p => p.DisplayTerm)
                .HasForeignKey(d => d.DisplayTerm)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DN_DisplayTerm");

            entity.HasOne(d => d.DntypeNavigation).WithMany(p => p.Dns)
                .HasPrincipalKey(p => p.Dntype1)
                .HasForeignKey(d => d.Dntype)
                .HasConstraintName("FK_DN_DNType");

            entity.HasOne(d => d.Footer1TaxCodeNavigation).WithMany(p => p.DnFooter1TaxCodeNavigations)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.Footer1TaxCode)
                .HasConstraintName("FK_DN_Footer1TaxCode");

            entity.HasOne(d => d.Footer2TaxCodeNavigation).WithMany(p => p.DnFooter2TaxCodeNavigations)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.Footer2TaxCode)
                .HasConstraintName("FK_DN_Footer2TaxCode");

            entity.HasOne(d => d.Footer3TaxCodeNavigation).WithMany(p => p.DnFooter3TaxCodeNavigations)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.Footer3TaxCode)
                .HasConstraintName("FK_DN_Footer3TaxCode");

            entity.HasOne(d => d.LastModifiedUser).WithMany(p => p.DnLastModifiedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.LastModifiedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DN_LastModifiedUserID");

            entity.HasOne(d => d.MemberNoNavigation).WithMany(p => p.Dns)
                .HasPrincipalKey(p => p.MemberNo)
                .HasForeignKey(d => d.MemberNo)
                .HasConstraintName("FK_DN_MemberNo");

            entity.HasOne(d => d.ReallocatePurchaseByProjectNoNavigation).WithMany(p => p.Dns)
                .HasForeignKey(d => d.ReallocatePurchaseByProjectNo)
                .HasConstraintName("FK_DN_ReallocatePurchaseByProjectNo");

            entity.HasOne(d => d.SalesAgentNavigation).WithMany(p => p.Dns)
                .HasPrincipalKey(p => p.SalesAgent1)
                .HasForeignKey(d => d.SalesAgent)
                .HasConstraintName("FK_DN_SalesAgent");

            entity.HasOne(d => d.SalesLocationNavigation).WithMany(p => p.Dns)
                .HasPrincipalKey(p => p.Location1)
                .HasForeignKey(d => d.SalesLocation)
                .HasConstraintName("FK_DN_SalesLocation");

            entity.HasOne(d => d.TaxEntity).WithMany(p => p.Dns)
                .HasForeignKey(d => d.TaxEntityId)
                .HasConstraintName("FK_DN_TaxEntityID");

            entity.HasOne(d => d.Branch).WithMany(p => p.Dns)
                .HasPrincipalKey(p => new { p.AccNo, p.BranchCode })
                .HasForeignKey(d => new { d.DebtorCode, d.BranchCode })
                .HasConstraintName("FK_DN_BranchCode");
        });

        modelBuilder.Entity<Dndtl>(entity =>
        {
            entity.HasKey(e => e.DtlKey).HasName("PK_DNDTL_DtlKey");

            entity.ToTable("DNDTL");

            entity.HasIndex(e => e.DocKey, "IX_DNDTL_DocKey");

            entity.HasIndex(e => new { e.ItemCode, e.Uom }, "IX_DNDTL_ItemCode_UOM");

            entity.Property(e => e.DtlKey).ValueGeneratedNever();
            entity.Property(e => e.AccNo).HasMaxLength(12);
            entity.Property(e => e.AddToSubTotal)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Atc)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("ATC");
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.BonusPoint).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.CalcByPercent).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Classification)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Desc2).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.Discount).HasMaxLength(20);
            entity.Property(e => e.DiscountAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DtlType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ExtraDiscountAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.FocdtlKey).HasColumnName("FOCDtlKey");
            entity.Property(e => e.Focqty)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("FOCQty");
            entity.Property(e => e.FontStyle).HasMaxLength(8);
            entity.Property(e => e.Guid).HasDefaultValueSql("(newid())");
            entity.Property(e => e.IsCalcBonusPoint)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.LocalFoctotalCost)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("LocalFOCTotalCost");
            entity.Property(e => e.LocalSubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalSubTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxAdjustment).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTotalCost).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.MainItem)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Numbering).HasMaxLength(6);
            entity.Property(e => e.OriginCountryCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.PostToStockDate).HasColumnType("datetime");
            entity.Property(e => e.PrintOut)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SalesExemptionNo).HasMaxLength(60);
            entity.Property(e => e.SmallestQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SmallestUnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SubTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SupplyPurchase)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TariffCode).HasMaxLength(12);
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxAdjustment).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCode).HasMaxLength(14);
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxExportCountry).HasMaxLength(50);
            entity.Property(e => e.TaxPermitNo).HasMaxLength(20);
            entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
            entity.Property(e => e.UserUom)
                .HasMaxLength(8)
                .HasColumnName("UserUOM");
            entity.Property(e => e.YourPodate)
                .HasColumnType("datetime")
                .HasColumnName("YourPODate");
            entity.Property(e => e.YourPono)
                .HasMaxLength(25)
                .HasColumnName("YourPONo");

            entity.HasOne(d => d.AccNoNavigation).WithMany(p => p.Dndtls)
                .HasForeignKey(d => d.AccNo)
                .HasConstraintName("FK_DNDTL_AccNo");

            entity.HasOne(d => d.AtcNavigation).WithMany(p => p.Dndtls)
                .HasForeignKey(d => d.Atc)
                .HasConstraintName("FK_DNDTL_ATC");

            entity.HasOne(d => d.DeptNoNavigation).WithMany(p => p.Dndtls)
                .HasForeignKey(d => d.DeptNo)
                .HasConstraintName("FK_DNDTL_DeptNo");

            entity.HasOne(d => d.FontStyleNavigation).WithMany(p => p.Dndtls)
                .HasPrincipalKey(p => p.FontStyle1)
                .HasForeignKey(d => d.FontStyle)
                .HasConstraintName("FK_DNDTL_FontStyle");

            entity.HasOne(d => d.LocationNavigation).WithMany(p => p.Dndtls)
                .HasPrincipalKey(p => p.Location1)
                .HasForeignKey(d => d.Location)
                .HasConstraintName("FK_DNDTL_Location");

            entity.HasOne(d => d.ProjNoNavigation).WithMany(p => p.Dndtls)
                .HasForeignKey(d => d.ProjNo)
                .HasConstraintName("FK_DNDTL_ProjNo");

            entity.HasOne(d => d.TariffCodeNavigation).WithMany(p => p.Dndtls)
                .HasPrincipalKey(p => p.TariffCode)
                .HasForeignKey(d => d.TariffCode)
                .HasConstraintName("FK_DNDTL_TariffCode");

            entity.HasOne(d => d.TaxCodeNavigation).WithMany(p => p.Dndtls)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.TaxCode)
                .HasConstraintName("FK_DNDTL_TaxCode");

            entity.HasOne(d => d.ItemBatch).WithMany(p => p.Dndtls)
                .HasPrincipalKey(p => new { p.ItemCode, p.BatchNo })
                .HasForeignKey(d => new { d.ItemCode, d.BatchNo })
                .HasConstraintName("FK_DNDTL_ItemBatch");

            entity.HasOne(d => d.ItemUom).WithMany(p => p.Dndtls)
                .HasPrincipalKey(p => new { p.ItemCode, p.Uom })
                .HasForeignKey(d => new { d.ItemCode, d.Uom })
                .HasConstraintName("FK_DNDTL_ItemUOM");
        });

        modelBuilder.Entity<Dntype>(entity =>
        {
            entity.HasKey(e => e.AutoKey).HasName("PK_DNType_AutoKey");

            entity.ToTable("DNType", tb => tb.HasTrigger("UpdateDNTypeChangeCount"));

            entity.HasIndex(e => e.Dntype1, "UIX_DNType_DNType").IsUnique();

            entity.Property(e => e.Desc2).HasMaxLength(40);
            entity.Property(e => e.Description).HasMaxLength(40);
            entity.Property(e => e.Dntype1)
                .HasMaxLength(12)
                .HasColumnName("DNType");
            entity.Property(e => e.IsActive)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<Do>(entity =>
        {
            entity.HasKey(e => e.DocKey).HasName("PK_DO_DocKey");

            entity.ToTable("DO", tb => tb.HasTrigger("UpdateDOChangeCount"));

            entity.HasIndex(e => e.DocNo, "IX_DO_DocNo").IsUnique();

            entity.HasIndex(e => new { e.DocStatus, e.ExpiryTimeStamp }, "IX_DO_DocStatus_ExpiryTimeStamp");

            entity.HasIndex(e => new { e.ToDocType, e.ToDocKey }, "IX_DO_ToDocTypeKey");

            entity.Property(e => e.DocKey).ValueGeneratedNever();
            entity.Property(e => e.AnalysisNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Attention).HasMaxLength(40);
            entity.Property(e => e.BranchCode).HasMaxLength(20);
            entity.Property(e => e.CalcDiscountOnUnitPrice)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CanSync)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.CurrencyCode).HasMaxLength(5);
            entity.Property(e => e.CurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.DebtorCode).HasMaxLength(12);
            entity.Property(e => e.DebtorName).HasMaxLength(100);
            entity.Property(e => e.DeliverAddr1).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr2).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr3).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr4).HasMaxLength(40);
            entity.Property(e => e.DeliverContact).HasMaxLength(40);
            entity.Property(e => e.DeliverFax1).HasMaxLength(25);
            entity.Property(e => e.DeliverPhone1).HasMaxLength(25);
            entity.Property(e => e.Description).HasMaxLength(80);
            entity.Property(e => e.DisplayTerm).HasMaxLength(30);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.DocStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ExpiryTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.Fax1).HasMaxLength(25);
            entity.Property(e => e.Footer1Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer1TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Footer2Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer2TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Footer3Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer3TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.FullTransferOption)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.GstjedocKey).HasColumnName("GSTJEDocKey");
            entity.Property(e => e.Guid).HasDefaultValueSql("(newid())");
            entity.Property(e => e.InclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("F")
                .IsFixedLength();
            entity.Property(e => e.InvAddr1).HasMaxLength(40);
            entity.Property(e => e.InvAddr2).HasMaxLength(40);
            entity.Property(e => e.InvAddr3).HasMaxLength(40);
            entity.Property(e => e.InvAddr4).HasMaxLength(40);
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.LocalAnalysisNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTotalCost).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.MultiPrice).HasMaxLength(8);
            entity.Property(e => e.NetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Phone1).HasMaxLength(25);
            entity.Property(e => e.PostToStock)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Ref).HasMaxLength(40);
            entity.Property(e => e.RefDocNo).HasMaxLength(30);
            entity.Property(e => e.Remark1).HasMaxLength(40);
            entity.Property(e => e.Remark2).HasMaxLength(40);
            entity.Property(e => e.Remark3).HasMaxLength(40);
            entity.Property(e => e.Remark4).HasMaxLength(40);
            entity.Property(e => e.SalesAgent).HasMaxLength(12);
            entity.Property(e => e.SalesExemptionExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.SalesExemptionNo).HasMaxLength(60);
            entity.Property(e => e.SalesLocation).HasMaxLength(8);
            entity.Property(e => e.ShipInfo).HasMaxLength(40);
            entity.Property(e => e.ShipVia).HasMaxLength(20);
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxEntityId).HasColumnName("TaxEntityID");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ToDocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.ToTaxCurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.Total).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Transferable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.UdfSuperAppId)
                .HasMaxLength(32)
                .HasColumnName("UDF_SuperAppId");
            entity.Property(e => e.YourPodate)
                .HasColumnType("datetime")
                .HasColumnName("YourPODate");
            entity.Property(e => e.YourPono)
                .HasMaxLength(25)
                .HasColumnName("YourPONo");

            entity.HasOne(d => d.CreatedUser).WithMany(p => p.DoCreatedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.CreatedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DO_CreatedUserID");

            entity.HasOne(d => d.CurrencyCodeNavigation).WithMany(p => p.Dos)
                .HasForeignKey(d => d.CurrencyCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DO_CurrencyCode");

            entity.HasOne(d => d.DebtorCodeNavigation).WithMany(p => p.Dos)
                .HasForeignKey(d => d.DebtorCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DO_DebtorCode");

            entity.HasOne(d => d.DisplayTermNavigation).WithMany(p => p.Dos)
                .HasPrincipalKey(p => p.DisplayTerm)
                .HasForeignKey(d => d.DisplayTerm)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DO_DisplayTerm");

            entity.HasOne(d => d.Footer1TaxCodeNavigation).WithMany(p => p.DoFooter1TaxCodeNavigations)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.Footer1TaxCode)
                .HasConstraintName("FK_DO_Footer1TaxCode");

            entity.HasOne(d => d.Footer2TaxCodeNavigation).WithMany(p => p.DoFooter2TaxCodeNavigations)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.Footer2TaxCode)
                .HasConstraintName("FK_DO_Footer2TaxCode");

            entity.HasOne(d => d.Footer3TaxCodeNavigation).WithMany(p => p.DoFooter3TaxCodeNavigations)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.Footer3TaxCode)
                .HasConstraintName("FK_DO_Footer3TaxCode");

            entity.HasOne(d => d.LastModifiedUser).WithMany(p => p.DoLastModifiedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.LastModifiedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DO_LastModifiedUserID");

            entity.HasOne(d => d.SalesAgentNavigation).WithMany(p => p.Dos)
                .HasPrincipalKey(p => p.SalesAgent1)
                .HasForeignKey(d => d.SalesAgent)
                .HasConstraintName("FK_DO_SalesAgent");

            entity.HasOne(d => d.SalesLocationNavigation).WithMany(p => p.Dos)
                .HasPrincipalKey(p => p.Location1)
                .HasForeignKey(d => d.SalesLocation)
                .HasConstraintName("FK_DO_SalesLocation");

            entity.HasOne(d => d.ShipViaNavigation).WithMany(p => p.Dos)
                .HasPrincipalKey(p => p.ShippingMethod1)
                .HasForeignKey(d => d.ShipVia)
                .HasConstraintName("FK_DO_ShipVia");

            entity.HasOne(d => d.TaxEntity).WithMany(p => p.Dos)
                .HasForeignKey(d => d.TaxEntityId)
                .HasConstraintName("FK_DO_TaxEntityID");

            entity.HasOne(d => d.Branch).WithMany(p => p.Dos)
                .HasPrincipalKey(p => new { p.AccNo, p.BranchCode })
                .HasForeignKey(d => new { d.DebtorCode, d.BranchCode })
                .HasConstraintName("FK_DO_BranchCode");
        });

        modelBuilder.Entity<DocNoFormat>(entity =>
        {
            entity.HasKey(e => e.AutoKey).HasName("PK_DocNoFormat_AutoKey");

            entity.ToTable("DocNoFormat", tb => tb.HasTrigger("UpdateDocNoFormatChangeCount"));

            entity.HasIndex(e => e.Name, "UIX_DocNoFormat_Name").IsUnique();

            entity.Property(e => e.DocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.Format).HasMaxLength(40);
            entity.Property(e => e.IsDefault)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Name).HasMaxLength(20);
            entity.Property(e => e.OneMonthOneSet)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Sample).HasMaxLength(30);
        });

        modelBuilder.Entity<DocNoFormatAccNo>(entity =>
        {
            entity.HasKey(e => e.AutoKey).HasName("PK_DocNoFormatAccNo_AutoKey");

            entity.ToTable("DocNoFormatAccNo");

            entity.HasIndex(e => new { e.Name, e.AccNo }, "UIX_DocNoFormatAccNo_Name_AccNo").IsUnique();

            entity.Property(e => e.AccNo).HasMaxLength(12);
            entity.Property(e => e.Name).HasMaxLength(20);

            entity.HasOne(d => d.AccNoNavigation).WithMany(p => p.DocNoFormatAccNos)
                .HasForeignKey(d => d.AccNo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DocNoFormatAccNo_AccNo");

            entity.HasOne(d => d.NameNavigation).WithMany(p => p.DocNoFormatAccNos)
                .HasPrincipalKey(p => p.Name)
                .HasForeignKey(d => d.Name)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DocNoFormatAccNo_Name");
        });

        modelBuilder.Entity<DocNoFormatUser>(entity =>
        {
            entity.HasKey(e => e.AutoKey).HasName("PK_DocNoFormatUsers_AutoKey");

            entity.HasIndex(e => new { e.Name, e.UserId }, "UIX_DocNoFormatUsers_Name_UserID").IsUnique();

            entity.Property(e => e.Name).HasMaxLength(20);
            entity.Property(e => e.UserId)
                .HasMaxLength(10)
                .HasColumnName("UserID");

            entity.HasOne(d => d.NameNavigation).WithMany(p => p.DocNoFormatUsers)
                .HasPrincipalKey(p => p.Name)
                .HasForeignKey(d => d.Name)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DocNoFormatUsers_Name");

            entity.HasOne(d => d.User).WithMany(p => p.DocNoFormatUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DocNoFormatUsers_UserID");
        });

        modelBuilder.Entity<DocNoFormatYearlyNumber>(entity =>
        {
            entity.HasKey(e => e.AutoKey).HasName("PK_DocNoFormatYearlyNumber_AutoKey");

            entity.ToTable("DocNoFormatYearlyNumber");

            entity.HasIndex(e => new { e.Name, e.Year }, "UIX_DocNoFormatYearlyNumber_Name_Year").IsUnique();

            entity.Property(e => e.M10nextNumber).HasColumnName("M10NextNumber");
            entity.Property(e => e.M11nextNumber).HasColumnName("M11NextNumber");
            entity.Property(e => e.M12nextNumber).HasColumnName("M12NextNumber");
            entity.Property(e => e.M1nextNumber).HasColumnName("M1NextNumber");
            entity.Property(e => e.M2nextNumber).HasColumnName("M2NextNumber");
            entity.Property(e => e.M3nextNumber).HasColumnName("M3NextNumber");
            entity.Property(e => e.M4nextNumber).HasColumnName("M4NextNumber");
            entity.Property(e => e.M5nextNumber).HasColumnName("M5NextNumber");
            entity.Property(e => e.M6nextNumber).HasColumnName("M6NextNumber");
            entity.Property(e => e.M7nextNumber).HasColumnName("M7NextNumber");
            entity.Property(e => e.M8nextNumber).HasColumnName("M8NextNumber");
            entity.Property(e => e.M9nextNumber).HasColumnName("M9NextNumber");
            entity.Property(e => e.Name).HasMaxLength(20);
        });

        modelBuilder.Entity<DocReportSetting>(entity =>
        {
            entity.HasKey(e => e.DocType).HasName("PK_DocReportSetting_DocType");

            entity.ToTable("DocReportSetting");

            entity.Property(e => e.DocType)
                .HasMaxLength(2)
                .IsUnicode(false);
        });

        modelBuilder.Entity<DocStatusChangeLog>(entity =>
        {
            entity.ToTable("DocStatusChangeLog");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Action)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.ActionTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.DocStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.Reason)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.UserId)
                .HasMaxLength(10)
                .HasColumnName("UserID");
        });

        modelBuilder.Entity<DocTemplate>(entity =>
        {
            entity.HasKey(e => e.AutoKey);

            entity.ToTable("DocTemplate");

            entity.HasIndex(e => e.TemplateName, "UIX_DocTemplate_TemplateName").IsUnique();

            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.DocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.IsDefault)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TemplateName).HasMaxLength(100);

            entity.HasOne(d => d.CreatedUser).WithMany(p => p.DocTemplates)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.CreatedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DocTemplate_CreatedUserID");
        });

        modelBuilder.Entity<DocTemplateUser>(entity =>
        {
            entity.HasKey(e => e.AutoKey).HasName("PK_DocTemplateUsers_AutoKey");

            entity.HasIndex(e => new { e.TemplateName, e.UserId }, "UIX_DocTemplateUsers_ItemCode_UOM").IsUnique();

            entity.Property(e => e.TemplateName).HasMaxLength(100);
            entity.Property(e => e.UserId)
                .HasMaxLength(10)
                .HasColumnName("UserID");

            entity.HasOne(d => d.TemplateNameNavigation).WithMany(p => p.DocTemplateUsers)
                .HasPrincipalKey(p => p.TemplateName)
                .HasForeignKey(d => d.TemplateName)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DocTemplateUsers_TemplateName");
        });

        modelBuilder.Entity<DocTransfer>(entity =>
        {
            entity.HasKey(e => e.TransferKey);

            entity.ToTable("DocTransfer");

            entity.HasIndex(e => e.ToDocKey, "IX_DocTransfer_ToDocKey");

            entity.Property(e => e.TransferKey).ValueGeneratedNever();
            entity.Property(e => e.Focqty)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("FOCQty");
            entity.Property(e => e.FromDocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.ToDocType)
                .HasMaxLength(2)
                .IsUnicode(false);
        });

        modelBuilder.Entity<DocTransferTempAll>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("DocTransferTempAll");

            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(20);
            entity.Property(e => e.DocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.Focqty)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("FOCQty");
            entity.Property(e => e.FromDocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.FullTransferOption)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Success)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.TransferKey).ValueGeneratedOnAdd();
        });

        modelBuilder.Entity<DocTransferTempMatch>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("DocTransferTempMatch");

            entity.Property(e => e.ActlFromDocDtlKey).HasColumnName("Actl_FromDocDtlKey");
            entity.Property(e => e.ActlFromDocKey).HasColumnName("Actl_FromDocKey");
            entity.Property(e => e.ActlFromDocNo)
                .HasMaxLength(20)
                .HasColumnName("Actl_FromDocNo");
            entity.Property(e => e.ActlFromFocqty)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("Actl_FromFOCQty");
            entity.Property(e => e.ActlFromQty)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("Actl_FromQty");
            entity.Property(e => e.Focqty)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("FOCQty");
            entity.Property(e => e.FromDocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.ToDocType)
                .HasMaxLength(2)
                .IsUnicode(false);
        });

        modelBuilder.Entity<DocumentLock>(entity =>
        {
            entity.HasKey(e => e.DocLockKey).HasName("PK_DocumentLock_DocLockKey");

            entity.ToTable("DocumentLock");

            entity.Property(e => e.ComputerName).HasMaxLength(15);
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.DocType)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdate).HasColumnType("datetime");
            entity.Property(e => e.UserId)
                .HasMaxLength(10)
                .HasColumnName("UserID");
            entity.Property(e => e.UserName).HasMaxLength(64);
        });

        modelBuilder.Entity<Dodtl>(entity =>
        {
            entity.HasKey(e => e.DtlKey).HasName("PK_DODTL_DtlKey");

            entity.ToTable("DODTL");

            entity.HasIndex(e => e.DocKey, "IX_DODTL_DocKey");

            entity.HasIndex(e => e.FromDocDtlKey, "IX_DODTL_FromDocDtlKey");

            entity.HasIndex(e => new { e.ItemCode, e.Uom }, "IX_DODTL_ItemCode_UOM");

            entity.Property(e => e.DtlKey).ValueGeneratedNever();
            entity.Property(e => e.AccNo).HasMaxLength(12);
            entity.Property(e => e.AddToSubTotal)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.CalcByPercent).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.DeliveryDate).HasColumnType("datetime");
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Desc2).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.Discount).HasMaxLength(20);
            entity.Property(e => e.DiscountAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DtlType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EstimatedDeliveryDate).HasMaxLength(20);
            entity.Property(e => e.ExtraDiscountAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.FocdtlKey).HasColumnName("FOCDtlKey");
            entity.Property(e => e.Focqty)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("FOCQty");
            entity.Property(e => e.FoctransferedQty)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("FOCTransferedQty");
            entity.Property(e => e.FontStyle).HasMaxLength(8);
            entity.Property(e => e.FromDocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.FullTransferOption)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Guid).HasDefaultValueSql("(newid())");
            entity.Property(e => e.IsValueTransferedItem)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.LocalFoctotalCost)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("LocalFOCTotalCost");
            entity.Property(e => e.LocalSubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalSubTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxAdjustment).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTotalCost).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.MainItem)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Numbering).HasMaxLength(6);
            entity.Property(e => e.PostToStockDate).HasColumnType("datetime");
            entity.Property(e => e.PrintOut)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SalesExemptionNo).HasMaxLength(60);
            entity.Property(e => e.SmallestQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SmallestUnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SubTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxAdjustment).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCode).HasMaxLength(14);
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Transferable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TransferedQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.UdfDeliveryFocQty)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UDF_DeliveryFocQty");
            entity.Property(e => e.UdfDeliveryQty)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UDF_DeliveryQty");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
            entity.Property(e => e.UserUom)
                .HasMaxLength(8)
                .HasColumnName("UserUOM");
            entity.Property(e => e.YourPodate)
                .HasColumnType("datetime")
                .HasColumnName("YourPODate");
            entity.Property(e => e.YourPono)
                .HasMaxLength(25)
                .HasColumnName("YourPONo");

            entity.HasOne(d => d.AccNoNavigation).WithMany(p => p.Dodtls)
                .HasForeignKey(d => d.AccNo)
                .HasConstraintName("FK_DODTL_AccNo");

            entity.HasOne(d => d.DeptNoNavigation).WithMany(p => p.Dodtls)
                .HasForeignKey(d => d.DeptNo)
                .HasConstraintName("FK_DODTL_DeptNo");

            entity.HasOne(d => d.FontStyleNavigation).WithMany(p => p.Dodtls)
                .HasPrincipalKey(p => p.FontStyle1)
                .HasForeignKey(d => d.FontStyle)
                .HasConstraintName("FK_DODTL_FontStyle");

            entity.HasOne(d => d.LocationNavigation).WithMany(p => p.Dodtls)
                .HasPrincipalKey(p => p.Location1)
                .HasForeignKey(d => d.Location)
                .HasConstraintName("FK_DODTL_Location");

            entity.HasOne(d => d.ProjNoNavigation).WithMany(p => p.Dodtls)
                .HasForeignKey(d => d.ProjNo)
                .HasConstraintName("FK_DODTL_ProjNo");

            entity.HasOne(d => d.TaxCodeNavigation).WithMany(p => p.Dodtls)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.TaxCode)
                .HasConstraintName("FK_DODTL_TaxCode");

            entity.HasOne(d => d.ItemBatch).WithMany(p => p.Dodtls)
                .HasPrincipalKey(p => new { p.ItemCode, p.BatchNo })
                .HasForeignKey(d => new { d.ItemCode, d.BatchNo })
                .HasConstraintName("FK_DODTL_ItemBatch");

            entity.HasOne(d => d.ItemUom).WithMany(p => p.Dodtls)
                .HasPrincipalKey(p => new { p.ItemCode, p.Uom })
                .HasForeignKey(d => new { d.ItemCode, d.Uom })
                .HasConstraintName("FK_DODTL_ItemUOM");
        });

        modelBuilder.Entity<Dr>(entity =>
        {
            entity.HasKey(e => e.DocKey).HasName("PK_DR_DocKey");

            entity.ToTable("DR", tb => tb.HasTrigger("UpdateDRChangeCount"));

            entity.HasIndex(e => e.DocNo, "IX_DR_DocNo").IsUnique();

            entity.HasIndex(e => new { e.DocStatus, e.ExpiryTimeStamp }, "IX_DR_DocStatus_ExpiryTimeStamp");

            entity.Property(e => e.DocKey).ValueGeneratedNever();
            entity.Property(e => e.AnalysisNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Attention).HasMaxLength(40);
            entity.Property(e => e.BranchCode).HasMaxLength(20);
            entity.Property(e => e.CalcDiscountOnUnitPrice)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CanSync)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.CurrencyCode).HasMaxLength(5);
            entity.Property(e => e.CurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.DebtorCode).HasMaxLength(12);
            entity.Property(e => e.DebtorName).HasMaxLength(100);
            entity.Property(e => e.DeliverAddr1).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr2).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr3).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr4).HasMaxLength(40);
            entity.Property(e => e.DeliverContact).HasMaxLength(40);
            entity.Property(e => e.DeliverFax1).HasMaxLength(25);
            entity.Property(e => e.DeliverPhone1).HasMaxLength(25);
            entity.Property(e => e.Description).HasMaxLength(80);
            entity.Property(e => e.DisplayTerm).HasMaxLength(30);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.DocStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ExpiryTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.Fax1).HasMaxLength(25);
            entity.Property(e => e.Footer1Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer1TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Footer2Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer2TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Footer3Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer3TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Guid).HasDefaultValueSql("(newid())");
            entity.Property(e => e.InclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("F")
                .IsFixedLength();
            entity.Property(e => e.InvAddr1).HasMaxLength(40);
            entity.Property(e => e.InvAddr2).HasMaxLength(40);
            entity.Property(e => e.InvAddr3).HasMaxLength(40);
            entity.Property(e => e.InvAddr4).HasMaxLength(40);
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.LocalAnalysisNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTotalCost).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.MultiPrice).HasMaxLength(8);
            entity.Property(e => e.NetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Phone1).HasMaxLength(25);
            entity.Property(e => e.PostToStock)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Ref).HasMaxLength(40);
            entity.Property(e => e.RefDocNo).HasMaxLength(30);
            entity.Property(e => e.Remark1).HasMaxLength(40);
            entity.Property(e => e.Remark2).HasMaxLength(40);
            entity.Property(e => e.Remark3).HasMaxLength(40);
            entity.Property(e => e.Remark4).HasMaxLength(40);
            entity.Property(e => e.SalesAgent).HasMaxLength(12);
            entity.Property(e => e.SalesExemptionExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.SalesExemptionNo).HasMaxLength(60);
            entity.Property(e => e.SalesLocation).HasMaxLength(8);
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxEntityId).HasColumnName("TaxEntityID");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ToTaxCurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.Total).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.YourPodate)
                .HasColumnType("datetime")
                .HasColumnName("YourPODate");
            entity.Property(e => e.YourPono)
                .HasMaxLength(25)
                .HasColumnName("YourPONo");

            entity.HasOne(d => d.CreatedUser).WithMany(p => p.DrCreatedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.CreatedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DR_CreatedUserID");

            entity.HasOne(d => d.CurrencyCodeNavigation).WithMany(p => p.Drs)
                .HasForeignKey(d => d.CurrencyCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DR_CurrencyCode");

            entity.HasOne(d => d.DebtorCodeNavigation).WithMany(p => p.Drs)
                .HasForeignKey(d => d.DebtorCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DR_DebtorCode");

            entity.HasOne(d => d.DisplayTermNavigation).WithMany(p => p.Drs)
                .HasPrincipalKey(p => p.DisplayTerm)
                .HasForeignKey(d => d.DisplayTerm)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DR_DisplayTerm");

            entity.HasOne(d => d.Footer1TaxCodeNavigation).WithMany(p => p.DrFooter1TaxCodeNavigations)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.Footer1TaxCode)
                .HasConstraintName("FK_DR_Footer1TaxCode");

            entity.HasOne(d => d.Footer2TaxCodeNavigation).WithMany(p => p.DrFooter2TaxCodeNavigations)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.Footer2TaxCode)
                .HasConstraintName("FK_DR_Footer2TaxCode");

            entity.HasOne(d => d.Footer3TaxCodeNavigation).WithMany(p => p.DrFooter3TaxCodeNavigations)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.Footer3TaxCode)
                .HasConstraintName("FK_DR_Footer3TaxCode");

            entity.HasOne(d => d.LastModifiedUser).WithMany(p => p.DrLastModifiedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.LastModifiedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DR_LastModifiedUserID");

            entity.HasOne(d => d.SalesAgentNavigation).WithMany(p => p.Drs)
                .HasPrincipalKey(p => p.SalesAgent1)
                .HasForeignKey(d => d.SalesAgent)
                .HasConstraintName("FK_DR_SalesAgent");

            entity.HasOne(d => d.SalesLocationNavigation).WithMany(p => p.Drs)
                .HasPrincipalKey(p => p.Location1)
                .HasForeignKey(d => d.SalesLocation)
                .HasConstraintName("FK_DR_SalesLocation");

            entity.HasOne(d => d.TaxEntity).WithMany(p => p.Drs)
                .HasForeignKey(d => d.TaxEntityId)
                .HasConstraintName("FK_DR_TaxEntityID");

            entity.HasOne(d => d.Branch).WithMany(p => p.Drs)
                .HasPrincipalKey(p => new { p.AccNo, p.BranchCode })
                .HasForeignKey(d => new { d.DebtorCode, d.BranchCode })
                .HasConstraintName("FK_DR_BranchCode");
        });

        modelBuilder.Entity<Drdtl>(entity =>
        {
            entity.HasKey(e => e.DtlKey).HasName("PK_DRDTL_DtlKey");

            entity.ToTable("DRDTL");

            entity.HasIndex(e => e.DocKey, "IX_DRDTL_DocKey");

            entity.HasIndex(e => new { e.ItemCode, e.Uom }, "IX_DRDTL_ItemCode_UOM");

            entity.Property(e => e.DtlKey).ValueGeneratedNever();
            entity.Property(e => e.AddToSubTotal)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.CalcByPercent).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.DeliveryDate).HasColumnType("datetime");
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Desc2).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.Discount).HasMaxLength(20);
            entity.Property(e => e.DiscountAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DtlType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EstimatedDeliveryDate).HasMaxLength(20);
            entity.Property(e => e.ExtraDiscountAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.FocdtlKey).HasColumnName("FOCDtlKey");
            entity.Property(e => e.Focqty)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("FOCQty");
            entity.Property(e => e.FontStyle).HasMaxLength(8);
            entity.Property(e => e.FromDocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.FullTransferOption)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Guid).HasDefaultValueSql("(newid())");
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.LocalFoctotalCost)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("LocalFOCTotalCost");
            entity.Property(e => e.LocalSubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalSubTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxAdjustment).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTotalCost).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.MainItem)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Numbering).HasMaxLength(6);
            entity.Property(e => e.PostToStockDate).HasColumnType("datetime");
            entity.Property(e => e.PrintOut)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SalesExemptionNo).HasMaxLength(60);
            entity.Property(e => e.SmallestQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SmallestUnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SubTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxAdjustment).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCode).HasMaxLength(14);
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
            entity.Property(e => e.UserUom)
                .HasMaxLength(8)
                .HasColumnName("UserUOM");
            entity.Property(e => e.YourPodate)
                .HasColumnType("datetime")
                .HasColumnName("YourPODate");
            entity.Property(e => e.YourPono)
                .HasMaxLength(25)
                .HasColumnName("YourPONo");

            entity.HasOne(d => d.DeptNoNavigation).WithMany(p => p.Drdtls)
                .HasForeignKey(d => d.DeptNo)
                .HasConstraintName("FK_DRDTL_DeptNo");

            entity.HasOne(d => d.FontStyleNavigation).WithMany(p => p.Drdtls)
                .HasPrincipalKey(p => p.FontStyle1)
                .HasForeignKey(d => d.FontStyle)
                .HasConstraintName("FK_DRDTL_FontStyle");

            entity.HasOne(d => d.LocationNavigation).WithMany(p => p.Drdtls)
                .HasPrincipalKey(p => p.Location1)
                .HasForeignKey(d => d.Location)
                .HasConstraintName("FK_DRDTL_Location");

            entity.HasOne(d => d.ProjNoNavigation).WithMany(p => p.Drdtls)
                .HasForeignKey(d => d.ProjNo)
                .HasConstraintName("FK_DRDTL_ProjNo");

            entity.HasOne(d => d.TaxCodeNavigation).WithMany(p => p.Drdtls)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.TaxCode)
                .HasConstraintName("FK_DRDTL_TaxCode");

            entity.HasOne(d => d.ItemBatch).WithMany(p => p.Drdtls)
                .HasPrincipalKey(p => new { p.ItemCode, p.BatchNo })
                .HasForeignKey(d => new { d.ItemCode, d.BatchNo })
                .HasConstraintName("FK_DRDTL_ItemBatch");

            entity.HasOne(d => d.ItemUom).WithMany(p => p.Drdtls)
                .HasPrincipalKey(p => new { p.ItemCode, p.Uom })
                .HasForeignKey(d => new { d.ItemCode, d.Uom })
                .HasConstraintName("FK_DRDTL_ItemUOM");
        });

        modelBuilder.Entity<Drprocessing>(entity =>
        {
            entity.HasKey(e => e.DocKey).HasName("PK_DRProcessing_DocKey");

            entity.ToTable("DRProcessing");

            entity.Property(e => e.DocKey).ValueGeneratedNever();
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.DebtorCode).HasMaxLength(12);
            entity.Property(e => e.DeliveryDate).HasColumnType("datetime");
            entity.Property(e => e.DeliveryQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.DeliveryRate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.DeliveryUom)
                .HasMaxLength(8)
                .HasColumnName("DeliveryUOM");
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.Discount).HasMaxLength(12);
            entity.Property(e => e.EstimatedDeliveryDate).HasMaxLength(20);
            entity.Property(e => e.IsAllowOpedit)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IsAllowOPEdit");
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.Remark).HasMaxLength(100);
            entity.Property(e => e.SodocKey).HasColumnName("SODocKey");
            entity.Property(e => e.SodtlKey).HasColumnName("SODtlKey");
            entity.Property(e => e.TaxCode).HasMaxLength(14);
            entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(25, 8)");

            entity.HasOne(d => d.CreatedUser).WithMany(p => p.DrprocessingCreatedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.CreatedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DRProcessing_CreatedUserID");

            entity.HasOne(d => d.DebtorCodeNavigation).WithMany(p => p.Drprocessings)
                .HasForeignKey(d => d.DebtorCode)
                .HasConstraintName("FK_DRProcessing_DebtorCode");

            entity.HasOne(d => d.DeptNoNavigation).WithMany(p => p.Drprocessings)
                .HasForeignKey(d => d.DeptNo)
                .HasConstraintName("FK_DRProcessing_DeptNo");

            entity.HasOne(d => d.LastModifiedUser).WithMany(p => p.DrprocessingLastModifiedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.LastModifiedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DRProcessing_LastModifiedUserID");

            entity.HasOne(d => d.LocationNavigation).WithMany(p => p.Drprocessings)
                .HasPrincipalKey(p => p.Location1)
                .HasForeignKey(d => d.Location)
                .HasConstraintName("FK_DRProcessing_Location");

            entity.HasOne(d => d.ProjNoNavigation).WithMany(p => p.Drprocessings)
                .HasForeignKey(d => d.ProjNo)
                .HasConstraintName("FK_DRProcessing_ProjNo");

            entity.HasOne(d => d.TaxCodeNavigation).WithMany(p => p.Drprocessings)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.TaxCode)
                .HasConstraintName("FK_DRProcessing_TaxCode");

            entity.HasOne(d => d.ItemUom).WithMany(p => p.Drprocessings)
                .HasPrincipalKey(p => new { p.ItemCode, p.Uom })
                .HasForeignKey(d => new { d.ItemCode, d.DeliveryUom })
                .HasConstraintName("FK_DRProcessing_DeliveryUOM");
        });

        modelBuilder.Entity<DrprocessingDo>(entity =>
        {
            entity.HasKey(e => e.DocKey).HasName("PK_DRProcessingDO_DocKey");

            entity.ToTable("DRProcessingDO");

            entity.Property(e => e.DocKey).ValueGeneratedNever();
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.DeliveryQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.DeliveryRate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.DeliveryUom)
                .HasMaxLength(8)
                .HasColumnName("DeliveryUOM");
            entity.Property(e => e.DodocKey).HasColumnName("DODocKey");
            entity.Property(e => e.DodocNo)
                .HasMaxLength(30)
                .HasColumnName("DODocNo");
            entity.Property(e => e.DodtlKey).HasColumnName("DODtlKey");
            entity.Property(e => e.Drpkey).HasColumnName("DRPKey");
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.Kiv)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("KIV");
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.SodocKey).HasColumnName("SODocKey");
            entity.Property(e => e.SodtlKey).HasColumnName("SODtlKey");

            entity.HasOne(d => d.CreatedUser).WithMany(p => p.DrprocessingDoCreatedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.CreatedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DRProcessingDO_CreatedUserID");

            entity.HasOne(d => d.LastModifiedUser).WithMany(p => p.DrprocessingDoLastModifiedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.LastModifiedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DRProcessingDO_LastModifiedUserID");

            entity.HasOne(d => d.ItemUom).WithMany(p => p.DrprocessingDos)
                .HasPrincipalKey(p => new { p.ItemCode, p.Uom })
                .HasForeignKey(d => new { d.ItemCode, d.DeliveryUom })
                .HasConstraintName("FK_DRProcessingDO_ItemUOM");
        });

        modelBuilder.Entity<EinvoiceConsolidatedInvoice>(entity =>
        {
            entity.HasKey(e => e.DocKey).HasName("PK_EInvoiceConsolidatedInvoice_DocKey");

            entity.ToTable("EInvoiceConsolidatedInvoice", tb => tb.HasTrigger("UpdateEInvoiceConsolidatedInvoiceChangeCount"));

            entity.HasIndex(e => e.DocNo, "IX_EInvoiceConsolidatedInvoice_DocNo").IsUnique();

            entity.HasIndex(e => e.EinvoiceTraceId, "IX_EInvoiceConsolidatedInvoice_EInvoiceTraceId");

            entity.Property(e => e.DocKey).ValueGeneratedNever();
            entity.Property(e => e.BillingPeriodEndDate).HasColumnType("datetime");
            entity.Property(e => e.BillingPeriodStartDate).HasColumnType("datetime");
            entity.Property(e => e.BuyerAddress).HasMaxLength(200);
            entity.Property(e => e.BuyerCity).HasMaxLength(50);
            entity.Property(e => e.BuyerCountryCode).HasMaxLength(3);
            entity.Property(e => e.BuyerEmail).HasMaxLength(200);
            entity.Property(e => e.BuyerIdentityNo).HasMaxLength(30);
            entity.Property(e => e.BuyerIdentityType).HasMaxLength(10);
            entity.Property(e => e.BuyerName).HasMaxLength(100);
            entity.Property(e => e.BuyerPhone).HasMaxLength(25);
            entity.Property(e => e.BuyerPostCode).HasMaxLength(10);
            entity.Property(e => e.BuyerSstregistrationNumber)
                .HasMaxLength(20)
                .HasColumnName("BuyerSSTRegistrationNumber");
            entity.Property(e => e.BuyerStateCode).HasMaxLength(2);
            entity.Property(e => e.BuyerTin)
                .HasMaxLength(20)
                .HasColumnName("BuyerTIN");
            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ConsolidatedPeriod).HasMaxLength(50);
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.CurrencyCode).HasMaxLength(5);
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.EinvoiceAipsubmissionDateTime)
                .HasColumnType("datetime")
                .HasColumnName("EInvoiceAIPSubmissionDateTime");
            entity.Property(e => e.EinvoiceCancelDateTime)
                .HasColumnType("datetime")
                .HasColumnName("EInvoiceCancelDateTime");
            entity.Property(e => e.EinvoiceCancelReason)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceCancelReason");
            entity.Property(e => e.EinvoiceError)
                .IsUnicode(false)
                .HasColumnName("EInvoiceError");
            entity.Property(e => e.EinvoiceStatus)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceStatus");
            entity.Property(e => e.EinvoiceSubmissionDateTime)
                .HasColumnType("datetime")
                .HasColumnName("EInvoiceSubmissionDateTime");
            entity.Property(e => e.EinvoiceSubmissionUuid)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceSubmissionUuid");
            entity.Property(e => e.EinvoiceTraceId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceTraceId");
            entity.Property(e => e.EinvoiceUuid)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceUuid");
            entity.Property(e => e.EinvoiceValidatedDateTime)
                .HasColumnType("datetime")
                .HasColumnName("EInvoiceValidatedDateTime");
            entity.Property(e => e.EinvoiceValidationLink)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("EInvoiceValidationLink");
            entity.Property(e => e.FinalTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.FrequencyOfBilling)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FromDocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.GeneratedBy).HasMaxLength(10);
            entity.Property(e => e.IssueDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.NetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.PaymentMode).HasMaxLength(100);
            entity.Property(e => e.RoundAdj).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SalesLocation).HasMaxLength(8);
            entity.Property(e => e.SupplierAddress).HasMaxLength(200);
            entity.Property(e => e.SupplierBusinessActivityDesc).HasMaxLength(500);
            entity.Property(e => e.SupplierCity).HasMaxLength(50);
            entity.Property(e => e.SupplierCountryCode).HasMaxLength(3);
            entity.Property(e => e.SupplierEmail).HasMaxLength(200);
            entity.Property(e => e.SupplierIdentityNo).HasMaxLength(30);
            entity.Property(e => e.SupplierIdentityType).HasMaxLength(10);
            entity.Property(e => e.SupplierMsiccode)
                .HasMaxLength(5)
                .HasColumnName("SupplierMSICCode");
            entity.Property(e => e.SupplierName).HasMaxLength(100);
            entity.Property(e => e.SupplierPhone).HasMaxLength(25);
            entity.Property(e => e.SupplierPostCode).HasMaxLength(10);
            entity.Property(e => e.SupplierSstregistrationNumber)
                .HasMaxLength(20)
                .HasColumnName("SupplierSSTRegistrationNumber");
            entity.Property(e => e.SupplierStateCode).HasMaxLength(2);
            entity.Property(e => e.SupplierTin)
                .HasMaxLength(20)
                .HasColumnName("SupplierTIN");
            entity.Property(e => e.SupplierTourismTaxRegistrationNumber).HasMaxLength(20);
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ToTaxCurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.Total).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalExTax).HasColumnType("decimal(19, 2)");
        });

        modelBuilder.Entity<EinvoiceConsolidatedInvoiceDetail>(entity =>
        {
            entity.HasKey(e => e.DtlKey).HasName("PK_EInvoiceConsolidatedInvoiceDetail_DtlKey");

            entity.ToTable("EInvoiceConsolidatedInvoiceDetail");

            entity.Property(e => e.DtlKey).ValueGeneratedNever();
            entity.Property(e => e.Classification)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.Description)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.PaymentMode).HasMaxLength(100);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SubTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(25, 8)");
        });

        modelBuilder.Entity<EinvoiceConsolidatedInvoiceDetailTaxType>(entity =>
        {
            entity.HasKey(e => e.CitaxTypeKey).HasName("PK_EInvoiceConsolidatedInvoiceTaxCategory_CITaxTypeKey");

            entity.ToTable("EInvoiceConsolidatedInvoiceDetailTaxTypes");

            entity.Property(e => e.CitaxTypeKey)
                .ValueGeneratedNever()
                .HasColumnName("CITaxTypeKey");
            entity.Property(e => e.CidocKey).HasColumnName("CIDocKey");
            entity.Property(e => e.CidtlKey).HasColumnName("CIDtlKey");
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxExemptionReason).HasMaxLength(100);
            entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.TaxType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
        });

        modelBuilder.Entity<EinvoiceConsolidatedInvoiceLink>(entity =>
        {
            entity.HasKey(e => e.CilinkKey).HasName("PK_EInvoiceConsolidatedInvoiceLink_CILinkKey");

            entity.ToTable("EInvoiceConsolidatedInvoiceLink");

            entity.Property(e => e.CilinkKey)
                .ValueGeneratedNever()
                .HasColumnName("CILinkKey");
            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CidocKey).HasColumnName("CIDocKey");
            entity.Property(e => e.CidtlKey).HasColumnName("CIDtlKey");
            entity.Property(e => e.DocType)
                .HasMaxLength(2)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EinvoiceEmail>(entity =>
        {
            entity.HasKey(e => e.DocType).HasName("PK_EInvoiceEmail_DocType");

            entity.ToTable("EInvoiceEmail");

            entity.Property(e => e.DocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.Bccemail)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("BCCEmail");
            entity.Property(e => e.Enabled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ReportName).HasMaxLength(100);
            entity.Property(e => e.Subject).HasMaxLength(255);
        });

        modelBuilder.Entity<EinvoiceQueue>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("EInvoiceQueue");

            entity.HasIndex(e => new { e.DocType, e.DocKey }, "IX_EInvoiceQueue_DocType_DocKey");

            entity.Property(e => e.DocType)
                .HasMaxLength(2)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EinvoiceSelfBilled>(entity =>
        {
            entity.HasKey(e => e.DocKey).HasName("PK_EInvoiceSelfBilled_DocKey");

            entity.ToTable("EInvoiceSelfBilled", tb => tb.HasTrigger("UpdateEInvoiceSelfBilledChangeCount"));

            entity.HasIndex(e => e.EinvoiceTraceId, "IX_EInvoiceSelfBilled_EInvoiceTraceId");

            entity.HasIndex(e => e.DocNo, "UIX_EInvoiceSelfBilled_DocNo").IsUnique();

            entity.Property(e => e.DocKey).ValueGeneratedNever();
            entity.Property(e => e.AuthorisationNumberForCertifiedExporter)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.BillingPeriodEndDate).HasColumnType("datetime");
            entity.Property(e => e.BillingPeriodStartDate).HasColumnType("datetime");
            entity.Property(e => e.BillingRef)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.BuyerAddress).HasMaxLength(200);
            entity.Property(e => e.BuyerCity).HasMaxLength(50);
            entity.Property(e => e.BuyerCountryCode).HasMaxLength(3);
            entity.Property(e => e.BuyerEmail).HasMaxLength(200);
            entity.Property(e => e.BuyerIdentityNo).HasMaxLength(30);
            entity.Property(e => e.BuyerIdentityType).HasMaxLength(10);
            entity.Property(e => e.BuyerName).HasMaxLength(100);
            entity.Property(e => e.BuyerPhone).HasMaxLength(25);
            entity.Property(e => e.BuyerPostCode).HasMaxLength(10);
            entity.Property(e => e.BuyerSstregistrationNumber)
                .HasMaxLength(20)
                .HasColumnName("BuyerSSTRegistrationNumber");
            entity.Property(e => e.BuyerStateCode).HasMaxLength(2);
            entity.Property(e => e.BuyerTaxEntityId).HasColumnName("BuyerTaxEntityID");
            entity.Property(e => e.BuyerTin)
                .HasMaxLength(20)
                .HasColumnName("BuyerTIN");
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.CurrencyCode).HasMaxLength(5);
            entity.Property(e => e.DeliveryAddress).HasMaxLength(200);
            entity.Property(e => e.DeliveryCity).HasMaxLength(50);
            entity.Property(e => e.DeliveryCountryCode).HasMaxLength(3);
            entity.Property(e => e.DeliveryEmail).HasMaxLength(200);
            entity.Property(e => e.DeliveryIdentityNo).HasMaxLength(30);
            entity.Property(e => e.DeliveryIdentityType).HasMaxLength(10);
            entity.Property(e => e.DeliveryName).HasMaxLength(100);
            entity.Property(e => e.DeliveryPhone).HasMaxLength(25);
            entity.Property(e => e.DeliveryPostCode).HasMaxLength(10);
            entity.Property(e => e.DeliveryStateCode).HasMaxLength(2);
            entity.Property(e => e.DeliveryTaxEntityId).HasColumnName("DeliveryTaxEntityID");
            entity.Property(e => e.DeliveryTin)
                .HasMaxLength(20)
                .HasColumnName("DeliveryTIN");
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.DocStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DocType).HasMaxLength(2);
            entity.Property(e => e.EinvoiceAipsubmissionDateTime)
                .HasColumnType("datetime")
                .HasColumnName("EInvoiceAIPSubmissionDateTime");
            entity.Property(e => e.EinvoiceCancelDateTime)
                .HasColumnType("datetime")
                .HasColumnName("EInvoiceCancelDateTime");
            entity.Property(e => e.EinvoiceCancelReason)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceCancelReason");
            entity.Property(e => e.EinvoiceError)
                .IsUnicode(false)
                .HasColumnName("EInvoiceError");
            entity.Property(e => e.EinvoiceStatus)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceStatus");
            entity.Property(e => e.EinvoiceSubmissionDateTime)
                .HasColumnType("datetime")
                .HasColumnName("EInvoiceSubmissionDateTime");
            entity.Property(e => e.EinvoiceSubmissionUuid)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceSubmissionUuid");
            entity.Property(e => e.EinvoiceTraceId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceTraceId");
            entity.Property(e => e.EinvoiceUuid)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceUuid");
            entity.Property(e => e.EinvoiceValidatedDateTime)
                .HasColumnType("datetime")
                .HasColumnName("EInvoiceValidatedDateTime");
            entity.Property(e => e.EinvoiceValidationLink)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("EInvoiceValidationLink");
            entity.Property(e => e.ExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ExpiryTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.FinalTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.FreeTradeAgreementInformation)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.FreightAllowanceChargeAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.FreightAllowanceChargeReason)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FrequencyOfBilling)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.InclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Incoterms)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.IsSbconsolidated).HasColumnName("IsSBConsolidated");
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.NetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.PaymentMode)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.PaymentRef)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.PaymentTerms)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.PrepaymentAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.PrepaymentDate).HasColumnType("datetime");
            entity.Property(e => e.ReferenceNumberOfCustomsFormNo1And9)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.ReferenceNumberOfCustomsFormNo2)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.RoundAdj).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SupplierAddress).HasMaxLength(200);
            entity.Property(e => e.SupplierBankAccNo)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.SupplierBusinessActivityDesc).HasMaxLength(500);
            entity.Property(e => e.SupplierCity).HasMaxLength(50);
            entity.Property(e => e.SupplierCountryCode).HasMaxLength(3);
            entity.Property(e => e.SupplierEmail).HasMaxLength(200);
            entity.Property(e => e.SupplierIdentityNo).HasMaxLength(30);
            entity.Property(e => e.SupplierIdentityType).HasMaxLength(10);
            entity.Property(e => e.SupplierInvoiceNo).HasMaxLength(30);
            entity.Property(e => e.SupplierMsiccode)
                .HasMaxLength(5)
                .HasColumnName("SupplierMSICCode");
            entity.Property(e => e.SupplierName).HasMaxLength(100);
            entity.Property(e => e.SupplierPhone).HasMaxLength(25);
            entity.Property(e => e.SupplierPostCode).HasMaxLength(10);
            entity.Property(e => e.SupplierSstregistrationNumber)
                .HasMaxLength(20)
                .HasColumnName("SupplierSSTRegistrationNumber");
            entity.Property(e => e.SupplierStateCode).HasMaxLength(2);
            entity.Property(e => e.SupplierTaxEntityId).HasColumnName("SupplierTaxEntityID");
            entity.Property(e => e.SupplierTin)
                .HasMaxLength(20)
                .HasColumnName("SupplierTIN");
            entity.Property(e => e.SupplierTourismTaxRegistrationNumber).HasMaxLength(20);
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ToTaxCurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.Total).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalExTax).HasColumnType("decimal(19, 2)");

            entity.HasOne(d => d.BuyerTaxEntity).WithMany(p => p.EinvoiceSelfBilledBuyerTaxEntities)
                .HasForeignKey(d => d.BuyerTaxEntityId)
                .HasConstraintName("FK_EInvoiceSelfBilled_BuyerTaxEntityID");

            entity.HasOne(d => d.CurrencyCodeNavigation).WithMany(p => p.EinvoiceSelfBilleds)
                .HasForeignKey(d => d.CurrencyCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EInvoiceSelfBilled_CurrencyCode");

            entity.HasOne(d => d.DeliveryTaxEntity).WithMany(p => p.EinvoiceSelfBilledDeliveryTaxEntities)
                .HasForeignKey(d => d.DeliveryTaxEntityId)
                .HasConstraintName("FK_EInvoiceSelfBilled_DeliveryTaxEntityID");

            entity.HasOne(d => d.SupplierTaxEntity).WithMany(p => p.EinvoiceSelfBilledSupplierTaxEntities)
                .HasForeignKey(d => d.SupplierTaxEntityId)
                .HasConstraintName("FK_EInvoiceSelfBilled_SupplierTaxEntityID");
        });

        modelBuilder.Entity<EinvoiceSelfBilledDetail>(entity =>
        {
            entity.HasKey(e => e.DtlKey).HasName("PK_EInvoiceSelfBilledDetail_DtlKey");

            entity.ToTable("EInvoiceSelfBilledDetail");

            entity.Property(e => e.DtlKey).ValueGeneratedNever();
            entity.Property(e => e.Charge).HasMaxLength(20);
            entity.Property(e => e.ChargeAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ChargeReason).HasMaxLength(300);
            entity.Property(e => e.Classification)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.Description).HasMaxLength(300);
            entity.Property(e => e.Discount).HasMaxLength(20);
            entity.Property(e => e.DiscountAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DiscountReason).HasMaxLength(300);
            entity.Property(e => e.Measurement)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.OriginCountryCode).HasMaxLength(3);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SubTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TariffCode).HasMaxLength(12);
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxExemptionReason).HasMaxLength(300);
            entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.TaxType).HasMaxLength(14);
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(25, 8)");

            entity.HasOne(d => d.TariffCodeNavigation).WithMany(p => p.EinvoiceSelfBilledDetails)
                .HasPrincipalKey(p => p.TariffCode)
                .HasForeignKey(d => d.TariffCode)
                .HasConstraintName("FK_EInvoiceSelfBilledDetail_TariffCode");
        });

        modelBuilder.Entity<EinvoiceSelfBilledLink>(entity =>
        {
            entity.HasKey(e => e.SblinkKey).HasName("PK_EInvoiceSelfBilledLink_SBLinkKey");

            entity.ToTable("EInvoiceSelfBilledLink");

            entity.Property(e => e.SblinkKey).HasColumnName("SBLinkKey");
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.EinvoiceUuid)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceUuid");
            entity.Property(e => e.FromDocType)
                .HasMaxLength(2)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EinvoiceStatusChangeLog>(entity =>
        {
            entity.ToTable("EInvoiceStatusChangeLog");

            entity.HasIndex(e => new { e.DocType, e.DocKey }, "IX_EInvoiceStatusChangeLog_DocType_DocKey");

            entity.HasIndex(e => new { e.DocType, e.DocKey, e.EinvoiceTraceId, e.EinvoiceStatus, e.Id }, "IX_EInvoiceStatusChangeLog_DocType_DocKey_EInvoiceTraceId_EInvoiceStatus_ID").IsDescending(false, false, false, false, true);

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.ActionTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.DocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.EinvoiceStatus)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceStatus");
            entity.Property(e => e.EinvoiceStatusReason)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceStatusReason");
            entity.Property(e => e.EinvoiceSubmissionUuid)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceSubmissionUuid");
            entity.Property(e => e.EinvoiceTraceId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceTraceId");
            entity.Property(e => e.EinvoiceUuid)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceUuid");
            entity.Property(e => e.EinvoiceValidationLink)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("EInvoiceValidationLink");
            entity.Property(e => e.UserId)
                .HasMaxLength(10)
                .HasColumnName("UserID");
        });

        modelBuilder.Entity<EventLog>(entity =>
        {
            entity.HasKey(e => e.EventKey).HasName("PK_EventLog_EventKey");

            entity.ToTable("EventLog");

            entity.Property(e => e.ComputerName).HasMaxLength(20);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.DocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.EventDateTime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ThirdPartyAppName).HasMaxLength(20);
            entity.Property(e => e.UserId)
                .HasMaxLength(10)
                .HasColumnName("UserID");

            entity.HasOne(d => d.User).WithMany(p => p.EventLogs)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EventLog_UserID");
        });

        modelBuilder.Entity<Expense>(entity =>
        {
            entity.HasKey(e => e.DocKey).HasName("PK_Expenses_DocKey");

            entity.Property(e => e.DocKey).ValueGeneratedNever();
            entity.Property(e => e.AccNo).HasMaxLength(12);
            entity.Property(e => e.Amount).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.EndDate).HasColumnType("datetime");
            entity.Property(e => e.Frequency).HasMaxLength(12);
            entity.Property(e => e.StartDate).HasColumnType("datetime");

            entity.HasOne(d => d.AccNoNavigation).WithMany(p => p.Expenses)
                .HasForeignKey(d => d.AccNo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Expenses_AccNo");
        });

        modelBuilder.Entity<Fcrevalue>(entity =>
        {
            entity.HasKey(e => e.FcrevalueKey).HasName("PK_FCRevalue_FCRevalueKey");

            entity.ToTable("FCRevalue");

            entity.Property(e => e.FcrevalueKey)
                .ValueGeneratedNever()
                .HasColumnName("FCRevalueKey");
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.GainLossJournalType).HasMaxLength(10);
            entity.Property(e => e.GltrxId).HasColumnName("GLTrxID");
            entity.Property(e => e.Jekey).HasColumnName("JEKey");
            entity.Property(e => e.TotalGainLoss).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.UnrealizedGainAccount).HasMaxLength(12);
            entity.Property(e => e.UnrealizedLossAccount).HasMaxLength(12);
            entity.Property(e => e.UseSingleGainLossAccount)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("T")
                .IsFixedLength();

            entity.HasOne(d => d.GainLossJournalTypeNavigation).WithMany(p => p.Fcrevalues)
                .HasPrincipalKey(p => p.JournalType)
                .HasForeignKey(d => d.GainLossJournalType)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FCRevalue_GainLossJournalType");

            entity.HasOne(d => d.UnrealizedGainAccountNavigation).WithMany(p => p.FcrevalueUnrealizedGainAccountNavigations)
                .HasForeignKey(d => d.UnrealizedGainAccount)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FCRevalue_UnrealizedGainAccount");

            entity.HasOne(d => d.UnrealizedLossAccountNavigation).WithMany(p => p.FcrevalueUnrealizedLossAccountNavigations)
                .HasForeignKey(d => d.UnrealizedLossAccount)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FCRevalue_UnrealizedLossAccount");
        });

        modelBuilder.Entity<FcrevalueDocument>(entity =>
        {
            entity.HasKey(e => e.DtlKey).HasName("PK_FCRevalueDocument_DtlKey");

            entity.ToTable("FCRevalueDocument");

            entity.Property(e => e.DtlKey).ValueGeneratedNever();
            entity.Property(e => e.AccNo).HasMaxLength(12);
            entity.Property(e => e.Category)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.CompanyName).HasMaxLength(100);
            entity.Property(e => e.CurrencyCode).HasMaxLength(5);
            entity.Property(e => e.CurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.DocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.FcrevalueKey).HasColumnName("FCRevalueKey");
            entity.Property(e => e.GainLoss).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Outstanding).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.RevalueRate).HasColumnType("decimal(19, 12)");

            entity.HasOne(d => d.AccNoNavigation).WithMany(p => p.FcrevalueDocuments)
                .HasForeignKey(d => d.AccNo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FCRevalueDocument_AccNo");

            entity.HasOne(d => d.CurrencyCodeNavigation).WithMany(p => p.FcrevalueDocuments)
                .HasForeignKey(d => d.CurrencyCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FCRevalueDocument_CurrencyCode");

            entity.HasOne(d => d.DeptNoNavigation).WithMany(p => p.FcrevalueDocuments)
                .HasForeignKey(d => d.DeptNo)
                .HasConstraintName("FK_FCRevalueDocument_DeptNo");

            entity.HasOne(d => d.ProjNoNavigation).WithMany(p => p.FcrevalueDocuments)
                .HasForeignKey(d => d.ProjNo)
                .HasConstraintName("FK_FCRevalueDocument_ProjNo");
        });

        modelBuilder.Entity<FcrevalueGlaccount>(entity =>
        {
            entity.HasKey(e => e.DtlKey).HasName("PK_FCRevalueGLAccount_DtlKey");

            entity.ToTable("FCRevalueGLAccount");

            entity.Property(e => e.DtlKey).ValueGeneratedNever();
            entity.Property(e => e.AccNo).HasMaxLength(12);
            entity.Property(e => e.Balance).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.FcrevalueKey).HasColumnName("FCRevalueKey");
            entity.Property(e => e.GainLoss).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.HomeBalance).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.NewHomeBalance).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.RevalueRate).HasColumnType("decimal(19, 12)");

            entity.HasOne(d => d.AccNoNavigation).WithMany(p => p.FcrevalueGlaccounts)
                .HasForeignKey(d => d.AccNo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FCRevalueGLAccount_AccNo");
        });

        modelBuilder.Entity<FcrevalueLock>(entity =>
        {
            entity.HasKey(e => e.DtlKey).HasName("PK_FCRevalueLock_DtlKey");

            entity.ToTable("FCRevalueLock");

            entity.Property(e => e.DtlKey).ValueGeneratedNever();
            entity.Property(e => e.FcrevalueKey).HasColumnName("FCRevalueKey");
            entity.Property(e => e.ObjType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.PrevRevalue)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PrevRevalueRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.RevalueRate).HasColumnType("decimal(19, 12)");
        });

        modelBuilder.Entity<FcrevalueRate>(entity =>
        {
            entity.HasKey(e => e.DtlKey).HasName("PK_FCRevalueRate_DtlKey");

            entity.ToTable("FCRevalueRate");

            entity.Property(e => e.DtlKey).ValueGeneratedNever();
            entity.Property(e => e.BankBuyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.BankSellRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.CurrencyCode).HasMaxLength(5);
            entity.Property(e => e.FcrevalueKey).HasColumnName("FCRevalueKey");
            entity.Property(e => e.UnrealizedGainAccount).HasMaxLength(12);
            entity.Property(e => e.UnrealizedLossAccount).HasMaxLength(12);

            entity.HasOne(d => d.CurrencyCodeNavigation).WithMany(p => p.FcrevalueRates)
                .HasForeignKey(d => d.CurrencyCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FCRevalueRate_CurrencyCode");
        });

        modelBuilder.Entity<Fifocost>(entity =>
        {
            entity.HasKey(e => e.FifocostKey).HasName("PK_FIFOCost_FIFOCostKey");

            entity.ToTable("FIFOCost");

            entity.HasIndex(e => e.StockDtlkey, "IX_FIFOCost_StockDTLKey");

            entity.Property(e => e.FifocostKey).HasColumnName("FIFOCostKey");
            entity.Property(e => e.Cost).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.StockDtlkey).HasColumnName("StockDTLKey");
        });

        modelBuilder.Entity<FiscalYear>(entity =>
        {
            entity.HasKey(e => e.AutoKey).HasName("PK_FiscalYear_AutoKey");

            entity.ToTable("FiscalYear");

            entity.HasIndex(e => e.FiscalYearName, "UIX_FiscalYear_FiscalYearName").IsUnique();

            entity.Property(e => e.FiscalYearName).HasMaxLength(20);
            entity.Property(e => e.FromDate).HasColumnType("datetime");
            entity.Property(e => e.IsActive)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ToDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<FontStyle>(entity =>
        {
            entity.HasKey(e => e.AutoKey).HasName("PK_FontStyle_AutoKey");

            entity.ToTable("FontStyle");

            entity.HasIndex(e => e.FontStyle1, "UIX_FontStyle_FontStyle").IsUnique();

            entity.Property(e => e.Bold)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FontName).HasMaxLength(40);
            entity.Property(e => e.FontSize).HasColumnType("decimal(6, 2)");
            entity.Property(e => e.FontStyle1)
                .HasMaxLength(8)
                .HasColumnName("FontStyle");
            entity.Property(e => e.Italic)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Underline)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<Footer>(entity =>
        {
            entity.HasKey(e => e.AutoKey).HasName("PK_Footer_AutoKey");

            entity.ToTable("Footer");

            entity.HasIndex(e => e.FooterName, "UIX_Footer_FooterName").IsUnique();

            entity.Property(e => e.AccNo).HasMaxLength(12);
            entity.Property(e => e.AddToAnalysisNetTotal)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AddToCalculateExtraDiscountAmount)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AddToNetTotal)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Caption).HasMaxLength(40);
            entity.Property(e => e.Enable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FooterName).HasMaxLength(20);
            entity.Property(e => e.IsCalcBonusPoint)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ParamCaption).HasMaxLength(40);
            entity.Property(e => e.ParamDefaultValue).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.ParamFromPercent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ParamVisible)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PostToGl)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PostToGL");
            entity.Property(e => e.TaxCode).HasMaxLength(14);

            entity.HasOne(d => d.AccNoNavigation).WithMany(p => p.Footers)
                .HasForeignKey(d => d.AccNo)
                .HasConstraintName("FK_Footer_AccNo");

            entity.HasOne(d => d.TaxCodeNavigation).WithMany(p => p.Footers)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.TaxCode)
                .HasConstraintName("FK_Footer_TaxCode");
        });

        modelBuilder.Entity<FrcustomText>(entity =>
        {
            entity.HasKey(e => e.AutoKey).HasName("PK_FRCustomText_AutoKey");

            entity.ToTable("FRCustomText");

            entity.HasIndex(e => e.Id, "UIX_FRCustomText_ID").IsUnique();

            entity.Property(e => e.Id)
                .HasMaxLength(20)
                .HasColumnName("ID");
            entity.Property(e => e.Text1).HasMaxLength(100);
            entity.Property(e => e.Text2).HasMaxLength(100);
        });

        modelBuilder.Entity<GiftRule>(entity =>
        {
            entity.HasKey(e => e.DocKey).HasName("PK_GiftRule_DocKey");

            entity.ToTable("GiftRule");

            entity.HasIndex(e => e.DocNo, "IX_Gift_DocNo").IsUnique();

            entity.Property(e => e.DocKey).ValueGeneratedNever();
            entity.Property(e => e.Address1).HasMaxLength(40);
            entity.Property(e => e.Address2).HasMaxLength(40);
            entity.Property(e => e.Address3).HasMaxLength(40);
            entity.Property(e => e.Address4).HasMaxLength(40);
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.CurrencyCode).HasMaxLength(5);
            entity.Property(e => e.CurrencyRate)
                .HasDefaultValue(1m)
                .HasColumnType("decimal(19, 12)");
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.EmailAddress).HasMaxLength(80);
            entity.Property(e => e.GiftDescription).HasMaxLength(100);
            entity.Property(e => e.GiftTotalAmount).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Icno)
                .HasMaxLength(25)
                .HasColumnName("ICNo");
            entity.Property(e => e.JedocKey).HasColumnName("JEDocKey");
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.Name).HasMaxLength(100);
            entity.Property(e => e.Phone).HasMaxLength(25);
            entity.Property(e => e.TaxCurrencyGiftTotalAmount).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ToTaxCurrencyRate)
                .HasDefaultValue(1m)
                .HasColumnType("decimal(19, 12)");
        });

        modelBuilder.Entity<Gldtl>(entity =>
        {
            entity.HasKey(e => e.GldtlKey).HasName("PK_GLDTL_GLDTLKey");

            entity.ToTable("GLDTL");

            entity.HasIndex(e => e.AccNo, "IX_GLDTL_AccNo");

            entity.HasIndex(e => e.JournalType, "IX_GLDTL_JournalType");

            entity.HasIndex(e => e.SourceKey, "IX_GLDTL_SourceKey");

            entity.HasIndex(e => new { e.SourceType, e.SourceKey }, "IX_GLDTL_SourceType_SourceKey");

            entity.HasIndex(e => new { e.SourceType, e.SourceKey, e.PaymentDocType, e.PaymentDocKey }, "IX_GLDTL_SourceType_SourceKey_PaymentDocType_PaymentDocKey");

            entity.HasIndex(e => e.TransDate, "IX_GLDTL_TransDate");

            entity.Property(e => e.GldtlKey).HasColumnName("GLDtlKey");
            entity.Property(e => e.AccNo).HasMaxLength(12);
            entity.Property(e => e.Cr)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("CR");
            entity.Property(e => e.CurrencyCode).HasMaxLength(5);
            entity.Property(e => e.CurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.DeaccNo)
                .HasMaxLength(12)
                .HasColumnName("DEAccNo");
            entity.Property(e => e.Dekey).HasColumnName("DEKey");
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.Dr)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("DR");
            entity.Property(e => e.GltrxId).HasColumnName("GLTrxID");
            entity.Property(e => e.HomeCr)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("HomeCR");
            entity.Property(e => e.HomeDr)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("HomeDR");
            entity.Property(e => e.JournalType).HasMaxLength(10);
            entity.Property(e => e.OrgCr)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("OrgCR");
            entity.Property(e => e.OrgDr)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("OrgDR");
            entity.Property(e => e.PaymentDocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.RefNo1).HasMaxLength(30);
            entity.Property(e => e.RefNo2).HasMaxLength(30);
            entity.Property(e => e.SourceType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.TaxCode).HasMaxLength(14);
            entity.Property(e => e.ToHomeRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.TransDate).HasColumnType("datetime");
            entity.Property(e => e.UserId)
                .HasMaxLength(10)
                .HasColumnName("UserID");

            entity.HasOne(d => d.AccNoNavigation).WithMany(p => p.GldtlAccNoNavigations)
                .HasForeignKey(d => d.AccNo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GLDTL_AccNo");

            entity.HasOne(d => d.CurrencyCodeNavigation).WithMany(p => p.Gldtls)
                .HasForeignKey(d => d.CurrencyCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GLDTL_CurrencyCode");

            entity.HasOne(d => d.DeaccNoNavigation).WithMany(p => p.GldtlDeaccNoNavigations)
                .HasForeignKey(d => d.DeaccNo)
                .HasConstraintName("FK_GLDTL_DEAccNo");

            entity.HasOne(d => d.DeptNoNavigation).WithMany(p => p.Gldtls)
                .HasForeignKey(d => d.DeptNo)
                .HasConstraintName("FK_GLDTL_DeptNo");

            entity.HasOne(d => d.JournalTypeNavigation).WithMany(p => p.Gldtls)
                .HasPrincipalKey(p => p.JournalType)
                .HasForeignKey(d => d.JournalType)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GLDTL_JournalType");

            entity.HasOne(d => d.ProjNoNavigation).WithMany(p => p.Gldtls)
                .HasForeignKey(d => d.ProjNo)
                .HasConstraintName("FK_GLDTL_ProjNo");

            entity.HasOne(d => d.TaxCodeNavigation).WithMany(p => p.Gldtls)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.TaxCode)
                .HasConstraintName("FK_GLDTL_TaxCode");
        });

        modelBuilder.Entity<Glmast>(entity =>
        {
            entity.HasKey(e => e.AccNo).HasName("PK_GLMast_AccNo");

            entity.ToTable("GLMast", tb => tb.HasTrigger("UpdateAccountChangeCount"));

            entity.HasIndex(e => e.ParentAccNo, "IX_GLMast_ParentAccNo");

            entity.HasIndex(e => e.SpecialAccType, "IX_GLMast_SpecialAccType");

            entity.HasIndex(e => e.Guid, "UIX_GLMast_Guid").IsUnique();

            entity.Property(e => e.AccNo).HasMaxLength(12);
            entity.Property(e => e.AccType).HasMaxLength(2);
            entity.Property(e => e.CashFlowCategory)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("O")
                .IsFixedLength();
            entity.Property(e => e.CurrencyCode).HasMaxLength(5);
            entity.Property(e => e.Desc2).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.InputTaxCode).HasMaxLength(14);
            entity.Property(e => e.Msiccode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("MSICCode");
            entity.Property(e => e.OutputTaxCode).HasMaxLength(14);
            entity.Property(e => e.ParentAccNo).HasMaxLength(12);
            entity.Property(e => e.SgeFilingDataId)
                .HasMaxLength(128)
                .HasColumnName("SGeFilingDataId");
            entity.Property(e => e.SpecialAccType)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.TariffCode).HasMaxLength(12);

            entity.HasOne(d => d.AccTypeNavigation).WithMany(p => p.Glmasts)
                .HasPrincipalKey(p => p.AccType1)
                .HasForeignKey(d => d.AccType)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GLMAST_AccType");

            entity.HasOne(d => d.CurrencyCodeNavigation).WithMany(p => p.Glmasts)
                .HasForeignKey(d => d.CurrencyCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GLMast_CurrencyCode");

            entity.HasOne(d => d.InputTaxCodeNavigation).WithMany(p => p.GlmastInputTaxCodeNavigations)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.InputTaxCode)
                .HasConstraintName("FK_GLMast_InputTaxCode");

            entity.HasOne(d => d.OutputTaxCodeNavigation).WithMany(p => p.GlmastOutputTaxCodeNavigations)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.OutputTaxCode)
                .HasConstraintName("FK_GLMast_OutputTaxCode");

            entity.HasOne(d => d.TariffCodeNavigation).WithMany(p => p.Glmasts)
                .HasPrincipalKey(p => p.TariffCode)
                .HasForeignKey(d => d.TariffCode)
                .HasConstraintName("FK_GLMAST_TariffCode");
        });

        modelBuilder.Entity<GlobalPriceChange>(entity =>
        {
            entity.HasKey(e => e.DocKey);

            entity.ToTable("GlobalPriceChange");

            entity.Property(e => e.DocKey).ValueGeneratedNever();
            entity.Property(e => e.ChangeDateTime).HasColumnType("datetime");
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.Name).HasMaxLength(200);
            entity.Property(e => e.Updated)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<GltrxIdtrash>(entity =>
        {
            entity.HasKey(e => e.GltrxId).HasName("PK_GLTrxIDTrash_GLTrxID");

            entity.ToTable("GLTrxIDTrash");

            entity.Property(e => e.GltrxId)
                .ValueGeneratedNever()
                .HasColumnName("GLTrxID");
            entity.Property(e => e.Compressed)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreatedTimeStamp)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.UserId)
                .HasMaxLength(10)
                .HasColumnName("UserID");

            entity.HasOne(d => d.User).WithMany(p => p.GltrxIdtrashes)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GLTrxIDTrash_UserID");
        });

        modelBuilder.Entity<Gr>(entity =>
        {
            entity.HasKey(e => e.DocKey).HasName("PK_GR_DocKey");

            entity.ToTable("GR", tb => tb.HasTrigger("UpdateGRChangeCount"));

            entity.HasIndex(e => e.DocNo, "IX_GR_DocNo").IsUnique();

            entity.HasIndex(e => new { e.DocStatus, e.ExpiryTimeStamp }, "IX_GR_DocStatus_ExpiryTimeStamp");

            entity.Property(e => e.DocKey).ValueGeneratedNever();
            entity.Property(e => e.AnalysisNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Attention).HasMaxLength(40);
            entity.Property(e => e.BranchCode).HasMaxLength(20);
            entity.Property(e => e.CalcDiscountOnUnitPrice)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CanSync)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.CreditorCode).HasMaxLength(12);
            entity.Property(e => e.CreditorName).HasMaxLength(100);
            entity.Property(e => e.CurrencyCode).HasMaxLength(5);
            entity.Property(e => e.CurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.Description).HasMaxLength(80);
            entity.Property(e => e.DisplayTerm).HasMaxLength(30);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.DocStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ExpiryTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.Fax1).HasMaxLength(25);
            entity.Property(e => e.Footer1Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer1TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Footer2Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer2TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Footer3Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer3TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.ForeignCharges).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.FullTransferOption)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Guid).HasDefaultValueSql("(newid())");
            entity.Property(e => e.InclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("F")
                .IsFixedLength();
            entity.Property(e => e.InvAddr1).HasMaxLength(40);
            entity.Property(e => e.InvAddr2).HasMaxLength(40);
            entity.Property(e => e.InvAddr3).HasMaxLength(40);
            entity.Property(e => e.InvAddr4).HasMaxLength(40);
            entity.Property(e => e.LandedCostMethod)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.LocalAnalysisNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalCharges).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.NetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Phone1).HasMaxLength(25);
            entity.Property(e => e.PostToStock)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PurchaseAgent).HasMaxLength(12);
            entity.Property(e => e.PurchaseLocation).HasMaxLength(8);
            entity.Property(e => e.Ref).HasMaxLength(40);
            entity.Property(e => e.RefDocNo).HasMaxLength(30);
            entity.Property(e => e.Remark1).HasMaxLength(40);
            entity.Property(e => e.Remark2).HasMaxLength(40);
            entity.Property(e => e.Remark3).HasMaxLength(40);
            entity.Property(e => e.Remark4).HasMaxLength(40);
            entity.Property(e => e.ShipInfo).HasMaxLength(40);
            entity.Property(e => e.ShipVia).HasMaxLength(20);
            entity.Property(e => e.SupplierDono)
                .HasMaxLength(30)
                .HasColumnName("SupplierDONo");
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxEntityId).HasColumnName("TaxEntityID");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ToDocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.ToTaxCurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.Total).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Transferable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.UdfSuperAppId)
                .HasMaxLength(32)
                .HasColumnName("UDF_SuperAppId");

            entity.HasOne(d => d.CreatedUser).WithMany(p => p.GrCreatedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.CreatedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GR_CreatedUserID");

            entity.HasOne(d => d.CreditorCodeNavigation).WithMany(p => p.Grs)
                .HasForeignKey(d => d.CreditorCode)
                .HasConstraintName("FK_GR_CreditorCode");

            entity.HasOne(d => d.CurrencyCodeNavigation).WithMany(p => p.Grs)
                .HasForeignKey(d => d.CurrencyCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GR_CurrencyCode");

            entity.HasOne(d => d.DisplayTermNavigation).WithMany(p => p.Grs)
                .HasPrincipalKey(p => p.DisplayTerm)
                .HasForeignKey(d => d.DisplayTerm)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GR_DisplayTerm");

            entity.HasOne(d => d.Footer1TaxCodeNavigation).WithMany(p => p.GrFooter1TaxCodeNavigations)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.Footer1TaxCode)
                .HasConstraintName("FK_GR_Footer1TaxCode");

            entity.HasOne(d => d.Footer2TaxCodeNavigation).WithMany(p => p.GrFooter2TaxCodeNavigations)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.Footer2TaxCode)
                .HasConstraintName("FK_GR_Footer2TaxCode");

            entity.HasOne(d => d.Footer3TaxCodeNavigation).WithMany(p => p.GrFooter3TaxCodeNavigations)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.Footer3TaxCode)
                .HasConstraintName("FK_GR_Footer3TaxCode");

            entity.HasOne(d => d.LastModifiedUser).WithMany(p => p.GrLastModifiedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.LastModifiedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GR_LastModifiedUserID");

            entity.HasOne(d => d.PurchaseAgentNavigation).WithMany(p => p.Grs)
                .HasPrincipalKey(p => p.PurchaseAgent1)
                .HasForeignKey(d => d.PurchaseAgent)
                .HasConstraintName("FK_GR_PurchaseAgent");

            entity.HasOne(d => d.PurchaseLocationNavigation).WithMany(p => p.Grs)
                .HasPrincipalKey(p => p.Location1)
                .HasForeignKey(d => d.PurchaseLocation)
                .HasConstraintName("FK_GR_PurchaseLocation");

            entity.HasOne(d => d.ShipViaNavigation).WithMany(p => p.Grs)
                .HasPrincipalKey(p => p.ShippingMethod1)
                .HasForeignKey(d => d.ShipVia)
                .HasConstraintName("FK_GR_ShipVia");

            entity.HasOne(d => d.TaxEntity).WithMany(p => p.Grs)
                .HasForeignKey(d => d.TaxEntityId)
                .HasConstraintName("FK_GR_TaxEntityID");

            entity.HasOne(d => d.Branch).WithMany(p => p.Grs)
                .HasPrincipalKey(p => new { p.AccNo, p.BranchCode })
                .HasForeignKey(d => new { d.CreditorCode, d.BranchCode })
                .HasConstraintName("FK_GR_BranchCode");
        });

        modelBuilder.Entity<Grdtl>(entity =>
        {
            entity.HasKey(e => e.DtlKey).HasName("PK_GRDTL_DtlKey");

            entity.ToTable("GRDTL");

            entity.HasIndex(e => e.DocKey, "IX_GRDTL_DocKey");

            entity.HasIndex(e => e.FromDocDtlKey, "IX_GRDTL_FromDocDtlKey");

            entity.HasIndex(e => new { e.ItemCode, e.Uom }, "IX_GRDTL_ItemCode_UOM");

            entity.Property(e => e.DtlKey).ValueGeneratedNever();
            entity.Property(e => e.AddToSubTotal)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.CalcByPercent).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Cnamt)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("CNAmt");
            entity.Property(e => e.DeliveryDate).HasColumnType("datetime");
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Desc2).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.Discount).HasMaxLength(20);
            entity.Property(e => e.DiscountAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DtlType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Duty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.EstimatedDeliveryDate).HasMaxLength(20);
            entity.Property(e => e.ExtraDiscountAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.FocdtlKey).HasColumnName("FOCDtlKey");
            entity.Property(e => e.Focqty)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("FOCQty");
            entity.Property(e => e.FoctransferedQty)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("FOCTransferedQty");
            entity.Property(e => e.FontStyle).HasMaxLength(8);
            entity.Property(e => e.ForeignCharges).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.FromDocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.FullTransferOption)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Guid).HasDefaultValueSql("(newid())");
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.LocalCharges).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.LocalSubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalSubTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxAdjustment).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.MainItem)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Numbering).HasMaxLength(6);
            entity.Property(e => e.OurPodate)
                .HasColumnType("datetime")
                .HasColumnName("OurPODate");
            entity.Property(e => e.OurPono)
                .HasMaxLength(30)
                .HasColumnName("OurPONo");
            entity.Property(e => e.PostToStockDate).HasColumnType("datetime");
            entity.Property(e => e.PrintOut)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SalesExemptionNo).HasMaxLength(60);
            entity.Property(e => e.SmallestQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SmallestUnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SubTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxAdjustment).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCode).HasMaxLength(14);
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Transferable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TransferedQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
            entity.Property(e => e.UserUom)
                .HasMaxLength(8)
                .HasColumnName("UserUOM");

            entity.HasOne(d => d.DeptNoNavigation).WithMany(p => p.Grdtls)
                .HasForeignKey(d => d.DeptNo)
                .HasConstraintName("FK_GRDTL_DeptNo");

            entity.HasOne(d => d.FontStyleNavigation).WithMany(p => p.Grdtls)
                .HasPrincipalKey(p => p.FontStyle1)
                .HasForeignKey(d => d.FontStyle)
                .HasConstraintName("FK_GRDTL_FontStyle");

            entity.HasOne(d => d.LocationNavigation).WithMany(p => p.Grdtls)
                .HasPrincipalKey(p => p.Location1)
                .HasForeignKey(d => d.Location)
                .HasConstraintName("FK_GRDTL_Location");

            entity.HasOne(d => d.ProjNoNavigation).WithMany(p => p.Grdtls)
                .HasForeignKey(d => d.ProjNo)
                .HasConstraintName("FK_GRDTL_ProjNo");

            entity.HasOne(d => d.TaxCodeNavigation).WithMany(p => p.Grdtls)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.TaxCode)
                .HasConstraintName("FK_GRDTL_TaxCode");

            entity.HasOne(d => d.ItemBatch).WithMany(p => p.Grdtls)
                .HasPrincipalKey(p => new { p.ItemCode, p.BatchNo })
                .HasForeignKey(d => new { d.ItemCode, d.BatchNo })
                .HasConstraintName("FK_GRDTL_ItemBatch");

            entity.HasOne(d => d.ItemUom).WithMany(p => p.Grdtls)
                .HasPrincipalKey(p => new { p.ItemCode, p.Uom })
                .HasForeignKey(d => new { d.ItemCode, d.Uom })
                .HasConstraintName("FK_GRDTL_ItemUOM");
        });

        modelBuilder.Entity<GridListingFilter>(entity =>
        {
            entity.HasKey(e => e.AutoKey).HasName("PK_GridListingFilter_AutoKey");

            entity.ToTable("GridListingFilter");

            entity.HasIndex(e => e.FilterName, "UIX_GridListingFilter_FilterName").IsUnique();

            entity.Property(e => e.FilterName).HasMaxLength(40);
            entity.Property(e => e.IsDefault)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<GridListingFilterUser>(entity =>
        {
            entity.HasKey(e => e.AutoKey).HasName("PK_GridListingFilterUsers_AutoKey");

            entity.HasIndex(e => new { e.FilterName, e.UserId }, "UIX_GridListingFilterUsers_FilterName_UserID").IsUnique();

            entity.Property(e => e.FilterName).HasMaxLength(40);
            entity.Property(e => e.UserId)
                .HasMaxLength(10)
                .HasColumnName("UserID");
        });

        modelBuilder.Entity<GstcapitalGood>(entity =>
        {
            entity.HasKey(e => e.DocKey);

            entity.ToTable("GSTCapitalGoods", tb => tb.HasTrigger("UpdateGSTCapitalGoodsChangeCount"));

            entity.HasIndex(e => e.CapitalCode, "UIX_GSTCapitalGoods_CapitalCode").IsUnique();

            entity.Property(e => e.DocKey).ValueGeneratedNever();
            entity.Property(e => e.CapitalCode).HasMaxLength(50);
            entity.Property(e => e.CommenceDate).HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(200);
            entity.Property(e => e.DisposalDate).HasColumnType("datetime");
            entity.Property(e => e.IsLost)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TotalAmount).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalTax).HasColumnType("decimal(19, 2)");
        });

        modelBuilder.Entity<GstcapitalGoodsDtl>(entity =>
        {
            entity.HasKey(e => e.DtlKey);

            entity.ToTable("GSTCapitalGoodsDTL");

            entity.Property(e => e.DtlKey).ValueGeneratedNever();
            entity.Property(e => e.Amount).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Description).HasMaxLength(200);
            entity.Property(e => e.DisposalDate).HasColumnType("datetime");
            entity.Property(e => e.IncurredDate).HasColumnType("datetime");
            entity.Property(e => e.IsLost)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");

            entity.HasOne(d => d.DocKeyNavigation).WithMany(p => p.GstcapitalGoodsDtls)
                .HasForeignKey(d => d.DocKey)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GSTCapitalGoodsDTL_DocKey");
        });

        modelBuilder.Entity<GstcapitalGoodsSchedule>(entity =>
        {
            entity.HasKey(e => new { e.DocKey, e.DtlKey, e.Gstseq, e.Interval });

            entity.ToTable("GSTCapitalGoodsSchedule");

            entity.Property(e => e.Gstseq).HasColumnName("GSTSeq");
            entity.Property(e => e.FromDate).HasColumnType("datetime");
            entity.Property(e => e.Irrate)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("IRRate");
            entity.Property(e => e.IrrateCalcContent).HasColumnName("IRRateCalcContent");
            entity.Property(e => e.JeadjDocKey).HasColumnName("JEAdjDocKey");
            entity.Property(e => e.Retax)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("RETax");
            entity.Property(e => e.RetaxClaim)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("RETaxClaim");
            entity.Property(e => e.ToDate).HasColumnType("datetime");

            entity.HasOne(d => d.DocKeyNavigation).WithMany(p => p.GstcapitalGoodsSchedules)
                .HasForeignKey(d => d.DocKey)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GSTCapitalGoodsSchedule_DocKey");
        });

        modelBuilder.Entity<GstcapitalGoodsScheduleAdj>(entity =>
        {
            entity.HasKey(e => new { e.DocKey, e.DtlKey, e.Gstseq, e.Interval, e.IntervalAdj });

            entity.ToTable("GSTCapitalGoodsScheduleAdj");

            entity.Property(e => e.Gstseq).HasColumnName("GSTSeq");
            entity.Property(e => e.Cgaamount)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("CGAAmount");
            entity.Property(e => e.CgaamountCalcContent).HasColumnName("CGAAmountCalcContent");
            entity.Property(e => e.Cgarate)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("CGARate");
            entity.Property(e => e.CgarateCalcContent).HasColumnName("CGARateCalcContent");

            entity.HasOne(d => d.DocKeyNavigation).WithMany(p => p.GstcapitalGoodsScheduleAdjs)
                .HasForeignKey(d => d.DocKey)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GSTCapitalGoodsScheduleAdj_DocKey");
        });

        modelBuilder.Entity<GstfilingReminder>(entity =>
        {
            entity.HasKey(e => e.GstfilingReminderKey);

            entity.ToTable("GSTFilingReminder");

            entity.Property(e => e.GstfilingReminderKey).HasColumnName("GSTFilingReminderKey");
            entity.Property(e => e.FromDate).HasColumnType("datetime");
            entity.Property(e => e.IsFirstTimeRemind)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.IsSecondTimeRemind)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ToDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<GstpartialExemption>(entity =>
        {
            entity.HasKey(e => new { e.FromDate, e.ToDate, e.Gstseq });

            entity.ToTable("GSTPartialExemption");

            entity.Property(e => e.FromDate).HasColumnType("datetime");
            entity.Property(e => e.ToDate).HasColumnType("datetime");
            entity.Property(e => e.Gstseq).HasColumnName("GSTSeq");
            entity.Property(e => e.Estax)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("ESTax");
            entity.Property(e => e.EstaxClaim)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("ESTaxClaim");
            entity.Property(e => e.EstaxClaimPeriodAdj)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("ESTaxClaimPeriodAdj");
            entity.Property(e => e.EtaxableAmt)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("ETaxableAmt");
            entity.Property(e => e.Irrate)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("IRRate");
            entity.Property(e => e.IrrateCalcContent).HasColumnName("IRRateCalcContent");
            entity.Property(e => e.IsDeMinimis)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.IsRemainPeriod)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.JeannualAdjDocKey).HasColumnName("JEAnnualAdjDocKey");
            entity.Property(e => e.JeannualAdjDocKey2).HasColumnName("JEAnnualAdjDocKey2");
            entity.Property(e => e.JeperiodAdjDocKey).HasColumnName("JEPeriodAdjDocKey");
            entity.Property(e => e.JeperiodDocKey).HasColumnName("JEPeriodDocKey");
            entity.Property(e => e.O1taxableAmt)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("O1TaxableAmt");
            entity.Property(e => e.O2taxableAmt)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("O2TaxableAmt");
            entity.Property(e => e.ProcessJeperiodAdj)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ProcessJEPeriodAdj");
            entity.Property(e => e.R1O1taxableAmt)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("R1_O1TaxableAmt");
            entity.Property(e => e.R1O2taxableAmt)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("R1_O2TaxableAmt");
            entity.Property(e => e.R2taxableAmt)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("R2TaxableAmt");
            entity.Property(e => e.R3taxableAmt)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("R3TaxableAmt");
            entity.Property(e => e.R4taxableAmt)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("R4TaxableAmt");
            entity.Property(e => e.R5taxableAmt)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("R5TaxableAmt");
            entity.Property(e => e.Retax)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("RETax");
            entity.Property(e => e.RetaxClaim)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("RETaxClaim");
            entity.Property(e => e.RetaxClaimPeriodAdj)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("RETaxClaimPeriodAdj");
            entity.Property(e => e.TtaxableAmt)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("TTaxableAmt");
        });

        modelBuilder.Entity<Gstprocessor>(entity =>
        {
            entity.HasKey(e => e.Gstkey).HasName("PK_GSTProcessor_GSTKey");

            entity.ToTable("GSTProcessor");

            entity.Property(e => e.Gstkey).HasColumnName("GSTKey");
            entity.Property(e => e.AuthorizerName).HasMaxLength(200);
            entity.Property(e => e.CarryForwardRefundGst)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CarryForwardRefundGST");
            entity.Property(e => e.Cbkey).HasColumnName("CBKey");
            entity.Property(e => e.CimbmediaNo)
                .HasMaxLength(15)
                .HasColumnName("CIMBMediaNo");
            entity.Property(e => e.CimbrefNo)
                .HasMaxLength(32)
                .HasColumnName("CIMBRefNo");
            entity.Property(e => e.CimbstatusCode)
                .HasMaxLength(10)
                .HasColumnName("CIMBStatusCode");
            entity.Property(e => e.CimbstatusDesc)
                .HasMaxLength(100)
                .HasColumnName("CIMBStatusDesc");
            entity.Property(e => e.Compressed)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.DeclarationDate).HasColumnType("datetime");
            entity.Property(e => e.FromDate).HasColumnType("datetime");
            entity.Property(e => e.Gafversion)
                .HasMaxLength(100)
                .HasColumnName("GAFVersion");
            entity.Property(e => e.Gstversion).HasColumnName("GSTVersion");
            entity.Property(e => e.IsCapitalGoodsAdj)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.IsFinalGstreturn)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IsFinalGSTReturn");
            entity.Property(e => e.IsPartialExemption)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.JedocKey).HasColumnName("JEDocKey");
            entity.Property(e => e.JefixedAssetAndStockValueDocKey).HasColumnName("JEFixedAssetAndStockValueDocKey");
            entity.Property(e => e.JegainLossDocKey).HasColumnName("JEGainLossDocKey");
            entity.Property(e => e.Nationality).HasMaxLength(40);
            entity.Property(e => e.NewIcno)
                .HasMaxLength(20)
                .HasColumnName("NewICNo");
            entity.Property(e => e.OldIcno)
                .HasMaxLength(20)
                .HasColumnName("OldICNo");
            entity.Property(e => e.ParentGstkey).HasColumnName("ParentGSTKey");
            entity.Property(e => e.PassportNo).HasMaxLength(20);
            entity.Property(e => e.ProductVersion).HasMaxLength(100);
            entity.Property(e => e.Submitted)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ToDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Gstsetting>(entity =>
        {
            entity.HasKey(e => e.Gstname).HasName("PK_GSTSetting_GSTName");

            entity.ToTable("GSTSetting");

            entity.Property(e => e.Gstname)
                .HasMaxLength(100)
                .HasColumnName("GSTName");
            entity.Property(e => e.Gstvalue)
                .HasMaxLength(300)
                .HasColumnName("GSTValue");
        });

        modelBuilder.Entity<Gt>(entity =>
        {
            entity.HasKey(e => e.DocKey).HasName("PK_GT_DocKey");

            entity.ToTable("GT", tb => tb.HasTrigger("UpdateGTChangeCount"));

            entity.HasIndex(e => e.DocNo, "IX_GT_DocNo").IsUnique();

            entity.HasIndex(e => new { e.DocStatus, e.ExpiryTimeStamp }, "IX_GT_DocStatus_ExpiryTimeStamp");

            entity.Property(e => e.DocKey).ValueGeneratedNever();
            entity.Property(e => e.AnalysisNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Attention).HasMaxLength(40);
            entity.Property(e => e.BranchCode).HasMaxLength(20);
            entity.Property(e => e.CalcDiscountOnUnitPrice)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CanSync)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.CreditorCode).HasMaxLength(12);
            entity.Property(e => e.CreditorName).HasMaxLength(100);
            entity.Property(e => e.CurrencyCode).HasMaxLength(5);
            entity.Property(e => e.CurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.Description).HasMaxLength(80);
            entity.Property(e => e.DisplayTerm).HasMaxLength(30);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.DocStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ExpiryTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.Fax1).HasMaxLength(25);
            entity.Property(e => e.Footer1Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer1TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Footer2Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer2TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Footer3Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer3TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Guid).HasDefaultValueSql("(newid())");
            entity.Property(e => e.InclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("F")
                .IsFixedLength();
            entity.Property(e => e.InvAddr1).HasMaxLength(40);
            entity.Property(e => e.InvAddr2).HasMaxLength(40);
            entity.Property(e => e.InvAddr3).HasMaxLength(40);
            entity.Property(e => e.InvAddr4).HasMaxLength(40);
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.LocalAnalysisNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.NetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Phone1).HasMaxLength(25);
            entity.Property(e => e.PostToStock)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PurchaseAgent).HasMaxLength(12);
            entity.Property(e => e.PurchaseLocation).HasMaxLength(8);
            entity.Property(e => e.Ref).HasMaxLength(40);
            entity.Property(e => e.RefDocNo).HasMaxLength(30);
            entity.Property(e => e.Remark1).HasMaxLength(40);
            entity.Property(e => e.Remark2).HasMaxLength(40);
            entity.Property(e => e.Remark3).HasMaxLength(40);
            entity.Property(e => e.Remark4).HasMaxLength(40);
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxEntityId).HasColumnName("TaxEntityID");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ToTaxCurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.Total).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalExTax).HasColumnType("decimal(19, 2)");

            entity.HasOne(d => d.CreatedUser).WithMany(p => p.GtCreatedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.CreatedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GT_CreatedUserID");

            entity.HasOne(d => d.CreditorCodeNavigation).WithMany(p => p.Gts)
                .HasForeignKey(d => d.CreditorCode)
                .HasConstraintName("FK_GT_CreditorCode");

            entity.HasOne(d => d.CurrencyCodeNavigation).WithMany(p => p.Gts)
                .HasForeignKey(d => d.CurrencyCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GT_CurrencyCode");

            entity.HasOne(d => d.DisplayTermNavigation).WithMany(p => p.Gts)
                .HasPrincipalKey(p => p.DisplayTerm)
                .HasForeignKey(d => d.DisplayTerm)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GT_DisplayTerm");

            entity.HasOne(d => d.Footer1TaxCodeNavigation).WithMany(p => p.GtFooter1TaxCodeNavigations)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.Footer1TaxCode)
                .HasConstraintName("FK_GT_Footer1TaxCode");

            entity.HasOne(d => d.Footer2TaxCodeNavigation).WithMany(p => p.GtFooter2TaxCodeNavigations)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.Footer2TaxCode)
                .HasConstraintName("FK_GT_Footer2TaxCode");

            entity.HasOne(d => d.Footer3TaxCodeNavigation).WithMany(p => p.GtFooter3TaxCodeNavigations)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.Footer3TaxCode)
                .HasConstraintName("FK_GT_Footer3TaxCode");

            entity.HasOne(d => d.LastModifiedUser).WithMany(p => p.GtLastModifiedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.LastModifiedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GT_LastModifiedUserID");

            entity.HasOne(d => d.PurchaseAgentNavigation).WithMany(p => p.Gts)
                .HasPrincipalKey(p => p.PurchaseAgent1)
                .HasForeignKey(d => d.PurchaseAgent)
                .HasConstraintName("FK_GT_PurchaseAgent");

            entity.HasOne(d => d.PurchaseLocationNavigation).WithMany(p => p.Gts)
                .HasPrincipalKey(p => p.Location1)
                .HasForeignKey(d => d.PurchaseLocation)
                .HasConstraintName("FK_GT_PurchaseLocation");

            entity.HasOne(d => d.TaxEntity).WithMany(p => p.Gts)
                .HasForeignKey(d => d.TaxEntityId)
                .HasConstraintName("FK_GT_TaxEntityID");

            entity.HasOne(d => d.Branch).WithMany(p => p.Gts)
                .HasPrincipalKey(p => new { p.AccNo, p.BranchCode })
                .HasForeignKey(d => new { d.CreditorCode, d.BranchCode })
                .HasConstraintName("FK_GT_BranchCode");
        });

        modelBuilder.Entity<Gtdtl>(entity =>
        {
            entity.HasKey(e => e.DtlKey).HasName("PK_GTDTL_DtlKey");

            entity.ToTable("GTDTL");

            entity.HasIndex(e => e.DocKey, "IX_GTDTL_DocKey");

            entity.HasIndex(e => e.FromDocDtlKey, "IX_GTDTL_FromDocDtlKey");

            entity.HasIndex(e => new { e.ItemCode, e.Uom }, "IX_GTDTL_ItemCode_UOM");

            entity.Property(e => e.DtlKey).ValueGeneratedNever();
            entity.Property(e => e.AddToSubTotal)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.CalcByPercent).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.DeliveryDate).HasColumnType("datetime");
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Desc2).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.Discount).HasMaxLength(20);
            entity.Property(e => e.DiscountAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DtlType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EstimatedDeliveryDate).HasMaxLength(20);
            entity.Property(e => e.ExtraDiscountAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.FocdtlKey).HasColumnName("FOCDtlKey");
            entity.Property(e => e.Focqty)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("FOCQty");
            entity.Property(e => e.FontStyle).HasMaxLength(8);
            entity.Property(e => e.FromDocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.FullTransferOption)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Guid).HasDefaultValueSql("(newid())");
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.LocalSubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalSubTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxAdjustment).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.MainItem)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Numbering).HasMaxLength(6);
            entity.Property(e => e.OurPodate)
                .HasColumnType("datetime")
                .HasColumnName("OurPODate");
            entity.Property(e => e.OurPono)
                .HasMaxLength(30)
                .HasColumnName("OurPONo");
            entity.Property(e => e.PostToStockDate).HasColumnType("datetime");
            entity.Property(e => e.PrintOut)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SalesExemptionNo).HasMaxLength(60);
            entity.Property(e => e.SmallestQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SmallestUnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SubTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxAdjustment).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCode).HasMaxLength(14);
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
            entity.Property(e => e.UserUom)
                .HasMaxLength(8)
                .HasColumnName("UserUOM");

            entity.HasOne(d => d.DeptNoNavigation).WithMany(p => p.Gtdtls)
                .HasForeignKey(d => d.DeptNo)
                .HasConstraintName("FK_GTDTL_DeptNo");

            entity.HasOne(d => d.FontStyleNavigation).WithMany(p => p.Gtdtls)
                .HasPrincipalKey(p => p.FontStyle1)
                .HasForeignKey(d => d.FontStyle)
                .HasConstraintName("FK_GTDTL_FontStyle");

            entity.HasOne(d => d.LocationNavigation).WithMany(p => p.Gtdtls)
                .HasPrincipalKey(p => p.Location1)
                .HasForeignKey(d => d.Location)
                .HasConstraintName("FK_GTDTL_Location");

            entity.HasOne(d => d.ProjNoNavigation).WithMany(p => p.Gtdtls)
                .HasForeignKey(d => d.ProjNo)
                .HasConstraintName("FK_GTDTL_ProjNo");

            entity.HasOne(d => d.TaxCodeNavigation).WithMany(p => p.Gtdtls)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.TaxCode)
                .HasConstraintName("FK_GTDTL_TaxCode");

            entity.HasOne(d => d.ItemBatch).WithMany(p => p.Gtdtls)
                .HasPrincipalKey(p => new { p.ItemCode, p.BatchNo })
                .HasForeignKey(d => new { d.ItemCode, d.BatchNo })
                .HasConstraintName("FK_GTDTL_ItemBatch");

            entity.HasOne(d => d.ItemUom).WithMany(p => p.Gtdtls)
                .HasPrincipalKey(p => new { p.ItemCode, p.Uom })
                .HasForeignKey(d => new { d.ItemCode, d.Uom })
                .HasConstraintName("FK_GTDTL_ItemUOM");
        });

        modelBuilder.Entity<Irasgstsubmission>(entity =>
        {
            entity.HasKey(e => e.Gstkey).HasName("PK_IRASGSTSubmission_GSTKey");

            entity.ToTable("IRASGSTSubmission");

            entity.Property(e => e.Gstkey).HasColumnName("GSTKey");
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.FormType).HasMaxLength(10);
            entity.Property(e => e.FromDate).HasColumnType("datetime");
            entity.Property(e => e.Gstversion).HasColumnName("GSTVersion");
            entity.Property(e => e.Iafversion)
                .HasMaxLength(100)
                .HasColumnName("IAFVersion");
            entity.Property(e => e.IsTaxAgent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ParentGstkey).HasColumnName("ParentGSTKey");
            entity.Property(e => e.ProductVersion).HasMaxLength(100);
            entity.Property(e => e.ShowDebtorCreditorControl)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ShowZeroBalance)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ToDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Iss>(entity =>
        {
            entity.HasKey(e => e.DocKey).HasName("PK_ISS_DocKey");

            entity.ToTable("ISS", tb => tb.HasTrigger("UpdateISSChangeCount"));

            entity.HasIndex(e => e.DocNo, "IX_ISS_DocNo").IsUnique();

            entity.Property(e => e.DocKey).ValueGeneratedNever();
            entity.Property(e => e.CanSync)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.Guid).HasDefaultValueSql("(newid())");
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.ReallocatePurchaseByProject)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("F")
                .IsFixedLength();
            entity.Property(e => e.ReallocatePurchaseByProjectJedocKey).HasColumnName("ReallocatePurchaseByProjectJEDocKey");
            entity.Property(e => e.ReallocatePurchaseByProjectNo).HasMaxLength(10);
            entity.Property(e => e.RefDocNo).HasMaxLength(30);
            entity.Property(e => e.Remark1).HasMaxLength(40);
            entity.Property(e => e.Remark2).HasMaxLength(40);
            entity.Property(e => e.Remark3).HasMaxLength(40);
            entity.Property(e => e.Remark4).HasMaxLength(40);
            entity.Property(e => e.Total).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.UdfSuperAppId)
                .HasMaxLength(32)
                .HasColumnName("UDF_SuperAppId");

            entity.HasOne(d => d.CreatedUser).WithMany(p => p.IssCreatedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.CreatedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ISS_CreatedUserID");

            entity.HasOne(d => d.LastModifiedUser).WithMany(p => p.IssLastModifiedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.LastModifiedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ISS_LastModifiedUserID");

            entity.HasOne(d => d.ReallocatePurchaseByProjectNoNavigation).WithMany(p => p.Isses)
                .HasForeignKey(d => d.ReallocatePurchaseByProjectNo)
                .HasConstraintName("FK_ISS_ReallocatePurchaseByProjectNo");
        });

        modelBuilder.Entity<Issdtl>(entity =>
        {
            entity.HasKey(e => e.DtlKey).HasName("PK_ISSDTL_DtlKey");

            entity.ToTable("ISSDTL");

            entity.HasIndex(e => e.DocKey, "IX_ISSDTL_DocKey");

            entity.Property(e => e.DtlKey).ValueGeneratedNever();
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Desc2).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.Guid).HasDefaultValueSql("(newid())");
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.Numbering).HasMaxLength(6);
            entity.Property(e => e.PrintOut)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.UnitCost).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");

            entity.HasOne(d => d.DeptNoNavigation).WithMany(p => p.Issdtls)
                .HasForeignKey(d => d.DeptNo)
                .HasConstraintName("FK_ISSDTL_DeptNo");

            entity.HasOne(d => d.LocationNavigation).WithMany(p => p.Issdtls)
                .HasPrincipalKey(p => p.Location1)
                .HasForeignKey(d => d.Location)
                .HasConstraintName("FK_ISSDTL_Location");

            entity.HasOne(d => d.ProjNoNavigation).WithMany(p => p.Issdtls)
                .HasForeignKey(d => d.ProjNo)
                .HasConstraintName("FK_ISSDTL_ProjNo");

            entity.HasOne(d => d.ItemBatch).WithMany(p => p.Issdtls)
                .HasPrincipalKey(p => new { p.ItemCode, p.BatchNo })
                .HasForeignKey(d => new { d.ItemCode, d.BatchNo })
                .HasConstraintName("FK_ISSDTL_ItemBatch");

            entity.HasOne(d => d.ItemUom).WithMany(p => p.Issdtls)
                .HasPrincipalKey(p => new { p.ItemCode, p.Uom })
                .HasForeignKey(d => new { d.ItemCode, d.Uom })
                .HasConstraintName("FK_ISSDTL_ItemUOM");
        });

        modelBuilder.Entity<Item>(entity =>
        {
            entity.HasKey(e => e.AutoKey).HasName("PK_Item_AutoKey");

            entity.ToTable("Item", tb =>
                {
                    tb.HasTrigger("ItemChangeLog");
                    tb.HasTrigger("UpdateItemChangeCount");
                });

            entity.HasIndex(e => new { e.IsActive, e.StockControl }, "IX_Item_IsActive_StockControl");

            entity.HasIndex(e => new { e.ItemCode, e.AutoKey }, "IX_Item_ItemCode_AutoKey");

            entity.HasIndex(e => new { e.StockControl, e.IsActive, e.CostingMethod, e.ItemCode }, "IX_Item_StockControl_IsActive_CostingMethod_ItemCode");

            entity.HasIndex(e => e.Guid, "UIX_Item_Guid").IsUnique();

            entity.HasIndex(e => e.ItemCode, "UIX_Item_ItemCode").IsUnique();

            entity.Property(e => e.AssemblyCost).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.AutoUomconversion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("T")
                .IsFixedLength()
                .HasColumnName("AutoUOMConversion");
            entity.Property(e => e.BackOrderControl)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("T")
                .IsFixedLength();
            entity.Property(e => e.BaseUom)
                .HasMaxLength(8)
                .HasColumnName("BaseUOM");
            entity.Property(e => e.Classification).HasMaxLength(3);
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.Desc2).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.Discontinued)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("F")
                .IsFixedLength();
            entity.Property(e => e.DutyRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.GlobalCode).HasMaxLength(30);
            entity.Property(e => e.HasBatchNo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.HasPromoter)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("F")
                .IsFixedLength();
            entity.Property(e => e.HasSerialNo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ImageFileName).HasMaxLength(120);
            entity.Property(e => e.IsActive)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.IsCalcBonusPoint)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.IsFinishGoodsItem)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.IsPositem)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IsPOSItem");
            entity.Property(e => e.IsPurchaseItem)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.IsRawMaterialItem)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.IsSalesItem)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ItemBrand).HasMaxLength(20);
            entity.Property(e => e.ItemCategory).HasMaxLength(20);
            entity.Property(e => e.ItemClass).HasMaxLength(20);
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.ItemGroup).HasMaxLength(8);
            entity.Property(e => e.ItemType).HasMaxLength(12);
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.LeadTime).HasMaxLength(40);
            entity.Property(e => e.MainSupplier).HasMaxLength(12);
            entity.Property(e => e.MarkupRatio).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.MustGenerateEinvoice).HasColumnName("MustGenerateEInvoice");
            entity.Property(e => e.PurchaseTaxCode).HasMaxLength(14);
            entity.Property(e => e.PurchaseUom)
                .HasMaxLength(8)
                .HasColumnName("PurchaseUOM");
            entity.Property(e => e.ReportUom)
                .HasMaxLength(8)
                .HasColumnName("ReportUOM");
            entity.Property(e => e.SalesUom)
                .HasMaxLength(8)
                .HasColumnName("SalesUOM");
            entity.Property(e => e.SnformatName)
                .HasMaxLength(20)
                .HasColumnName("SNFormatName");
            entity.Property(e => e.StockControl)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TariffCode).HasMaxLength(12);
            entity.Property(e => e.TaxCode).HasMaxLength(14);
            entity.Property(e => e.UdfWarDay)
                .HasDefaultValue(0)
                .HasColumnName("UDF_WarDay");

            entity.HasOne(d => d.CreatedUser).WithMany(p => p.ItemCreatedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.CreatedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Item_CreatedUserID");

            entity.HasOne(d => d.ItemBrandNavigation).WithMany(p => p.Items)
                .HasPrincipalKey(p => p.ItemBrand1)
                .HasForeignKey(d => d.ItemBrand)
                .HasConstraintName("FK_Item_ItemBrand");

            entity.HasOne(d => d.ItemCategoryNavigation).WithMany(p => p.Items)
                .HasPrincipalKey(p => p.ItemCategory1)
                .HasForeignKey(d => d.ItemCategory)
                .HasConstraintName("FK_Item_ItemCategory");

            entity.HasOne(d => d.ItemClassNavigation).WithMany(p => p.Items)
                .HasPrincipalKey(p => p.ItemClass1)
                .HasForeignKey(d => d.ItemClass)
                .HasConstraintName("FK_Item_ItemClass");

            entity.HasOne(d => d.ItemGroupNavigation).WithMany(p => p.Items)
                .HasForeignKey(d => d.ItemGroup)
                .HasConstraintName("FK_Item_ItemGroup");

            entity.HasOne(d => d.ItemTypeNavigation).WithMany(p => p.Items)
                .HasPrincipalKey(p => p.ItemType1)
                .HasForeignKey(d => d.ItemType)
                .HasConstraintName("FK_Item_ItemType");

            entity.HasOne(d => d.LastModifiedUser).WithMany(p => p.ItemLastModifiedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.LastModifiedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Item_LastModifiedUserID");

            entity.HasOne(d => d.PurchaseTaxCodeNavigation).WithMany(p => p.ItemPurchaseTaxCodeNavigations)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.PurchaseTaxCode)
                .HasConstraintName("FK_Item_PurchaseTaxCode");

            entity.HasOne(d => d.TariffCodeNavigation).WithMany(p => p.Items)
                .HasPrincipalKey(p => p.TariffCode)
                .HasForeignKey(d => d.TariffCode)
                .HasConstraintName("FK_Item_TariffCode");

            entity.HasOne(d => d.TaxCodeNavigation).WithMany(p => p.ItemTaxCodeNavigations)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.TaxCode)
                .HasConstraintName("FK_Item_TaxCode");
        });

        modelBuilder.Entity<ItemBatch>(entity =>
        {
            entity.HasKey(e => e.AutoKey).HasName("PK_ItemBatch_AutoKey");

            entity.ToTable("ItemBatch", tb =>
                {
                    tb.HasTrigger("ItemBatchChangeLog");
                    tb.HasTrigger("UpdateItemBatchChangeCount");
                });

            entity.HasIndex(e => e.Guid, "UIX_ItemBatch_Guid").IsUnique();

            entity.HasIndex(e => new { e.ItemCode, e.BatchNo }, "UIX_ItemBatch_ItemCode_BatchNo").IsUnique();

            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.Description).HasMaxLength(40);
            entity.Property(e => e.ExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.LastSaleDate).HasColumnType("datetime");
            entity.Property(e => e.ManufacturedDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<ItemBatchBalQty>(entity =>
        {
            entity.HasKey(e => e.AutoKey).HasName("PK_ItemBatchBalQty_AutoKey");

            entity.ToTable("ItemBatchBalQty", tb =>
                {
                    tb.HasTrigger("ItemBatchBalQtyChangeLog");
                    tb.HasTrigger("UpdateItemBatchBalQtyChangeCount");
                });

            entity.HasIndex(e => e.Guid, "UIX_ItemBatchBalQty_Guid").IsUnique();

            entity.HasIndex(e => new { e.ItemCode, e.Uom, e.Location, e.BatchNo }, "UIX_ItemBatchBalQty_ItemCode_UOM_Location_BatchNo").IsUnique();

            entity.Property(e => e.BalQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.MostRecentlyCost).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");

            entity.HasOne(d => d.LocationNavigation).WithMany(p => p.ItemBatchBalQties)
                .HasPrincipalKey(p => p.Location1)
                .HasForeignKey(d => d.Location)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ItemBatchBalQty_Location");

            entity.HasOne(d => d.ItemUom).WithMany(p => p.ItemBatchBalQties)
                .HasPrincipalKey(p => new { p.ItemCode, p.Uom })
                .HasForeignKey(d => new { d.ItemCode, d.Uom })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ItemBatchBalQty_ItemUOM");
        });

        modelBuilder.Entity<ItemBatchBalQtyTran>(entity =>
        {
            entity.HasKey(e => e.TransKey).HasName("PK_ItemBatchBalQtyTrans_TransKey");

            entity.Property(e => e.TransKey).ValueGeneratedNever();
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<ItemBom>(entity =>
        {
            entity.HasKey(e => e.ItemBomkey).HasName("PK_ItemBOM_ItemBOMKey");

            entity.ToTable("ItemBOM", tb => tb.HasTrigger("UpdateItemBOMChangeCount"));

            entity.HasIndex(e => new { e.ItemCode, e.SubItemCode }, "IX_ItemBOM_ItemCode_SubItemCode");

            entity.Property(e => e.ItemBomkey).HasColumnName("ItemBOMKey");
            entity.Property(e => e.CostFraction).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.OverheadCost).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubItemCode).HasMaxLength(30);

            entity.HasOne(d => d.ItemCodeNavigation).WithMany(p => p.ItemBomItemCodeNavigations)
                .HasPrincipalKey(p => p.ItemCode)
                .HasForeignKey(d => d.ItemCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ItemBOM_ItemCode");

            entity.HasOne(d => d.SubItemCodeNavigation).WithMany(p => p.ItemBomSubItemCodeNavigations)
                .HasPrincipalKey(p => p.ItemCode)
                .HasForeignKey(d => d.SubItemCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ItemBOM_SubItemCode");
        });

        modelBuilder.Entity<ItemBrand>(entity =>
        {
            entity.HasKey(e => e.AutoKey).HasName("PK_ItemBrand_AutoKey");

            entity.ToTable("ItemBrand", tb =>
                {
                    tb.HasTrigger("ItemBrandChangeLog");
                    tb.HasTrigger("UpdateItemBrandChangeCount");
                });

            entity.HasIndex(e => e.Guid, "UIX_ItemBrand_Guid").IsUnique();

            entity.HasIndex(e => e.ItemBrand1, "UIX_ItemBrand_ItemBrand").IsUnique();

            entity.Property(e => e.Desc2).HasMaxLength(40);
            entity.Property(e => e.Description).HasMaxLength(40);
            entity.Property(e => e.ItemBrand1)
                .HasMaxLength(20)
                .HasColumnName("ItemBrand");
            entity.Property(e => e.MarkupRatio).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.ShortCode).HasMaxLength(8);
        });

        modelBuilder.Entity<ItemCategory>(entity =>
        {
            entity.HasKey(e => e.AutoKey).HasName("PK_ItemCategory_AutoKey");

            entity.ToTable("ItemCategory", tb =>
                {
                    tb.HasTrigger("ItemCategoryChangeLog");
                    tb.HasTrigger("UpdateItemCategoryChangeCount");
                });

            entity.HasIndex(e => e.Guid, "UIX_ItemCategory_Guid").IsUnique();

            entity.HasIndex(e => e.ItemCategory1, "UIX_ItemCategory_ItemCategory").IsUnique();

            entity.Property(e => e.Desc2).HasMaxLength(40);
            entity.Property(e => e.Description).HasMaxLength(40);
            entity.Property(e => e.ItemCategory1)
                .HasMaxLength(20)
                .HasColumnName("ItemCategory");
            entity.Property(e => e.MarkupRatio).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.ShortCode).HasMaxLength(8);
        });

        modelBuilder.Entity<ItemClass>(entity =>
        {
            entity.HasKey(e => e.AutoKey).HasName("PK_ItemClass_AutoKey");

            entity.ToTable("ItemClass", tb =>
                {
                    tb.HasTrigger("ItemClassChangeLog");
                    tb.HasTrigger("UpdateItemClassChangeCount");
                });

            entity.HasIndex(e => e.Guid, "UIX_ItemClass_Guid").IsUnique();

            entity.HasIndex(e => e.ItemClass1, "UIX_ItemClass_ItemClass").IsUnique();

            entity.Property(e => e.Desc2).HasMaxLength(40);
            entity.Property(e => e.Description).HasMaxLength(40);
            entity.Property(e => e.ItemClass1)
                .HasMaxLength(20)
                .HasColumnName("ItemClass");
            entity.Property(e => e.MarkupRatio).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.ShortCode).HasMaxLength(8);
        });

        modelBuilder.Entity<ItemCostChangeHistory>(entity =>
        {
            entity.HasKey(e => e.Hkey).HasName("PK_ItemCostChangeHistory_HKey");

            entity.ToTable("ItemCostChangeHistory");

            entity.Property(e => e.Hkey).HasColumnName("HKey");
            entity.Property(e => e.ChangeTime).HasColumnType("datetime");
            entity.Property(e => e.Cost).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");

            entity.HasOne(d => d.ItemCodeNavigation).WithMany(p => p.ItemCostChangeHistories)
                .HasPrincipalKey(p => p.ItemCode)
                .HasForeignKey(d => d.ItemCode)
                .HasConstraintName("FK_ItemCostChangeHistory_ItemCode");

            entity.HasOne(d => d.ItemUom).WithMany(p => p.ItemCostChangeHistories)
                .HasPrincipalKey(p => new { p.ItemCode, p.Uom })
                .HasForeignKey(d => new { d.ItemCode, d.Uom })
                .HasConstraintName("FK_ItemCostChangeHistory_ItemCode_UOM");
        });

        modelBuilder.Entity<ItemCostHistory>(entity =>
        {
            entity.HasKey(e => e.Hkey).HasName("PK_ItemCostHistory_HKey");

            entity.ToTable("ItemCostHistory");

            entity.Property(e => e.Hkey).HasColumnName("HKey");
            entity.Property(e => e.Cost).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.DocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");

            entity.HasOne(d => d.ItemUom).WithMany(p => p.ItemCostHistories)
                .HasPrincipalKey(p => new { p.ItemCode, p.Uom })
                .HasForeignKey(d => new { d.ItemCode, d.Uom })
                .HasConstraintName("FK_ItemCostHistory_ItemUOM");
        });

        modelBuilder.Entity<ItemCurrencyPrice>(entity =>
        {
            entity.HasKey(e => e.AutoKey).HasName("PK_ItemCurrencyPrice_AutoKey");

            entity.ToTable("ItemCurrencyPrice");

            entity.HasIndex(e => new { e.ItemCode, e.Uom, e.CurrencyCode }, "UIX_ItemCurrencyPrice_ItemCode_UOM_CurrencyCode").IsUnique();

            entity.Property(e => e.CurrencyCode).HasMaxLength(5);
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.Price).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");

            entity.HasOne(d => d.CurrencyCodeNavigation).WithMany(p => p.ItemCurrencyPrices)
                .HasForeignKey(d => d.CurrencyCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ItemCurrencyPrice_CurrencyCode");

            entity.HasOne(d => d.ItemUom).WithMany(p => p.ItemCurrencyPrices)
                .HasPrincipalKey(p => new { p.ItemCode, p.Uom })
                .HasForeignKey(d => new { d.ItemCode, d.Uom })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ItemCurrencyPrice_ItemUOM");
        });

        modelBuilder.Entity<ItemGroup>(entity =>
        {
            entity.HasKey(e => e.ItemGroup1).HasName("PK_ItemGroup_ItemGroup_ItemGroup");

            entity.ToTable("ItemGroup", tb =>
                {
                    tb.HasTrigger("ItemGroupChangeLog");
                    tb.HasTrigger("UpdateItemGroupChangeCount");
                });

            entity.HasIndex(e => e.Guid, "UIX_ItemGroup_Guid").IsUnique();

            entity.Property(e => e.ItemGroup1)
                .HasMaxLength(8)
                .HasColumnName("ItemGroup");
            entity.Property(e => e.BalanceStockCode).HasMaxLength(12);
            entity.Property(e => e.CashPurchaseCode).HasMaxLength(12);
            entity.Property(e => e.CashSalesCode).HasMaxLength(12);
            entity.Property(e => e.Desc2).HasMaxLength(40);
            entity.Property(e => e.Description).HasMaxLength(40);
            entity.Property(e => e.MarkupRatio).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.PurchaseCode).HasMaxLength(12);
            entity.Property(e => e.PurchaseDiscountCode).HasMaxLength(12);
            entity.Property(e => e.PurchaseReturnCode).HasMaxLength(12);
            entity.Property(e => e.RoundingAmount)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.RoundingMethod)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.SalesCode).HasMaxLength(12);
            entity.Property(e => e.SalesDiscountCode).HasMaxLength(12);
            entity.Property(e => e.SalesReturnCode).HasMaxLength(12);
            entity.Property(e => e.ShortCode).HasMaxLength(8);

            entity.HasOne(d => d.BalanceStockCodeNavigation).WithMany(p => p.ItemGroupBalanceStockCodeNavigations)
                .HasForeignKey(d => d.BalanceStockCode)
                .HasConstraintName("FK_ItemGroup_BalanceStockCode");

            entity.HasOne(d => d.CashPurchaseCodeNavigation).WithMany(p => p.ItemGroupCashPurchaseCodeNavigations)
                .HasForeignKey(d => d.CashPurchaseCode)
                .HasConstraintName("FK_ItemGroup_CashPurchaseCode");

            entity.HasOne(d => d.CashSalesCodeNavigation).WithMany(p => p.ItemGroupCashSalesCodeNavigations)
                .HasForeignKey(d => d.CashSalesCode)
                .HasConstraintName("FK_ItemGroup_CashSalesCode");

            entity.HasOne(d => d.PurchaseCodeNavigation).WithMany(p => p.ItemGroupPurchaseCodeNavigations)
                .HasForeignKey(d => d.PurchaseCode)
                .HasConstraintName("FK_ItemGroup_PurchaseCode");

            entity.HasOne(d => d.PurchaseDiscountCodeNavigation).WithMany(p => p.ItemGroupPurchaseDiscountCodeNavigations)
                .HasForeignKey(d => d.PurchaseDiscountCode)
                .HasConstraintName("FK_ItemGroup_PurchaseDiscountCode");

            entity.HasOne(d => d.PurchaseReturnCodeNavigation).WithMany(p => p.ItemGroupPurchaseReturnCodeNavigations)
                .HasForeignKey(d => d.PurchaseReturnCode)
                .HasConstraintName("FK_ItemGroup_PurchaseReturnCode");

            entity.HasOne(d => d.SalesCodeNavigation).WithMany(p => p.ItemGroupSalesCodeNavigations)
                .HasForeignKey(d => d.SalesCode)
                .HasConstraintName("FK_ItemGroup_SalesCode");

            entity.HasOne(d => d.SalesDiscountCodeNavigation).WithMany(p => p.ItemGroupSalesDiscountCodeNavigations)
                .HasForeignKey(d => d.SalesDiscountCode)
                .HasConstraintName("FK_ItemGroup_SalesDiscountCode");

            entity.HasOne(d => d.SalesReturnCodeNavigation).WithMany(p => p.ItemGroupSalesReturnCodeNavigations)
                .HasForeignKey(d => d.SalesReturnCode)
                .HasConstraintName("FK_ItemGroup_SalesReturnCode");
        });

        modelBuilder.Entity<ItemIngredient>(entity =>
        {
            entity.HasKey(e => e.AutoKey);

            entity.ToTable("ItemIngredient", tb => tb.HasTrigger("ItemIngredientChangeLog"));

            entity.HasIndex(e => e.Guid, "UIX_ItemIngredient_Guid").IsUnique();

            entity.Property(e => e.IngredientItemCode).HasMaxLength(30);
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");

            entity.HasOne(d => d.IngredientItemCodeNavigation).WithMany(p => p.ItemIngredientIngredientItemCodeNavigations)
                .HasPrincipalKey(p => p.ItemCode)
                .HasForeignKey(d => d.IngredientItemCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ItemIngredient_IngredientItemCode");

            entity.HasOne(d => d.ItemCodeNavigation).WithMany(p => p.ItemIngredientItemCodeNavigations)
                .HasPrincipalKey(p => p.ItemCode)
                .HasForeignKey(d => d.ItemCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ItemIngredient_ItemCode");
        });

        modelBuilder.Entity<ItemLevelByLocation>(entity =>
        {
            entity.HasKey(e => e.AutoKey).HasName("PK_ItemLevelByLocation_AutoKey");

            entity.ToTable("ItemLevelByLocation");

            entity.HasIndex(e => e.Guid, "UIX_ItemLevelByLocation_Guid").IsUnique();

            entity.HasIndex(e => new { e.ItemCode, e.Uom, e.Location }, "UIX_ItemLevelByLocation_ItemCode_UOM_Location").IsUnique();

            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.MaxQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.MinQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.NormalLevel).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.ReOlevel)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("ReOLevel");
            entity.Property(e => e.ReOqty)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("ReOQty");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<ItemLocationPrice>(entity =>
        {
            entity.HasKey(e => e.AutoKey).HasName("PK_ItemLocationPrice_AutoKey");

            entity.ToTable("ItemLocationPrice", tb => tb.HasTrigger("ItemLocationPriceChangeLog"));

            entity.HasIndex(e => e.Guid, "UIX_ItemLocationPrice_Guid").IsUnique();

            entity.HasIndex(e => new { e.ItemCode, e.Uom, e.Location }, "UIX_ItemLocationPrice_ItemCode_UOM_Location").IsUnique();

            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.Price).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");

            entity.HasOne(d => d.LocationNavigation).WithMany(p => p.ItemLocationPrices)
                .HasPrincipalKey(p => p.Location1)
                .HasForeignKey(d => d.Location)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ItemLocationPrice_Location");

            entity.HasOne(d => d.ItemUom).WithMany(p => p.ItemLocationPrices)
                .HasPrincipalKey(p => new { p.ItemCode, p.Uom })
                .HasForeignKey(d => new { d.ItemCode, d.Uom })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ItemLocationPrice_ItemUOM");
        });

        modelBuilder.Entity<ItemOpening>(entity =>
        {
            entity.HasKey(e => e.ItemOpeningKey).HasName("PK_ItemOpening_ItemOpeningKey");

            entity.ToTable("ItemOpening");

            entity.HasIndex(e => new { e.ItemCode, e.Uom, e.Location, e.BatchNo, e.Seq }, "IX_ItemOpening");

            entity.Property(e => e.ItemOpeningKey).ValueGeneratedNever();
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.Cost).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.DocDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Guid).HasDefaultValueSql("(newid())");
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");

            entity.HasOne(d => d.DeptNoNavigation).WithMany(p => p.ItemOpenings)
                .HasForeignKey(d => d.DeptNo)
                .HasConstraintName("FK_ItemOpening_DeptNo");

            entity.HasOne(d => d.LocationNavigation).WithMany(p => p.ItemOpenings)
                .HasPrincipalKey(p => p.Location1)
                .HasForeignKey(d => d.Location)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ItemOpening_Location");

            entity.HasOne(d => d.ProjNoNavigation).WithMany(p => p.ItemOpenings)
                .HasForeignKey(d => d.ProjNo)
                .HasConstraintName("FK_ItemOpening_ProjNo");

            entity.HasOne(d => d.ItemBatch).WithMany(p => p.ItemOpenings)
                .HasPrincipalKey(p => new { p.ItemCode, p.BatchNo })
                .HasForeignKey(d => new { d.ItemCode, d.BatchNo })
                .HasConstraintName("FK_ItemOpening_ItemBatch");

            entity.HasOne(d => d.ItemUom).WithMany(p => p.ItemOpenings)
                .HasPrincipalKey(p => new { p.ItemCode, p.Uom })
                .HasForeignKey(d => new { d.ItemCode, d.Uom })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ItemOpening_ItemUOM");
        });

        modelBuilder.Entity<ItemPrice>(entity =>
        {
            entity.HasKey(e => e.ItemPriceKey).HasName("PK_ItemPrice_ItemPriceKey");

            entity.ToTable("ItemPrice", tb => tb.HasTrigger("ItemPriceChangeLog"));

            entity.HasIndex(e => new { e.ItemCode, e.Uom, e.PriceCategory, e.AccNo }, "IX_ItemPrice");

            entity.HasIndex(e => e.Guid, "UIX_ItemPrice_Guid").IsUnique();

            entity.Property(e => e.ItemPriceKey).ValueGeneratedNever();
            entity.Property(e => e.AccNo).HasMaxLength(12);
            entity.Property(e => e.BonusPoint).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.BonusPointQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.DetailDiscount1).HasMaxLength(20);
            entity.Property(e => e.DetailDiscount2).HasMaxLength(20);
            entity.Property(e => e.DetailDiscount3).HasMaxLength(20);
            entity.Property(e => e.DetailDiscount4).HasMaxLength(20);
            entity.Property(e => e.FixedDetailDiscount).HasMaxLength(20);
            entity.Property(e => e.FixedPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Foclevel)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("FOCLevel");
            entity.Property(e => e.Focqty)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("FOCQty");
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.Price1).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Price2).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Price3).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Price4).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.PriceCategory).HasMaxLength(12);
            entity.Property(e => e.Qty1).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Qty2).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Qty3).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Qty4).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Ref).HasMaxLength(80);
            entity.Property(e => e.SuppCustItemCode).HasMaxLength(30);
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
            entity.Property(e => e.UseFixedPrice)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.AccNoNavigation).WithMany(p => p.ItemPrices)
                .HasForeignKey(d => d.AccNo)
                .HasConstraintName("FK_ItemPrice_AccNo");

            entity.HasOne(d => d.PriceCategoryNavigation).WithMany(p => p.ItemPrices)
                .HasPrincipalKey(p => p.PriceCategory1)
                .HasForeignKey(d => d.PriceCategory)
                .HasConstraintName("FK_ItemPrice_PriceCategory");

            entity.HasOne(d => d.ItemUom).WithMany(p => p.ItemPrices)
                .HasPrincipalKey(p => new { p.ItemCode, p.Uom })
                .HasForeignKey(d => new { d.ItemCode, d.Uom })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ItemPrice_ItemUOM");
        });

        modelBuilder.Entity<ItemPriceChangeHistory>(entity =>
        {
            entity.HasKey(e => e.Hkey).HasName("PK_ItemPriceChangeHistory_HKey");

            entity.ToTable("ItemPriceChangeHistory");

            entity.Property(e => e.Hkey).HasColumnName("HKey");
            entity.Property(e => e.ChangeTime).HasColumnType("datetime");
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.Price).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");

            entity.HasOne(d => d.ItemCodeNavigation).WithMany(p => p.ItemPriceChangeHistories)
                .HasPrincipalKey(p => p.ItemCode)
                .HasForeignKey(d => d.ItemCode)
                .HasConstraintName("FK_ItemPriceChangeHistory_ItemCode");

            entity.HasOne(d => d.ItemUom).WithMany(p => p.ItemPriceChangeHistories)
                .HasPrincipalKey(p => new { p.ItemCode, p.Uom })
                .HasForeignKey(d => new { d.ItemCode, d.Uom })
                .HasConstraintName("FK_ItemPriceChangeHistory_ItemCode_UOM");
        });

        modelBuilder.Entity<ItemReplacement>(entity =>
        {
            entity.HasKey(e => e.AutoKey).HasName("PK_ItemReplacement_AutoKey");

            entity.ToTable("ItemReplacement");

            entity.HasIndex(e => new { e.ItemCode, e.ReplacementItemCode }, "UIX_ItemReplacement_ItemCode_ReplacementItemCode").IsUnique();

            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.ReplacementDegree).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.ReplacementItemCode).HasMaxLength(30);

            entity.HasOne(d => d.ItemCodeNavigation).WithMany(p => p.ItemReplacementItemCodeNavigations)
                .HasPrincipalKey(p => p.ItemCode)
                .HasForeignKey(d => d.ItemCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ItemReplacement_ItemCode");

            entity.HasOne(d => d.ReplacementItemCodeNavigation).WithMany(p => p.ItemReplacementReplacementItemCodeNavigations)
                .HasPrincipalKey(p => p.ItemCode)
                .HasForeignKey(d => d.ReplacementItemCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ItemReplacement_ReplacementItemCode");
        });

        modelBuilder.Entity<ItemSerialNo>(entity =>
        {
            entity.HasKey(e => e.AutoKey).HasName("PK_ItemSerialNo_AutoKey");

            entity.ToTable("ItemSerialNo", tb => tb.HasTrigger("ItemSerialNoChangeLog"));

            entity.HasIndex(e => e.Guid, "UIX_ItemSerialNo_Guid").IsUnique();

            entity.HasIndex(e => new { e.ItemCode, e.SerialNumber }, "UIX_ItemSerialNo_ItemCode_SerialNumber").IsUnique();

            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.Csgnqty).HasColumnName("CSGNQty");
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.ExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.LastSalesDate).HasColumnType("datetime");
            entity.Property(e => e.ManufacturedDate).HasColumnType("datetime");
            entity.Property(e => e.Remarks).HasMaxLength(20);
            entity.Property(e => e.SerialNumber).HasMaxLength(40);

            entity.HasOne(d => d.ItemCodeNavigation).WithMany(p => p.ItemSerialNos)
                .HasPrincipalKey(p => p.ItemCode)
                .HasForeignKey(d => d.ItemCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ItemSerialNo_ItemCode");

            entity.HasOne(d => d.ItemBatch).WithMany(p => p.ItemSerialNos)
                .HasPrincipalKey(p => new { p.ItemCode, p.BatchNo })
                .HasForeignKey(d => new { d.ItemCode, d.BatchNo })
                .HasConstraintName("FK_ItemSerialNo_ItemBatch");
        });

        modelBuilder.Entity<ItemSerialNoDtl>(entity =>
        {
            entity.HasKey(e => e.AutoKey).HasName("PK_ItemSerialNoDtl_AutoKey");

            entity.ToTable("ItemSerialNoDtl", tb => tb.HasTrigger("ItemSerialNoDtlChangeLog"));

            entity.HasIndex(e => e.Guid, "UIX_ItemSerialNoDtl_Guid").IsUnique();

            entity.HasIndex(e => new { e.ItemCode, e.SerialNumber, e.Location }, "UIX_ItemSerialNoDtl_ItemCode_SerialNumber_Location").IsUnique();

            entity.Property(e => e.Cost).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Csgnqty).HasColumnName("CSGNQty");
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.SerialNumber).HasMaxLength(40);

            entity.HasOne(d => d.ItemCodeNavigation).WithMany(p => p.ItemSerialNoDtls)
                .HasPrincipalKey(p => p.ItemCode)
                .HasForeignKey(d => d.ItemCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ItemSerialNoDtl_ItemCode");

            entity.HasOne(d => d.LocationNavigation).WithMany(p => p.ItemSerialNoDtls)
                .HasPrincipalKey(p => p.Location1)
                .HasForeignKey(d => d.Location)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ItemSerialNoDtl_Location");
        });

        modelBuilder.Entity<ItemSubCode>(entity =>
        {
            entity.HasKey(e => e.AutoKey).HasName("PK_ItemSubCode_AutoKey");

            entity.ToTable("ItemSubCode", tb => tb.HasTrigger("ItemSubCodeChangeLog"));

            entity.HasIndex(e => e.Guid, "UIX_ItemSubCode_Guid").IsUnique();

            entity.HasIndex(e => new { e.ItemCode, e.SubCode }, "UIX_ItemSubCode_ItemCode_SubCode").IsUnique();

            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.SubCode).HasMaxLength(30);
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");

            entity.HasOne(d => d.ItemCodeNavigation).WithMany(p => p.ItemSubCodes)
                .HasPrincipalKey(p => p.ItemCode)
                .HasForeignKey(d => d.ItemCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ItemSubCode_ItemCode");
        });

        modelBuilder.Entity<ItemType>(entity =>
        {
            entity.HasKey(e => e.AutoKey).HasName("PK_ItemType_AutoKey");

            entity.ToTable("ItemType", tb =>
                {
                    tb.HasTrigger("ItemTypeChangeLog");
                    tb.HasTrigger("UpdateItemTypeChangeCount");
                });

            entity.HasIndex(e => e.Guid, "UIX_ItemType_Guid").IsUnique();

            entity.HasIndex(e => e.ItemType1, "UIX_ItemType_ItemType").IsUnique();

            entity.Property(e => e.Desc2).HasMaxLength(40);
            entity.Property(e => e.Description).HasMaxLength(40);
            entity.Property(e => e.ItemType1)
                .HasMaxLength(12)
                .HasColumnName("ItemType");
            entity.Property(e => e.MarkupRatio).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.ShortCode).HasMaxLength(8);
        });

        modelBuilder.Entity<ItemUom>(entity =>
        {
            entity.HasKey(e => e.AutoKey).HasName("PK_ITEMUOM_AutoKey");

            entity.ToTable("ItemUOM", tb =>
                {
                    tb.HasTrigger("ItemUOMChangeLog");
                    tb.HasTrigger("UpdateItemUOMChangeCount");
                });

            entity.HasIndex(e => new { e.ItemCode, e.Uom }, "IX_ItemUOM_ItemCode_UOM");

            entity.HasIndex(e => e.Guid, "UIX_ITEMUOM_Guid").IsUnique();

            entity.HasIndex(e => new { e.ItemCode, e.Uom }, "UIX_ITEMUOM_ItemCode_UOM").IsUnique();

            entity.Property(e => e.BarCode).HasMaxLength(30);
            entity.Property(e => e.BonusPoint).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.BonusPointQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Cost).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Csgnqty)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("CSGNQty");
            entity.Property(e => e.Foclevel)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("FOCLevel");
            entity.Property(e => e.Focqty)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("FOCQty");
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.MarkdownRatio2).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.MarkdownRatio3).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.MarkdownRatio4).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.MarkdownRatio5).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.MarkdownRatio6).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.MarkdownRatioMaxPrice).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.MarkdownRatioMinPrice).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.MarkupRatio).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.MaxPurchasePrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.MaxQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.MaxSalePrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Measurement).HasMaxLength(3);
            entity.Property(e => e.MinPurchasePrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.MinQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.MinSalePrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.MostRecentlyCost).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.NormalLevel).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Price).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Price2).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Price3).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Price4).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Price5).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Price6).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.ReOlevel)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("ReOLevel");
            entity.Property(e => e.ReOqty)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("ReOQty");
            entity.Property(e => e.RealCost)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(25, 8)");
            entity.Property(e => e.RedeemBonusPoint).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SgeinvoiceUnitCode)
                .HasMaxLength(100)
                .HasColumnName("SGEInvoiceUnitCode");
            entity.Property(e => e.Shelf).HasMaxLength(20);
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
            entity.Property(e => e.Volume).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.VolumeUom)
                .HasMaxLength(8)
                .HasColumnName("VolumeUOM");
            entity.Property(e => e.Weight).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.WeightUom)
                .HasMaxLength(8)
                .HasColumnName("WeightUOM");
        });

        modelBuilder.Entity<Iv>(entity =>
        {
            entity.HasKey(e => e.DocKey).HasName("PK_IV_DocKey");

            entity.ToTable("IV", tb => tb.HasTrigger("UpdateIVChangeCount"));

            entity.HasIndex(e => e.DocNo, "IX_IV_DocNo").IsUnique();

            entity.HasIndex(e => new { e.DocStatus, e.ExpiryTimeStamp }, "IX_IV_DocStatus_ExpiryTimeStamp");

            entity.HasIndex(e => e.EinvoiceTraceId, "IX_IV_EInvoiceTraceId");

            entity.HasIndex(e => new { e.ToDocType, e.ToDocKey }, "IX_IV_ToDocTypeKey");

            entity.Property(e => e.DocKey).ValueGeneratedNever();
            entity.Property(e => e.AnalysisNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Attention).HasMaxLength(40);
            entity.Property(e => e.AuthorisationNumberForCertifiedExporter)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.BranchCode).HasMaxLength(20);
            entity.Property(e => e.CalcDiscountOnUnitPrice)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CanSync)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CidocKey).HasColumnName("CIDocKey");
            entity.Property(e => e.CidocNo)
                .HasMaxLength(30)
                .HasColumnName("CIDocNo");
            entity.Property(e => e.ConsolidatedEinvoice)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ConsolidatedEInvoice");
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.CurrencyCode).HasMaxLength(5);
            entity.Property(e => e.CurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.DebtorCode).HasMaxLength(12);
            entity.Property(e => e.DebtorName).HasMaxLength(100);
            entity.Property(e => e.DeliverAddr1).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr2).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr3).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr4).HasMaxLength(40);
            entity.Property(e => e.DeliverContact).HasMaxLength(40);
            entity.Property(e => e.DeliverFax1).HasMaxLength(25);
            entity.Property(e => e.DeliverPhone1).HasMaxLength(25);
            entity.Property(e => e.DeliveryTaxEntityId).HasColumnName("DeliveryTaxEntityID");
            entity.Property(e => e.Description).HasMaxLength(80);
            entity.Property(e => e.DisplayTerm).HasMaxLength(30);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.DocStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EinvoiceAipsubmissionDateTime)
                .HasColumnType("datetime")
                .HasColumnName("EInvoiceAIPSubmissionDateTime");
            entity.Property(e => e.EinvoiceCancelDateTime)
                .HasColumnType("datetime")
                .HasColumnName("EInvoiceCancelDateTime");
            entity.Property(e => e.EinvoiceCancelReason)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceCancelReason");
            entity.Property(e => e.EinvoiceError)
                .IsUnicode(false)
                .HasColumnName("EInvoiceError");
            entity.Property(e => e.EinvoiceIssueDateTime)
                .HasColumnType("datetime")
                .HasColumnName("EInvoiceIssueDateTime");
            entity.Property(e => e.EinvoiceStatus)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceStatus");
            entity.Property(e => e.EinvoiceSubmissionDateTime)
                .HasColumnType("datetime")
                .HasColumnName("EInvoiceSubmissionDateTime");
            entity.Property(e => e.EinvoiceSubmissionUuid)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceSubmissionUuid");
            entity.Property(e => e.EinvoiceTraceId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceTraceId");
            entity.Property(e => e.EinvoiceUuid)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceUuid");
            entity.Property(e => e.EinvoiceValidatedDateTime)
                .HasColumnType("datetime")
                .HasColumnName("EInvoiceValidatedDateTime");
            entity.Property(e => e.EinvoiceValidationLink)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("EInvoiceValidationLink");
            entity.Property(e => e.ExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ExpiryTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.Fax1).HasMaxLength(25);
            entity.Property(e => e.FinalTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer1TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Footer2Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer2TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Footer3Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer3TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.FreeTradeAgreementInformation)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.FreightAllowanceChargeAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.FreightAllowanceChargeReason)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FullTransferOption)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Guid).HasDefaultValueSql("(newid())");
            entity.Property(e => e.InclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("F")
                .IsFixedLength();
            entity.Property(e => e.Incoterms)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.InvAddr1).HasMaxLength(40);
            entity.Property(e => e.InvAddr2).HasMaxLength(40);
            entity.Property(e => e.InvAddr3).HasMaxLength(40);
            entity.Property(e => e.InvAddr4).HasMaxLength(40);
            entity.Property(e => e.IsRoundAdj)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("F")
                .IsFixedLength();
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.LocalAnalysisNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTotalCost).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.LocalWithholdingTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalWithholdingVat)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("LocalWithholdingVAT");
            entity.Property(e => e.MemberNo).HasMaxLength(20);
            entity.Property(e => e.MultiPrice).HasMaxLength(8);
            entity.Property(e => e.NetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Phone1).HasMaxLength(25);
            entity.Property(e => e.PostToGl)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PostToGL");
            entity.Property(e => e.PostToStock)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ReallocatePurchaseByProject)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("F")
                .IsFixedLength();
            entity.Property(e => e.ReallocatePurchaseByProjectJedocKey).HasColumnName("ReallocatePurchaseByProjectJEDocKey");
            entity.Property(e => e.ReallocatePurchaseByProjectNo).HasMaxLength(10);
            entity.Property(e => e.Ref).HasMaxLength(40);
            entity.Property(e => e.RefDocNo).HasMaxLength(30);
            entity.Property(e => e.RefNo2).HasMaxLength(30);
            entity.Property(e => e.ReferenceNumberOfCustomsFormNo1And9)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.ReferenceNumberOfCustomsFormNo2)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.Remark1).HasMaxLength(40);
            entity.Property(e => e.Remark2).HasMaxLength(40);
            entity.Property(e => e.Remark3).HasMaxLength(40);
            entity.Property(e => e.Remark4).HasMaxLength(40);
            entity.Property(e => e.RoundAdj).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SalesAgent).HasMaxLength(12);
            entity.Property(e => e.SalesExemptionExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.SalesExemptionNo).HasMaxLength(60);
            entity.Property(e => e.SalesLocation).HasMaxLength(8);
            entity.Property(e => e.SgeinvoiceAipsubmissionDateTime)
                .HasColumnType("datetime")
                .HasColumnName("SGEInvoiceAIPSubmissionDateTime");
            entity.Property(e => e.SgeinvoiceAtdocKey).HasColumnName("SGEInvoiceATDocKey");
            entity.Property(e => e.SgeinvoiceAtdocNo)
                .HasMaxLength(100)
                .HasColumnName("SGEInvoiceATDocNo");
            entity.Property(e => e.SgeinvoiceDocumentUuid)
                .HasMaxLength(100)
                .HasColumnName("SGEInvoiceDocumentUUID");
            entity.Property(e => e.SgeinvoiceError).HasColumnName("SGEInvoiceError");
            entity.Property(e => e.SgeinvoiceIraserror).HasColumnName("SGEInvoiceIRASError");
            entity.Property(e => e.SgeinvoiceIrassubmissionStatus)
                .HasMaxLength(100)
                .HasColumnName("SGEInvoiceIRASSubmissionStatus");
            entity.Property(e => e.SgeinvoiceIrastransmissionId)
                .HasMaxLength(100)
                .HasColumnName("SGEInvoiceIRASTransmissionId");
            entity.Property(e => e.SgeinvoicePeppolError).HasColumnName("SGEInvoicePeppolError");
            entity.Property(e => e.SgeinvoicePeppolInstanceId)
                .HasMaxLength(100)
                .HasColumnName("SGEInvoicePeppolInstanceId");
            entity.Property(e => e.SgeinvoicePeppolSubmissionStatus)
                .HasMaxLength(100)
                .HasColumnName("SGEInvoicePeppolSubmissionStatus");
            entity.Property(e => e.SgeinvoiceSendToPeppol)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SGEInvoiceSendToPeppol");
            entity.Property(e => e.SgeinvoiceSubmissionUuid)
                .HasMaxLength(100)
                .HasColumnName("SGEInvoiceSubmissionUUID");
            entity.Property(e => e.SgeinvoiceTraceId)
                .HasMaxLength(100)
                .HasColumnName("SGEInvoiceTraceId");
            entity.Property(e => e.ShipInfo).HasMaxLength(40);
            entity.Property(e => e.ShipVia).HasMaxLength(20);
            entity.Property(e => e.SubmitEinvoice)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SubmitEInvoice");
            entity.Property(e => e.SubmitInvoiceNow)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyWithholdingTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyWithholdingVat)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("TaxCurrencyWithholdingVAT");
            entity.Property(e => e.TaxDate).HasColumnType("datetime");
            entity.Property(e => e.TaxDocNo).HasMaxLength(20);
            entity.Property(e => e.TaxEntityId).HasColumnName("TaxEntityID");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ToDocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.ToTaxCurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.Total).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalBonusPoint).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Transferable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.UdfSuperAppId)
                .HasMaxLength(32)
                .HasColumnName("UDF_SuperAppId");
            entity.Property(e => e.WhtpostingDate)
                .HasColumnType("datetime")
                .HasColumnName("WHTPostingDate");
            entity.Property(e => e.WithholdingTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.WithholdingVat)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("WithholdingVAT");
            entity.Property(e => e.YourPodate)
                .HasColumnType("datetime")
                .HasColumnName("YourPODate");
            entity.Property(e => e.YourPono)
                .HasMaxLength(25)
                .HasColumnName("YourPONo");

            entity.HasOne(d => d.CreatedUser).WithMany(p => p.IvCreatedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.CreatedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IV_CreatedUserID");

            entity.HasOne(d => d.CurrencyCodeNavigation).WithMany(p => p.Ivs)
                .HasForeignKey(d => d.CurrencyCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IV_CurrencyCode");

            entity.HasOne(d => d.DebtorCodeNavigation).WithMany(p => p.Ivs)
                .HasForeignKey(d => d.DebtorCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IV_DebtorCode");

            entity.HasOne(d => d.DisplayTermNavigation).WithMany(p => p.Ivs)
                .HasPrincipalKey(p => p.DisplayTerm)
                .HasForeignKey(d => d.DisplayTerm)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IV_DisplayTerm");

            entity.HasOne(d => d.Footer1TaxCodeNavigation).WithMany(p => p.IvFooter1TaxCodeNavigations)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.Footer1TaxCode)
                .HasConstraintName("FK_IV_Footer1TaxCode");

            entity.HasOne(d => d.Footer2TaxCodeNavigation).WithMany(p => p.IvFooter2TaxCodeNavigations)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.Footer2TaxCode)
                .HasConstraintName("FK_IV_Footer2TaxCode");

            entity.HasOne(d => d.Footer3TaxCodeNavigation).WithMany(p => p.IvFooter3TaxCodeNavigations)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.Footer3TaxCode)
                .HasConstraintName("FK_IV_Footer3TaxCode");

            entity.HasOne(d => d.LastModifiedUser).WithMany(p => p.IvLastModifiedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.LastModifiedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IV_LastModifiedUserID");

            entity.HasOne(d => d.MemberNoNavigation).WithMany(p => p.Ivs)
                .HasPrincipalKey(p => p.MemberNo)
                .HasForeignKey(d => d.MemberNo)
                .HasConstraintName("FK_IV_MemberNo");

            entity.HasOne(d => d.ReallocatePurchaseByProjectNoNavigation).WithMany(p => p.Ivs)
                .HasForeignKey(d => d.ReallocatePurchaseByProjectNo)
                .HasConstraintName("FK_IV_ReallocatePurchaseByProjectNo");

            entity.HasOne(d => d.SalesAgentNavigation).WithMany(p => p.Ivs)
                .HasPrincipalKey(p => p.SalesAgent1)
                .HasForeignKey(d => d.SalesAgent)
                .HasConstraintName("FK_IV_SalesAgent");

            entity.HasOne(d => d.SalesLocationNavigation).WithMany(p => p.Ivs)
                .HasPrincipalKey(p => p.Location1)
                .HasForeignKey(d => d.SalesLocation)
                .HasConstraintName("FK_IV_SalesLocation");

            entity.HasOne(d => d.ShipViaNavigation).WithMany(p => p.Ivs)
                .HasPrincipalKey(p => p.ShippingMethod1)
                .HasForeignKey(d => d.ShipVia)
                .HasConstraintName("FK_IV_ShipVia");

            entity.HasOne(d => d.TaxEntity).WithMany(p => p.Ivs)
                .HasForeignKey(d => d.TaxEntityId)
                .HasConstraintName("FK_IV_TaxEntityID");

            entity.HasOne(d => d.Branch).WithMany(p => p.Ivs)
                .HasPrincipalKey(p => new { p.AccNo, p.BranchCode })
                .HasForeignKey(d => new { d.DebtorCode, d.BranchCode })
                .HasConstraintName("FK_IV_BranchCode");
        });

        modelBuilder.Entity<Ivdtl>(entity =>
        {
            entity.HasKey(e => e.DtlKey).HasName("PK_IVDTL_DtlKey");

            entity.ToTable("IVDTL");

            entity.HasIndex(e => e.DocKey, "IX_IVDTL_DocKey");

            entity.HasIndex(e => e.FromDocDtlKey, "IX_IVDTL_FromDocDtlKey");

            entity.HasIndex(e => new { e.ItemCode, e.Uom }, "IX_IVDTL_ItemCode_UOM");

            entity.Property(e => e.DtlKey).ValueGeneratedNever();
            entity.Property(e => e.AccNo).HasMaxLength(12);
            entity.Property(e => e.AddToSubTotal)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Atc)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("ATC");
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.BonusPoint).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.CalcByPercent).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Classification)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.DeliveryDate).HasColumnType("datetime");
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Desc2).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.Discount).HasMaxLength(20);
            entity.Property(e => e.DiscountAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DtlType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EstimatedDeliveryDate).HasMaxLength(20);
            entity.Property(e => e.ExtraDiscountAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.FocdtlKey).HasColumnName("FOCDtlKey");
            entity.Property(e => e.Focqty)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("FOCQty");
            entity.Property(e => e.FoctransferedQty)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("FOCTransferedQty");
            entity.Property(e => e.FontStyle).HasMaxLength(8);
            entity.Property(e => e.FromDocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.FullTransferOption)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Guid).HasDefaultValueSql("(newid())");
            entity.Property(e => e.IsCalcBonusPoint)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.LocalFoctotalCost)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("LocalFOCTotalCost");
            entity.Property(e => e.LocalSubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalSubTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxAdjustment).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTotalCost).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.MainItem)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Numbering).HasMaxLength(6);
            entity.Property(e => e.OriginCountryCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.OurDodate)
                .HasColumnType("datetime")
                .HasColumnName("OurDODate");
            entity.Property(e => e.OurDono)
                .HasMaxLength(30)
                .HasColumnName("OurDONo");
            entity.Property(e => e.PostToStockDate).HasColumnType("datetime");
            entity.Property(e => e.PrintOut)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SalesExemptionNo).HasMaxLength(60);
            entity.Property(e => e.SmallestQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SmallestUnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SubTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TariffCode).HasMaxLength(12);
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxAdjustment).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCode).HasMaxLength(14);
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxExportCountry).HasMaxLength(50);
            entity.Property(e => e.TaxPermitNo).HasMaxLength(20);
            entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Transferable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TransferedQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.UdfDeliveryFocQty)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UDF_DeliveryFocQty");
            entity.Property(e => e.UdfDeliveryQty)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UDF_DeliveryQty");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
            entity.Property(e => e.UserUom)
                .HasMaxLength(8)
                .HasColumnName("UserUOM");
            entity.Property(e => e.ValueXferSodocKey).HasColumnName("ValueXferSODocKey");
            entity.Property(e => e.YourPodate)
                .HasColumnType("datetime")
                .HasColumnName("YourPODate");
            entity.Property(e => e.YourPono)
                .HasMaxLength(25)
                .HasColumnName("YourPONo");

            entity.HasOne(d => d.AccNoNavigation).WithMany(p => p.Ivdtls)
                .HasForeignKey(d => d.AccNo)
                .HasConstraintName("FK_IVDTL_AccNo");

            entity.HasOne(d => d.AtcNavigation).WithMany(p => p.Ivdtls)
                .HasForeignKey(d => d.Atc)
                .HasConstraintName("FK_IVDTL_ATC");

            entity.HasOne(d => d.DeptNoNavigation).WithMany(p => p.Ivdtls)
                .HasForeignKey(d => d.DeptNo)
                .HasConstraintName("FK_IVDTL_DeptNo");

            entity.HasOne(d => d.FontStyleNavigation).WithMany(p => p.Ivdtls)
                .HasPrincipalKey(p => p.FontStyle1)
                .HasForeignKey(d => d.FontStyle)
                .HasConstraintName("FK_IVDTL_FontStyle");

            entity.HasOne(d => d.LocationNavigation).WithMany(p => p.Ivdtls)
                .HasPrincipalKey(p => p.Location1)
                .HasForeignKey(d => d.Location)
                .HasConstraintName("FK_IVDTL_Location");

            entity.HasOne(d => d.ProjNoNavigation).WithMany(p => p.Ivdtls)
                .HasForeignKey(d => d.ProjNo)
                .HasConstraintName("FK_IVDTL_ProjNo");

            entity.HasOne(d => d.TariffCodeNavigation).WithMany(p => p.Ivdtls)
                .HasPrincipalKey(p => p.TariffCode)
                .HasForeignKey(d => d.TariffCode)
                .HasConstraintName("FK_IVDTL_TariffCode");

            entity.HasOne(d => d.TaxCodeNavigation).WithMany(p => p.Ivdtls)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.TaxCode)
                .HasConstraintName("FK_IVDTL_TaxCode");

            entity.HasOne(d => d.ItemBatch).WithMany(p => p.Ivdtls)
                .HasPrincipalKey(p => new { p.ItemCode, p.BatchNo })
                .HasForeignKey(d => new { d.ItemCode, d.BatchNo })
                .HasConstraintName("FK_IVDTL_ItemBatch");

            entity.HasOne(d => d.ItemUom).WithMany(p => p.Ivdtls)
                .HasPrincipalKey(p => new { p.ItemCode, p.Uom })
                .HasForeignKey(d => new { d.ItemCode, d.Uom })
                .HasConstraintName("FK_IVDTL_ItemUOM");
        });

        modelBuilder.Entity<Je>(entity =>
        {
            entity.HasKey(e => e.DocKey).HasName("PK_JE_DocKey");

            entity.ToTable("JE", tb => tb.HasTrigger("UpdateJEChangeCount"));

            entity.HasIndex(e => e.DocNo, "IX_JE_DocNo").IsUnique();

            entity.HasIndex(e => new { e.DocStatus, e.ExpiryTimeStamp }, "IX_JE_DocStatus_ExpiryTimeStamp");

            entity.Property(e => e.DocKey).ValueGeneratedNever();
            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.CurrencyCode).HasMaxLength(5);
            entity.Property(e => e.CurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.DocNo2).HasMaxLength(25);
            entity.Property(e => e.DocStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ExTaxCr)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("ExTaxCR");
            entity.Property(e => e.ExTaxDr)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("ExTaxDR");
            entity.Property(e => e.ExpiryTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.GltrxId).HasColumnName("GLTrxID");
            entity.Property(e => e.InclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("F")
                .IsFixedLength();
            entity.Property(e => e.JournalType).HasMaxLength(10);
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.LocalExTaxCr)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("LocalExTaxCR");
            entity.Property(e => e.LocalExTaxDr)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("LocalExTaxDR");
            entity.Property(e => e.LocalNetTotalCr)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("LocalNetTotalCR");
            entity.Property(e => e.LocalNetTotalDr)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("LocalNetTotalDR");
            entity.Property(e => e.LocalTaxCr)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("LocalTaxCR");
            entity.Property(e => e.LocalTaxDr)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("LocalTaxDR");
            entity.Property(e => e.LocalTaxableCr)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("LocalTaxableCR");
            entity.Property(e => e.LocalTaxableDr)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("LocalTaxableDR");
            entity.Property(e => e.LocalTotalCr)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("LocalTotalCR");
            entity.Property(e => e.LocalTotalCrexTax)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("LocalTotalCRExTax");
            entity.Property(e => e.LocalTotalDr)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("LocalTotalDR");
            entity.Property(e => e.LocalTotalDrexTax)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("LocalTotalDRExTax");
            entity.Property(e => e.NetTotalCr)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("NetTotalCR");
            entity.Property(e => e.NetTotalDr)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("NetTotalDR");
            entity.Property(e => e.PostDetailDesc)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SourceType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.TaxCr)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("TaxCR");
            entity.Property(e => e.TaxCurrencyTaxCr)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("TaxCurrencyTaxCR");
            entity.Property(e => e.TaxCurrencyTaxDr)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("TaxCurrencyTaxDR");
            entity.Property(e => e.TaxCurrencyTaxableCr)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("TaxCurrencyTaxableCR");
            entity.Property(e => e.TaxCurrencyTaxableDr)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("TaxCurrencyTaxableDR");
            entity.Property(e => e.TaxDate).HasColumnType("datetime");
            entity.Property(e => e.TaxDr)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("TaxDR");
            entity.Property(e => e.TaxableCr)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("TaxableCR");
            entity.Property(e => e.TaxableDr)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("TaxableDR");
            entity.Property(e => e.ToTaxCurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.TotalCr)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("TotalCR");
            entity.Property(e => e.TotalCrexTax)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("TotalCRExTax");
            entity.Property(e => e.TotalDr)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("TotalDR");
            entity.Property(e => e.TotalDrexTax)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("TotalDRExTax");

            entity.HasOne(d => d.CreatedUser).WithMany(p => p.JeCreatedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.CreatedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_JE_CreatedUserID");

            entity.HasOne(d => d.CurrencyCodeNavigation).WithMany(p => p.Jes)
                .HasForeignKey(d => d.CurrencyCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_JE_CurrencyCode");

            entity.HasOne(d => d.JournalTypeNavigation).WithMany(p => p.Jes)
                .HasPrincipalKey(p => p.JournalType)
                .HasForeignKey(d => d.JournalType)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_JE_JournalType");

            entity.HasOne(d => d.LastModifiedUser).WithMany(p => p.JeLastModifiedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.LastModifiedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_JE_LastModifiedUserID");
        });

        modelBuilder.Entity<Jedtl>(entity =>
        {
            entity.HasKey(e => e.DtlKey).HasName("PK_JEDTL_DtlKey");

            entity.ToTable("JEDTL");

            entity.HasIndex(e => e.DocKey, "IX_JEDTL_DocKey");

            entity.Property(e => e.DtlKey).ValueGeneratedNever();
            entity.Property(e => e.AccNo).HasMaxLength(12);
            entity.Property(e => e.Atc)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("ATC");
            entity.Property(e => e.Cr)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("CR");
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.Dr)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("DR");
            entity.Property(e => e.InclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("F")
                .IsFixedLength();
            entity.Property(e => e.LocalTaxAdjustment).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxCr)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("LocalTaxCR");
            entity.Property(e => e.LocalTaxDr)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("LocalTaxDR");
            entity.Property(e => e.LocalTaxableCr)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("LocalTaxableCR");
            entity.Property(e => e.LocalTaxableDr)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("LocalTaxableDR");
            entity.Property(e => e.PostingDate).HasColumnType("datetime");
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.RefNo2).HasMaxLength(30);
            entity.Property(e => e.SalesAgent).HasMaxLength(12);
            entity.Property(e => e.SupplyPurchase)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TariffCode).HasMaxLength(12);
            entity.Property(e => e.TaxAdjustment).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxBillDate).HasColumnType("datetime");
            entity.Property(e => e.TaxCode).HasMaxLength(14);
            entity.Property(e => e.TaxCr)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("TaxCR");
            entity.Property(e => e.TaxCurrencyTaxCr)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("TaxCurrencyTaxCR");
            entity.Property(e => e.TaxCurrencyTaxDr)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("TaxCurrencyTaxDR");
            entity.Property(e => e.TaxCurrencyTaxableCr)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("TaxCurrencyTaxableCR");
            entity.Property(e => e.TaxCurrencyTaxableDr)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("TaxCurrencyTaxableDR");
            entity.Property(e => e.TaxDate).HasColumnType("datetime");
            entity.Property(e => e.TaxDr)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("TaxDR");
            entity.Property(e => e.TaxEntityId).HasColumnName("TaxEntityID");
            entity.Property(e => e.TaxExportCountry).HasMaxLength(50);
            entity.Property(e => e.TaxPermitNo).HasMaxLength(20);
            entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.TaxRefNo).HasMaxLength(30);
            entity.Property(e => e.TaxableCr)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("TaxableCR");
            entity.Property(e => e.TaxableDr)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("TaxableDR");
            entity.Property(e => e.ToAccountRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.TotalCr)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("TotalCR");
            entity.Property(e => e.TotalDr)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("TotalDR");

            entity.HasOne(d => d.AccNoNavigation).WithMany(p => p.Jedtls)
                .HasForeignKey(d => d.AccNo)
                .HasConstraintName("FK_JEDTL_AccNo");

            entity.HasOne(d => d.AtcNavigation).WithMany(p => p.Jedtls)
                .HasForeignKey(d => d.Atc)
                .HasConstraintName("FK_JEDTL_ATC");

            entity.HasOne(d => d.DeptNoNavigation).WithMany(p => p.Jedtls)
                .HasForeignKey(d => d.DeptNo)
                .HasConstraintName("FK_JEDTL_DeptNo");

            entity.HasOne(d => d.ProjNoNavigation).WithMany(p => p.Jedtls)
                .HasForeignKey(d => d.ProjNo)
                .HasConstraintName("FK_JEDTL_ProjNo");

            entity.HasOne(d => d.SalesAgentNavigation).WithMany(p => p.Jedtls)
                .HasPrincipalKey(p => p.SalesAgent1)
                .HasForeignKey(d => d.SalesAgent)
                .HasConstraintName("FK_JEDTL_SalesAgent");

            entity.HasOne(d => d.TariffCodeNavigation).WithMany(p => p.Jedtls)
                .HasPrincipalKey(p => p.TariffCode)
                .HasForeignKey(d => d.TariffCode)
                .HasConstraintName("FK_JEDTL_TariffCode");

            entity.HasOne(d => d.TaxCodeNavigation).WithMany(p => p.Jedtls)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.TaxCode)
                .HasConstraintName("FK_JEDTL_TaxCode");

            entity.HasOne(d => d.TaxEntity).WithMany(p => p.Jedtls)
                .HasForeignKey(d => d.TaxEntityId)
                .HasConstraintName("FK_JEDTL_TaxEntityID");
        });

        modelBuilder.Entity<Journal>(entity =>
        {
            entity.HasKey(e => e.AutoKey).HasName("PK_Journal_AutoKey");

            entity.ToTable("Journal", tb =>
                {
                    tb.HasTrigger("UpdateJournalTypeChangeCount");
                    tb.HasTrigger("UpdateRegistryFromJournal");
                });

            entity.HasIndex(e => e.JournalType, "UIX_Journal_JournalType").IsUnique();

            entity.Property(e => e.Desc2).HasMaxLength(40);
            entity.Property(e => e.Description).HasMaxLength(40);
            entity.Property(e => e.EntryType)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.JournalType).HasMaxLength(10);
        });

        modelBuilder.Entity<Layout>(entity =>
        {
            entity.HasKey(e => e.AutoKey).HasName("PK_Layout_AutoKey");

            entity.ToTable("Layout");

            entity.HasIndex(e => e.Title, "UIX_Layout_Title").IsUnique();

            entity.Property(e => e.ComponentName).HasMaxLength(60);
            entity.Property(e => e.FormName).HasMaxLength(60);
            entity.Property(e => e.IsDefault)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Title).HasMaxLength(60);
        });

        modelBuilder.Entity<LayoutUser>(entity =>
        {
            entity.HasKey(e => e.AutoKey).HasName("PK_LayoutUsers_AutoKey");

            entity.HasIndex(e => new { e.Title, e.UserId }, "UIX_LayoutUsers_Title_UserID").IsUnique();

            entity.Property(e => e.Title).HasMaxLength(60);
            entity.Property(e => e.UserId)
                .HasMaxLength(10)
                .HasColumnName("UserID");
        });

        modelBuilder.Entity<Location>(entity =>
        {
            entity.HasKey(e => e.AutoKey).HasName("PK_Location_AutoKey");

            entity.ToTable("Location", tb =>
                {
                    tb.HasTrigger("LocationChangeLog");
                    tb.HasTrigger("UpdateLocationChangeCount");
                });

            entity.HasIndex(e => e.Guid, "UIX_Location_Guid").IsUnique();

            entity.HasIndex(e => e.Location1, "UIX_Location_Location").IsUnique();

            entity.Property(e => e.Address1).HasMaxLength(40);
            entity.Property(e => e.Address2).HasMaxLength(40);
            entity.Property(e => e.Address3).HasMaxLength(40);
            entity.Property(e => e.Address4).HasMaxLength(40);
            entity.Property(e => e.AreaCode).HasMaxLength(12);
            entity.Property(e => e.CashPaymentMethod).HasMaxLength(20);
            entity.Property(e => e.ChequePaymentMethod).HasMaxLength(20);
            entity.Property(e => e.Contact).HasMaxLength(40);
            entity.Property(e => e.CreditCardChargesAccNo).HasMaxLength(12);
            entity.Property(e => e.DebitCardPaymentMethod).HasMaxLength(20);
            entity.Property(e => e.DepositAccNo).HasMaxLength(12);
            entity.Property(e => e.Desc2).HasMaxLength(80);
            entity.Property(e => e.Description).HasMaxLength(80);
            entity.Property(e => e.Fax1).HasMaxLength(25);
            entity.Property(e => e.Fax2).HasMaxLength(25);
            entity.Property(e => e.ForfeitedAccNo).HasMaxLength(12);
            entity.Property(e => e.IsActive)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Location1)
                .HasMaxLength(8)
                .HasColumnName("Location");
            entity.Property(e => e.Phone1).HasMaxLength(25);
            entity.Property(e => e.Phone2).HasMaxLength(25);
            entity.Property(e => e.PointPaymentAccNo).HasMaxLength(12);
            entity.Property(e => e.PointPaymentMethod).HasMaxLength(20);
            entity.Property(e => e.PostCode).HasMaxLength(10);
            entity.Property(e => e.RoundingAccNo).HasMaxLength(12);
            entity.Property(e => e.ServiceChargeAccNo).HasMaxLength(12);
            entity.Property(e => e.TipAccNo).HasMaxLength(12);
            entity.Property(e => e.VoucherForfeitedAccNo).HasMaxLength(12);
            entity.Property(e => e.VoucherPaymentMethod).HasMaxLength(20);

            entity.HasOne(d => d.AreaCodeNavigation).WithMany(p => p.Locations)
                .HasPrincipalKey(p => p.AreaCode)
                .HasForeignKey(d => d.AreaCode)
                .HasConstraintName("FK_Location_AreaCode");

            entity.HasOne(d => d.CashPaymentMethodNavigation).WithMany(p => p.LocationCashPaymentMethodNavigations)
                .HasPrincipalKey(p => p.PaymentMethod1)
                .HasForeignKey(d => d.CashPaymentMethod)
                .HasConstraintName("FK_Location_CashPaymentMethod");

            entity.HasOne(d => d.ChequePaymentMethodNavigation).WithMany(p => p.LocationChequePaymentMethodNavigations)
                .HasPrincipalKey(p => p.PaymentMethod1)
                .HasForeignKey(d => d.ChequePaymentMethod)
                .HasConstraintName("FK_Location_ChequePaymentMethod");

            entity.HasOne(d => d.CreditCardChargesAccNoNavigation).WithMany(p => p.LocationCreditCardChargesAccNoNavigations)
                .HasForeignKey(d => d.CreditCardChargesAccNo)
                .HasConstraintName("FK_Location_CreditCardChargesAccNo");

            entity.HasOne(d => d.DebitCardPaymentMethodNavigation).WithMany(p => p.LocationDebitCardPaymentMethodNavigations)
                .HasPrincipalKey(p => p.PaymentMethod1)
                .HasForeignKey(d => d.DebitCardPaymentMethod)
                .HasConstraintName("FK_Location_DebitCardPaymentMethod");

            entity.HasOne(d => d.DepositAccNoNavigation).WithMany(p => p.LocationDepositAccNoNavigations)
                .HasForeignKey(d => d.DepositAccNo)
                .HasConstraintName("FK_Location_DepositAccNo");

            entity.HasOne(d => d.ForfeitedAccNoNavigation).WithMany(p => p.LocationForfeitedAccNoNavigations)
                .HasForeignKey(d => d.ForfeitedAccNo)
                .HasConstraintName("FK_Location_ForfeitedAccNo");

            entity.HasOne(d => d.PointPaymentAccNoNavigation).WithMany(p => p.LocationPointPaymentAccNoNavigations)
                .HasForeignKey(d => d.PointPaymentAccNo)
                .HasConstraintName("FK_Location_PointPaymentAccNo");

            entity.HasOne(d => d.PointPaymentMethodNavigation).WithMany(p => p.LocationPointPaymentMethodNavigations)
                .HasPrincipalKey(p => p.PaymentMethod1)
                .HasForeignKey(d => d.PointPaymentMethod)
                .HasConstraintName("FK_Location_PointPaymentMethod");

            entity.HasOne(d => d.RoundingAccNoNavigation).WithMany(p => p.LocationRoundingAccNoNavigations)
                .HasForeignKey(d => d.RoundingAccNo)
                .HasConstraintName("FK_Location_RoundingAccNo");

            entity.HasOne(d => d.ServiceChargeAccNoNavigation).WithMany(p => p.LocationServiceChargeAccNoNavigations)
                .HasForeignKey(d => d.ServiceChargeAccNo)
                .HasConstraintName("FK_Location_ServiceChargeAccNo");

            entity.HasOne(d => d.TipAccNoNavigation).WithMany(p => p.LocationTipAccNoNavigations)
                .HasForeignKey(d => d.TipAccNo)
                .HasConstraintName("FK_Location_TipAccNo");

            entity.HasOne(d => d.VoucherForfeitedAccNoNavigation).WithMany(p => p.LocationVoucherForfeitedAccNoNavigations)
                .HasForeignKey(d => d.VoucherForfeitedAccNo)
                .HasConstraintName("FK_Location_VoucherForfeitedAccNo");

            entity.HasOne(d => d.VoucherPaymentMethodNavigation).WithMany(p => p.LocationVoucherPaymentMethodNavigations)
                .HasPrincipalKey(p => p.PaymentMethod1)
                .HasForeignKey(d => d.VoucherPaymentMethod)
                .HasConstraintName("FK_Location_VoucherPaymentMethod");
        });

        modelBuilder.Entity<Mail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_Mail_Id");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Bccemail)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("BCCEmail");
            entity.Property(e => e.Ccemail)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("CCEmail");
            entity.Property(e => e.CreatedTime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Email)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.ErrorMessage).HasMaxLength(4000);
            entity.Property(e => e.FromEmail).HasMaxLength(4000);
            entity.Property(e => e.FromName).HasMaxLength(4000);
            entity.Property(e => e.Subject).HasMaxLength(255);
            entity.Property(e => e.Success)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<MailDtl>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_MailDtl_Id");

            entity.ToTable("MailDtl");

            entity.Property(e => e.Filename).HasMaxLength(255);

            entity.HasOne(d => d.Mail).WithMany(p => p.MailDtls)
                .HasForeignKey(d => d.MailId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MailDtl_MailId");
        });

        modelBuilder.Entity<MailQueue>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_MailQueue_Id");

            entity.ToTable("MailQueue");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Bccemail)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("BCCEmail");
            entity.Property(e => e.Ccemail)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("CCEmail");
            entity.Property(e => e.CreatedTime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Email)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.ErrorMessage).HasMaxLength(4000);
            entity.Property(e => e.FromEmail).HasMaxLength(4000);
            entity.Property(e => e.FromName).HasMaxLength(4000);
            entity.Property(e => e.NextRetryTime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.RecipientName)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.Subject).HasMaxLength(255);
        });

        modelBuilder.Entity<MailQueueDtl>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_MailQueueDtl_Id");

            entity.ToTable("MailQueueDtl");

            entity.HasIndex(e => e.MailQueueId, "IX_MailQueueDtl_MailQueueId");

            entity.Property(e => e.Filename).HasMaxLength(255);

            entity.HasOne(d => d.MailQueue).WithMany(p => p.MailQueueDtls)
                .HasForeignKey(d => d.MailQueueId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MailQueueDtl_MailQueueId");
        });

        modelBuilder.Entity<Member>(entity =>
        {
            entity.HasKey(e => e.AutoKey).HasName("PK_Member_AutoKey");

            entity.ToTable("Member", tb =>
                {
                    tb.HasTrigger("MemberChangeLog");
                    tb.HasTrigger("Update_Member");
                    tb.HasTrigger("Update_Race");
                });

            entity.HasIndex(e => e.Guid, "UIX_Member_Guid").IsUnique();

            entity.HasIndex(e => e.MemberNo, "UIX_Member_MemberNo").IsUnique();

            entity.Property(e => e.Address1).HasMaxLength(40);
            entity.Property(e => e.Address2).HasMaxLength(40);
            entity.Property(e => e.Address3).HasMaxLength(40);
            entity.Property(e => e.Address4).HasMaxLength(40);
            entity.Property(e => e.AreaCode).HasMaxLength(12);
            entity.Property(e => e.CompanyName).HasMaxLength(100);
            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.DebtorCode).HasMaxLength(12);
            entity.Property(e => e.Department).HasMaxLength(30);
            entity.Property(e => e.DirectFax).HasMaxLength(25);
            entity.Property(e => e.DirectPhone).HasMaxLength(25);
            entity.Property(e => e.Dob)
                .HasColumnType("datetime")
                .HasColumnName("DOB");
            entity.Property(e => e.EmailAddress).HasMaxLength(200);
            entity.Property(e => e.ExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.Gender)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Id)
                .HasMaxLength(20)
                .HasColumnName("ID");
            entity.Property(e => e.Imaddress)
                .HasMaxLength(40)
                .HasColumnName("IMAddress");
            entity.Property(e => e.Individual)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.IsActive)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.MemberNo).HasMaxLength(20);
            entity.Property(e => e.MemberType).HasMaxLength(20);
            entity.Property(e => e.MobilePhone).HasMaxLength(25);
            entity.Property(e => e.MultiPrice).HasMaxLength(8);
            entity.Property(e => e.Name).HasMaxLength(100);
            entity.Property(e => e.OpeningPoints).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.PostCode).HasMaxLength(10);
            entity.Property(e => e.Race).HasMaxLength(10);
            entity.Property(e => e.RegisterDate).HasColumnType("datetime");
            entity.Property(e => e.Title).HasMaxLength(40);

            entity.HasOne(d => d.AreaCodeNavigation).WithMany(p => p.Members)
                .HasPrincipalKey(p => p.AreaCode)
                .HasForeignKey(d => d.AreaCode)
                .HasConstraintName("FK_Member_AreaCode");

            entity.HasOne(d => d.DebtorCodeNavigation).WithMany(p => p.Members)
                .HasForeignKey(d => d.DebtorCode)
                .HasConstraintName("FK_Member_AccNo");

            entity.HasOne(d => d.MemberTypeNavigation).WithMany(p => p.Members)
                .HasPrincipalKey(p => p.MemberType1)
                .HasForeignKey(d => d.MemberType)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Member_MemberType");

            entity.HasOne(d => d.RaceNavigation).WithMany(p => p.Members)
                .HasPrincipalKey(p => p.Race1)
                .HasForeignKey(d => d.Race)
                .HasConstraintName("FK_Member_Race");
        });

        modelBuilder.Entity<MemberBalPoint>(entity =>
        {
            entity.HasKey(e => e.AutoKey).HasName("PK_MemberBalPoint_AutoKey");

            entity.ToTable("MemberBalPoint", tb => tb.HasTrigger("MemberBalPointChangeLog"));

            entity.HasIndex(e => e.Guid, "UK_MemberBalPoint_Guid").IsUnique();

            entity.HasIndex(e => e.MemberNo, "UK_MemberBalPoint_MemberNo").IsUnique();

            entity.Property(e => e.MemberNo).HasMaxLength(20);
            entity.Property(e => e.Point).HasColumnType("decimal(19, 2)");
        });

        modelBuilder.Entity<MemberBalPointTran>(entity =>
        {
            entity.HasKey(e => e.TransKey).HasName("PK_MemberBalPointTrans_TransKey");

            entity.Property(e => e.MemberNo).HasMaxLength(20);
            entity.Property(e => e.Point).HasColumnType("decimal(19, 2)");
        });

        modelBuilder.Entity<MemberType>(entity =>
        {
            entity.HasKey(e => e.AutoKey).HasName("PK_MemberType_AutoKey");

            entity.ToTable("MemberType", tb =>
                {
                    tb.HasTrigger("MemberTypeChangeLog");
                    tb.HasTrigger("Update_MemberType");
                });

            entity.HasIndex(e => e.Guid, "UIX_MemberType_Guid").IsUnique();

            entity.HasIndex(e => e.MemberType1, "UIX_MemberType_MemberType").IsUnique();

            entity.Property(e => e.Description).HasMaxLength(80);
            entity.Property(e => e.MemberType1)
                .HasMaxLength(20)
                .HasColumnName("MemberType");
        });

        modelBuilder.Entity<Mru>(entity =>
        {
            entity.HasKey(e => new { e.Mrukey, e.UserId }).HasName("PK_MRU_MRUKey_UserID");

            entity.ToTable("MRU");

            entity.Property(e => e.Mrukey).HasColumnName("MRUKey");
            entity.Property(e => e.UserId)
                .HasMaxLength(10)
                .HasColumnName("UserID");
            entity.Property(e => e.Mruitems).HasColumnName("MRUItems");
        });

        modelBuilder.Entity<MyeinvoiceReceiveDocument>(entity =>
        {
            entity.ToTable("MYEInvoiceReceiveDocument");

            entity.HasIndex(e => new { e.AutoCountDocType, e.AutoCountDocKey }, "UIX_MYEInvoiceReceiveDocument_AutoCountDocType_AutoCountDocKey")
                .IsUnique()
                .HasFilter("([AutoCountDocType] IS NOT NULL AND [AutoCountDocKey] IS NOT NULL)");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.AutoCountDocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.CancelDateTime).HasColumnType("datetime");
            entity.Property(e => e.CurrencyCode).HasMaxLength(5);
            entity.Property(e => e.DocNo).HasMaxLength(100);
            entity.Property(e => e.DocType).HasMaxLength(2);
            entity.Property(e => e.IssueDateTime).HasColumnType("datetime");
            entity.Property(e => e.IssuerId).HasMaxLength(30);
            entity.Property(e => e.IssuerIdType).HasMaxLength(8);
            entity.Property(e => e.IssuerName).HasMaxLength(100);
            entity.Property(e => e.IssuerTin)
                .HasMaxLength(30)
                .HasColumnName("IssuerTIN");
            entity.Property(e => e.ReceivedDateTime).HasColumnType("datetime");
            entity.Property(e => e.ReceiverId).HasMaxLength(30);
            entity.Property(e => e.ReceiverIdType).HasMaxLength(8);
            entity.Property(e => e.ReceiverName).HasMaxLength(100);
            entity.Property(e => e.ReceiverTin)
                .HasMaxLength(30)
                .HasColumnName("ReceiverTIN");
            entity.Property(e => e.RejectRequestDateTime).HasColumnType("datetime");
            entity.Property(e => e.Status)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.StatusReason)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.SubmissionUuid)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.TotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalNetAmount).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalPayableAmount).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Uuid)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ValidatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.ValidationLink)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<MyeinvoiceSupplierItemMapping>(entity =>
        {
            entity.HasKey(e => new { e.CreditorCode, e.SupplierItemDescription, e.SupplierMeasurement });

            entity.ToTable("MYEInvoiceSupplierItemMapping");

            entity.Property(e => e.CreditorCode).HasMaxLength(12);
            entity.Property(e => e.SupplierItemDescription).HasMaxLength(100);
            entity.Property(e => e.SupplierMeasurement).HasMaxLength(3);
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<NameValue>(entity =>
        {
            entity.HasKey(e => e.Name).HasName("PK_NameValue_Name");

            entity.ToTable("NameValue");

            entity.Property(e => e.Name)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Value).HasMaxLength(255);
        });

        modelBuilder.Entity<NetUser>(entity =>
        {
            entity.HasKey(e => e.SessionKey).HasName("PK_NetUsers_SessionKey");

            entity.Property(e => e.ComputerName).HasMaxLength(20);
            entity.Property(e => e.IsInternetUser)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LastCheckDateTime).HasColumnType("datetime");
            entity.Property(e => e.LoginTime).HasColumnType("datetime");
            entity.Property(e => e.UserId)
                .HasMaxLength(10)
                .HasColumnName("UserID");
            entity.Property(e => e.UserName).HasMaxLength(20);
        });

        modelBuilder.Entity<NotifAllowUser>(entity =>
        {
            entity.HasKey(e => new { e.NotificationKey, e.UserId }).HasName("PK_NotifAllowUsers_NotificationKey_UserID");

            entity.Property(e => e.UserId)
                .HasMaxLength(40)
                .HasColumnName("UserID");
        });

        modelBuilder.Entity<NotifReadUser>(entity =>
        {
            entity.HasKey(e => new { e.NotificationKey, e.UserId }).HasName("PK_NotifReadUsers_NotificationKey_UserID");

            entity.Property(e => e.UserId)
                .HasMaxLength(10)
                .HasColumnName("UserID");
        });

        modelBuilder.Entity<Notification>(entity =>
        {
            entity.HasKey(e => e.NotificationKey).HasName("PK_Notification_NotificationKey");

            entity.ToTable("Notification");

            entity.Property(e => e.NotificationKey).ValueGeneratedNever();
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.UserName).HasMaxLength(40);
        });

        modelBuilder.Entity<Obalance>(entity =>
        {
            entity.HasKey(e => e.AutoKey).HasName("PK_OBalance_AutoKey");

            entity.ToTable("OBalance");

            entity.HasIndex(e => new { e.PeriodNo, e.AccNo, e.ProjNo, e.DeptNo }, "UIX_OBalance_PeriodNo_AccNo_ProjNo_DeptNo").IsUnique();

            entity.Property(e => e.AccNo).HasMaxLength(12);
            entity.Property(e => e.Cr)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("CR");
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Dr)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("DR");
            entity.Property(e => e.HomeCr)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("HomeCR");
            entity.Property(e => e.HomeDr)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("HomeDR");
            entity.Property(e => e.ProjNo).HasMaxLength(10);

            entity.HasOne(d => d.AccNoNavigation).WithMany(p => p.Obalances)
                .HasForeignKey(d => d.AccNo)
                .HasConstraintName("FK_OBalance_AccNo");

            entity.HasOne(d => d.DeptNoNavigation).WithMany(p => p.Obalances)
                .HasForeignKey(d => d.DeptNo)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_OBalance_DeptNo");

            entity.HasOne(d => d.ProjNoNavigation).WithMany(p => p.Obalances)
                .HasForeignKey(d => d.ProjNo)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_OBalance_ProjNo");
        });

        modelBuilder.Entity<Obdtl>(entity =>
        {
            entity.HasKey(e => e.ObdtlKey).HasName("PK_OBDTL_OBDtlKey");

            entity.ToTable("OBDTL");

            entity.HasIndex(e => new { e.SourceType, e.SourceKey }, "IX_OBDTL_SourceType_SourceKey");

            entity.Property(e => e.ObdtlKey).HasColumnName("OBDtlKey");
            entity.Property(e => e.AccNo).HasMaxLength(12);
            entity.Property(e => e.Amount).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.HomeAmount).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.SourceType)
                .HasMaxLength(2)
                .IsUnicode(false);

            entity.HasOne(d => d.AccNoNavigation).WithMany(p => p.Obdtls)
                .HasForeignKey(d => d.AccNo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OBDTL_AccNo");

            entity.HasOne(d => d.DeptNoNavigation).WithMany(p => p.Obdtls)
                .HasForeignKey(d => d.DeptNo)
                .HasConstraintName("FK_OBDTL_DeptNo");

            entity.HasOne(d => d.ProjNoNavigation).WithMany(p => p.Obdtls)
                .HasForeignKey(d => d.ProjNo)
                .HasConstraintName("FK_OBDTL_ProjNo");
        });

        modelBuilder.Entity<ObjectEventLog>(entity =>
        {
            entity.HasKey(e => e.EventKey).HasName("PK_ObjectEventLog_EventKey");

            entity.ToTable("ObjectEventLog");

            entity.Property(e => e.EventKey).ValueGeneratedNever();
            entity.Property(e => e.EventType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ObjCode).HasMaxLength(30);
            entity.Property(e => e.ObjType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.OccurTime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.UserId)
                .HasMaxLength(10)
                .HasColumnName("UserID");
        });

        modelBuilder.Entity<Package>(entity =>
        {
            entity.HasKey(e => e.DocKey).HasName("PK_Package_DocKey");

            entity.ToTable("Package", tb =>
                {
                    tb.HasTrigger("PackageChangeLog");
                    tb.HasTrigger("UpdateItemPackageChangeCount");
                });

            entity.HasIndex(e => e.PackageCode, "IX_Package_PackageCode").IsUnique();

            entity.HasIndex(e => e.Guid, "UIX_Package_Guid").IsUnique();

            entity.Property(e => e.DocKey).ValueGeneratedNever();
            entity.Property(e => e.BarCode).HasMaxLength(30);
            entity.Property(e => e.Description).HasMaxLength(80);
            entity.Property(e => e.ExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.IsActive)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LimitedQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.NetTotal).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.OpeningQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.PackageCode).HasMaxLength(30);
            entity.Property(e => e.PurchaseNetTotal).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.PurchasedQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SoldQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.UserUom)
                .HasMaxLength(8)
                .HasColumnName("UserUOM");
        });

        modelBuilder.Entity<PackageDtl>(entity =>
        {
            entity.HasKey(e => e.DtlKey).HasName("PK_PackageDTL_DtlKey");

            entity.ToTable("PackageDTL", tb => tb.HasTrigger("PackageDtlChangeLog"));

            entity.HasIndex(e => e.DocKey, "IX_PackageDTL_DocKey");

            entity.HasIndex(e => e.Guid, "UIX_PackageDtl_Guid").IsUnique();

            entity.Property(e => e.DtlKey).ValueGeneratedNever();
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.PrintOut)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PurchasePrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.PurchaseSubTotal).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.PurchaseTaxCode).HasMaxLength(14);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubTotal).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.TaxCode).HasMaxLength(14);
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");

            entity.HasOne(d => d.DocKeyNavigation).WithMany(p => p.PackageDtls)
                .HasForeignKey(d => d.DocKey)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PackageDTL_Package");

            entity.HasOne(d => d.PurchaseTaxCodeNavigation).WithMany(p => p.PackageDtlPurchaseTaxCodeNavigations)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.PurchaseTaxCode)
                .HasConstraintName("FK_PackageDTL_PurchaseTaxCode");

            entity.HasOne(d => d.TaxCodeNavigation).WithMany(p => p.PackageDtlTaxCodeNavigations)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.TaxCode)
                .HasConstraintName("FK_PackageDTL_TaxCode");

            entity.HasOne(d => d.ItemUom).WithMany(p => p.PackageDtls)
                .HasPrincipalKey(p => new { p.ItemCode, p.Uom })
                .HasForeignKey(d => new { d.ItemCode, d.Uom })
                .HasConstraintName("FK_PackageDTL_ItemUOM");
        });

        modelBuilder.Entity<PastYearPriceHistory>(entity =>
        {
            entity.HasKey(e => e.Ipkey).HasName("PK_PastYearPriceHistory_IPKey");

            entity.ToTable("PastYearPriceHistory");

            entity.HasIndex(e => new { e.AccNo, e.ItemCode }, "IX_PastYearPriceHistory_AccNo_ItemCode");

            entity.HasIndex(e => new { e.DocType, e.DocKey }, "IX_PastYearPriceHistory_DocType_DocKey");

            entity.HasIndex(e => new { e.DocType, e.DtlKey }, "IX_PastYearPriceHistory_DocType_DtlKey");

            entity.HasIndex(e => new { e.ItemCode, e.AccNo }, "IX_PastYearPriceHistory_ItemCode_AccNo");

            entity.HasIndex(e => e.Guid, "UIX_PastYearPriceHistory_Guid").IsUnique();

            entity.Property(e => e.Ipkey).HasColumnName("IPKey");
            entity.Property(e => e.AccNo).HasMaxLength(12);
            entity.Property(e => e.Agent).HasMaxLength(12);
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.BranchCode).HasMaxLength(20);
            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("F")
                .IsFixedLength();
            entity.Property(e => e.CurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.Discount).HasMaxLength(20);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.DocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.Focqty)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("FOCQty");
            entity.Property(e => e.Guid).HasDefaultValueSql("(newid())");
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.MemberNo).HasMaxLength(20);
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SmallestQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCode).HasMaxLength(14);
            entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Transfered)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");

            entity.HasOne(d => d.AccNoNavigation).WithMany(p => p.PastYearPriceHistories)
                .HasForeignKey(d => d.AccNo)
                .HasConstraintName("FK_PastYearPriceHistory_AccNo");

            entity.HasOne(d => d.DeptNoNavigation).WithMany(p => p.PastYearPriceHistories)
                .HasForeignKey(d => d.DeptNo)
                .HasConstraintName("FK_PastYearPriceHistory_DeptNo");

            entity.HasOne(d => d.LocationNavigation).WithMany(p => p.PastYearPriceHistories)
                .HasPrincipalKey(p => p.Location1)
                .HasForeignKey(d => d.Location)
                .HasConstraintName("FK_PastYearPriceHistory_Location");

            entity.HasOne(d => d.ProjNoNavigation).WithMany(p => p.PastYearPriceHistories)
                .HasForeignKey(d => d.ProjNo)
                .HasConstraintName("FK_PastYearPriceHistory_ProjNo");

            entity.HasOne(d => d.Branch).WithMany(p => p.PastYearPriceHistories)
                .HasPrincipalKey(p => new { p.AccNo, p.BranchCode })
                .HasForeignKey(d => new { d.AccNo, d.BranchCode })
                .HasConstraintName("FK_PastYearPriceHistory_Branch");

            entity.HasOne(d => d.ItemBatch).WithMany(p => p.PastYearPriceHistories)
                .HasPrincipalKey(p => new { p.ItemCode, p.BatchNo })
                .HasForeignKey(d => new { d.ItemCode, d.BatchNo })
                .HasConstraintName("FK_PastYearPriceHistory_ItemBatch");

            entity.HasOne(d => d.ItemUom).WithMany(p => p.PastYearPriceHistories)
                .HasPrincipalKey(p => new { p.ItemCode, p.Uom })
                .HasForeignKey(d => new { d.ItemCode, d.Uom })
                .HasConstraintName("FK_PastYearPriceHistory_ItemUOM");
        });

        modelBuilder.Entity<PaymentMethod>(entity =>
        {
            entity.HasKey(e => e.AutoKey).HasName("PK_PaymentMethod_AutoKey");

            entity.ToTable("PaymentMethod", tb =>
                {
                    tb.HasTrigger("PaymentMethodChangeLog");
                    tb.HasTrigger("UpdatePaymentMethodChangeCount");
                });

            entity.HasIndex(e => e.Guid, "UIX_PaymentMethod_Guid").IsUnique();

            entity.HasIndex(e => e.PaymentMethod1, "UIX_PaymentMethod_PaymentMethod").IsUnique();

            entity.Property(e => e.AcceptChequeNo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BankAccount).HasMaxLength(12);
            entity.Property(e => e.BankChargeAccount).HasMaxLength(12);
            entity.Property(e => e.BankChargePercent).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.BankChargeTaxCode).HasMaxLength(14);
            entity.Property(e => e.BankChargeTaxEntityId).HasColumnName("BankChargeTaxEntityID");
            entity.Property(e => e.IsActive)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.JournalType).HasMaxLength(10);
            entity.Property(e => e.MergeBankChargeTrans)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.MinBankCharge)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(19, 2)");
            entity.Property(e => e.NextChequeNo).HasMaxLength(30);
            entity.Property(e => e.Odlimit)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("ODLimit");
            entity.Property(e => e.PaymentBy).HasMaxLength(20);
            entity.Property(e => e.PaymentFormatName).HasMaxLength(20);
            entity.Property(e => e.PaymentMethod1)
                .HasMaxLength(20)
                .HasColumnName("PaymentMethod");
            entity.Property(e => e.PaymentType).HasMaxLength(12);
            entity.Property(e => e.ReceiptFormatName).HasMaxLength(20);
            entity.Property(e => e.SpecialAccType)
                .HasMaxLength(3)
                .IsUnicode(false);

            entity.HasOne(d => d.BankAccountNavigation).WithMany(p => p.PaymentMethodBankAccountNavigations)
                .HasForeignKey(d => d.BankAccount)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PaymentMethod_BankAccount");

            entity.HasOne(d => d.BankChargeAccountNavigation).WithMany(p => p.PaymentMethodBankChargeAccountNavigations)
                .HasForeignKey(d => d.BankChargeAccount)
                .HasConstraintName("FK_PaymentMethod_BankChargeAccount");

            entity.HasOne(d => d.BankChargeTaxCodeNavigation).WithMany(p => p.PaymentMethods)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.BankChargeTaxCode)
                .HasConstraintName("FK_PaymentMethod_BankChargeTaxCode");

            entity.HasOne(d => d.BankChargeTaxEntity).WithMany(p => p.PaymentMethods)
                .HasForeignKey(d => d.BankChargeTaxEntityId)
                .HasConstraintName("FK_PaymentMethod_BankChargeTaxEntityID");

            entity.HasOne(d => d.JournalTypeNavigation).WithMany(p => p.PaymentMethods)
                .HasPrincipalKey(p => p.JournalType)
                .HasForeignKey(d => d.JournalType)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PaymentMethod_JournalType");

            entity.HasOne(d => d.PaymentFormatNameNavigation).WithMany(p => p.PaymentMethodPaymentFormatNameNavigations)
                .HasPrincipalKey(p => p.Name)
                .HasForeignKey(d => d.PaymentFormatName)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PaymentMethod_PaymentFormatName");

            entity.HasOne(d => d.ReceiptFormatNameNavigation).WithMany(p => p.PaymentMethodReceiptFormatNameNavigations)
                .HasPrincipalKey(p => p.Name)
                .HasForeignKey(d => d.ReceiptFormatName)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PaymentMethod_ReceiptFormatName");
        });

        modelBuilder.Entity<Pbalance>(entity =>
        {
            entity.HasKey(e => e.AutoKey).HasName("PK_PBalance_AutoKey");

            entity.ToTable("PBalance");

            entity.HasIndex(e => e.ComputedPeriodNoAccNoProjNoDeptNo, "IX_PBalance_Computed_PeriodNo_AccNo_ProjNo_DeptNo");

            entity.HasIndex(e => new { e.PeriodNo, e.AccNo, e.ProjNo, e.DeptNo }, "UIX_PBalance_PeriodNo_AccNo_ProjNo_DeptNo").IsUnique();

            entity.Property(e => e.AccNo).HasMaxLength(12);
            entity.Property(e => e.ComputedPeriodNoAccNoProjNoDeptNo)
                .HasMaxLength(40)
                .HasComputedColumnSql("((((((CONVERT([varchar](5),[PeriodNo])+char((9)))+rtrim([AccNo]))+char((9)))+rtrim(isnull([ProjNo],'')))+char((9)))+rtrim(isnull([DeptNo],'')))", false)
                .HasColumnName("Computed_PeriodNo_AccNo_ProjNo_DeptNo");
            entity.Property(e => e.Cr)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("CR");
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Dr)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("DR");
            entity.Property(e => e.HomeCr)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("HomeCR");
            entity.Property(e => e.HomeDr)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("HomeDR");
            entity.Property(e => e.ProjNo).HasMaxLength(10);

            entity.HasOne(d => d.AccNoNavigation).WithMany(p => p.Pbalances)
                .HasForeignKey(d => d.AccNo)
                .HasConstraintName("FK_PBalance_AccNo");

            entity.HasOne(d => d.DeptNoNavigation).WithMany(p => p.Pbalances)
                .HasForeignKey(d => d.DeptNo)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_PBalance_DeptNo");

            entity.HasOne(d => d.ProjNoNavigation).WithMany(p => p.Pbalances)
                .HasForeignKey(d => d.ProjNo)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_PBalance_ProjNo");
        });

        modelBuilder.Entity<PeriodLock>(entity =>
        {
            entity.HasKey(e => e.PeriodNo).HasName("PK_PeriodLock_PeriodNo");

            entity.ToTable("PeriodLock");

            entity.Property(e => e.PeriodNo).ValueGeneratedNever();
            entity.Property(e => e.Lock)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<PeriodLockException>(entity =>
        {
            entity.HasKey(e => e.AutoKey).HasName("PK_PeriodLockException_AutoKey");

            entity.ToTable("PeriodLockException");

            entity.HasIndex(e => new { e.PeriodNo, e.FunctionName, e.UserId }, "UIX_PeriodLockException_PeriodNo_FunctionName_UserID").IsUnique();

            entity.Property(e => e.FunctionName).HasMaxLength(40);
            entity.Property(e => e.UserId)
                .HasMaxLength(40)
                .HasColumnName("UserID");
        });

        modelBuilder.Entity<PhilippinesEwtremittance>(entity =>
        {
            entity.HasKey(e => e.PeriodNo);

            entity.ToTable("PhilippinesEWTRemittance");

            entity.Property(e => e.PeriodNo).ValueGeneratedNever();
            entity.Property(e => e.BankCode).HasMaxLength(30);
            entity.Property(e => e.Compromise).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Interest).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.OtherPaymentMade).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.OverRemittance).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.PreviousRemittedAmount).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.RemittanceDate).HasColumnType("datetime");
            entity.Property(e => e.Rorno)
                .HasMaxLength(30)
                .HasColumnName("RORNo");
            entity.Property(e => e.Surcharge).HasColumnType("decimal(19, 2)");
        });

        modelBuilder.Entity<PhilippinesVatprocessor>(entity =>
        {
            entity.HasKey(e => e.Vatkey).HasName("PK_PhilippinesVATProcessor_VATKey");

            entity.ToTable("PhilippinesVATProcessor");

            entity.Property(e => e.Vatkey).HasColumnName("VATKey");
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.FromDate).HasColumnType("datetime");
            entity.Property(e => e.JedocKey).HasColumnName("JEDocKey");
            entity.Property(e => e.ParentVatkey).HasColumnName("ParentVATKey");
            entity.Property(e => e.Period)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.ProductVersion).HasMaxLength(100);
            entity.Property(e => e.ShortPeriodReturn)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Submitted)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TaxRelief).HasMaxLength(200);
            entity.Property(e => e.ToDate).HasColumnType("datetime");
            entity.Property(e => e.TotalAmountPayable).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Vatversion).HasColumnName("VATVersion");
        });

        modelBuilder.Entity<Pi>(entity =>
        {
            entity.HasKey(e => e.DocKey).HasName("PK_PI_DocKey");

            entity.ToTable("PI", tb => tb.HasTrigger("UpdatePIChangeCount"));

            entity.HasIndex(e => e.DocNo, "IX_PI_DocNo").IsUnique();

            entity.HasIndex(e => new { e.DocStatus, e.ExpiryTimeStamp }, "IX_PI_DocStatus_ExpiryTimeStamp");

            entity.Property(e => e.DocKey).ValueGeneratedNever();
            entity.Property(e => e.AnalysisNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Attention).HasMaxLength(40);
            entity.Property(e => e.AuthorisationNumberForCertifiedExporter)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.BranchCode).HasMaxLength(20);
            entity.Property(e => e.CalcDiscountOnUnitPrice)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CanSync)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.CreditorCode).HasMaxLength(12);
            entity.Property(e => e.CreditorName).HasMaxLength(100);
            entity.Property(e => e.CurrencyCode).HasMaxLength(5);
            entity.Property(e => e.CurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.DeliveryTaxEntityId).HasColumnName("DeliveryTaxEntityID");
            entity.Property(e => e.Description).HasMaxLength(80);
            entity.Property(e => e.DisplayTerm).HasMaxLength(30);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocDate2).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.DocStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EinvoiceSelfBilledDocNo)
                .HasMaxLength(30)
                .HasColumnName("EInvoiceSelfBilledDocNo");
            entity.Property(e => e.EinvoiceStatus)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceStatus");
            entity.Property(e => e.EinvoiceUuid)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceUuid");
            entity.Property(e => e.EinvoiceValidatedDateTime)
                .HasColumnType("datetime")
                .HasColumnName("EInvoiceValidatedDateTime");
            entity.Property(e => e.EinvoiceValidationLink)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("EInvoiceValidationLink");
            entity.Property(e => e.ExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ExpiryTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.Fax1).HasMaxLength(25);
            entity.Property(e => e.FinalTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer1TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Footer2Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer2TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Footer3Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer3TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.ForeignCharges).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.FreeTradeAgreementInformation)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.FreightAllowanceChargeAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.FreightAllowanceChargeReason)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FullTransferOption)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Guid).HasDefaultValueSql("(newid())");
            entity.Property(e => e.InclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("F")
                .IsFixedLength();
            entity.Property(e => e.Incoterms)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.InvAddr1).HasMaxLength(40);
            entity.Property(e => e.InvAddr2).HasMaxLength(40);
            entity.Property(e => e.InvAddr3).HasMaxLength(40);
            entity.Property(e => e.InvAddr4).HasMaxLength(40);
            entity.Property(e => e.IsRoundAdj)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("F")
                .IsFixedLength();
            entity.Property(e => e.LandedCostMethod)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.LocalAnalysisNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalCharges).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalWithholdingTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalWithholdingVat)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("LocalWithholdingVAT");
            entity.Property(e => e.NetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Phone1).HasMaxLength(25);
            entity.Property(e => e.PostToGl)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PostToGL");
            entity.Property(e => e.PostToStock)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PurchaseAgent).HasMaxLength(12);
            entity.Property(e => e.PurchaseLocation).HasMaxLength(8);
            entity.Property(e => e.Ref).HasMaxLength(40);
            entity.Property(e => e.RefDocNo).HasMaxLength(30);
            entity.Property(e => e.RefNo2).HasMaxLength(30);
            entity.Property(e => e.ReferenceNumberOfCustomsFormNo1And9)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.ReferenceNumberOfCustomsFormNo2)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.Remark1).HasMaxLength(40);
            entity.Property(e => e.Remark2).HasMaxLength(40);
            entity.Property(e => e.Remark3).HasMaxLength(40);
            entity.Property(e => e.Remark4).HasMaxLength(40);
            entity.Property(e => e.RoundAdj).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SelfBilledApprovalNo).HasMaxLength(30);
            entity.Property(e => e.SgeinvoiceAipsubmissionDateTime)
                .HasColumnType("datetime")
                .HasColumnName("SGEInvoiceAIPSubmissionDateTime");
            entity.Property(e => e.SgeinvoiceAtdocKey).HasColumnName("SGEInvoiceATDocKey");
            entity.Property(e => e.SgeinvoiceAtdocNo)
                .HasMaxLength(100)
                .HasColumnName("SGEInvoiceATDocNo");
            entity.Property(e => e.SgeinvoiceDocumentUuid)
                .HasMaxLength(100)
                .HasColumnName("SGEInvoiceDocumentUUID");
            entity.Property(e => e.SgeinvoiceError).HasColumnName("SGEInvoiceError");
            entity.Property(e => e.SgeinvoiceIraserror).HasColumnName("SGEInvoiceIRASError");
            entity.Property(e => e.SgeinvoiceIrassubmissionStatus)
                .HasMaxLength(100)
                .HasColumnName("SGEInvoiceIRASSubmissionStatus");
            entity.Property(e => e.SgeinvoiceIrastransmissionId)
                .HasMaxLength(100)
                .HasColumnName("SGEInvoiceIRASTransmissionId");
            entity.Property(e => e.SgeinvoiceSubmissionUuid)
                .HasMaxLength(100)
                .HasColumnName("SGEInvoiceSubmissionUUID");
            entity.Property(e => e.SgeinvoiceTraceId)
                .HasMaxLength(100)
                .HasColumnName("SGEInvoiceTraceId");
            entity.Property(e => e.ShipInfo).HasMaxLength(40);
            entity.Property(e => e.ShipVia).HasMaxLength(20);
            entity.Property(e => e.SubmitInvoiceNow)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SupplierDono)
                .HasMaxLength(30)
                .HasColumnName("SupplierDONo");
            entity.Property(e => e.SupplierInvoiceNo).HasMaxLength(30);
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyWithholdingTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyWithholdingVat)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("TaxCurrencyWithholdingVAT");
            entity.Property(e => e.TaxDate).HasColumnType("datetime");
            entity.Property(e => e.TaxDocNo).HasMaxLength(20);
            entity.Property(e => e.TaxEntityId).HasColumnName("TaxEntityID");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ToDocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.ToTaxCurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.Total).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Transferable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.UdfSuperAppId)
                .HasMaxLength(32)
                .HasColumnName("UDF_SuperAppId");
            entity.Property(e => e.WhtpostingDate)
                .HasColumnType("datetime")
                .HasColumnName("WHTPostingDate");
            entity.Property(e => e.WithholdingTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.WithholdingVat)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("WithholdingVAT");

            entity.HasOne(d => d.CreatedUser).WithMany(p => p.PiCreatedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.CreatedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PI_CreatedUserID");

            entity.HasOne(d => d.CreditorCodeNavigation).WithMany(p => p.Pis)
                .HasForeignKey(d => d.CreditorCode)
                .HasConstraintName("FK_PI_CreditorCode");

            entity.HasOne(d => d.CurrencyCodeNavigation).WithMany(p => p.Pis)
                .HasForeignKey(d => d.CurrencyCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PI_CurrencyCode");

            entity.HasOne(d => d.DisplayTermNavigation).WithMany(p => p.Pis)
                .HasPrincipalKey(p => p.DisplayTerm)
                .HasForeignKey(d => d.DisplayTerm)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PI_DisplayTerm");

            entity.HasOne(d => d.Footer1TaxCodeNavigation).WithMany(p => p.PiFooter1TaxCodeNavigations)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.Footer1TaxCode)
                .HasConstraintName("FK_PI_Footer1TaxCode");

            entity.HasOne(d => d.Footer2TaxCodeNavigation).WithMany(p => p.PiFooter2TaxCodeNavigations)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.Footer2TaxCode)
                .HasConstraintName("FK_PI_Footer2TaxCode");

            entity.HasOne(d => d.Footer3TaxCodeNavigation).WithMany(p => p.PiFooter3TaxCodeNavigations)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.Footer3TaxCode)
                .HasConstraintName("FK_PI_Footer3TaxCode");

            entity.HasOne(d => d.LastModifiedUser).WithMany(p => p.PiLastModifiedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.LastModifiedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PI_LastModifiedUserID");

            entity.HasOne(d => d.PurchaseAgentNavigation).WithMany(p => p.Pis)
                .HasPrincipalKey(p => p.PurchaseAgent1)
                .HasForeignKey(d => d.PurchaseAgent)
                .HasConstraintName("FK_PI_PurchaseAgent");

            entity.HasOne(d => d.PurchaseLocationNavigation).WithMany(p => p.Pis)
                .HasPrincipalKey(p => p.Location1)
                .HasForeignKey(d => d.PurchaseLocation)
                .HasConstraintName("FK_PI_PurchaseLocation");

            entity.HasOne(d => d.ShipViaNavigation).WithMany(p => p.Pis)
                .HasPrincipalKey(p => p.ShippingMethod1)
                .HasForeignKey(d => d.ShipVia)
                .HasConstraintName("FK_PI_ShipVia");

            entity.HasOne(d => d.TaxEntity).WithMany(p => p.Pis)
                .HasForeignKey(d => d.TaxEntityId)
                .HasConstraintName("FK_PI_TaxEntityID");

            entity.HasOne(d => d.Branch).WithMany(p => p.Pis)
                .HasPrincipalKey(p => new { p.AccNo, p.BranchCode })
                .HasForeignKey(d => new { d.CreditorCode, d.BranchCode })
                .HasConstraintName("FK_PI_BranchCode");
        });

        modelBuilder.Entity<Pidtl>(entity =>
        {
            entity.HasKey(e => e.DtlKey).HasName("PK_PIDTL_DtlKey");

            entity.ToTable("PIDTL");

            entity.HasIndex(e => e.DocKey, "IX_PIDTL_DocKey");

            entity.HasIndex(e => e.FromDocDtlKey, "IX_PIDTL_FromDocDtlKey");

            entity.HasIndex(e => new { e.ItemCode, e.Uom }, "IX_PIDTL_ItemCode_UOM");

            entity.Property(e => e.DtlKey).ValueGeneratedNever();
            entity.Property(e => e.AccNo).HasMaxLength(12);
            entity.Property(e => e.AddToSubTotal)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.CalcByPercent).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Cnamt)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("CNAmt");
            entity.Property(e => e.DeliveryDate).HasColumnType("datetime");
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Desc2).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.Discount).HasMaxLength(20);
            entity.Property(e => e.DiscountAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DtlType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Duty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.EstimatedDeliveryDate).HasMaxLength(20);
            entity.Property(e => e.ExtraDiscountAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.FocdtlKey).HasColumnName("FOCDtlKey");
            entity.Property(e => e.Focqty)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("FOCQty");
            entity.Property(e => e.FoctransferedQty)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("FOCTransferedQty");
            entity.Property(e => e.FontStyle).HasMaxLength(8);
            entity.Property(e => e.ForeignCharges).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.FromDocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.FullTransferOption)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Guid).HasDefaultValueSql("(newid())");
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.LocalCharges).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.LocalSubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalSubTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxAdjustment).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.MainItem)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Numbering).HasMaxLength(6);
            entity.Property(e => e.OurPodate)
                .HasColumnType("datetime")
                .HasColumnName("OurPODate");
            entity.Property(e => e.OurPono)
                .HasMaxLength(30)
                .HasColumnName("OurPONo");
            entity.Property(e => e.PostToStockDate).HasColumnType("datetime");
            entity.Property(e => e.PrintOut)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SalesExemptionNo).HasMaxLength(60);
            entity.Property(e => e.SmallestQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SmallestUnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SubTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TariffCode).HasMaxLength(12);
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxAdjustment).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCode).HasMaxLength(14);
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxPermitNo).HasMaxLength(20);
            entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Transferable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TransferedQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
            entity.Property(e => e.UserUom)
                .HasMaxLength(8)
                .HasColumnName("UserUOM");

            entity.HasOne(d => d.AccNoNavigation).WithMany(p => p.Pidtls)
                .HasForeignKey(d => d.AccNo)
                .HasConstraintName("FK_PIDTL_AccNo");

            entity.HasOne(d => d.DeptNoNavigation).WithMany(p => p.Pidtls)
                .HasForeignKey(d => d.DeptNo)
                .HasConstraintName("FK_PIDTL_DeptNo");

            entity.HasOne(d => d.FontStyleNavigation).WithMany(p => p.Pidtls)
                .HasPrincipalKey(p => p.FontStyle1)
                .HasForeignKey(d => d.FontStyle)
                .HasConstraintName("FK_PIDTL_FontStyle");

            entity.HasOne(d => d.LocationNavigation).WithMany(p => p.Pidtls)
                .HasPrincipalKey(p => p.Location1)
                .HasForeignKey(d => d.Location)
                .HasConstraintName("FK_PIDTL_Location");

            entity.HasOne(d => d.ProjNoNavigation).WithMany(p => p.Pidtls)
                .HasForeignKey(d => d.ProjNo)
                .HasConstraintName("FK_PIDTL_ProjNo");

            entity.HasOne(d => d.TariffCodeNavigation).WithMany(p => p.Pidtls)
                .HasPrincipalKey(p => p.TariffCode)
                .HasForeignKey(d => d.TariffCode)
                .HasConstraintName("FK_PIDTL_TariffCode");

            entity.HasOne(d => d.TaxCodeNavigation).WithMany(p => p.Pidtls)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.TaxCode)
                .HasConstraintName("FK_PIDTL_TaxCode");

            entity.HasOne(d => d.ItemBatch).WithMany(p => p.Pidtls)
                .HasPrincipalKey(p => new { p.ItemCode, p.BatchNo })
                .HasForeignKey(d => new { d.ItemCode, d.BatchNo })
                .HasConstraintName("FK_PIDTL_ItemBatch");

            entity.HasOne(d => d.ItemUom).WithMany(p => p.Pidtls)
                .HasPrincipalKey(p => new { p.ItemCode, p.Uom })
                .HasForeignKey(d => new { d.ItemCode, d.Uom })
                .HasConstraintName("FK_PIDTL_ItemUOM");
        });

        modelBuilder.Entity<Plformat>(entity =>
        {
            entity.HasKey(e => e.AutoKey).HasName("PK_PLFormat_AutoKey");

            entity.ToTable("PLFormat");

            entity.Property(e => e.AccType).HasMaxLength(2);
            entity.Property(e => e.CreditAsPositive)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.RowType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.AccTypeNavigation).WithMany(p => p.Plformats)
                .HasPrincipalKey(p => p.AccType1)
                .HasForeignKey(d => d.AccType)
                .HasConstraintName("FK_PLFormat_AccType");
        });

        modelBuilder.Entity<PlugIn>(entity =>
        {
            entity.HasKey(e => e.Guid).HasName("PK_PlugIn_Guid");

            entity.ToTable("PlugIn");

            entity.Property(e => e.Guid).ValueGeneratedNever();
            entity.Property(e => e.AllowSync)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.Dbversion)
                .HasMaxLength(20)
                .HasColumnName("DBVersion");
            entity.Property(e => e.ExtractFiles)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LicenseKey).IsUnicode(false);
            entity.Property(e => e.MinimumAccountingVersion)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Name).HasMaxLength(100);
            entity.Property(e => e.SalesPhone).HasMaxLength(25);
            entity.Property(e => e.ScriptLanguage)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Signature)
                .HasMaxLength(88)
                .IsUnicode(false);
            entity.Property(e => e.SupportLicenseKey)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SupportPhone).HasMaxLength(25);
            entity.Property(e => e.Version).HasMaxLength(20);
        });

        modelBuilder.Entity<PlugInFile>(entity =>
        {
            entity.HasKey(e => new { e.Guid, e.FileName }).HasName("PK_PlugInFiles_Guid_FileName");

            entity.Property(e => e.FileName).HasMaxLength(260);
            entity.Property(e => e.CreationTimeUtc).HasColumnType("datetime");
            entity.Property(e => e.ExecuteAfterExtracted)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LastAccessTimeUtc).HasColumnType("datetime");
            entity.Property(e => e.LastWriteTimeUtc).HasColumnType("datetime");

            entity.HasOne(d => d.Gu).WithMany(p => p.PlugInFiles)
                .HasForeignKey(d => d.Guid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PlugInFiles_Guid");
        });

        modelBuilder.Entity<Po>(entity =>
        {
            entity.HasKey(e => e.DocKey).HasName("PK_PO_DocKey");

            entity.ToTable("PO", tb => tb.HasTrigger("UpdatePOChangeCount"));

            entity.HasIndex(e => e.DocNo, "IX_PO_DocNo").IsUnique();

            entity.HasIndex(e => new { e.DocStatus, e.ExpiryTimeStamp }, "IX_PO_DocStatus_ExpiryTimeStamp");

            entity.Property(e => e.DocKey).ValueGeneratedNever();
            entity.Property(e => e.AnalysisNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Attention).HasMaxLength(40);
            entity.Property(e => e.BranchCode).HasMaxLength(20);
            entity.Property(e => e.CalcDiscountOnUnitPrice)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CanSync)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CanTransferByValue)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.CreditorCode).HasMaxLength(12);
            entity.Property(e => e.CreditorName).HasMaxLength(100);
            entity.Property(e => e.CurrencyCode).HasMaxLength(5);
            entity.Property(e => e.CurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.DeliverAddr1).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr2).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr3).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr4).HasMaxLength(40);
            entity.Property(e => e.DeliverContact).HasMaxLength(40);
            entity.Property(e => e.DeliverFax1).HasMaxLength(25);
            entity.Property(e => e.DeliverPhone1).HasMaxLength(25);
            entity.Property(e => e.Description).HasMaxLength(80);
            entity.Property(e => e.DisplayTerm).HasMaxLength(30);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.DocStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ExpiryTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.Fax1).HasMaxLength(25);
            entity.Property(e => e.FinalTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer1TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Footer2Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer2TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Footer3Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer3TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.FullTransferOption)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Guid).HasDefaultValueSql("(newid())");
            entity.Property(e => e.InclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("F")
                .IsFixedLength();
            entity.Property(e => e.InvAddr1).HasMaxLength(40);
            entity.Property(e => e.InvAddr2).HasMaxLength(40);
            entity.Property(e => e.InvAddr3).HasMaxLength(40);
            entity.Property(e => e.InvAddr4).HasMaxLength(40);
            entity.Property(e => e.IsRoundAdj)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("F")
                .IsFixedLength();
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.LocalAnalysisNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.NetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Phone1).HasMaxLength(25);
            entity.Property(e => e.PurchaseAgent).HasMaxLength(12);
            entity.Property(e => e.PurchaseLocation).HasMaxLength(8);
            entity.Property(e => e.Ref).HasMaxLength(40);
            entity.Property(e => e.RefDocNo).HasMaxLength(30);
            entity.Property(e => e.Remark1).HasMaxLength(40);
            entity.Property(e => e.Remark2).HasMaxLength(40);
            entity.Property(e => e.Remark3).HasMaxLength(40);
            entity.Property(e => e.Remark4).HasMaxLength(40);
            entity.Property(e => e.RoundAdj).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SgeinvoiceAipsubmissionDateTime)
                .HasColumnType("datetime")
                .HasColumnName("SGEInvoiceAIPSubmissionDateTime");
            entity.Property(e => e.SgeinvoiceError).HasColumnName("SGEInvoiceError");
            entity.Property(e => e.SgeinvoicePeppolError).HasColumnName("SGEInvoicePeppolError");
            entity.Property(e => e.SgeinvoicePeppolInstanceId)
                .HasMaxLength(100)
                .HasColumnName("SGEInvoicePeppolInstanceId");
            entity.Property(e => e.SgeinvoicePeppolSubmissionStatus)
                .HasMaxLength(100)
                .HasColumnName("SGEInvoicePeppolSubmissionStatus");
            entity.Property(e => e.SgeinvoiceSubmissionUuid)
                .HasMaxLength(100)
                .HasColumnName("SGEInvoiceSubmissionUUID");
            entity.Property(e => e.SgeinvoiceTraceId)
                .HasMaxLength(100)
                .HasColumnName("SGEInvoiceTraceId");
            entity.Property(e => e.ShipInfo).HasMaxLength(40);
            entity.Property(e => e.ShipVia).HasMaxLength(20);
            entity.Property(e => e.SubmitInvoiceNow)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxEntityId).HasColumnName("TaxEntityID");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ToDocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.ToTaxCurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.Total).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Transferable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TransferedAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.UdfSuperAppId)
                .HasMaxLength(32)
                .HasColumnName("UDF_SuperAppId");

            entity.HasOne(d => d.CreatedUser).WithMany(p => p.PoCreatedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.CreatedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PO_CreatedUserID");

            entity.HasOne(d => d.CreditorCodeNavigation).WithMany(p => p.Pos)
                .HasForeignKey(d => d.CreditorCode)
                .HasConstraintName("FK_PO_CreditorCode");

            entity.HasOne(d => d.CurrencyCodeNavigation).WithMany(p => p.Pos)
                .HasForeignKey(d => d.CurrencyCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PO_CurrencyCode");

            entity.HasOne(d => d.DisplayTermNavigation).WithMany(p => p.Pos)
                .HasPrincipalKey(p => p.DisplayTerm)
                .HasForeignKey(d => d.DisplayTerm)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PO_DisplayTerm");

            entity.HasOne(d => d.Footer1TaxCodeNavigation).WithMany(p => p.PoFooter1TaxCodeNavigations)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.Footer1TaxCode)
                .HasConstraintName("FK_PO_Footer1TaxCode");

            entity.HasOne(d => d.Footer2TaxCodeNavigation).WithMany(p => p.PoFooter2TaxCodeNavigations)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.Footer2TaxCode)
                .HasConstraintName("FK_PO_Footer2TaxCode");

            entity.HasOne(d => d.Footer3TaxCodeNavigation).WithMany(p => p.PoFooter3TaxCodeNavigations)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.Footer3TaxCode)
                .HasConstraintName("FK_PO_Footer3TaxCode");

            entity.HasOne(d => d.LastModifiedUser).WithMany(p => p.PoLastModifiedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.LastModifiedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PO_LastModifiedUserID");

            entity.HasOne(d => d.PurchaseAgentNavigation).WithMany(p => p.Pos)
                .HasPrincipalKey(p => p.PurchaseAgent1)
                .HasForeignKey(d => d.PurchaseAgent)
                .HasConstraintName("FK_PO_PurchaseAgent");

            entity.HasOne(d => d.PurchaseLocationNavigation).WithMany(p => p.Pos)
                .HasPrincipalKey(p => p.Location1)
                .HasForeignKey(d => d.PurchaseLocation)
                .HasConstraintName("FK_PO_PurchaseLocation");

            entity.HasOne(d => d.ShipViaNavigation).WithMany(p => p.Pos)
                .HasPrincipalKey(p => p.ShippingMethod1)
                .HasForeignKey(d => d.ShipVia)
                .HasConstraintName("FK_PO_ShipVia");

            entity.HasOne(d => d.TaxEntity).WithMany(p => p.Pos)
                .HasForeignKey(d => d.TaxEntityId)
                .HasConstraintName("FK_PO_TaxEntityID");

            entity.HasOne(d => d.Branch).WithMany(p => p.Pos)
                .HasPrincipalKey(p => new { p.AccNo, p.BranchCode })
                .HasForeignKey(d => new { d.CreditorCode, d.BranchCode })
                .HasConstraintName("FK_PO_BranchCode");
        });

        modelBuilder.Entity<PocketSyncProfile>(entity =>
        {
            entity.HasKey(e => e.ProfileKey).HasName("PK_PocketSyncProfile_ProfileKey");

            entity.ToTable("PocketSyncProfile");

            entity.HasIndex(e => e.ProfileName, "IX_PocketSyncProfile_ProfileName").IsUnique();

            entity.Property(e => e.ProfileKey).ValueGeneratedNever();
            entity.Property(e => e.DeviceId)
                .HasMaxLength(40)
                .HasColumnName("DeviceID");
            entity.Property(e => e.Email).HasMaxLength(80);
            entity.Property(e => e.FolderName).HasMaxLength(200);
            entity.Property(e => e.LastDate).HasColumnType("datetime");
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.LastSynchronized).HasColumnType("datetime");
            entity.Property(e => e.ProfileName).HasMaxLength(60);
            entity.Property(e => e.SyncId)
                .HasMaxLength(10)
                .HasColumnName("SyncID");

            entity.HasOne(d => d.LastModifiedUser).WithMany(p => p.PocketSyncProfiles)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.LastModifiedUserId)
                .HasConstraintName("FK_PocketSyncProfile_LastModifiedUserID");
        });

        modelBuilder.Entity<Podtl>(entity =>
        {
            entity.HasKey(e => e.DtlKey).HasName("PK_PODTL_DtlKey");

            entity.ToTable("PODTL");

            entity.HasIndex(e => e.DocKey, "IX_PODTL_DocKey");

            entity.HasIndex(e => e.FromDocDtlKey, "IX_PODTL_FromDocDtlKey");

            entity.HasIndex(e => new { e.ItemCode, e.Uom }, "IX_PODTL_ItemCode_UOM");

            entity.Property(e => e.DtlKey).ValueGeneratedNever();
            entity.Property(e => e.AddToSubTotal)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.CalcByPercent).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.DeliveryDate).HasColumnType("datetime");
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Desc2).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.Discount).HasMaxLength(20);
            entity.Property(e => e.DiscountAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DtlType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EstimatedDeliveryDate).HasMaxLength(20);
            entity.Property(e => e.ExtraDiscountAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Focqty)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("FOCQty");
            entity.Property(e => e.FoctransferedQty)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("FOCTransferedQty");
            entity.Property(e => e.FontStyle).HasMaxLength(8);
            entity.Property(e => e.FromAodtlKey).HasColumnName("FromAODtlKey");
            entity.Property(e => e.FromDocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.FromSodocList).HasColumnName("FromSODocList");
            entity.Property(e => e.FromSodtlKey).HasColumnName("FromSODtlKey");
            entity.Property(e => e.FullTransferOption)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Guid).HasDefaultValueSql("(newid())");
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.LocalSubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalSubTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxAdjustment).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.MainItem)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Numbering).HasMaxLength(6);
            entity.Property(e => e.PrintOut)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SalesExemptionNo).HasMaxLength(60);
            entity.Property(e => e.SmallestQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SmallestUnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SubTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxAdjustment).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCode).HasMaxLength(14);
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Transferable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TransferedQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
            entity.Property(e => e.UserUom)
                .HasMaxLength(8)
                .HasColumnName("UserUOM");

            entity.HasOne(d => d.DeptNoNavigation).WithMany(p => p.Podtls)
                .HasForeignKey(d => d.DeptNo)
                .HasConstraintName("FK_PODTL_DeptNo");

            entity.HasOne(d => d.FontStyleNavigation).WithMany(p => p.Podtls)
                .HasPrincipalKey(p => p.FontStyle1)
                .HasForeignKey(d => d.FontStyle)
                .HasConstraintName("FK_PODTL_FontStyle");

            entity.HasOne(d => d.LocationNavigation).WithMany(p => p.Podtls)
                .HasPrincipalKey(p => p.Location1)
                .HasForeignKey(d => d.Location)
                .HasConstraintName("FK_PODTL_Location");

            entity.HasOne(d => d.ProjNoNavigation).WithMany(p => p.Podtls)
                .HasForeignKey(d => d.ProjNo)
                .HasConstraintName("FK_PODTL_ProjNo");

            entity.HasOne(d => d.TaxCodeNavigation).WithMany(p => p.Podtls)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.TaxCode)
                .HasConstraintName("FK_PODTL_TaxCode");

            entity.HasOne(d => d.ItemUom).WithMany(p => p.Podtls)
                .HasPrincipalKey(p => new { p.ItemCode, p.Uom })
                .HasForeignKey(d => new { d.ItemCode, d.Uom })
                .HasConstraintName("FK_PODTL_ItemUOM");
        });

        modelBuilder.Entity<PointTran>(entity =>
        {
            entity.HasKey(e => e.PointTransKey).HasName("PK_PointTrans_PointTransKey");

            entity.HasIndex(e => e.SourceGuid, "IX_PointTrans_SourceGuid");

            entity.HasIndex(e => e.Guid, "UIX_PointTrans_Guid").IsUnique();

            entity.Property(e => e.PointTransKey).ValueGeneratedNever();
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.MemberNo).HasMaxLength(20);
            entity.Property(e => e.PointType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Points).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SourceType)
                .HasMaxLength(2)
                .IsUnicode(false);

            entity.HasOne(d => d.MemberNoNavigation).WithMany(p => p.PointTrans)
                .HasPrincipalKey(p => p.MemberNo)
                .HasForeignKey(d => d.MemberNo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PointTrans_MemberNo");
        });

        modelBuilder.Entity<PostingAccountGroup>(entity =>
        {
            entity.HasKey(e => e.AutoKey).HasName("PK_PostingAccountGroup_AutoKey");

            entity.ToTable("PostingAccountGroup", tb => tb.HasTrigger("UpdatePostingAccountGroupChangeCount"));

            entity.HasIndex(e => e.AccountGroup, "UIX_PostingAccountGroup_AccountGroup").IsUnique();

            entity.Property(e => e.AccountGroup).HasMaxLength(12);
            entity.Property(e => e.CashPurchaseCode).HasMaxLength(12);
            entity.Property(e => e.CashSalesCode).HasMaxLength(12);
            entity.Property(e => e.Desc2).HasMaxLength(40);
            entity.Property(e => e.Description).HasMaxLength(40);
            entity.Property(e => e.PurchaseCode).HasMaxLength(12);
            entity.Property(e => e.PurchaseDiscountCode).HasMaxLength(12);
            entity.Property(e => e.PurchaseReturnCode).HasMaxLength(12);
            entity.Property(e => e.SalesCode).HasMaxLength(12);
            entity.Property(e => e.SalesDiscountCode).HasMaxLength(12);
            entity.Property(e => e.SalesReturnCode).HasMaxLength(12);

            entity.HasOne(d => d.CashPurchaseCodeNavigation).WithMany(p => p.PostingAccountGroupCashPurchaseCodeNavigations)
                .HasForeignKey(d => d.CashPurchaseCode)
                .HasConstraintName("FK_PostingAccountGroup_CashPurchaseCode");

            entity.HasOne(d => d.CashSalesCodeNavigation).WithMany(p => p.PostingAccountGroupCashSalesCodeNavigations)
                .HasForeignKey(d => d.CashSalesCode)
                .HasConstraintName("FK_PostingAccountGroup_CashSalesCode");

            entity.HasOne(d => d.PurchaseCodeNavigation).WithMany(p => p.PostingAccountGroupPurchaseCodeNavigations)
                .HasForeignKey(d => d.PurchaseCode)
                .HasConstraintName("FK_PostingAccountGroup_PurchaseCode");

            entity.HasOne(d => d.PurchaseDiscountCodeNavigation).WithMany(p => p.PostingAccountGroupPurchaseDiscountCodeNavigations)
                .HasForeignKey(d => d.PurchaseDiscountCode)
                .HasConstraintName("FK_PostingAccountGroup_PurchaseDiscountCode");

            entity.HasOne(d => d.PurchaseReturnCodeNavigation).WithMany(p => p.PostingAccountGroupPurchaseReturnCodeNavigations)
                .HasForeignKey(d => d.PurchaseReturnCode)
                .HasConstraintName("FK_PostingAccountGroup_PurchaseReturnCode");

            entity.HasOne(d => d.SalesCodeNavigation).WithMany(p => p.PostingAccountGroupSalesCodeNavigations)
                .HasForeignKey(d => d.SalesCode)
                .HasConstraintName("FK_PostingAccountGroup_SalesCode");

            entity.HasOne(d => d.SalesDiscountCodeNavigation).WithMany(p => p.PostingAccountGroupSalesDiscountCodeNavigations)
                .HasForeignKey(d => d.SalesDiscountCode)
                .HasConstraintName("FK_PostingAccountGroup_SalesDiscountCode");

            entity.HasOne(d => d.SalesReturnCodeNavigation).WithMany(p => p.PostingAccountGroupSalesReturnCodeNavigations)
                .HasForeignKey(d => d.SalesReturnCode)
                .HasConstraintName("FK_PostingAccountGroup_SalesReturnCode");
        });

        modelBuilder.Entity<Pq>(entity =>
        {
            entity.HasKey(e => e.DocKey).HasName("PK_PQ_DocKey");

            entity.ToTable("PQ", tb => tb.HasTrigger("UpdatePQChangeCount"));

            entity.HasIndex(e => e.DocNo, "IX_PQ_DocNo").IsUnique();

            entity.HasIndex(e => new { e.DocStatus, e.ExpiryTimeStamp }, "IX_PQ_DocStatus_ExpiryTimeStamp");

            entity.Property(e => e.DocKey).ValueGeneratedNever();
            entity.Property(e => e.ApprovalUserId)
                .HasMaxLength(10)
                .HasColumnName("ApprovalUserID");
            entity.Property(e => e.CanSync)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.Description).HasMaxLength(80);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.DocStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ExpiryTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.PurchaseLocation).HasMaxLength(8);
            entity.Property(e => e.Ref).HasMaxLength(40);
            entity.Property(e => e.RefDocNo).HasMaxLength(30);
            entity.Property(e => e.Remark1).HasMaxLength(40);
            entity.Property(e => e.Remark2).HasMaxLength(40);
            entity.Property(e => e.Remark3).HasMaxLength(40);
            entity.Property(e => e.Remark4).HasMaxLength(40);
            entity.Property(e => e.RequestedBy).HasMaxLength(40);
            entity.Property(e => e.Transferable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("T")
                .IsFixedLength();
            entity.Property(e => e.UdfSuperAppId)
                .HasMaxLength(32)
                .HasColumnName("UDF_SuperAppId");

            entity.HasOne(d => d.ApprovalUser).WithMany(p => p.PqApprovalUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.ApprovalUserId)
                .HasConstraintName("FK_PQ_ApprovalUserID");

            entity.HasOne(d => d.CreatedUser).WithMany(p => p.PqCreatedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.CreatedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PQ_CreatedUserID");

            entity.HasOne(d => d.LastModifiedUser).WithMany(p => p.PqLastModifiedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.LastModifiedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PQ_LastModifiedUserID");

            entity.HasOne(d => d.PurchaseLocationNavigation).WithMany(p => p.Pqs)
                .HasPrincipalKey(p => p.Location1)
                .HasForeignKey(d => d.PurchaseLocation)
                .HasConstraintName("FK_PQ_PurchaseLocation");
        });

        modelBuilder.Entity<Pqdtl>(entity =>
        {
            entity.HasKey(e => e.DtlKey);

            entity.ToTable("PQDTL");

            entity.Property(e => e.DtlKey).ValueGeneratedNever();
            entity.Property(e => e.CreditorCode).HasMaxLength(12);
            entity.Property(e => e.CreditorName).HasMaxLength(100);
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Desc2).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.DtlType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FontStyle).HasMaxLength(8);
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.MainItem)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Numbering).HasMaxLength(6);
            entity.Property(e => e.PrintOut)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.RequiredDate).HasColumnType("datetime");
            entity.Property(e => e.SmallestQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Transferable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TransferedQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
            entity.Property(e => e.UserUom)
                .HasMaxLength(8)
                .HasColumnName("UserUOM");

            entity.HasOne(d => d.CreditorCodeNavigation).WithMany(p => p.Pqdtls)
                .HasForeignKey(d => d.CreditorCode)
                .HasConstraintName("FK_PQDTL_CreditorCode");

            entity.HasOne(d => d.DeptNoNavigation).WithMany(p => p.Pqdtls)
                .HasForeignKey(d => d.DeptNo)
                .HasConstraintName("FK_PQDTL_DeptNo");

            entity.HasOne(d => d.LocationNavigation).WithMany(p => p.Pqdtls)
                .HasPrincipalKey(p => p.Location1)
                .HasForeignKey(d => d.Location)
                .HasConstraintName("FK_PQDTL_Location");

            entity.HasOne(d => d.ProjNoNavigation).WithMany(p => p.Pqdtls)
                .HasForeignKey(d => d.ProjNo)
                .HasConstraintName("FK_PQDTL_ProjNo");

            entity.HasOne(d => d.ItemUom).WithMany(p => p.Pqdtls)
                .HasPrincipalKey(p => new { p.ItemCode, p.Uom })
                .HasForeignKey(d => new { d.ItemCode, d.Uom })
                .HasConstraintName("FK_PQDTL_ItemUOM");
        });

        modelBuilder.Entity<Pr>(entity =>
        {
            entity.HasKey(e => e.DocKey).HasName("PK_PR_DocKey");

            entity.ToTable("PR", tb => tb.HasTrigger("UpdatePRChangeCount"));

            entity.HasIndex(e => e.DocNo, "IX_PR_DocNo").IsUnique();

            entity.HasIndex(e => new { e.DocStatus, e.ExpiryTimeStamp }, "IX_PR_DocStatus_ExpiryTimeStamp");

            entity.Property(e => e.DocKey).ValueGeneratedNever();
            entity.Property(e => e.AnalysisNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Attention).HasMaxLength(40);
            entity.Property(e => e.BranchCode).HasMaxLength(20);
            entity.Property(e => e.CalcDiscountOnUnitPrice)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CanSync)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.CreditorCode).HasMaxLength(12);
            entity.Property(e => e.CreditorName).HasMaxLength(100);
            entity.Property(e => e.CurrencyCode).HasMaxLength(5);
            entity.Property(e => e.CurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.Description).HasMaxLength(80);
            entity.Property(e => e.DisplayTerm).HasMaxLength(30);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocDate2).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.DocStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EinvoiceSelfBilledDocNo)
                .HasMaxLength(30)
                .HasColumnName("EInvoiceSelfBilledDocNo");
            entity.Property(e => e.EinvoiceStatus)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceStatus");
            entity.Property(e => e.EinvoiceSubmitDocType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("EInvoiceSubmitDocType");
            entity.Property(e => e.EinvoiceUuid)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceUuid");
            entity.Property(e => e.EinvoiceValidatedDateTime)
                .HasColumnType("datetime")
                .HasColumnName("EInvoiceValidatedDateTime");
            entity.Property(e => e.EinvoiceValidationLink)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("EInvoiceValidationLink");
            entity.Property(e => e.ExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ExpiryTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.Fax1).HasMaxLength(25);
            entity.Property(e => e.FinalTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer1TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Footer2Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer2TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Footer3Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer3TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Guid).HasDefaultValueSql("(newid())");
            entity.Property(e => e.InclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("F")
                .IsFixedLength();
            entity.Property(e => e.InvAddr1).HasMaxLength(40);
            entity.Property(e => e.InvAddr2).HasMaxLength(40);
            entity.Property(e => e.InvAddr3).HasMaxLength(40);
            entity.Property(e => e.InvAddr4).HasMaxLength(40);
            entity.Property(e => e.IsRoundAdj)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("F")
                .IsFixedLength();
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.LocalAnalysisNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalWithholdingTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalWithholdingVat)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("LocalWithholdingVAT");
            entity.Property(e => e.NetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Phone1).HasMaxLength(25);
            entity.Property(e => e.PostToGl)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PostToGL");
            entity.Property(e => e.PostToStock)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PurchaseAgent).HasMaxLength(12);
            entity.Property(e => e.PurchaseLocation).HasMaxLength(8);
            entity.Property(e => e.Reason).HasMaxLength(80);
            entity.Property(e => e.Ref).HasMaxLength(40);
            entity.Property(e => e.RefDocNo).HasMaxLength(30);
            entity.Property(e => e.RefNo2).HasMaxLength(30);
            entity.Property(e => e.Remark1).HasMaxLength(40);
            entity.Property(e => e.Remark2).HasMaxLength(40);
            entity.Property(e => e.Remark3).HasMaxLength(40);
            entity.Property(e => e.Remark4).HasMaxLength(40);
            entity.Property(e => e.RoundAdj).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SgeinvoiceAipsubmissionDateTime)
                .HasColumnType("datetime")
                .HasColumnName("SGEInvoiceAIPSubmissionDateTime");
            entity.Property(e => e.SgeinvoiceAtdocKey).HasColumnName("SGEInvoiceATDocKey");
            entity.Property(e => e.SgeinvoiceAtdocNo)
                .HasMaxLength(100)
                .HasColumnName("SGEInvoiceATDocNo");
            entity.Property(e => e.SgeinvoiceDocumentUuid)
                .HasMaxLength(100)
                .HasColumnName("SGEInvoiceDocumentUUID");
            entity.Property(e => e.SgeinvoiceError).HasColumnName("SGEInvoiceError");
            entity.Property(e => e.SgeinvoiceIraserror).HasColumnName("SGEInvoiceIRASError");
            entity.Property(e => e.SgeinvoiceIrassubmissionStatus)
                .HasMaxLength(100)
                .HasColumnName("SGEInvoiceIRASSubmissionStatus");
            entity.Property(e => e.SgeinvoiceIrastransmissionId)
                .HasMaxLength(100)
                .HasColumnName("SGEInvoiceIRASTransmissionId");
            entity.Property(e => e.SgeinvoiceSubmissionUuid)
                .HasMaxLength(100)
                .HasColumnName("SGEInvoiceSubmissionUUID");
            entity.Property(e => e.SgeinvoiceTraceId)
                .HasMaxLength(100)
                .HasColumnName("SGEInvoiceTraceId");
            entity.Property(e => e.SubmitInvoiceNow)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SupplierCnno)
                .HasMaxLength(30)
                .HasColumnName("SupplierCNNo");
            entity.Property(e => e.SupplierInvoiceNo).HasMaxLength(100);
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyWithholdingTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyWithholdingVat)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("TaxCurrencyWithholdingVAT");
            entity.Property(e => e.TaxDate).HasColumnType("datetime");
            entity.Property(e => e.TaxDocNo).HasMaxLength(20);
            entity.Property(e => e.TaxEntityId).HasColumnName("TaxEntityID");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ToTaxCurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.Total).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.UdfSuperAppId)
                .HasMaxLength(32)
                .HasColumnName("UDF_SuperAppId");
            entity.Property(e => e.WithholdingTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.WithholdingVat)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("WithholdingVAT");

            entity.HasOne(d => d.CreatedUser).WithMany(p => p.PrCreatedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.CreatedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PR_CreatedUserID");

            entity.HasOne(d => d.CreditorCodeNavigation).WithMany(p => p.Prs)
                .HasForeignKey(d => d.CreditorCode)
                .HasConstraintName("FK_PR_CreditorCode");

            entity.HasOne(d => d.CurrencyCodeNavigation).WithMany(p => p.Prs)
                .HasForeignKey(d => d.CurrencyCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PR_CurrencyCode");

            entity.HasOne(d => d.DisplayTermNavigation).WithMany(p => p.Prs)
                .HasPrincipalKey(p => p.DisplayTerm)
                .HasForeignKey(d => d.DisplayTerm)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PR_DisplayTerm");

            entity.HasOne(d => d.Footer1TaxCodeNavigation).WithMany(p => p.PrFooter1TaxCodeNavigations)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.Footer1TaxCode)
                .HasConstraintName("FK_PR_Footer1TaxCode");

            entity.HasOne(d => d.Footer2TaxCodeNavigation).WithMany(p => p.PrFooter2TaxCodeNavigations)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.Footer2TaxCode)
                .HasConstraintName("FK_PR_Footer2TaxCode");

            entity.HasOne(d => d.Footer3TaxCodeNavigation).WithMany(p => p.PrFooter3TaxCodeNavigations)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.Footer3TaxCode)
                .HasConstraintName("FK_PR_Footer3TaxCode");

            entity.HasOne(d => d.LastModifiedUser).WithMany(p => p.PrLastModifiedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.LastModifiedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PR_LastModifiedUserID");

            entity.HasOne(d => d.PurchaseAgentNavigation).WithMany(p => p.Prs)
                .HasPrincipalKey(p => p.PurchaseAgent1)
                .HasForeignKey(d => d.PurchaseAgent)
                .HasConstraintName("FK_PR_PurchaseAgent");

            entity.HasOne(d => d.PurchaseLocationNavigation).WithMany(p => p.Prs)
                .HasPrincipalKey(p => p.Location1)
                .HasForeignKey(d => d.PurchaseLocation)
                .HasConstraintName("FK_PR_PurchaseLocation");

            entity.HasOne(d => d.TaxEntity).WithMany(p => p.Prs)
                .HasForeignKey(d => d.TaxEntityId)
                .HasConstraintName("FK_PR_TaxEntityID");

            entity.HasOne(d => d.Branch).WithMany(p => p.Prs)
                .HasPrincipalKey(p => new { p.AccNo, p.BranchCode })
                .HasForeignKey(d => new { d.CreditorCode, d.BranchCode })
                .HasConstraintName("FK_PR_BranchCode");
        });

        modelBuilder.Entity<Prdtl>(entity =>
        {
            entity.HasKey(e => e.DtlKey).HasName("PK_PRDTL_DtlKey");

            entity.ToTable("PRDTL");

            entity.HasIndex(e => e.DocKey, "IX_PRDTL_DocKey");

            entity.HasIndex(e => e.FromDocDtlKey, "IX_PRDTL_FromDocDtlKey");

            entity.HasIndex(e => new { e.ItemCode, e.Uom }, "IX_PRDTL_ItemCode_UOM");

            entity.Property(e => e.DtlKey).ValueGeneratedNever();
            entity.Property(e => e.AccNo).HasMaxLength(12);
            entity.Property(e => e.AddToSubTotal)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.CalcByPercent).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Desc2).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.Discount).HasMaxLength(20);
            entity.Property(e => e.DiscountAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DtlType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ExtraDiscountAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.FocdtlKey).HasColumnName("FOCDtlKey");
            entity.Property(e => e.Focqty)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("FOCQty");
            entity.Property(e => e.FontStyle).HasMaxLength(8);
            entity.Property(e => e.FromDocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.FullTransferOption)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.GoodsReturn)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Guid).HasDefaultValueSql("(newid())");
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.LocalSubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalSubTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxAdjustment).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.MainItem)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Numbering).HasMaxLength(6);
            entity.Property(e => e.OurPodate)
                .HasColumnType("datetime")
                .HasColumnName("OurPODate");
            entity.Property(e => e.OurPono)
                .HasMaxLength(30)
                .HasColumnName("OurPONo");
            entity.Property(e => e.PostToStockDate).HasColumnType("datetime");
            entity.Property(e => e.PrintOut)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SalesExemptionNo).HasMaxLength(60);
            entity.Property(e => e.SmallestQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SmallestUnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SubTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SupplyPurchase)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TariffCode).HasMaxLength(12);
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxAdjustment).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCode).HasMaxLength(14);
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxPermitNo).HasMaxLength(20);
            entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
            entity.Property(e => e.UserUom)
                .HasMaxLength(8)
                .HasColumnName("UserUOM");
            entity.Property(e => e.YourDodate)
                .HasColumnType("datetime")
                .HasColumnName("YourDODate");
            entity.Property(e => e.YourDono)
                .HasMaxLength(30)
                .HasColumnName("YourDONo");

            entity.HasOne(d => d.AccNoNavigation).WithMany(p => p.Prdtls)
                .HasForeignKey(d => d.AccNo)
                .HasConstraintName("FK_PRDTL_AccNo");

            entity.HasOne(d => d.DeptNoNavigation).WithMany(p => p.Prdtls)
                .HasForeignKey(d => d.DeptNo)
                .HasConstraintName("FK_PRDTL_DeptNo");

            entity.HasOne(d => d.FontStyleNavigation).WithMany(p => p.Prdtls)
                .HasPrincipalKey(p => p.FontStyle1)
                .HasForeignKey(d => d.FontStyle)
                .HasConstraintName("FK_PRDTL_FontStyle");

            entity.HasOne(d => d.LocationNavigation).WithMany(p => p.Prdtls)
                .HasPrincipalKey(p => p.Location1)
                .HasForeignKey(d => d.Location)
                .HasConstraintName("FK_PRDTL_Location");

            entity.HasOne(d => d.ProjNoNavigation).WithMany(p => p.Prdtls)
                .HasForeignKey(d => d.ProjNo)
                .HasConstraintName("FK_PRDTL_ProjNo");

            entity.HasOne(d => d.TariffCodeNavigation).WithMany(p => p.Prdtls)
                .HasPrincipalKey(p => p.TariffCode)
                .HasForeignKey(d => d.TariffCode)
                .HasConstraintName("FK_PRDTL_TariffCode");

            entity.HasOne(d => d.TaxCodeNavigation).WithMany(p => p.Prdtls)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.TaxCode)
                .HasConstraintName("FK_PRDTL_TaxCode");

            entity.HasOne(d => d.ItemBatch).WithMany(p => p.Prdtls)
                .HasPrincipalKey(p => new { p.ItemCode, p.BatchNo })
                .HasForeignKey(d => new { d.ItemCode, d.BatchNo })
                .HasConstraintName("FK_PRDTL_ItemBatch");

            entity.HasOne(d => d.ItemUom).WithMany(p => p.Prdtls)
                .HasPrincipalKey(p => new { p.ItemCode, p.Uom })
                .HasForeignKey(d => new { d.ItemCode, d.Uom })
                .HasConstraintName("FK_PRDTL_ItemUOM");
        });

        modelBuilder.Entity<PriceBookMatrix>(entity =>
        {
            entity.HasKey(e => e.MatrixKey).HasName("PK_PriceBookMatrix_MatrixKey");

            entity.ToTable("PriceBookMatrix");

            entity.Property(e => e.MatrixKey).ValueGeneratedNever();
            entity.Property(e => e.Discount)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FromDate).HasColumnType("datetime");
            entity.Property(e => e.Geqty)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("GEQty");
            entity.Property(e => e.IsActive)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.MatrixName).HasMaxLength(20);
            entity.Property(e => e.Priority).HasDefaultValue((short)0);
            entity.Property(e => e.ToDate).HasColumnType("datetime");
            entity.Property(e => e.UnitPrice)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.X).HasMaxLength(20);
            entity.Property(e => e.Xcriteria).HasColumnName("XCriteria");
            entity.Property(e => e.Y).HasMaxLength(20);
            entity.Property(e => e.Ycriteria).HasColumnName("YCriteria");
        });

        modelBuilder.Entity<PriceBookRule>(entity =>
        {
            entity.HasKey(e => e.RuleNo).HasName("PK_PriceBookRule_RuleNo");

            entity.ToTable("PriceBookRule");

            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.CurrencyCode).HasMaxLength(5);
            entity.Property(e => e.Discount).HasMaxLength(20);
            entity.Property(e => e.DisplayTerm).HasMaxLength(30);
            entity.Property(e => e.FromAreaCode).HasMaxLength(12);
            entity.Property(e => e.FromDate).HasColumnType("datetime");
            entity.Property(e => e.FromDebtorCode).HasMaxLength(12);
            entity.Property(e => e.FromDebtorType).HasMaxLength(20);
            entity.Property(e => e.FromDeptNo).HasMaxLength(10);
            entity.Property(e => e.FromItemBrand).HasMaxLength(20);
            entity.Property(e => e.FromItemCategory).HasMaxLength(20);
            entity.Property(e => e.FromItemClass).HasMaxLength(20);
            entity.Property(e => e.FromItemCode).HasMaxLength(30);
            entity.Property(e => e.FromItemGroup).HasMaxLength(8);
            entity.Property(e => e.FromItemType).HasMaxLength(12);
            entity.Property(e => e.FromLocation).HasMaxLength(8);
            entity.Property(e => e.FromPriceCategory).HasMaxLength(12);
            entity.Property(e => e.FromProjNo).HasMaxLength(10);
            entity.Property(e => e.FromSalesAgent).HasMaxLength(12);
            entity.Property(e => e.Geqty)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("GEQty");
            entity.Property(e => e.IsActive)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Priority).HasDefaultValue((short)0);
            entity.Property(e => e.ToAreaCode).HasMaxLength(12);
            entity.Property(e => e.ToDate).HasColumnType("datetime");
            entity.Property(e => e.ToDebtorCode).HasMaxLength(12);
            entity.Property(e => e.ToDebtorType).HasMaxLength(20);
            entity.Property(e => e.ToDeptNo).HasMaxLength(10);
            entity.Property(e => e.ToItemBrand).HasMaxLength(20);
            entity.Property(e => e.ToItemCategory).HasMaxLength(20);
            entity.Property(e => e.ToItemClass).HasMaxLength(20);
            entity.Property(e => e.ToItemCode).HasMaxLength(30);
            entity.Property(e => e.ToItemGroup).HasMaxLength(8);
            entity.Property(e => e.ToItemType).HasMaxLength(12);
            entity.Property(e => e.ToLocation).HasMaxLength(8);
            entity.Property(e => e.ToPriceCategory).HasMaxLength(12);
            entity.Property(e => e.ToProjNo).HasMaxLength(10);
            entity.Property(e => e.ToSalesAgent).HasMaxLength(12);
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");

            entity.HasOne(d => d.CurrencyCodeNavigation).WithMany(p => p.PriceBookRules)
                .HasForeignKey(d => d.CurrencyCode)
                .HasConstraintName("FK_PriceBookRule_CurrencyCode");

            entity.HasOne(d => d.DisplayTermNavigation).WithMany(p => p.PriceBookRules)
                .HasPrincipalKey(p => p.DisplayTerm)
                .HasForeignKey(d => d.DisplayTerm)
                .HasConstraintName("FK_PriceBookRule_DisplayTerm");

            entity.HasOne(d => d.FromAreaCodeNavigation).WithMany(p => p.PriceBookRuleFromAreaCodeNavigations)
                .HasPrincipalKey(p => p.AreaCode)
                .HasForeignKey(d => d.FromAreaCode)
                .HasConstraintName("FK_PriceBookRule_FromAreaCode");

            entity.HasOne(d => d.FromDebtorCodeNavigation).WithMany(p => p.PriceBookRuleFromDebtorCodeNavigations)
                .HasPrincipalKey(p => p.AccNo)
                .HasForeignKey(d => d.FromDebtorCode)
                .HasConstraintName("FK_PriceBookRule_FromDebtorCode");

            entity.HasOne(d => d.FromDebtorTypeNavigation).WithMany(p => p.PriceBookRuleFromDebtorTypeNavigations)
                .HasPrincipalKey(p => p.DebtorType1)
                .HasForeignKey(d => d.FromDebtorType)
                .HasConstraintName("FK_PriceBookRule_FromDebtorType");

            entity.HasOne(d => d.FromDeptNoNavigation).WithMany(p => p.PriceBookRuleFromDeptNoNavigations)
                .HasForeignKey(d => d.FromDeptNo)
                .HasConstraintName("FK_PriceBookRule_FromDeptNo");

            entity.HasOne(d => d.FromItemBrandNavigation).WithMany(p => p.PriceBookRuleFromItemBrandNavigations)
                .HasPrincipalKey(p => p.ItemBrand1)
                .HasForeignKey(d => d.FromItemBrand)
                .HasConstraintName("FK_PriceBookRule_FromItemBrand");

            entity.HasOne(d => d.FromItemCategoryNavigation).WithMany(p => p.PriceBookRuleFromItemCategoryNavigations)
                .HasPrincipalKey(p => p.ItemCategory1)
                .HasForeignKey(d => d.FromItemCategory)
                .HasConstraintName("FK_PriceBookRule_FromItemCategory");

            entity.HasOne(d => d.FromItemClassNavigation).WithMany(p => p.PriceBookRuleFromItemClassNavigations)
                .HasPrincipalKey(p => p.ItemClass1)
                .HasForeignKey(d => d.FromItemClass)
                .HasConstraintName("FK_PriceBookRule_FromItemClass");

            entity.HasOne(d => d.FromItemCodeNavigation).WithMany(p => p.PriceBookRuleFromItemCodeNavigations)
                .HasPrincipalKey(p => p.ItemCode)
                .HasForeignKey(d => d.FromItemCode)
                .HasConstraintName("FK_PriceBookRule_FromItemCode");

            entity.HasOne(d => d.FromItemGroupNavigation).WithMany(p => p.PriceBookRuleFromItemGroupNavigations)
                .HasForeignKey(d => d.FromItemGroup)
                .HasConstraintName("FK_PriceBookRule_FromItemGroup");

            entity.HasOne(d => d.FromItemTypeNavigation).WithMany(p => p.PriceBookRuleFromItemTypeNavigations)
                .HasPrincipalKey(p => p.ItemType1)
                .HasForeignKey(d => d.FromItemType)
                .HasConstraintName("FK_PriceBookRule_FromItemType");

            entity.HasOne(d => d.FromLocationNavigation).WithMany(p => p.PriceBookRuleFromLocationNavigations)
                .HasPrincipalKey(p => p.Location1)
                .HasForeignKey(d => d.FromLocation)
                .HasConstraintName("FK_PriceBookRule_FromLocation");

            entity.HasOne(d => d.FromPriceCategoryNavigation).WithMany(p => p.PriceBookRuleFromPriceCategoryNavigations)
                .HasPrincipalKey(p => p.PriceCategory1)
                .HasForeignKey(d => d.FromPriceCategory)
                .HasConstraintName("FK_PriceBookRule_FromPriceCategory");

            entity.HasOne(d => d.FromProjNoNavigation).WithMany(p => p.PriceBookRuleFromProjNoNavigations)
                .HasForeignKey(d => d.FromProjNo)
                .HasConstraintName("FK_PriceBookRule_FromProjNo");

            entity.HasOne(d => d.FromSalesAgentNavigation).WithMany(p => p.PriceBookRuleFromSalesAgentNavigations)
                .HasPrincipalKey(p => p.SalesAgent1)
                .HasForeignKey(d => d.FromSalesAgent)
                .HasConstraintName("FK_PriceBookRule_FromSalesAgent");

            entity.HasOne(d => d.MatrixKeyNavigation).WithMany(p => p.PriceBookRules)
                .HasForeignKey(d => d.MatrixKey)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_PriceBookRule_MatrixKey");

            entity.HasOne(d => d.ToAreaCodeNavigation).WithMany(p => p.PriceBookRuleToAreaCodeNavigations)
                .HasPrincipalKey(p => p.AreaCode)
                .HasForeignKey(d => d.ToAreaCode)
                .HasConstraintName("FK_PriceBookRule_ToAreaCode");

            entity.HasOne(d => d.ToDebtorCodeNavigation).WithMany(p => p.PriceBookRuleToDebtorCodeNavigations)
                .HasPrincipalKey(p => p.AccNo)
                .HasForeignKey(d => d.ToDebtorCode)
                .HasConstraintName("FK_PriceBookRule_ToDebtorCode");

            entity.HasOne(d => d.ToDebtorTypeNavigation).WithMany(p => p.PriceBookRuleToDebtorTypeNavigations)
                .HasPrincipalKey(p => p.DebtorType1)
                .HasForeignKey(d => d.ToDebtorType)
                .HasConstraintName("FK_PriceBookRule_ToDebtorType");

            entity.HasOne(d => d.ToDeptNoNavigation).WithMany(p => p.PriceBookRuleToDeptNoNavigations)
                .HasForeignKey(d => d.ToDeptNo)
                .HasConstraintName("FK_PriceBookRule_ToDeptNo");

            entity.HasOne(d => d.ToItemBrandNavigation).WithMany(p => p.PriceBookRuleToItemBrandNavigations)
                .HasPrincipalKey(p => p.ItemBrand1)
                .HasForeignKey(d => d.ToItemBrand)
                .HasConstraintName("FK_PriceBookRule_ToItemBrand");

            entity.HasOne(d => d.ToItemCategoryNavigation).WithMany(p => p.PriceBookRuleToItemCategoryNavigations)
                .HasPrincipalKey(p => p.ItemCategory1)
                .HasForeignKey(d => d.ToItemCategory)
                .HasConstraintName("FK_PriceBookRule_ToItemCategory");

            entity.HasOne(d => d.ToItemClassNavigation).WithMany(p => p.PriceBookRuleToItemClassNavigations)
                .HasPrincipalKey(p => p.ItemClass1)
                .HasForeignKey(d => d.ToItemClass)
                .HasConstraintName("FK_PriceBookRule_ToItemClass");

            entity.HasOne(d => d.ToItemCodeNavigation).WithMany(p => p.PriceBookRuleToItemCodeNavigations)
                .HasPrincipalKey(p => p.ItemCode)
                .HasForeignKey(d => d.ToItemCode)
                .HasConstraintName("FK_PriceBookRule_ToItemCode");

            entity.HasOne(d => d.ToItemGroupNavigation).WithMany(p => p.PriceBookRuleToItemGroupNavigations)
                .HasForeignKey(d => d.ToItemGroup)
                .HasConstraintName("FK_PriceBookRule_ToItemGroup");

            entity.HasOne(d => d.ToItemTypeNavigation).WithMany(p => p.PriceBookRuleToItemTypeNavigations)
                .HasPrincipalKey(p => p.ItemType1)
                .HasForeignKey(d => d.ToItemType)
                .HasConstraintName("FK_PriceBookRule_ToItemType");

            entity.HasOne(d => d.ToLocationNavigation).WithMany(p => p.PriceBookRuleToLocationNavigations)
                .HasPrincipalKey(p => p.Location1)
                .HasForeignKey(d => d.ToLocation)
                .HasConstraintName("FK_PriceBookRule_ToLocation");

            entity.HasOne(d => d.ToPriceCategoryNavigation).WithMany(p => p.PriceBookRuleToPriceCategoryNavigations)
                .HasPrincipalKey(p => p.PriceCategory1)
                .HasForeignKey(d => d.ToPriceCategory)
                .HasConstraintName("FK_PriceBookRule_ToPriceCategory");

            entity.HasOne(d => d.ToProjNoNavigation).WithMany(p => p.PriceBookRuleToProjNoNavigations)
                .HasForeignKey(d => d.ToProjNo)
                .HasConstraintName("FK_PriceBookRule_ToProjNo");

            entity.HasOne(d => d.ToSalesAgentNavigation).WithMany(p => p.PriceBookRuleToSalesAgentNavigations)
                .HasPrincipalKey(p => p.SalesAgent1)
                .HasForeignKey(d => d.ToSalesAgent)
                .HasConstraintName("FK_PriceBookRule_ToSalesAgent");
        });

        modelBuilder.Entity<PriceCategory>(entity =>
        {
            entity.HasKey(e => e.AutoKey).HasName("PK_PriceCategory_AutoKey");

            entity.ToTable("PriceCategory", tb => tb.HasTrigger("UpdatePriceCategoryChangeCount"));

            entity.HasIndex(e => e.PriceCategory1, "UIX_PriceCategory_PriceCategory").IsUnique();

            entity.Property(e => e.Description).HasMaxLength(40);
            entity.Property(e => e.DetailDiscount).HasMaxLength(20);
            entity.Property(e => e.DiscountPercent).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.MarkupRatio).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.PriceCategory1)
                .HasMaxLength(12)
                .HasColumnName("PriceCategory");
        });

        modelBuilder.Entity<Profile>(entity =>
        {
            entity.HasKey(e => e.AutoKey).HasName("PK_Profile_AutoKey");

            entity.ToTable("Profile", tb => tb.HasTrigger("UpdateProfileChangeCount"));

            entity.HasIndex(e => e.CompanyName, "UIX_Profile_CompanyName").IsUnique();

            entity.Property(e => e.AccApiKey)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AccExpiryTimestamp).HasColumnType("datetime");
            entity.Property(e => e.AccKeyId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AccKeyID");
            entity.Property(e => e.AccSubApiKey)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AccSubExpiryTimestamp).HasColumnType("datetime");
            entity.Property(e => e.AccSubKeyId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AccSubKeyID");
            entity.Property(e => e.Address1).HasMaxLength(40);
            entity.Property(e => e.Address2).HasMaxLength(40);
            entity.Property(e => e.Address3).HasMaxLength(40);
            entity.Property(e => e.Address4).HasMaxLength(40);
            entity.Property(e => e.Attention).HasMaxLength(40);
            entity.Property(e => e.CompanyAccessKey)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompanyId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CompanyID");
            entity.Property(e => e.CompanyName).HasMaxLength(80);
            entity.Property(e => e.Contact).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr1).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr2).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr3).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr4).HasMaxLength(40);
            entity.Property(e => e.DeliverContact).HasMaxLength(40);
            entity.Property(e => e.DeliverFax1).HasMaxLength(25);
            entity.Property(e => e.DeliverPhone1).HasMaxLength(25);
            entity.Property(e => e.DeliverPostCode).HasMaxLength(10);
            entity.Property(e => e.EinvoiceCountryCodeInJson).HasColumnName("EInvoiceCountryCodeInJson");
            entity.Property(e => e.EmailAddress).HasMaxLength(80);
            entity.Property(e => e.Fax1).HasMaxLength(25);
            entity.Property(e => e.Fax2).HasMaxLength(25);
            entity.Property(e => e.IsEinvoiceDeactivated).HasColumnName("IsEInvoiceDeactivated");
            entity.Property(e => e.LogoClass).HasMaxLength(40);
            entity.Property(e => e.MsiccodeInJson).HasColumnName("MSICCodeInJson");
            entity.Property(e => e.NatureOfBusiness).HasMaxLength(40);
            entity.Property(e => e.Phone1).HasMaxLength(25);
            entity.Property(e => e.Phone2).HasMaxLength(25);
            entity.Property(e => e.PosapiKey)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("POSApiKey");
            entity.Property(e => e.PosexpiryTimestamp)
                .HasColumnType("datetime")
                .HasColumnName("POSExpiryTimestamp");
            entity.Property(e => e.PoskeyId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("POSKeyID");
            entity.Property(e => e.PostCode).HasMaxLength(10);
            entity.Property(e => e.PublicId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PublicID");
            entity.Property(e => e.RegisterNo).HasMaxLength(30);
            entity.Property(e => e.Remark).HasMaxLength(12);
            entity.Property(e => e.SalesTaxRegisterNo).HasMaxLength(20);
            entity.Property(e => e.ServiceTaxRegisterNo).HasMaxLength(20);
            entity.Property(e => e.SgeinvoiceAccApiKey)
                .HasMaxLength(50)
                .HasColumnName("SGEInvoiceAccApiKey");
            entity.Property(e => e.SgeinvoiceAccKeyId)
                .HasMaxLength(50)
                .HasColumnName("SGEInvoiceAccKeyID");
            entity.Property(e => e.SgeinvoiceApiKey)
                .HasMaxLength(100)
                .HasColumnName("SGEInvoiceApiKey");
            entity.Property(e => e.SgeinvoiceApiSecret)
                .HasMaxLength(100)
                .HasColumnName("SGEInvoiceApiSecret");
            entity.Property(e => e.SgeinvoiceCompanyAccessKey)
                .HasMaxLength(50)
                .HasColumnName("SGEInvoiceCompanyAccessKey");
            entity.Property(e => e.SgeinvoiceCompanyId)
                .HasMaxLength(50)
                .HasColumnName("SGEInvoiceCompanyID");
            entity.Property(e => e.SgeinvoicePeppolId)
                .HasMaxLength(50)
                .HasColumnName("SGEInvoicePeppolID");
            entity.Property(e => e.TaxEntityId).HasColumnName("TaxEntityID");
            entity.Property(e => e.TinownershipValidated).HasColumnName("TINOwnershipValidated");

            entity.HasOne(d => d.TaxEntity).WithMany(p => p.Profiles)
                .HasForeignKey(d => d.TaxEntityId)
                .HasConstraintName("FK_Profile_TaxEntityID");
        });

        modelBuilder.Entity<Project>(entity =>
        {
            entity.HasKey(e => e.ProjNo).HasName("PK_Project_ProjNo");

            entity.ToTable("Project", tb =>
                {
                    tb.HasTrigger("ProjectChangeLog");
                    tb.HasTrigger("UpdateProjectChangeCount");
                });

            entity.HasIndex(e => e.Guid, "UIX_Project_Guid").IsUnique();

            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.Desc2).HasMaxLength(40);
            entity.Property(e => e.Description).HasMaxLength(40);
            entity.Property(e => e.Guid).HasDefaultValueSql("(newid())");
            entity.Property(e => e.IsActive)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ParentProjNo).HasMaxLength(10);

            entity.HasOne(d => d.ParentProjNoNavigation).WithMany(p => p.InverseParentProjNoNavigation)
                .HasForeignKey(d => d.ParentProjNo)
                .HasConstraintName("FK_Project_ParentProjNo");
        });

        modelBuilder.Entity<Prprocessing>(entity =>
        {
            entity.HasKey(e => e.DocKey).HasName("PK_PRProcessing_DocKey");

            entity.ToTable("PRProcessing");

            entity.Property(e => e.DocKey).ValueGeneratedNever();
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.CreditorCode).HasMaxLength(12);
            entity.Property(e => e.DeliveryDate).HasColumnType("datetime");
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.EstimatedDeliveryDate).HasMaxLength(20);
            entity.Property(e => e.FromDocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.IsAllowOpedit)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IsAllowOPEdit");
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.Remark).HasMaxLength(100);
            entity.Property(e => e.RequestQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.RequestUom)
                .HasMaxLength(8)
                .HasColumnName("RequestUOM");
            entity.Property(e => e.Sodescription)
                .HasMaxLength(100)
                .HasColumnName("SODescription");

            entity.HasOne(d => d.CreatedUser).WithMany(p => p.PrprocessingCreatedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.CreatedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRProcessing_CreatedUserID");

            entity.HasOne(d => d.CreditorCodeNavigation).WithMany(p => p.Prprocessings)
                .HasForeignKey(d => d.CreditorCode)
                .HasConstraintName("FK_PRProcessing_CreditorCode");

            entity.HasOne(d => d.DeptNoNavigation).WithMany(p => p.Prprocessings)
                .HasForeignKey(d => d.DeptNo)
                .HasConstraintName("FK_PRProcessing_DeptNo");

            entity.HasOne(d => d.LastModifiedUser).WithMany(p => p.PrprocessingLastModifiedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.LastModifiedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRProcessing_LastModifiedUserID");

            entity.HasOne(d => d.LocationNavigation).WithMany(p => p.Prprocessings)
                .HasPrincipalKey(p => p.Location1)
                .HasForeignKey(d => d.Location)
                .HasConstraintName("FK_PRProcessing_Location");

            entity.HasOne(d => d.ProjNoNavigation).WithMany(p => p.Prprocessings)
                .HasForeignKey(d => d.ProjNo)
                .HasConstraintName("FK_PRProcessing_ProjNo");

            entity.HasOne(d => d.ItemUom).WithMany(p => p.Prprocessings)
                .HasPrincipalKey(p => new { p.ItemCode, p.Uom })
                .HasForeignKey(d => new { d.ItemCode, d.RequestUom })
                .HasConstraintName("FK_PRProcessing_RequestUOM");
        });

        modelBuilder.Entity<PrprocessingPo>(entity =>
        {
            entity.HasKey(e => e.DocKey).HasName("PK_PRProcessingPO_DocKey");

            entity.ToTable("PRProcessingPO");

            entity.Property(e => e.DocKey).ValueGeneratedNever();
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.CreditorCode).HasMaxLength(12);
            entity.Property(e => e.FromDocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.Kiv)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("KIV");
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.OrderQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.OrderRate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.OrderUom)
                .HasMaxLength(8)
                .HasColumnName("OrderUOM");
            entity.Property(e => e.Prpkey).HasColumnName("PRPKey");
            entity.Property(e => e.RefDocNo).HasMaxLength(30);
            entity.Property(e => e.RefDocType)
                .HasMaxLength(2)
                .IsUnicode(false);

            entity.HasOne(d => d.CreatedUser).WithMany(p => p.PrprocessingPoCreatedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.CreatedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRProcessingPO_CreatedUserID");

            entity.HasOne(d => d.CreditorCodeNavigation).WithMany(p => p.PrprocessingPos)
                .HasForeignKey(d => d.CreditorCode)
                .HasConstraintName("FK_PRProcessingPO_CreditorCode");

            entity.HasOne(d => d.LastModifiedUser).WithMany(p => p.PrprocessingPoLastModifiedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.LastModifiedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRProcessingPO_LastModifiedUserID");

            entity.HasOne(d => d.ItemUom).WithMany(p => p.PrprocessingPos)
                .HasPrincipalKey(p => new { p.ItemCode, p.Uom })
                .HasForeignKey(d => new { d.ItemCode, d.OrderUom })
                .HasConstraintName("FK_PRProcessingPO_ItemUOM");
        });

        modelBuilder.Entity<PurchaseAgent>(entity =>
        {
            entity.HasKey(e => e.AutoKey).HasName("PK_PurchaseAgent_AutoKey");

            entity.ToTable("PurchaseAgent", tb => tb.HasTrigger("UpdatePurchaseAgentChangeCount"));

            entity.HasIndex(e => e.PurchaseAgent1, "UIX_PurchaseAgent_PurchaseAgent").IsUnique();

            entity.Property(e => e.Desc2).HasMaxLength(40);
            entity.Property(e => e.Description).HasMaxLength(40);
            entity.Property(e => e.IsActive)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PurchaseAgent1)
                .HasMaxLength(12)
                .HasColumnName("PurchaseAgent");
        });

        modelBuilder.Entity<PurchaseConsignment>(entity =>
        {
            entity.HasKey(e => e.DocKey).HasName("PK_PurchaseConsignment_DocKey");

            entity.ToTable("PurchaseConsignment", tb => tb.HasTrigger("UpdatePurchaseConsignmentChangeCount"));

            entity.HasIndex(e => e.DocNo, "IX_PurchaseConsignment_DocNo").IsUnique();

            entity.HasIndex(e => new { e.DocStatus, e.ExpiryTimeStamp }, "IX_PurchaseConsignment_DocStatus_ExpiryTimeStamp");

            entity.HasIndex(e => new { e.ToDocType, e.ToDocKey }, "IX_PurchaseConsignment_ToDocTypeKey");

            entity.Property(e => e.DocKey).ValueGeneratedNever();
            entity.Property(e => e.AnalysisNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Attention).HasMaxLength(40);
            entity.Property(e => e.BranchCode).HasMaxLength(20);
            entity.Property(e => e.CalcDiscountOnUnitPrice)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CanSync)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.CreditorCode).HasMaxLength(12);
            entity.Property(e => e.CreditorName).HasMaxLength(100);
            entity.Property(e => e.CurrencyCode).HasMaxLength(5);
            entity.Property(e => e.CurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.DeliverAddr1).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr2).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr3).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr4).HasMaxLength(40);
            entity.Property(e => e.DeliverContact).HasMaxLength(40);
            entity.Property(e => e.DeliverFax1).HasMaxLength(25);
            entity.Property(e => e.DeliverPhone1).HasMaxLength(25);
            entity.Property(e => e.Description).HasMaxLength(80);
            entity.Property(e => e.DisplayTerm).HasMaxLength(30);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.DocStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ExpiryTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.Fax1).HasMaxLength(25);
            entity.Property(e => e.FullTransferOption)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Guid).HasDefaultValueSql("(newid())");
            entity.Property(e => e.InclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("F")
                .IsFixedLength();
            entity.Property(e => e.InvAddr1).HasMaxLength(40);
            entity.Property(e => e.InvAddr2).HasMaxLength(40);
            entity.Property(e => e.InvAddr3).HasMaxLength(40);
            entity.Property(e => e.InvAddr4).HasMaxLength(40);
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.LocalAnalysisNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.NetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Phone1).HasMaxLength(25);
            entity.Property(e => e.PurchaseAgent).HasMaxLength(12);
            entity.Property(e => e.PurchaseLocation).HasMaxLength(8);
            entity.Property(e => e.Ref).HasMaxLength(40);
            entity.Property(e => e.RefDocNo).HasMaxLength(30);
            entity.Property(e => e.RefNo2).HasMaxLength(30);
            entity.Property(e => e.Remark1).HasMaxLength(40);
            entity.Property(e => e.Remark2).HasMaxLength(40);
            entity.Property(e => e.Remark3).HasMaxLength(40);
            entity.Property(e => e.Remark4).HasMaxLength(40);
            entity.Property(e => e.ShipInfo).HasMaxLength(40);
            entity.Property(e => e.ShipVia).HasMaxLength(20);
            entity.Property(e => e.SupplierDono)
                .HasMaxLength(30)
                .HasColumnName("SupplierDONo");
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxEntityId).HasColumnName("TaxEntityID");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ToDocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.ToTaxCurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.Total).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalExTax).HasColumnType("decimal(19, 2)");

            entity.HasOne(d => d.CreatedUser).WithMany(p => p.PurchaseConsignmentCreatedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.CreatedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PurchaseConsignment_CreatedUserID");

            entity.HasOne(d => d.CreditorCodeNavigation).WithMany(p => p.PurchaseConsignments)
                .HasForeignKey(d => d.CreditorCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PurchaseConsignment_CreditorCode");

            entity.HasOne(d => d.CurrencyCodeNavigation).WithMany(p => p.PurchaseConsignments)
                .HasForeignKey(d => d.CurrencyCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PurchaseConsignment_CurrencyCode");

            entity.HasOne(d => d.DisplayTermNavigation).WithMany(p => p.PurchaseConsignments)
                .HasPrincipalKey(p => p.DisplayTerm)
                .HasForeignKey(d => d.DisplayTerm)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PurchaseConsignment_DisplayTerm");

            entity.HasOne(d => d.LastModifiedUser).WithMany(p => p.PurchaseConsignmentLastModifiedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.LastModifiedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PurchaseConsignment_LastModifiedUserID");

            entity.HasOne(d => d.PurchaseAgentNavigation).WithMany(p => p.PurchaseConsignments)
                .HasPrincipalKey(p => p.PurchaseAgent1)
                .HasForeignKey(d => d.PurchaseAgent)
                .HasConstraintName("FK_PurchaseConsignment_PurchaseAgent");

            entity.HasOne(d => d.PurchaseLocationNavigation).WithMany(p => p.PurchaseConsignments)
                .HasPrincipalKey(p => p.Location1)
                .HasForeignKey(d => d.PurchaseLocation)
                .HasConstraintName("FK_PurchaseConsignment_PurchaseLocation");

            entity.HasOne(d => d.ShipViaNavigation).WithMany(p => p.PurchaseConsignments)
                .HasPrincipalKey(p => p.ShippingMethod1)
                .HasForeignKey(d => d.ShipVia)
                .HasConstraintName("FK_PurchaseConsignment_ShipVia");

            entity.HasOne(d => d.TaxEntity).WithMany(p => p.PurchaseConsignments)
                .HasForeignKey(d => d.TaxEntityId)
                .HasConstraintName("FK_PurchaseConsignment_TaxEntityID");

            entity.HasOne(d => d.Branch).WithMany(p => p.PurchaseConsignments)
                .HasPrincipalKey(p => new { p.AccNo, p.BranchCode })
                .HasForeignKey(d => new { d.CreditorCode, d.BranchCode })
                .HasConstraintName("FK_PurchaseConsignment_BranchCode");
        });

        modelBuilder.Entity<PurchaseConsignmentDtl>(entity =>
        {
            entity.HasKey(e => e.DtlKey).HasName("PK_PurchaseConsignmentDTL_DtlKey");

            entity.ToTable("PurchaseConsignmentDTL");

            entity.HasIndex(e => e.DocKey, "IX_PurchaseConsignmentDTL_DocKey");

            entity.HasIndex(e => e.FromDocDtlKey, "IX_PurchaseConsignmentDTL_FromDocDtlKey");

            entity.Property(e => e.DtlKey).ValueGeneratedNever();
            entity.Property(e => e.AddToSubTotal)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.CalcByPercent).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.DeliveryDate).HasColumnType("datetime");
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Desc2).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.Discount).HasMaxLength(20);
            entity.Property(e => e.DiscountAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DtlType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EstimatedDeliveryDate).HasMaxLength(20);
            entity.Property(e => e.ExtraDiscountAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.FontStyle).HasMaxLength(8);
            entity.Property(e => e.FromDocNo).HasMaxLength(30);
            entity.Property(e => e.FromDocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.FullTransferOption)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Guid).HasDefaultValueSql("(newid())");
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.LocalSubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalSubTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxAdjustment).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.MainItem)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Numbering).HasMaxLength(6);
            entity.Property(e => e.PrintOut)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Remark).HasMaxLength(100);
            entity.Property(e => e.SmallestQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SmallestUnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SubTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxAdjustment).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCode).HasMaxLength(14);
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxExportCountry).HasMaxLength(50);
            entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TransferedQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
            entity.Property(e => e.UserUom)
                .HasMaxLength(8)
                .HasColumnName("UserUOM");

            entity.HasOne(d => d.DeptNoNavigation).WithMany(p => p.PurchaseConsignmentDtls)
                .HasForeignKey(d => d.DeptNo)
                .HasConstraintName("FK_PurchaseConsignmentDTL_DeptNo");

            entity.HasOne(d => d.FontStyleNavigation).WithMany(p => p.PurchaseConsignmentDtls)
                .HasPrincipalKey(p => p.FontStyle1)
                .HasForeignKey(d => d.FontStyle)
                .HasConstraintName("FK_PurchaseConsignmentDTL_FontStyle");

            entity.HasOne(d => d.LocationNavigation).WithMany(p => p.PurchaseConsignmentDtls)
                .HasPrincipalKey(p => p.Location1)
                .HasForeignKey(d => d.Location)
                .HasConstraintName("FK_PurchaseConsignmentDTL_Location");

            entity.HasOne(d => d.ProjNoNavigation).WithMany(p => p.PurchaseConsignmentDtls)
                .HasForeignKey(d => d.ProjNo)
                .HasConstraintName("FK_PurchaseConsignmentDTL_ProjNo");

            entity.HasOne(d => d.TaxCodeNavigation).WithMany(p => p.PurchaseConsignmentDtls)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.TaxCode)
                .HasConstraintName("FK_PurchaseConsignmentDTL_TaxCode");

            entity.HasOne(d => d.ItemBatch).WithMany(p => p.PurchaseConsignmentDtls)
                .HasPrincipalKey(p => new { p.ItemCode, p.BatchNo })
                .HasForeignKey(d => new { d.ItemCode, d.BatchNo })
                .HasConstraintName("FK_PurchaseConsignmentDTL_ItemBatch");

            entity.HasOne(d => d.ItemUom).WithMany(p => p.PurchaseConsignmentDtls)
                .HasPrincipalKey(p => new { p.ItemCode, p.Uom })
                .HasForeignKey(d => new { d.ItemCode, d.Uom })
                .HasConstraintName("FK_PurchaseConsignmentDTL_ItemUOM");
        });

        modelBuilder.Entity<PurchaseConsignmentReturn>(entity =>
        {
            entity.HasKey(e => e.DocKey).HasName("PK_PurchaseConsignmentReturn_DocKey");

            entity.ToTable("PurchaseConsignmentReturn", tb => tb.HasTrigger("UpdatePurchaseConsignmentReturnChangeCount"));

            entity.HasIndex(e => e.DocNo, "IX_PurchaseConsignmentReturn_DocNo").IsUnique();

            entity.HasIndex(e => new { e.DocStatus, e.ExpiryTimeStamp }, "IX_PurchaseConsignmentReturn_DocStatus_ExpiryTimeStamp");

            entity.Property(e => e.DocKey).ValueGeneratedNever();
            entity.Property(e => e.AnalysisNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Attention).HasMaxLength(40);
            entity.Property(e => e.BranchCode).HasMaxLength(20);
            entity.Property(e => e.CalcDiscountOnUnitPrice)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CanSync)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.CreditorCode).HasMaxLength(12);
            entity.Property(e => e.CreditorName).HasMaxLength(100);
            entity.Property(e => e.CurrencyCode).HasMaxLength(5);
            entity.Property(e => e.CurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.DeliverAddr1).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr2).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr3).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr4).HasMaxLength(40);
            entity.Property(e => e.DeliverContact).HasMaxLength(40);
            entity.Property(e => e.DeliverFax1).HasMaxLength(25);
            entity.Property(e => e.DeliverPhone1).HasMaxLength(25);
            entity.Property(e => e.Description).HasMaxLength(80);
            entity.Property(e => e.DisplayTerm).HasMaxLength(30);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.DocStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ExpiryTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.Fax1).HasMaxLength(25);
            entity.Property(e => e.Guid).HasDefaultValueSql("(newid())");
            entity.Property(e => e.InclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("F")
                .IsFixedLength();
            entity.Property(e => e.InvAddr1).HasMaxLength(40);
            entity.Property(e => e.InvAddr2).HasMaxLength(40);
            entity.Property(e => e.InvAddr3).HasMaxLength(40);
            entity.Property(e => e.InvAddr4).HasMaxLength(40);
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.LocalAnalysisNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.NetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Phone1).HasMaxLength(25);
            entity.Property(e => e.PurchaseAgent).HasMaxLength(12);
            entity.Property(e => e.PurchaseLocation).HasMaxLength(8);
            entity.Property(e => e.Ref).HasMaxLength(40);
            entity.Property(e => e.RefDocNo).HasMaxLength(30);
            entity.Property(e => e.Remark1).HasMaxLength(40);
            entity.Property(e => e.Remark2).HasMaxLength(40);
            entity.Property(e => e.Remark3).HasMaxLength(40);
            entity.Property(e => e.Remark4).HasMaxLength(40);
            entity.Property(e => e.ShipInfo).HasMaxLength(40);
            entity.Property(e => e.ShipVia).HasMaxLength(20);
            entity.Property(e => e.SupplierDono)
                .HasMaxLength(30)
                .HasColumnName("SupplierDONo");
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxEntityId).HasColumnName("TaxEntityID");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ToDocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.ToTaxCurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.Total).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalExTax).HasColumnType("decimal(19, 2)");

            entity.HasOne(d => d.CreatedUser).WithMany(p => p.PurchaseConsignmentReturnCreatedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.CreatedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PurchaseConsignmentReturn_CreatedUserID");

            entity.HasOne(d => d.CreditorCodeNavigation).WithMany(p => p.PurchaseConsignmentReturns)
                .HasForeignKey(d => d.CreditorCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PurchaseConsignmentReturn_CreditorCode");

            entity.HasOne(d => d.CurrencyCodeNavigation).WithMany(p => p.PurchaseConsignmentReturns)
                .HasForeignKey(d => d.CurrencyCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PurchaseConsignmentReturn_CurrencyCode");

            entity.HasOne(d => d.DisplayTermNavigation).WithMany(p => p.PurchaseConsignmentReturns)
                .HasPrincipalKey(p => p.DisplayTerm)
                .HasForeignKey(d => d.DisplayTerm)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PurchaseConsignmentReturn_DisplayTerm");

            entity.HasOne(d => d.LastModifiedUser).WithMany(p => p.PurchaseConsignmentReturnLastModifiedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.LastModifiedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PurchaseConsignmentReturn_LastModifiedUserID");

            entity.HasOne(d => d.PurchaseAgentNavigation).WithMany(p => p.PurchaseConsignmentReturns)
                .HasPrincipalKey(p => p.PurchaseAgent1)
                .HasForeignKey(d => d.PurchaseAgent)
                .HasConstraintName("FK_PurchaseConsignmentReturn_PurchaseAgent");

            entity.HasOne(d => d.PurchaseLocationNavigation).WithMany(p => p.PurchaseConsignmentReturns)
                .HasPrincipalKey(p => p.Location1)
                .HasForeignKey(d => d.PurchaseLocation)
                .HasConstraintName("FK_PurchaseConsignmentReturn_PurchaseLocation");

            entity.HasOne(d => d.ShipViaNavigation).WithMany(p => p.PurchaseConsignmentReturns)
                .HasPrincipalKey(p => p.ShippingMethod1)
                .HasForeignKey(d => d.ShipVia)
                .HasConstraintName("FK_PurchaseConsignmentReturn_ShipVia");

            entity.HasOne(d => d.TaxEntity).WithMany(p => p.PurchaseConsignmentReturns)
                .HasForeignKey(d => d.TaxEntityId)
                .HasConstraintName("FK_PurchaseConsignmentReturn_TaxEntityID");

            entity.HasOne(d => d.Branch).WithMany(p => p.PurchaseConsignmentReturns)
                .HasPrincipalKey(p => new { p.AccNo, p.BranchCode })
                .HasForeignKey(d => new { d.CreditorCode, d.BranchCode })
                .HasConstraintName("FK_PurchaseConsignmentReturn_BranchCode");
        });

        modelBuilder.Entity<PurchaseConsignmentReturnDtl>(entity =>
        {
            entity.HasKey(e => e.DtlKey).HasName("PK_PurchaseConsignmentReturnDTL_DtlKey");

            entity.ToTable("PurchaseConsignmentReturnDTL");

            entity.HasIndex(e => e.DocKey, "IX_PurchaseConsignmentReturnDTL_DocKey");

            entity.HasIndex(e => e.FromDocDtlKey, "IX_PurchaseConsignmentReturnDTL_FromDocDtlKey");

            entity.Property(e => e.DtlKey).ValueGeneratedNever();
            entity.Property(e => e.AddToSubTotal)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.CalcByPercent).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.DeliveryDate).HasColumnType("datetime");
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Desc2).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.Discount).HasMaxLength(20);
            entity.Property(e => e.DiscountAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DtlType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EstimatedDeliveryDate).HasMaxLength(20);
            entity.Property(e => e.ExtraDiscountAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.FontStyle).HasMaxLength(8);
            entity.Property(e => e.FromDocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.FullTransferOption)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Guid).HasDefaultValueSql("(newid())");
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.LocalSubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalSubTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxAdjustment).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.Lost)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.MainItem)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Numbering).HasMaxLength(6);
            entity.Property(e => e.PrintOut)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Remark).HasMaxLength(100);
            entity.Property(e => e.SmallestQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SmallestUnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SubTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxAdjustment).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCode).HasMaxLength(14);
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TransferedQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
            entity.Property(e => e.UserUom)
                .HasMaxLength(8)
                .HasColumnName("UserUOM");

            entity.HasOne(d => d.DeptNoNavigation).WithMany(p => p.PurchaseConsignmentReturnDtls)
                .HasForeignKey(d => d.DeptNo)
                .HasConstraintName("FK_PurchaseConsignmentReturnDTL_DeptNo");

            entity.HasOne(d => d.FontStyleNavigation).WithMany(p => p.PurchaseConsignmentReturnDtls)
                .HasPrincipalKey(p => p.FontStyle1)
                .HasForeignKey(d => d.FontStyle)
                .HasConstraintName("FK_PurchaseConsignmentReturnDTL_FontStyle");

            entity.HasOne(d => d.LocationNavigation).WithMany(p => p.PurchaseConsignmentReturnDtls)
                .HasPrincipalKey(p => p.Location1)
                .HasForeignKey(d => d.Location)
                .HasConstraintName("FK_PurchaseConsignmentReturnDTL_Location");

            entity.HasOne(d => d.ProjNoNavigation).WithMany(p => p.PurchaseConsignmentReturnDtls)
                .HasForeignKey(d => d.ProjNo)
                .HasConstraintName("FK_PurchaseConsignmentReturnDTL_ProjNo");

            entity.HasOne(d => d.TaxCodeNavigation).WithMany(p => p.PurchaseConsignmentReturnDtls)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.TaxCode)
                .HasConstraintName("FK_PurchaseConsignmentReturnDTL_TaxCode");

            entity.HasOne(d => d.ItemBatch).WithMany(p => p.PurchaseConsignmentReturnDtls)
                .HasPrincipalKey(p => new { p.ItemCode, p.BatchNo })
                .HasForeignKey(d => new { d.ItemCode, d.BatchNo })
                .HasConstraintName("FK_PurchaseConsignmentReturnDTL_ItemBatch");

            entity.HasOne(d => d.ItemUom).WithMany(p => p.PurchaseConsignmentReturnDtls)
                .HasPrincipalKey(p => new { p.ItemCode, p.Uom })
                .HasForeignKey(d => new { d.ItemCode, d.Uom })
                .HasConstraintName("FK_PurchaseConsignmentReturnDTL_ItemUOM");
        });

        modelBuilder.Entity<Qt>(entity =>
        {
            entity.HasKey(e => e.DocKey).HasName("PK_QT_DocKey");

            entity.ToTable("QT", tb => tb.HasTrigger("UpdateQTChangeCount"));

            entity.HasIndex(e => e.DocNo, "IX_QT_DocNo").IsUnique();

            entity.HasIndex(e => new { e.DocStatus, e.ExpiryTimeStamp }, "IX_QT_DocStatus_ExpiryTimeStamp");

            entity.HasIndex(e => new { e.ToDocType, e.ToDocKey }, "IX_QT_ToDocTypeKey");

            entity.Property(e => e.DocKey).ValueGeneratedNever();
            entity.Property(e => e.AnalysisNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ApprovalUserId)
                .HasMaxLength(10)
                .HasColumnName("ApprovalUserID");
            entity.Property(e => e.Attention).HasMaxLength(40);
            entity.Property(e => e.BranchCode).HasMaxLength(20);
            entity.Property(e => e.CalcDiscountOnUnitPrice)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CanSync)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Cc)
                .HasMaxLength(20)
                .HasColumnName("CC");
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.CurrencyCode).HasMaxLength(5);
            entity.Property(e => e.CurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.DebtorCode).HasMaxLength(12);
            entity.Property(e => e.DebtorName).HasMaxLength(100);
            entity.Property(e => e.DeliverAddr1).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr2).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr3).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr4).HasMaxLength(40);
            entity.Property(e => e.DeliverContact).HasMaxLength(40);
            entity.Property(e => e.DeliverFax1).HasMaxLength(25);
            entity.Property(e => e.DeliverPhone1).HasMaxLength(25);
            entity.Property(e => e.DeliveryTerm).HasMaxLength(40);
            entity.Property(e => e.Description).HasMaxLength(80);
            entity.Property(e => e.DisplayTerm).HasMaxLength(30);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.DocStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ExpiryTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.Fax1).HasMaxLength(25);
            entity.Property(e => e.FinalTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer1TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Footer2Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer2TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Footer3Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer3TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.FullTransferOption)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Guid).HasDefaultValueSql("(newid())");
            entity.Property(e => e.InclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("F")
                .IsFixedLength();
            entity.Property(e => e.InvAddr1).HasMaxLength(40);
            entity.Property(e => e.InvAddr2).HasMaxLength(40);
            entity.Property(e => e.InvAddr3).HasMaxLength(40);
            entity.Property(e => e.InvAddr4).HasMaxLength(40);
            entity.Property(e => e.IsRoundAdj)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("F")
                .IsFixedLength();
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.LocalAnalysisNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.MultiPrice).HasMaxLength(8);
            entity.Property(e => e.NetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.PaymentTerm).HasMaxLength(40);
            entity.Property(e => e.Phone1).HasMaxLength(25);
            entity.Property(e => e.Ref).HasMaxLength(40);
            entity.Property(e => e.RefDocNo).HasMaxLength(30);
            entity.Property(e => e.Remark1).HasMaxLength(40);
            entity.Property(e => e.Remark2).HasMaxLength(40);
            entity.Property(e => e.Remark3).HasMaxLength(40);
            entity.Property(e => e.Remark4).HasMaxLength(40);
            entity.Property(e => e.RoundAdj).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SalesAgent).HasMaxLength(12);
            entity.Property(e => e.SalesExemptionExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.SalesExemptionNo).HasMaxLength(60);
            entity.Property(e => e.SalesLocation).HasMaxLength(8);
            entity.Property(e => e.ShipInfo).HasMaxLength(40);
            entity.Property(e => e.ShipVia).HasMaxLength(20);
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxEntityId).HasColumnName("TaxEntityID");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ToDocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.ToTaxCurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.Total).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Transferable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.UdfSuperAppId)
                .HasMaxLength(32)
                .HasColumnName("UDF_SuperAppId");
            entity.Property(e => e.Validity).HasMaxLength(40);
            entity.Property(e => e.YourRef).HasMaxLength(30);

            entity.HasOne(d => d.ApprovalUser).WithMany(p => p.QtApprovalUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.ApprovalUserId)
                .HasConstraintName("FK_QT_ApprovalUserID");

            entity.HasOne(d => d.CreatedUser).WithMany(p => p.QtCreatedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.CreatedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_QT_CreatedUserID");

            entity.HasOne(d => d.CurrencyCodeNavigation).WithMany(p => p.Qts)
                .HasForeignKey(d => d.CurrencyCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_QT_CurrencyCode");

            entity.HasOne(d => d.DebtorCodeNavigation).WithMany(p => p.Qts)
                .HasForeignKey(d => d.DebtorCode)
                .HasConstraintName("FK_QT_DebtorCode");

            entity.HasOne(d => d.DisplayTermNavigation).WithMany(p => p.Qts)
                .HasPrincipalKey(p => p.DisplayTerm)
                .HasForeignKey(d => d.DisplayTerm)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_QT_DisplayTerm");

            entity.HasOne(d => d.Footer1TaxCodeNavigation).WithMany(p => p.QtFooter1TaxCodeNavigations)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.Footer1TaxCode)
                .HasConstraintName("FK_QT_Footer1TaxCode");

            entity.HasOne(d => d.Footer2TaxCodeNavigation).WithMany(p => p.QtFooter2TaxCodeNavigations)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.Footer2TaxCode)
                .HasConstraintName("FK_QT_Footer2TaxCode");

            entity.HasOne(d => d.Footer3TaxCodeNavigation).WithMany(p => p.QtFooter3TaxCodeNavigations)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.Footer3TaxCode)
                .HasConstraintName("FK_QT_Footer3TaxCode");

            entity.HasOne(d => d.LastModifiedUser).WithMany(p => p.QtLastModifiedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.LastModifiedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_QT_LastModifiedUserID");

            entity.HasOne(d => d.SalesAgentNavigation).WithMany(p => p.Qts)
                .HasPrincipalKey(p => p.SalesAgent1)
                .HasForeignKey(d => d.SalesAgent)
                .HasConstraintName("FK_QT_SalesAgent");

            entity.HasOne(d => d.SalesLocationNavigation).WithMany(p => p.Qts)
                .HasPrincipalKey(p => p.Location1)
                .HasForeignKey(d => d.SalesLocation)
                .HasConstraintName("FK_QT_SalesLocation");

            entity.HasOne(d => d.ShipViaNavigation).WithMany(p => p.Qts)
                .HasPrincipalKey(p => p.ShippingMethod1)
                .HasForeignKey(d => d.ShipVia)
                .HasConstraintName("FK_QT_ShipVia");

            entity.HasOne(d => d.TaxEntity).WithMany(p => p.Qts)
                .HasForeignKey(d => d.TaxEntityId)
                .HasConstraintName("FK_QT_TaxEntityID");

            entity.HasOne(d => d.Branch).WithMany(p => p.Qts)
                .HasPrincipalKey(p => new { p.AccNo, p.BranchCode })
                .HasForeignKey(d => new { d.DebtorCode, d.BranchCode })
                .HasConstraintName("FK_QT_BranchCode");
        });

        modelBuilder.Entity<Qtdtl>(entity =>
        {
            entity.HasKey(e => e.DtlKey).HasName("PK_QTDTL_DtlKey");

            entity.ToTable("QTDTL");

            entity.HasIndex(e => e.DocKey, "IX_QTDTL_DocKey");

            entity.HasIndex(e => new { e.ItemCode, e.Uom }, "IX_QTDTL_ItemCode_UOM");

            entity.Property(e => e.DtlKey).ValueGeneratedNever();
            entity.Property(e => e.AddToSubTotal)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CalcByPercent).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.DeliveryDate).HasColumnType("datetime");
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Desc2).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.Discount).HasMaxLength(20);
            entity.Property(e => e.DiscountAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DtlType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EstimatedDeliveryDate).HasMaxLength(20);
            entity.Property(e => e.ExtraDiscountAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.FontStyle).HasMaxLength(8);
            entity.Property(e => e.Guid).HasDefaultValueSql("(newid())");
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.LocalSubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalSubTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxAdjustment).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.MainItem)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Numbering).HasMaxLength(6);
            entity.Property(e => e.PrintOut)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SalesExemptionNo).HasMaxLength(60);
            entity.Property(e => e.SmallestQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SmallestUnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SubTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxAdjustment).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCode).HasMaxLength(14);
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Transferable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TransferedQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
            entity.Property(e => e.UserUom)
                .HasMaxLength(8)
                .HasColumnName("UserUOM");

            entity.HasOne(d => d.DeptNoNavigation).WithMany(p => p.Qtdtls)
                .HasForeignKey(d => d.DeptNo)
                .HasConstraintName("FK_QTDTL_DeptNo");

            entity.HasOne(d => d.FontStyleNavigation).WithMany(p => p.Qtdtls)
                .HasPrincipalKey(p => p.FontStyle1)
                .HasForeignKey(d => d.FontStyle)
                .HasConstraintName("FK_QTDTL_FontStyle");

            entity.HasOne(d => d.LocationNavigation).WithMany(p => p.Qtdtls)
                .HasPrincipalKey(p => p.Location1)
                .HasForeignKey(d => d.Location)
                .HasConstraintName("FK_QTDTL_Location");

            entity.HasOne(d => d.ProjNoNavigation).WithMany(p => p.Qtdtls)
                .HasForeignKey(d => d.ProjNo)
                .HasConstraintName("FK_QTDTL_ProjNo");

            entity.HasOne(d => d.TaxCodeNavigation).WithMany(p => p.Qtdtls)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.TaxCode)
                .HasConstraintName("FK_QTDTL_TaxCode");

            entity.HasOne(d => d.ItemUom).WithMany(p => p.Qtdtls)
                .HasPrincipalKey(p => new { p.ItemCode, p.Uom })
                .HasForeignKey(d => new { d.ItemCode, d.Uom })
                .HasConstraintName("FK_QTDTL_ItemUOM");
        });

        modelBuilder.Entity<Race>(entity =>
        {
            entity.HasKey(e => e.AutoKey).HasName("PK_Race_AutoKey");

            entity.ToTable("Race", tb => tb.HasTrigger("RaceChangeLog"));

            entity.HasIndex(e => e.Guid, "UIX_Race_Guid").IsUnique();

            entity.HasIndex(e => e.Race1, "UIX_Race_Race").IsUnique();

            entity.Property(e => e.Description).HasMaxLength(80);
            entity.Property(e => e.Race1)
                .HasMaxLength(10)
                .HasColumnName("Race");
        });

        modelBuilder.Entity<Rcv>(entity =>
        {
            entity.HasKey(e => e.DocKey).HasName("PK_RCV_DocKey");

            entity.ToTable("RCV", tb => tb.HasTrigger("UpdateRCVChangeCount"));

            entity.HasIndex(e => e.DocNo, "IX_RCV_DocNo").IsUnique();

            entity.Property(e => e.DocKey).ValueGeneratedNever();
            entity.Property(e => e.CanSync)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.Guid).HasDefaultValueSql("(newid())");
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.RefDocNo).HasMaxLength(30);
            entity.Property(e => e.Remark1).HasMaxLength(40);
            entity.Property(e => e.Remark2).HasMaxLength(40);
            entity.Property(e => e.Remark3).HasMaxLength(40);
            entity.Property(e => e.Remark4).HasMaxLength(40);
            entity.Property(e => e.Total).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.UdfSuperAppId)
                .HasMaxLength(32)
                .HasColumnName("UDF_SuperAppId");

            entity.HasOne(d => d.CreatedUser).WithMany(p => p.RcvCreatedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.CreatedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RCV_CreatedUserID");

            entity.HasOne(d => d.LastModifiedUser).WithMany(p => p.RcvLastModifiedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.LastModifiedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RCV_LastModifiedUserID");
        });

        modelBuilder.Entity<Rcvdtl>(entity =>
        {
            entity.HasKey(e => e.DtlKey).HasName("PK_RCVDTL_DtlKey");

            entity.ToTable("RCVDTL");

            entity.HasIndex(e => e.DocKey, "IX_RCVDTL_DocKey");

            entity.Property(e => e.DtlKey).ValueGeneratedNever();
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Desc2).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.Guid).HasDefaultValueSql("(newid())");
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.Numbering).HasMaxLength(6);
            entity.Property(e => e.PrintOut)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.UnitCost).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");

            entity.HasOne(d => d.DeptNoNavigation).WithMany(p => p.Rcvdtls)
                .HasForeignKey(d => d.DeptNo)
                .HasConstraintName("FK_RCVDTL_DeptNo");

            entity.HasOne(d => d.LocationNavigation).WithMany(p => p.Rcvdtls)
                .HasPrincipalKey(p => p.Location1)
                .HasForeignKey(d => d.Location)
                .HasConstraintName("FK_RCVDTL_Location");

            entity.HasOne(d => d.ProjNoNavigation).WithMany(p => p.Rcvdtls)
                .HasForeignKey(d => d.ProjNo)
                .HasConstraintName("FK_RCVDTL_ProjNo");

            entity.HasOne(d => d.ItemBatch).WithMany(p => p.Rcvdtls)
                .HasPrincipalKey(p => new { p.ItemCode, p.BatchNo })
                .HasForeignKey(d => new { d.ItemCode, d.BatchNo })
                .HasConstraintName("FK_RCVDTL_ItemBatch");

            entity.HasOne(d => d.ItemUom).WithMany(p => p.Rcvdtls)
                .HasPrincipalKey(p => new { p.ItemCode, p.Uom })
                .HasForeignKey(d => new { d.ItemCode, d.Uom })
                .HasConstraintName("FK_RCVDTL_ItemUOM");
        });

        modelBuilder.Entity<Recurrence>(entity =>
        {
            entity.HasKey(e => e.RecurrenceKey).HasName("PK_Recurrence_AutoKey");

            entity.ToTable("Recurrence");

            entity.HasIndex(e => e.RecurrenceName, "UIX_Recurrence_RecurrenceName").IsUnique();

            entity.Property(e => e.RecurrenceKey).ValueGeneratedNever();
            entity.Property(e => e.AlertUserId)
                .HasMaxLength(10)
                .HasColumnName("AlertUserID");
            entity.Property(e => e.AutoExecute)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.DocNoFormatName).HasMaxLength(20);
            entity.Property(e => e.DocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.EndDate).HasColumnType("datetime");
            entity.Property(e => e.EndType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.IsActive)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.IsParam2FromBack)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.RecurrenceDateType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.RecurrenceDay1)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.RecurrenceDay2)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.RecurrenceDay3)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.RecurrenceDay4)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.RecurrenceDay5)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.RecurrenceDay6)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.RecurrenceDay7)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.RecurrenceName).HasMaxLength(100);
            entity.Property(e => e.StartDate).HasColumnType("datetime");

            entity.HasOne(d => d.AlertUser).WithMany(p => p.RecurrenceAlertUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.AlertUserId)
                .HasConstraintName("FK_Recurrence_AlertUserID");

            entity.HasOne(d => d.CreatedUser).WithMany(p => p.RecurrenceCreatedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.CreatedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Recurrence_CreatedUserID");

            entity.HasOne(d => d.LastModifiedUser).WithMany(p => p.RecurrenceLastModifiedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.LastModifiedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Recurrence_LastModifiedUserID");
        });

        modelBuilder.Entity<RecurrenceDtl>(entity =>
        {
            entity.HasKey(e => e.AutoKey).HasName("PK_RecurrenceDtl_AutoKey");

            entity.ToTable("RecurrenceDtl");

            entity.Property(e => e.AccNo).HasMaxLength(12);
            entity.Property(e => e.RecurrenceDate).HasColumnType("datetime");
            entity.Property(e => e.SourceDocNo).HasMaxLength(30);
            entity.Property(e => e.Status).HasMaxLength(20);

            entity.HasOne(d => d.AccNoNavigation).WithMany(p => p.RecurrenceDtls)
                .HasForeignKey(d => d.AccNo)
                .HasConstraintName("FK_RecurrenceDtl_AccNo");
        });

        modelBuilder.Entity<Registry>(entity =>
        {
            entity.HasKey(e => e.RegId).HasName("PK_Registry_RegID");

            entity.ToTable("Registry");

            entity.Property(e => e.RegId)
                .ValueGeneratedNever()
                .HasColumnName("RegID");
            entity.Property(e => e.RegValue).HasMaxLength(255);
        });

        modelBuilder.Entity<RemarkName>(entity =>
        {
            entity.HasKey(e => e.DocType).HasName("PK_RemarkName_DocType");

            entity.ToTable("RemarkName");

            entity.Property(e => e.DocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.Remark1Mru)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Remark1MRU");
            entity.Property(e => e.Remark1Name).HasMaxLength(30);
            entity.Property(e => e.Remark2Mru)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Remark2MRU");
            entity.Property(e => e.Remark2Name).HasMaxLength(30);
            entity.Property(e => e.Remark3Mru)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Remark3MRU");
            entity.Property(e => e.Remark3Name).HasMaxLength(30);
            entity.Property(e => e.Remark4Mru)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Remark4MRU");
            entity.Property(e => e.Remark4Name).HasMaxLength(30);
        });

        modelBuilder.Entity<Report>(entity =>
        {
            entity.HasKey(e => e.AutoKey).HasName("PK_Report_AutoKey");

            entity.ToTable("Report");

            entity.HasIndex(e => e.Guid, "UIX_Report_Guid").IsUnique();

            entity.HasIndex(e => e.ReportName, "UIX_Report_ReportName").IsUnique();

            entity.Property(e => e.ReportName).HasMaxLength(100);
            entity.Property(e => e.ReportType).HasMaxLength(60);
        });

        modelBuilder.Entity<ReportAttribute>(entity =>
        {
            entity.HasKey(e => e.ReportName).HasName("PK_ReportAttributes_ReportName");

            entity.Property(e => e.ReportName).HasMaxLength(100);
        });

        modelBuilder.Entity<ReverseGstdo>(entity =>
        {
            entity.HasKey(e => new { e.DocKey, e.DocType }).HasName("PK_ReverseGSTDO_DocKey_DocType");

            entity.ToTable("ReverseGSTDO");

            entity.Property(e => e.DocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.JedocKey).HasColumnName("JEDocKey");
        });

        modelBuilder.Entity<ReverseGstpayment>(entity =>
        {
            entity.HasKey(e => new { e.DocKey, e.DocType, e.AppliedDocKey, e.AppliedDocType }).HasName("PK_ReverseGSTPayment_DocKey_DocType_AppliedDocKey_AppliedDocType");

            entity.ToTable("ReverseGSTPayment");

            entity.Property(e => e.DocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.AppliedDocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.JedocKey).HasColumnName("JEDocKey");
        });

        modelBuilder.Entity<ReverseSstpayment>(entity =>
        {
            entity.HasKey(e => new { e.DocKey, e.DocType, e.AppliedDocKey, e.AppliedDocType }).HasName("PK_ReverseSSTPayment_DocKey_DocType_AppliedDocKey_AppliedDocType");

            entity.ToTable("ReverseSSTPayment");

            entity.Property(e => e.DocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.AppliedDocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.JedocKey).HasColumnName("JEDocKey");
        });

        modelBuilder.Entity<Rq>(entity =>
        {
            entity.HasKey(e => e.DocKey).HasName("PK_RQ_DocKey");

            entity.ToTable("RQ", tb => tb.HasTrigger("UpdateRQChangeCount"));

            entity.HasIndex(e => e.DocNo, "IX_RQ_DocNo").IsUnique();

            entity.HasIndex(e => new { e.DocStatus, e.ExpiryTimeStamp }, "IX_RQ_DocStatus_ExpiryTimeStamp");

            entity.Property(e => e.DocKey).ValueGeneratedNever();
            entity.Property(e => e.AnalysisNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Attention).HasMaxLength(40);
            entity.Property(e => e.BranchCode).HasMaxLength(20);
            entity.Property(e => e.CalcDiscountOnUnitPrice)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CanSync)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.CreditorCode).HasMaxLength(12);
            entity.Property(e => e.CreditorName).HasMaxLength(100);
            entity.Property(e => e.CurrencyCode).HasMaxLength(5);
            entity.Property(e => e.CurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.DeliverAddr1).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr2).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr3).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr4).HasMaxLength(40);
            entity.Property(e => e.DeliverContact).HasMaxLength(40);
            entity.Property(e => e.DeliverFax1).HasMaxLength(25);
            entity.Property(e => e.DeliverPhone1).HasMaxLength(25);
            entity.Property(e => e.Description).HasMaxLength(80);
            entity.Property(e => e.DisplayTerm).HasMaxLength(30);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.DocStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ExpiryTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.Fax1).HasMaxLength(25);
            entity.Property(e => e.Footer1Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer1TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Footer2Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer2TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Footer3Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer3TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.FullTransferOption)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Guid).HasDefaultValueSql("(newid())");
            entity.Property(e => e.InclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("F")
                .IsFixedLength();
            entity.Property(e => e.InvAddr1).HasMaxLength(40);
            entity.Property(e => e.InvAddr2).HasMaxLength(40);
            entity.Property(e => e.InvAddr3).HasMaxLength(40);
            entity.Property(e => e.InvAddr4).HasMaxLength(40);
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.LocalAnalysisNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.NetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Phone1).HasMaxLength(25);
            entity.Property(e => e.PurchaseAgent).HasMaxLength(12);
            entity.Property(e => e.PurchaseLocation).HasMaxLength(8);
            entity.Property(e => e.Ref).HasMaxLength(40);
            entity.Property(e => e.RefDocNo).HasMaxLength(30);
            entity.Property(e => e.Remark1).HasMaxLength(40);
            entity.Property(e => e.Remark2).HasMaxLength(40);
            entity.Property(e => e.Remark3).HasMaxLength(40);
            entity.Property(e => e.Remark4).HasMaxLength(40);
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxEntityId).HasColumnName("TaxEntityID");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ToDocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.ToTaxCurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.Total).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Transferable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.CreatedUser).WithMany(p => p.RqCreatedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.CreatedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RQ_CreatedUserID");

            entity.HasOne(d => d.CreditorCodeNavigation).WithMany(p => p.Rqs)
                .HasForeignKey(d => d.CreditorCode)
                .HasConstraintName("FK_RQ_CreditorCode");

            entity.HasOne(d => d.CurrencyCodeNavigation).WithMany(p => p.Rqs)
                .HasForeignKey(d => d.CurrencyCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RQ_CurrencyCode");

            entity.HasOne(d => d.DisplayTermNavigation).WithMany(p => p.Rqs)
                .HasPrincipalKey(p => p.DisplayTerm)
                .HasForeignKey(d => d.DisplayTerm)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RQ_DisplayTerm");

            entity.HasOne(d => d.Footer1TaxCodeNavigation).WithMany(p => p.RqFooter1TaxCodeNavigations)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.Footer1TaxCode)
                .HasConstraintName("FK_RQ_Footer1TaxCode");

            entity.HasOne(d => d.Footer2TaxCodeNavigation).WithMany(p => p.RqFooter2TaxCodeNavigations)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.Footer2TaxCode)
                .HasConstraintName("FK_RQ_Footer2TaxCode");

            entity.HasOne(d => d.Footer3TaxCodeNavigation).WithMany(p => p.RqFooter3TaxCodeNavigations)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.Footer3TaxCode)
                .HasConstraintName("FK_RQ_Footer3TaxCode");

            entity.HasOne(d => d.LastModifiedUser).WithMany(p => p.RqLastModifiedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.LastModifiedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RQ_LastModifiedUserID");

            entity.HasOne(d => d.PurchaseAgentNavigation).WithMany(p => p.Rqs)
                .HasPrincipalKey(p => p.PurchaseAgent1)
                .HasForeignKey(d => d.PurchaseAgent)
                .HasConstraintName("FK_RQ_PurchaseAgent");

            entity.HasOne(d => d.PurchaseLocationNavigation).WithMany(p => p.Rqs)
                .HasPrincipalKey(p => p.Location1)
                .HasForeignKey(d => d.PurchaseLocation)
                .HasConstraintName("FK_RQ_PurchaseLocation");

            entity.HasOne(d => d.TaxEntity).WithMany(p => p.Rqs)
                .HasForeignKey(d => d.TaxEntityId)
                .HasConstraintName("FK_RQ_TaxEntityID");

            entity.HasOne(d => d.Branch).WithMany(p => p.Rqs)
                .HasPrincipalKey(p => new { p.AccNo, p.BranchCode })
                .HasForeignKey(d => new { d.CreditorCode, d.BranchCode })
                .HasConstraintName("FK_RQ_BranchCode");
        });

        modelBuilder.Entity<Rqdtl>(entity =>
        {
            entity.HasKey(e => e.DtlKey).HasName("PK_RQDTL_DtlKey");

            entity.ToTable("RQDTL");

            entity.HasIndex(e => e.DocKey, "IX_RQDTL_DocKey");

            entity.HasIndex(e => new { e.ItemCode, e.Uom }, "IX_RQDTL_ItemCode_UOM");

            entity.Property(e => e.DtlKey).ValueGeneratedNever();
            entity.Property(e => e.AddToSubTotal)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CalcByPercent).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.DeliveryDate).HasColumnType("datetime");
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Desc2).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.Discount).HasMaxLength(20);
            entity.Property(e => e.DiscountAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DtlType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EstimatedDeliveryDate).HasMaxLength(20);
            entity.Property(e => e.ExtraDiscountAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.FontStyle).HasMaxLength(8);
            entity.Property(e => e.FromDocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.FullTransferOption)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Guid).HasDefaultValueSql("(newid())");
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.LocalSubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalSubTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxAdjustment).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.MainItem)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Numbering).HasMaxLength(6);
            entity.Property(e => e.PrintOut)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SalesExemptionNo).HasMaxLength(60);
            entity.Property(e => e.SmallestQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SmallestUnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SubTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxAdjustment).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCode).HasMaxLength(14);
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Transferable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TransferedQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
            entity.Property(e => e.UserUom)
                .HasMaxLength(8)
                .HasColumnName("UserUOM");

            entity.HasOne(d => d.DeptNoNavigation).WithMany(p => p.Rqdtls)
                .HasForeignKey(d => d.DeptNo)
                .HasConstraintName("FK_RQDTL_DeptNo");

            entity.HasOne(d => d.FontStyleNavigation).WithMany(p => p.Rqdtls)
                .HasPrincipalKey(p => p.FontStyle1)
                .HasForeignKey(d => d.FontStyle)
                .HasConstraintName("FK_RQDTL_FontStyle");

            entity.HasOne(d => d.LocationNavigation).WithMany(p => p.Rqdtls)
                .HasPrincipalKey(p => p.Location1)
                .HasForeignKey(d => d.Location)
                .HasConstraintName("FK_RQDTL_Location");

            entity.HasOne(d => d.ProjNoNavigation).WithMany(p => p.Rqdtls)
                .HasForeignKey(d => d.ProjNo)
                .HasConstraintName("FK_RQDTL_ProjNo");

            entity.HasOne(d => d.TaxCodeNavigation).WithMany(p => p.Rqdtls)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.TaxCode)
                .HasConstraintName("FK_RQDTL_TaxCode");

            entity.HasOne(d => d.ItemUom).WithMany(p => p.Rqdtls)
                .HasPrincipalKey(p => new { p.ItemCode, p.Uom })
                .HasForeignKey(d => new { d.ItemCode, d.Uom })
                .HasConstraintName("FK_RQDTL_ItemUOM");
        });

        modelBuilder.Entity<SalesAgent>(entity =>
        {
            entity.HasKey(e => e.AutoKey).HasName("PK_SalesAgent_AutoKey");

            entity.ToTable("SalesAgent", tb =>
                {
                    tb.HasTrigger("SalesAgentChangeLog");
                    tb.HasTrigger("UpdateSalesAgentChangeCount");
                });

            entity.HasIndex(e => e.Guid, "UIX_SalesAgent_Guid").IsUnique();

            entity.HasIndex(e => e.SalesAgent1, "UIX_SalesAgent_SalesAgent").IsUnique();

            entity.Property(e => e.ApproverEmailAddress).HasMaxLength(200);
            entity.Property(e => e.Desc2).HasMaxLength(40);
            entity.Property(e => e.Description).HasMaxLength(40);
            entity.Property(e => e.EmailAddress).HasMaxLength(200);
            entity.Property(e => e.IsActive)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SalesAgent1)
                .HasMaxLength(12)
                .HasColumnName("SalesAgent");
        });

        modelBuilder.Entity<SalesAtc>(entity =>
        {
            entity.HasKey(e => e.Atc).HasName("PK_SalesATC_ATC");

            entity.ToTable("SalesATC");

            entity.Property(e => e.Atc)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("ATC");
            entity.Property(e => e.Description).HasMaxLength(250);
            entity.Property(e => e.IsActive)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<SerialNoTran>(entity =>
        {
            entity.HasKey(e => e.TransKey).HasName("PK_SerialNoTrans_TransKey");

            entity.ToTable(tb => tb.HasTrigger("SerialNoTransChangeLog"));

            entity.HasIndex(e => e.Guid, "UIX_SerialNoTrans_Guid").IsUnique();

            entity.Property(e => e.TransKey).ValueGeneratedNever();
            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.ExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.FromSerialNo).HasMaxLength(40);
            entity.Property(e => e.Guid).HasDefaultValueSql("(newid())");
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.LastSalesDate).HasColumnType("datetime");
            entity.Property(e => e.ManufacturedDate).HasColumnType("datetime");
            entity.Property(e => e.Remarks).HasMaxLength(20);
            entity.Property(e => e.ToSerialNo).HasMaxLength(40);
            entity.Property(e => e.TransferedSn).HasColumnName("TransferedSN");

            entity.HasOne(d => d.ItemCodeNavigation).WithMany(p => p.SerialNoTrans)
                .HasPrincipalKey(p => p.ItemCode)
                .HasForeignKey(d => d.ItemCode)
                .HasConstraintName("FK_SerialNoTrans_ItemCode");
        });

        modelBuilder.Entity<Session>(entity =>
        {
            entity.HasKey(e => e.SessionKey).HasName("PK_Session_SessionKey");

            entity.ToTable("Session");

            entity.Property(e => e.ComputerName).HasMaxLength(20);
            entity.Property(e => e.TimeEnd).HasColumnType("datetime");
            entity.Property(e => e.TimeStart)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.UserId)
                .HasMaxLength(10)
                .HasColumnName("UserID");
            entity.Property(e => e.UserName).HasMaxLength(20);
        });

        modelBuilder.Entity<Setting>(entity =>
        {
            entity.HasKey(e => e.Name).HasName("PK_Settings_Name");

            entity.Property(e => e.Name).HasMaxLength(100);
        });

        modelBuilder.Entity<SgeinvoiceAggregatedTransaction>(entity =>
        {
            entity.HasKey(e => e.DocKey);

            entity.ToTable("SGEInvoiceAggregatedTransaction");

            entity.Property(e => e.DocKey).ValueGeneratedNever();
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.CurrencyCode).HasMaxLength(5);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.DocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.FinalTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.NetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.RoundAdj).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SgeinvoiceAipsubmissionDateTime)
                .HasColumnType("datetime")
                .HasColumnName("SGEInvoiceAIPSubmissionDateTime");
            entity.Property(e => e.SgeinvoiceDocType)
                .HasMaxLength(100)
                .HasColumnName("SGEInvoiceDocType");
            entity.Property(e => e.SgeinvoiceDocumentUuid)
                .HasMaxLength(100)
                .HasColumnName("SGEInvoiceDocumentUUID");
            entity.Property(e => e.SgeinvoiceError).HasColumnName("SGEInvoiceError");
            entity.Property(e => e.SgeinvoiceFlowType)
                .HasMaxLength(100)
                .HasColumnName("SGEInvoiceFlowType");
            entity.Property(e => e.SgeinvoiceIraserror).HasColumnName("SGEInvoiceIRASError");
            entity.Property(e => e.SgeinvoiceIrassubmissionStatus)
                .HasMaxLength(100)
                .HasColumnName("SGEInvoiceIRASSubmissionStatus");
            entity.Property(e => e.SgeinvoiceIrastransmissionId)
                .HasMaxLength(100)
                .HasColumnName("SGEInvoiceIRASTransmissionId");
            entity.Property(e => e.SgeinvoiceSubmissionUuid)
                .HasMaxLength(100)
                .HasColumnName("SGEInvoiceSubmissionUUID");
            entity.Property(e => e.SgeinvoiceTraceId)
                .HasMaxLength(100)
                .HasColumnName("SGEInvoiceTraceId");
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ToTaxCurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.Total).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalExTax).HasColumnType("decimal(19, 2)");
        });

        modelBuilder.Entity<SgeinvoiceAggregatedTransactionDetail>(entity =>
        {
            entity.HasKey(e => e.DtlKey);

            entity.ToTable("SGEInvoiceAggregatedTransactionDetail");

            entity.Property(e => e.DtlKey).ValueGeneratedNever();
            entity.Property(e => e.Description).HasMaxLength(300);
            entity.Property(e => e.GovtTaxCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.LocalSubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalSubTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SubTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
        });

        modelBuilder.Entity<SgeinvoiceCustomerItemMapping>(entity =>
        {
            entity.HasKey(e => new { e.DebtorCode, e.CustomerItemCode, e.CustomerUnitCode });

            entity.ToTable("SGEInvoiceCustomerItemMapping");

            entity.Property(e => e.DebtorCode).HasMaxLength(12);
            entity.Property(e => e.CustomerItemCode).HasMaxLength(100);
            entity.Property(e => e.CustomerUnitCode).HasMaxLength(100);
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<SgeinvoiceGstregistered>(entity =>
        {
            entity.HasKey(e => e.RegisterNo);

            entity.ToTable("SGEInvoiceGSTRegistered");

            entity.Property(e => e.RegisterNo).HasMaxLength(30);
            entity.Property(e => e.IsGstregistered)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IsGSTRegistered");
            entity.Property(e => e.LastUpdatedTimeStamp).HasColumnType("datetime");
        });

        modelBuilder.Entity<SgeinvoiceLogging>(entity =>
        {
            entity.ToTable("SGEInvoiceLogging");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.AccNo).HasMaxLength(12);
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.CurrencyCode).HasMaxLength(5);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.NetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SendToIras)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SendToIRAS");
            entity.Property(e => e.SendToPeppol)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SgeinvoiceAipsubmissionDateTime)
                .HasColumnType("datetime")
                .HasColumnName("SGEInvoiceAIPSubmissionDateTime");
            entity.Property(e => e.SgeinvoiceDocType)
                .HasMaxLength(100)
                .HasColumnName("SGEInvoiceDocType");
            entity.Property(e => e.SgeinvoiceDocumentUuid)
                .HasMaxLength(100)
                .HasColumnName("SGEInvoiceDocumentUUID");
            entity.Property(e => e.SgeinvoiceFlowType)
                .HasMaxLength(100)
                .HasColumnName("SGEInvoiceFlowType");
            entity.Property(e => e.SgeinvoiceIraserror).HasColumnName("SGEInvoiceIRASError");
            entity.Property(e => e.SgeinvoiceIrassubmissionStatus)
                .HasMaxLength(100)
                .HasColumnName("SGEInvoiceIRASSubmissionStatus");
            entity.Property(e => e.SgeinvoiceIrastransmissionId)
                .HasMaxLength(100)
                .HasColumnName("SGEInvoiceIRASTransmissionId");
            entity.Property(e => e.SgeinvoicePeppolError).HasColumnName("SGEInvoicePeppolError");
            entity.Property(e => e.SgeinvoicePeppolInstanceId)
                .HasMaxLength(100)
                .HasColumnName("SGEInvoicePeppolInstanceId");
            entity.Property(e => e.SgeinvoicePeppolReceiver)
                .HasMaxLength(100)
                .HasColumnName("SGEInvoicePeppolReceiver");
            entity.Property(e => e.SgeinvoicePeppolSender)
                .HasMaxLength(100)
                .HasColumnName("SGEInvoicePeppolSender");
            entity.Property(e => e.SgeinvoicePeppolSubmissionStatus)
                .HasMaxLength(100)
                .HasColumnName("SGEInvoicePeppolSubmissionStatus");
            entity.Property(e => e.SgeinvoiceSubmissionUuid)
                .HasMaxLength(100)
                .HasColumnName("SGEInvoiceSubmissionUUID");
            entity.Property(e => e.SgeinvoiceTraceId)
                .HasMaxLength(100)
                .HasColumnName("SGEInvoiceTraceId");
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Total).HasColumnType("decimal(19, 2)");
        });

        modelBuilder.Entity<SgeinvoiceReceiveDocument>(entity =>
        {
            entity.HasKey(e => e.DocKey);

            entity.ToTable("SGEInvoiceReceiveDocument");

            entity.Property(e => e.DocKey).ValueGeneratedNever();
            entity.Property(e => e.Address1).HasMaxLength(40);
            entity.Property(e => e.Address2).HasMaxLength(40);
            entity.Property(e => e.Address3).HasMaxLength(40);
            entity.Property(e => e.CurrencyCode).HasMaxLength(10);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(100);
            entity.Property(e => e.DocType).HasMaxLength(10);
            entity.Property(e => e.DocumentUuid)
                .HasMaxLength(100)
                .HasColumnName("DocumentUUID");
            entity.Property(e => e.Name).HasMaxLength(100);
            entity.Property(e => e.Reason).HasMaxLength(80);
            entity.Property(e => e.ReceiverPeppolId)
                .HasMaxLength(50)
                .HasColumnName("ReceiverPeppolID");
            entity.Property(e => e.ResponseCode).HasMaxLength(100);
            entity.Property(e => e.SenderPeppolId)
                .HasMaxLength(50)
                .HasColumnName("SenderPeppolID");
            entity.Property(e => e.SyncTime).HasColumnType("datetime");
            entity.Property(e => e.UploadTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<SgeinvoiceSupplierItemMapping>(entity =>
        {
            entity.HasKey(e => new { e.CreditorCode, e.SupplierItemCode, e.SupplierUnitCode });

            entity.ToTable("SGEInvoiceSupplierItemMapping");

            entity.Property(e => e.CreditorCode).HasMaxLength(12);
            entity.Property(e => e.SupplierItemCode).HasMaxLength(100);
            entity.Property(e => e.SupplierUnitCode).HasMaxLength(100);
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<ShippingMethod>(entity =>
        {
            entity.HasKey(e => e.AutoKey).HasName("PK_ShippingMethod_AutoKey");

            entity.ToTable("ShippingMethod", tb => tb.HasTrigger("UpdateShippingMethodChangeCount"));

            entity.HasIndex(e => e.ShippingMethod1, "UIX_ShippingMethod_ShippingMethod").IsUnique();

            entity.Property(e => e.Description).HasMaxLength(40);
            entity.Property(e => e.IsActive)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("T")
                .IsFixedLength();
            entity.Property(e => e.ShippingMethod1)
                .HasMaxLength(20)
                .HasColumnName("ShippingMethod");
        });

        modelBuilder.Entity<SimpleSyncSetting>(entity =>
        {
            entity.HasKey(e => e.SettingKey).HasName("PK_SimpleSyncSetting_SettingKey");

            entity.ToTable("SimpleSyncSetting");

            entity.Property(e => e.SettingKey).ValueGeneratedNever();
            entity.Property(e => e.Dbname)
                .HasMaxLength(50)
                .HasColumnName("DBName");
            entity.Property(e => e.IsCopyCsfromServer)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IsCopyCSFromServer");
            entity.Property(e => e.IsCopyDofromServer)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IsCopyDOFromServer");
            entity.Property(e => e.IsCopyIvfromServer)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IsCopyIVFromServer");
            entity.Property(e => e.IsCopyOpening)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.IsCopyPriceBook)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.IsCopyQtfromServer)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IsCopyQTFromServer");
            entity.Property(e => e.IsCopySofromServer)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IsCopySOFromServer");
            entity.Property(e => e.IsDefaultPassword)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.IsExportCstoServer)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IsExportCSToServer");
            entity.Property(e => e.IsExportDotoServer)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IsExportDOToServer");
            entity.Property(e => e.IsExportIvtoServer)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IsExportIVToServer");
            entity.Property(e => e.IsExportQttoServer)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IsExportQTToServer");
            entity.Property(e => e.IsExportSotoServer)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IsExportSOToServer");
            entity.Property(e => e.LoginPassword).HasMaxLength(200);
            entity.Property(e => e.LoginUserId)
                .HasMaxLength(10)
                .HasColumnName("LoginUserID");
            entity.Property(e => e.Password).HasMaxLength(200);
            entity.Property(e => e.Server).HasMaxLength(50);
        });

        modelBuilder.Entity<So>(entity =>
        {
            entity.HasKey(e => e.DocKey).HasName("PK_SO_DocKey");

            entity.ToTable("SO", tb => tb.HasTrigger("UpdateSOChangeCount"));

            entity.HasIndex(e => e.DocNo, "IX_SO_DocNo").IsUnique();

            entity.HasIndex(e => new { e.DocStatus, e.ExpiryTimeStamp }, "IX_SO_DocStatus_ExpiryTimeStamp");

            entity.HasIndex(e => new { e.ToDocType, e.ToDocKey }, "IX_SO_ToDocTypeKey");

            entity.Property(e => e.DocKey).ValueGeneratedNever();
            entity.Property(e => e.AnalysisNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Attention).HasMaxLength(40);
            entity.Property(e => e.BranchCode).HasMaxLength(20);
            entity.Property(e => e.CalcDiscountOnUnitPrice)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CanSync)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CanTransferByValue)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.CurrencyCode).HasMaxLength(5);
            entity.Property(e => e.CurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.DebtorCode).HasMaxLength(12);
            entity.Property(e => e.DebtorName).HasMaxLength(100);
            entity.Property(e => e.DeliverAddr1).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr2).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr3).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr4).HasMaxLength(40);
            entity.Property(e => e.DeliverContact).HasMaxLength(40);
            entity.Property(e => e.DeliverFax1).HasMaxLength(25);
            entity.Property(e => e.DeliverPhone1).HasMaxLength(25);
            entity.Property(e => e.Description).HasMaxLength(80);
            entity.Property(e => e.DisplayTerm).HasMaxLength(30);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.DocStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ExpiryTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.Fax1).HasMaxLength(25);
            entity.Property(e => e.FinalTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer1TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Footer2Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer2TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Footer3Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer3TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.FullTransferOption)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Guid).HasDefaultValueSql("(newid())");
            entity.Property(e => e.InclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("F")
                .IsFixedLength();
            entity.Property(e => e.InvAddr1).HasMaxLength(40);
            entity.Property(e => e.InvAddr2).HasMaxLength(40);
            entity.Property(e => e.InvAddr3).HasMaxLength(40);
            entity.Property(e => e.InvAddr4).HasMaxLength(40);
            entity.Property(e => e.IsRoundAdj)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("F")
                .IsFixedLength();
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.LocalAnalysisNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.MultiPrice).HasMaxLength(8);
            entity.Property(e => e.NetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Phone1).HasMaxLength(25);
            entity.Property(e => e.Ref).HasMaxLength(40);
            entity.Property(e => e.RefDocNo).HasMaxLength(30);
            entity.Property(e => e.Remark1).HasMaxLength(40);
            entity.Property(e => e.Remark2).HasMaxLength(40);
            entity.Property(e => e.Remark3).HasMaxLength(40);
            entity.Property(e => e.Remark4).HasMaxLength(40);
            entity.Property(e => e.RoundAdj).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SalesAgent).HasMaxLength(12);
            entity.Property(e => e.SalesExemptionExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.SalesExemptionNo).HasMaxLength(60);
            entity.Property(e => e.SalesLocation).HasMaxLength(8);
            entity.Property(e => e.ShipInfo).HasMaxLength(40);
            entity.Property(e => e.ShipVia).HasMaxLength(20);
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxEntityId).HasColumnName("TaxEntityID");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ToDocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.ToTaxCurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.Total).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Transferable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TransferedAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.UdfSuperAppId)
                .HasMaxLength(32)
                .HasColumnName("UDF_SuperAppId");
            entity.Property(e => e.UdfTags)
                .HasMaxLength(100)
                .HasColumnName("UDF_Tags");
            entity.Property(e => e.YourPodate)
                .HasColumnType("datetime")
                .HasColumnName("YourPODate");
            entity.Property(e => e.YourPono)
                .HasMaxLength(25)
                .HasColumnName("YourPONo");

            entity.HasOne(d => d.CreatedUser).WithMany(p => p.SoCreatedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.CreatedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SO_CreatedUserID");

            entity.HasOne(d => d.CurrencyCodeNavigation).WithMany(p => p.Sos)
                .HasForeignKey(d => d.CurrencyCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SO_CurrencyCode");

            entity.HasOne(d => d.DebtorCodeNavigation).WithMany(p => p.Sos)
                .HasForeignKey(d => d.DebtorCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SO_DebtorCode");

            entity.HasOne(d => d.DisplayTermNavigation).WithMany(p => p.Sos)
                .HasPrincipalKey(p => p.DisplayTerm)
                .HasForeignKey(d => d.DisplayTerm)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SO_DisplayTerm");

            entity.HasOne(d => d.Footer1TaxCodeNavigation).WithMany(p => p.SoFooter1TaxCodeNavigations)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.Footer1TaxCode)
                .HasConstraintName("FK_SO_Footer1TaxCode");

            entity.HasOne(d => d.Footer2TaxCodeNavigation).WithMany(p => p.SoFooter2TaxCodeNavigations)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.Footer2TaxCode)
                .HasConstraintName("FK_SO_Footer2TaxCode");

            entity.HasOne(d => d.Footer3TaxCodeNavigation).WithMany(p => p.SoFooter3TaxCodeNavigations)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.Footer3TaxCode)
                .HasConstraintName("FK_SO_Footer3TaxCode");

            entity.HasOne(d => d.LastModifiedUser).WithMany(p => p.SoLastModifiedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.LastModifiedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SO_LastModifiedUserID");

            entity.HasOne(d => d.SalesAgentNavigation).WithMany(p => p.Sos)
                .HasPrincipalKey(p => p.SalesAgent1)
                .HasForeignKey(d => d.SalesAgent)
                .HasConstraintName("FK_SO_SalesAgent");

            entity.HasOne(d => d.SalesLocationNavigation).WithMany(p => p.Sos)
                .HasPrincipalKey(p => p.Location1)
                .HasForeignKey(d => d.SalesLocation)
                .HasConstraintName("FK_SO_SalesLocation");

            entity.HasOne(d => d.ShipViaNavigation).WithMany(p => p.Sos)
                .HasPrincipalKey(p => p.ShippingMethod1)
                .HasForeignKey(d => d.ShipVia)
                .HasConstraintName("FK_SO_ShipVia");

            entity.HasOne(d => d.TaxEntity).WithMany(p => p.Sos)
                .HasForeignKey(d => d.TaxEntityId)
                .HasConstraintName("FK_SO_TaxEntityID");

            entity.HasOne(d => d.Branch).WithMany(p => p.Sos)
                .HasPrincipalKey(p => new { p.AccNo, p.BranchCode })
                .HasForeignKey(d => new { d.DebtorCode, d.BranchCode })
                .HasConstraintName("FK_SO_BranchCode");
        });

        modelBuilder.Entity<Sodtl>(entity =>
        {
            entity.HasKey(e => e.DtlKey).HasName("PK_SODTL_DtlKey");

            entity.ToTable("SODTL");

            entity.HasIndex(e => e.DocKey, "IX_SODTL_DocKey");

            entity.HasIndex(e => e.FromDocDtlKey, "IX_SODTL_FromDocDtlKey");

            entity.HasIndex(e => new { e.ItemCode, e.Uom }, "IX_SODTL_ItemCode_UOM");

            entity.Property(e => e.DtlKey).ValueGeneratedNever();
            entity.Property(e => e.AddToSubTotal)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.CalcByPercent).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.DeliveryDate).HasColumnType("datetime");
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Desc2).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.Discount).HasMaxLength(20);
            entity.Property(e => e.DiscountAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DtlType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EstimatedDeliveryDate).HasMaxLength(20);
            entity.Property(e => e.ExtraDiscountAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Focqty)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("FOCQty");
            entity.Property(e => e.FoctransferedPoqty)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("FOCTransferedPOQty");
            entity.Property(e => e.FoctransferedQty)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("FOCTransferedQty");
            entity.Property(e => e.FontStyle).HasMaxLength(8);
            entity.Property(e => e.FromDocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.FullTransferOption)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Guid).HasDefaultValueSql("(newid())");
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.LastAorpmodified)
                .HasColumnType("datetime")
                .HasColumnName("LastAORPModified");
            entity.Property(e => e.LastAorpmodifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastAORPModifiedUserID");
            entity.Property(e => e.LastDrpmodified)
                .HasColumnType("datetime")
                .HasColumnName("LastDRPModified");
            entity.Property(e => e.LastDrpmodifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastDRPModifiedUserID");
            entity.Property(e => e.LastOpmodified)
                .HasColumnType("datetime")
                .HasColumnName("LastOPModified");
            entity.Property(e => e.LastOpmodifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastOPModifiedUserID");
            entity.Property(e => e.LocalSubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalSubTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxAdjustment).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.MainItem)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Numbering).HasMaxLength(6);
            entity.Property(e => e.PrintOut)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SalesExemptionNo).HasMaxLength(60);
            entity.Property(e => e.SmallestQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SmallestUnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.StockReceived)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("F")
                .IsFixedLength();
            entity.Property(e => e.SubQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SubTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxAdjustment).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCode).HasMaxLength(14);
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalAssemblyOrderRequestQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.TotalDeliveryRequestQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.TotalPurchaseRequestQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Transferable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TransferedAoqty)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("TransferedAOQty");
            entity.Property(e => e.TransferedPoqty)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("TransferedPOQty");
            entity.Property(e => e.TransferedQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
            entity.Property(e => e.UserUom)
                .HasMaxLength(8)
                .HasColumnName("UserUOM");
            entity.Property(e => e.YourPodate)
                .HasColumnType("datetime")
                .HasColumnName("YourPODate");
            entity.Property(e => e.YourPono)
                .HasMaxLength(25)
                .HasColumnName("YourPONo");

            entity.HasOne(d => d.DeptNoNavigation).WithMany(p => p.Sodtls)
                .HasForeignKey(d => d.DeptNo)
                .HasConstraintName("FK_SODTL_DeptNo");

            entity.HasOne(d => d.FontStyleNavigation).WithMany(p => p.Sodtls)
                .HasPrincipalKey(p => p.FontStyle1)
                .HasForeignKey(d => d.FontStyle)
                .HasConstraintName("FK_SODTL_FontStyle");

            entity.HasOne(d => d.LastAorpmodifiedUser).WithMany(p => p.SodtlLastAorpmodifiedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.LastAorpmodifiedUserId)
                .HasConstraintName("FK_SODTL_LastAORPModifiedUserID");

            entity.HasOne(d => d.LastDrpmodifiedUser).WithMany(p => p.SodtlLastDrpmodifiedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.LastDrpmodifiedUserId)
                .HasConstraintName("FK_SODTL_LastDRPModifiedUserID");

            entity.HasOne(d => d.LastOpmodifiedUser).WithMany(p => p.SodtlLastOpmodifiedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.LastOpmodifiedUserId)
                .HasConstraintName("FK_SODTL_LastOPModifiedUserID");

            entity.HasOne(d => d.LocationNavigation).WithMany(p => p.Sodtls)
                .HasPrincipalKey(p => p.Location1)
                .HasForeignKey(d => d.Location)
                .HasConstraintName("FK_SODTL_Location");

            entity.HasOne(d => d.ProjNoNavigation).WithMany(p => p.Sodtls)
                .HasForeignKey(d => d.ProjNo)
                .HasConstraintName("FK_SODTL_ProjNo");

            entity.HasOne(d => d.TaxCodeNavigation).WithMany(p => p.Sodtls)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.TaxCode)
                .HasConstraintName("FK_SODTL_TaxCode");

            entity.HasOne(d => d.ItemUom).WithMany(p => p.Sodtls)
                .HasPrincipalKey(p => new { p.ItemCode, p.Uom })
                .HasForeignKey(d => new { d.ItemCode, d.Uom })
                .HasConstraintName("FK_SODTL_ItemUOM");
        });

        modelBuilder.Entity<Sstprocessor>(entity =>
        {
            entity.HasKey(e => e.Sstkey).HasName("PK_SSTProcessorr_SSTKey");

            entity.ToTable("SSTProcessor");

            entity.Property(e => e.Sstkey).HasColumnName("SSTKey");
            entity.Property(e => e.Compressed)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.DeclarantDesignation).HasMaxLength(200);
            entity.Property(e => e.DeclarantName).HasMaxLength(200);
            entity.Property(e => e.DeclarationDate).HasColumnType("datetime");
            entity.Property(e => e.FromDate).HasColumnType("datetime");
            entity.Property(e => e.IcorPassportNo)
                .HasMaxLength(20)
                .HasColumnName("ICOrPassportNo");
            entity.Property(e => e.JedocKey).HasColumnName("JEDocKey");
            entity.Property(e => e.ParentSstkey).HasColumnName("ParentSSTKey");
            entity.Property(e => e.PenaltyRate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.ProductVersion).HasMaxLength(100);
            entity.Property(e => e.Sstversion).HasColumnName("SSTVersion");
            entity.Property(e => e.Submitted)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TelephoneNo).HasMaxLength(20);
            entity.Property(e => e.ToDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Sstsetting>(entity =>
        {
            entity.HasKey(e => e.Sstname);

            entity.ToTable("SSTSetting");

            entity.Property(e => e.Sstname)
                .HasMaxLength(100)
                .HasColumnName("SSTName");
            entity.Property(e => e.Sstvalue)
                .HasMaxLength(300)
                .HasColumnName("SSTValue");
        });

        modelBuilder.Entity<StockDisassembly>(entity =>
        {
            entity.HasKey(e => e.DocKey).HasName("PK_StockDisassembly_DocKey");

            entity.ToTable("StockDisassembly", tb => tb.HasTrigger("UpdateStockDisassemblyChangeCount"));

            entity.HasIndex(e => e.DocNo, "IX_StockDisassembly_DocNo").IsUnique();

            entity.Property(e => e.DocKey).ValueGeneratedNever();
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.CanSync)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.DisassemblyCost).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.DtlTotal).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Guid).HasDefaultValueSql("(newid())");
            entity.Property(e => e.IsMultilevel)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.ItemCost).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.NetTotal).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.RefDocNo).HasMaxLength(30);
            entity.Property(e => e.Remark1).HasMaxLength(40);
            entity.Property(e => e.Remark2).HasMaxLength(40);
            entity.Property(e => e.Remark3).HasMaxLength(40);
            entity.Property(e => e.Remark4).HasMaxLength(40);
            entity.Property(e => e.Total).HasColumnType("decimal(25, 8)");

            entity.HasOne(d => d.CreatedUser).WithMany(p => p.StockDisassemblyCreatedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.CreatedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_StockDisassembly_CreatedUserID");

            entity.HasOne(d => d.DeptNoNavigation).WithMany(p => p.StockDisassemblies)
                .HasForeignKey(d => d.DeptNo)
                .HasConstraintName("FK_StockDisassembly_DeptNo");

            entity.HasOne(d => d.LastModifiedUser).WithMany(p => p.StockDisassemblyLastModifiedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.LastModifiedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_StockDisassembly_LastModifiedUserID");

            entity.HasOne(d => d.LocationNavigation).WithMany(p => p.StockDisassemblies)
                .HasPrincipalKey(p => p.Location1)
                .HasForeignKey(d => d.Location)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_StockDisassembly_Location");

            entity.HasOne(d => d.ProjNoNavigation).WithMany(p => p.StockDisassemblies)
                .HasForeignKey(d => d.ProjNo)
                .HasConstraintName("FK_StockDisassembly_ProjNo");

            entity.HasOne(d => d.ItemBatch).WithMany(p => p.StockDisassemblies)
                .HasPrincipalKey(p => new { p.ItemCode, p.BatchNo })
                .HasForeignKey(d => new { d.ItemCode, d.BatchNo })
                .HasConstraintName("FK_StockDisassembly_ItemBatch");
        });

        modelBuilder.Entity<StockDisassemblyDtl>(entity =>
        {
            entity.HasKey(e => e.DtlKey).HasName("PK_StockDisassemblyDTL_DtlKey");

            entity.ToTable("StockDisassemblyDTL");

            entity.HasIndex(e => e.DocKey, "IX_StockDisassemblyDTL_DocKey");

            entity.Property(e => e.DtlKey).ValueGeneratedNever();
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.CostFraction).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Desc2).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.Guid).HasDefaultValueSql("(newid())");
            entity.Property(e => e.IsBomitem)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IsBOMItem");
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.ItemCost).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.Numbering).HasMaxLength(6);
            entity.Property(e => e.OverHeadCost).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.PrintOut)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Remark).HasMaxLength(40);
            entity.Property(e => e.SubTotalCost).HasColumnType("decimal(25, 8)");

            entity.HasOne(d => d.DeptNoNavigation).WithMany(p => p.StockDisassemblyDtls)
                .HasForeignKey(d => d.DeptNo)
                .HasConstraintName("FK_StockDisassemblyDTL_DeptNo");

            entity.HasOne(d => d.ItemCodeNavigation).WithMany(p => p.StockDisassemblyDtls)
                .HasPrincipalKey(p => p.ItemCode)
                .HasForeignKey(d => d.ItemCode)
                .HasConstraintName("FK_StockDisassemblyDTL_ItemCode");

            entity.HasOne(d => d.LocationNavigation).WithMany(p => p.StockDisassemblyDtls)
                .HasPrincipalKey(p => p.Location1)
                .HasForeignKey(d => d.Location)
                .HasConstraintName("FK_StockDisassemblyDTL_Location");

            entity.HasOne(d => d.ProjNoNavigation).WithMany(p => p.StockDisassemblyDtls)
                .HasForeignKey(d => d.ProjNo)
                .HasConstraintName("FK_StockDisassemblyDTL_ProjNo");

            entity.HasOne(d => d.ItemBatch).WithMany(p => p.StockDisassemblyDtls)
                .HasPrincipalKey(p => new { p.ItemCode, p.BatchNo })
                .HasForeignKey(d => new { d.ItemCode, d.BatchNo })
                .HasConstraintName("FK_StockDisassemblyDTL_ItemBatch");
        });

        modelBuilder.Entity<StockDtl>(entity =>
        {
            entity.HasKey(e => e.StockDtlkey).HasName("PK_StockDTL_StockDTLKey");

            entity.ToTable("StockDTL");

            entity.HasIndex(e => new { e.DocDate, e.BatchNo, e.ItemCode, e.Uom, e.Location }, "IX_StockDTL_DocDate_BatchNo_ItemCode_UOM_Location");

            entity.HasIndex(e => new { e.DocType, e.DocKey }, "IX_StockDTL_DocType_DocKey");

            entity.HasIndex(e => e.DtlKey, "IX_StockDTL_DtlKey");

            entity.HasIndex(e => new { e.ItemCode, e.Uom, e.Location }, "IX_StockDTL_ItemCode_UOM_Location");

            entity.HasIndex(e => new { e.ItemCode, e.Uom, e.StockDtlkey, e.BatchNo, e.DocDate, e.DocKey, e.Location, e.ProjNo, e.DeptNo, e.Seq, e.DocType, e.DtlKey, e.Qty, e.CostType, e.LastModified, e.ReferTo }, "IX_StockDTL_ItemCode_UOM_StockDTLKey_BatchNo_DocDate_DocKey_Location");

            entity.Property(e => e.StockDtlkey)
                .ValueGeneratedNever()
                .HasColumnName("StockDTLKey");
            entity.Property(e => e.AdjustedCost).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.BalanceFifo)
                .IsUnicode(false)
                .HasColumnName("BalanceFIFO");
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.CftotalAdjustedCost)
                .HasDefaultValue(0.00000000m)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("CFTotalAdjustedCost");
            entity.Property(e => e.CftotalCost)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("CFTotalCost");
            entity.Property(e => e.CftotalQty)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("CFTotalQty");
            entity.Property(e => e.Cost).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.Fifocost)
                .IsUnicode(false)
                .HasColumnName("FIFOCost");
            entity.Property(e => e.InputCost).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.LastModified)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.ReportingBalanceFifo)
                .IsUnicode(false)
                .HasColumnName("ReportingBalanceFIFO");
            entity.Property(e => e.ReportingCost).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.ReportingFifocost)
                .IsUnicode(false)
                .HasColumnName("ReportingFIFOCost");
            entity.Property(e => e.ReportingTotalCost).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.TotalCost).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");

            entity.HasOne(d => d.DeptNoNavigation).WithMany(p => p.StockDtls)
                .HasForeignKey(d => d.DeptNo)
                .HasConstraintName("FK_StockDTL_DeptNo");

            entity.HasOne(d => d.LocationNavigation).WithMany(p => p.StockDtls)
                .HasPrincipalKey(p => p.Location1)
                .HasForeignKey(d => d.Location)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_StockDTL_Location");

            entity.HasOne(d => d.ProjNoNavigation).WithMany(p => p.StockDtls)
                .HasForeignKey(d => d.ProjNo)
                .HasConstraintName("FK_StockDTL_ProjNo");

            entity.HasOne(d => d.ItemUom).WithMany(p => p.StockDtls)
                .HasPrincipalKey(p => new { p.ItemCode, p.Uom })
                .HasForeignKey(d => new { d.ItemCode, d.Uom })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_StockDTL_ItemUOM");
        });

        modelBuilder.Entity<StockDtlchangeQ>(entity =>
        {
            entity.HasKey(e => e.ChangeQkey).HasName("PK_StockDTLChangeQ_ChangeQKey");

            entity.ToTable("StockDTLChangeQ");

            entity.Property(e => e.ChangeQkey)
                .ValueGeneratedNever()
                .HasColumnName("ChangeQKey");
            entity.Property(e => e.Action)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.StockDtlkey).HasColumnName("StockDTLKey");

            entity.HasOne(d => d.ItemCodeNavigation).WithMany(p => p.StockDtlchangeQs)
                .HasPrincipalKey(p => p.ItemCode)
                .HasForeignKey(d => d.ItemCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_StockDTLChangeQ_ItemCode");
        });

        modelBuilder.Entity<StockPbalance>(entity =>
        {
            entity.HasKey(e => e.AutoKey).HasName("PK_StockPBalance_AutoKey");

            entity.ToTable("StockPBalance");

            entity.HasIndex(e => new { e.StockSetKey, e.PeriodNo, e.ProjNo, e.DeptNo }, "UIX_StockPBalance_StockSetKey_PeriodNo_ProjNo_DeptNo").IsUnique();

            entity.Property(e => e.Balance).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.ProjNo).HasMaxLength(10);

            entity.HasOne(d => d.DeptNoNavigation).WithMany(p => p.StockPbalances)
                .HasForeignKey(d => d.DeptNo)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_StockPBalance_DeptNo");

            entity.HasOne(d => d.ProjNoNavigation).WithMany(p => p.StockPbalances)
                .HasForeignKey(d => d.ProjNo)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_StockPBalance_ProjNo");
        });

        modelBuilder.Entity<StockSet>(entity =>
        {
            entity.HasKey(e => e.StockSetKey).HasName("PK_StockSet_StockSetKey");

            entity.ToTable("StockSet");

            entity.Property(e => e.StockSetKey).ValueGeneratedNever();
            entity.Property(e => e.BalanceStock).HasMaxLength(12);
            entity.Property(e => e.CloseStock).HasMaxLength(12);
            entity.Property(e => e.OpenStock).HasMaxLength(12);

            entity.HasOne(d => d.BalanceStockNavigation).WithMany(p => p.StockSetBalanceStockNavigations)
                .HasForeignKey(d => d.BalanceStock)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_StockSet_BalanceStock");

            entity.HasOne(d => d.CloseStockNavigation).WithMany(p => p.StockSetCloseStockNavigations)
                .HasForeignKey(d => d.CloseStock)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_StockSet_CloseStock");

            entity.HasOne(d => d.OpenStockNavigation).WithMany(p => p.StockSetOpenStockNavigations)
                .HasForeignKey(d => d.OpenStock)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_StockSet_OpenStock");
        });

        modelBuilder.Entity<StockTake>(entity =>
        {
            entity.HasKey(e => e.DocKey).HasName("PK_StockTake_DocKey");

            entity.ToTable("StockTake", tb => tb.HasTrigger("UpdateStockTakeChangeCount"));

            entity.HasIndex(e => e.DocNo, "UIX_StockTake_DocNo").IsUnique();

            entity.Property(e => e.DocKey).ValueGeneratedNever();
            entity.Property(e => e.CanSync)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.Guid).HasDefaultValueSql("(newid())");
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.LastPostedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.RefDocNo).HasMaxLength(30);
            entity.Property(e => e.Remark1).HasMaxLength(40);
            entity.Property(e => e.Remark2).HasMaxLength(40);
            entity.Property(e => e.Remark3).HasMaxLength(40);
            entity.Property(e => e.Remark4).HasMaxLength(40);
            entity.Property(e => e.Total).HasColumnType("decimal(19, 2)");

            entity.HasOne(d => d.CreatedUser).WithMany(p => p.StockTakeCreatedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.CreatedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_StockTake_CreatedUserID");

            entity.HasOne(d => d.LastModifiedUser).WithMany(p => p.StockTakeLastModifiedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.LastModifiedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_StockTake_LastModifiedUserID");

            entity.HasOne(d => d.LocationNavigation).WithMany(p => p.StockTakes)
                .HasPrincipalKey(p => p.Location1)
                .HasForeignKey(d => d.Location)
                .HasConstraintName("FK_StockTake_Location");
        });

        modelBuilder.Entity<StockTakeDtl>(entity =>
        {
            entity.HasKey(e => e.DtlKey).HasName("PK_StockTakeDTL_DtlKey");

            entity.ToTable("StockTakeDTL");

            entity.HasIndex(e => e.DocKey, "IX_StockTakeDTL_DocKey");

            entity.Property(e => e.DtlKey).ValueGeneratedNever();
            entity.Property(e => e.BalQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.Desc2).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.DiffQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Guid).HasDefaultValueSql("(newid())");
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.Numbering).HasMaxLength(6);
            entity.Property(e => e.PhysicalQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.PrintOut)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Remarks).HasMaxLength(40);
            entity.Property(e => e.Shelf).HasMaxLength(20);
            entity.Property(e => e.SubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.UnitCost).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");

            entity.HasOne(d => d.ItemBatch).WithMany(p => p.StockTakeDtls)
                .HasPrincipalKey(p => new { p.ItemCode, p.BatchNo })
                .HasForeignKey(d => new { d.ItemCode, d.BatchNo })
                .HasConstraintName("FK_StockTakeDTL_ItemBatch");

            entity.HasOne(d => d.ItemUom).WithMany(p => p.StockTakeDtls)
                .HasPrincipalKey(p => new { p.ItemCode, p.Uom })
                .HasForeignKey(d => new { d.ItemCode, d.Uom })
                .HasConstraintName("FK_StockTakeDTL_ItemUOM");
        });

        modelBuilder.Entity<StockTransQueue>(entity =>
        {
            entity.HasKey(e => e.StockTransQueueKey)
                .HasName("PK__StockTra__3C1412E208087D7B")
                .IsClustered(false);

            entity.ToTable("StockTransQueue");

            entity.Property(e => e.StockTransQueueKey).ValueGeneratedNever();
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.CheckTrialPlanLimit).HasDefaultValue(true);
            entity.Property(e => e.DocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.StockDtlkey).HasColumnName("StockDTLKey");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<SyncCriteriaProfile>(entity =>
        {
            entity.HasKey(e => e.CriteriaKey).HasName("PK_SyncCriteriaProfile_CriteriaKey");

            entity.ToTable("SyncCriteriaProfile");

            entity.Property(e => e.CriteriaKey).ValueGeneratedNever();
            entity.Property(e => e.Cndirect).HasColumnName("CNDirect");
            entity.Property(e => e.Cpdirect).HasColumnName("CPDirect");
            entity.Property(e => e.CriteriaName).HasMaxLength(50);
            entity.Property(e => e.Csdirect).HasColumnName("CSDirect");
            entity.Property(e => e.Dndirect).HasColumnName("DNDirect");
            entity.Property(e => e.Dodirect).HasColumnName("DODirect");
            entity.Property(e => e.Drdirect).HasColumnName("DRDirect");
            entity.Property(e => e.Grdirect).HasColumnName("GRDirect");
            entity.Property(e => e.Gtdirect).HasColumnName("GTDirect");
            entity.Property(e => e.Ivdirect).HasColumnName("IVDirect");
            entity.Property(e => e.Pidirect).HasColumnName("PIDirect");
            entity.Property(e => e.Podirect).HasColumnName("PODirect");
            entity.Property(e => e.Prdirect).HasColumnName("PRDirect");
            entity.Property(e => e.Qtdirect).HasColumnName("QTDirect");
            entity.Property(e => e.Rqdirect).HasColumnName("RQDirect");
            entity.Property(e => e.Sodirect).HasColumnName("SODirect");
            entity.Property(e => e.Xpdirect).HasColumnName("XPDirect");
            entity.Property(e => e.Xsdirect).HasColumnName("XSDirect");
        });

        modelBuilder.Entity<SyncProfile>(entity =>
        {
            entity.HasKey(e => e.ProfileKey).HasName("PK_SyncProfile_ProfileKey");

            entity.ToTable("SyncProfile");

            entity.Property(e => e.ProfileKey).ValueGeneratedNever();
            entity.Property(e => e.EncryptionKey).HasMaxLength(100);
            entity.Property(e => e.ProfileName).HasMaxLength(50);
            entity.Property(e => e.ServerPassword)
                .HasMaxLength(50)
                .IsFixedLength();
            entity.Property(e => e.Uri)
                .HasMaxLength(255)
                .HasColumnName("URI");
        });

        modelBuilder.Entity<SystemExtension>(entity =>
        {
            entity.HasKey(e => e.Guid).HasName("PK_SystemExtension_Guid");

            entity.ToTable("SystemExtension");

            entity.Property(e => e.Guid).ValueGeneratedNever();
            entity.Property(e => e.AllowSync)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.Dbversion)
                .HasMaxLength(20)
                .HasColumnName("DBVersion");
            entity.Property(e => e.ExtractFiles)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LicenseKey).IsUnicode(false);
            entity.Property(e => e.MinimumAccountingVersion)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Name).HasMaxLength(100);
            entity.Property(e => e.NextMinimumAccountingVersion)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ScriptLanguage)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Signature)
                .HasMaxLength(88)
                .IsUnicode(false);
            entity.Property(e => e.SupportLicenseKey)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SupportPhone).HasMaxLength(25);
            entity.Property(e => e.Version)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<SystemExtensionFile>(entity =>
        {
            entity.HasKey(e => new { e.Guid, e.FileName }).HasName("PK_SystemExtensionFiles_Guid_FileName");

            entity.Property(e => e.FileName).HasMaxLength(260);
            entity.Property(e => e.CreationTimeUtc).HasColumnType("datetime");
            entity.Property(e => e.ExecuteAfterExtracted)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LastAccessTimeUtc).HasColumnType("datetime");
            entity.Property(e => e.LastWriteTimeUtc).HasColumnType("datetime");

            entity.HasOne(d => d.Gu).WithMany(p => p.SystemExtensionFiles)
                .HasForeignKey(d => d.Guid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SystemExtensionFiles_Guid");
        });

        modelBuilder.Entity<Tariff>(entity =>
        {
            entity.HasKey(e => e.AutoKey).HasName("PK_Tariff_AutoKey");

            entity.ToTable("Tariff", tb =>
                {
                    tb.HasTrigger("TariffChangeLog");
                    tb.HasTrigger("UpdateTariffChangeCount");
                });

            entity.HasIndex(e => e.Guid, "UIX_Tariff_Guid").IsUnique();

            entity.HasIndex(e => e.TariffCode, "UIX_Tariff_TariffCode").IsUnique();

            entity.Property(e => e.Desc2).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.IsActive)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TariffCode).HasMaxLength(12);
        });

        modelBuilder.Entity<TaxCode>(entity =>
        {
            entity.HasKey(e => e.AutoKey).HasName("PK_TaxType_AutoKey");

            entity.ToTable("TaxCode", tb =>
                {
                    tb.HasTrigger("TaxCodeChangeLog");
                    tb.HasTrigger("UpdateTaxCodeChangeCount");
                });

            entity.HasIndex(e => e.Guid, "UIX_TaxType_Guid").IsUnique();

            entity.HasIndex(e => e.TaxCode1, "UIX_TaxType_TaxType").IsUnique();

            entity.Property(e => e.AddToCost)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("F")
                .IsFixedLength();
            entity.Property(e => e.Description).HasMaxLength(120);
            entity.Property(e => e.GovtTaxCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.Inclusive)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.IsActive)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.IsDefault)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("F")
                .IsFixedLength();
            entity.Property(e => e.IsZeroRate)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("F")
                .IsFixedLength();
            entity.Property(e => e.SupplyPurchase)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("S")
                .IsFixedLength();
            entity.Property(e => e.TaxAccNo).HasMaxLength(12);
            entity.Property(e => e.TaxCode1)
                .HasMaxLength(14)
                .HasColumnName("TaxCode");
            entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.TaxSystem).HasMaxLength(50);
            entity.Property(e => e.UseTrxTaxAccNo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("F")
                .IsFixedLength();

            entity.HasOne(d => d.TaxAccNoNavigation).WithMany(p => p.TaxCodes)
                .HasForeignKey(d => d.TaxAccNo)
                .HasConstraintName("FK_TaxType_TaxAccNo");
        });

        modelBuilder.Entity<TaxDocNo>(entity =>
        {
            entity.HasKey(e => e.TaxDocNoKey).HasName("PK_TaxDocNo_TaxDocNoKey");

            entity.ToTable("TaxDocNo");

            entity.Property(e => e.Format).HasMaxLength(30);
            entity.Property(e => e.FromDate).HasColumnType("datetime");
            entity.Property(e => e.IsDefault)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ToDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TaxDocNoDtl>(entity =>
        {
            entity.HasKey(e => e.TaxDocNoDtlkey).HasName("PK_TaxDocNoDTL_TaxDocNoDTLKey");

            entity.ToTable("TaxDocNoDTL", tb => tb.HasTrigger("TAXDOCNODTL_TRIGGER_AFTER_COUNT"));

            entity.Property(e => e.TaxDocNoDtlkey).HasColumnName("TaxDocNoDTLKey");
            entity.Property(e => e.Number).HasMaxLength(20);
            entity.Property(e => e.UseInDocNo).HasMaxLength(30);
            entity.Property(e => e.UseInDocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.Void)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TaxEntity>(entity =>
        {
            entity.HasKey(e => e.TaxEntityId).HasName("PK_TaxEntity_TaxEntityID");

            entity.ToTable("TaxEntity", tb =>
                {
                    tb.HasTrigger("TaxEntityChangeLog");
                    tb.HasTrigger("UpdateTaxEntityChangeCount");
                });

            entity.Property(e => e.TaxEntityId).HasColumnName("TaxEntityID");
            entity.Property(e => e.Address).HasMaxLength(200);
            entity.Property(e => e.BusinessActivityDesc).HasMaxLength(500);
            entity.Property(e => e.City).HasMaxLength(50);
            entity.Property(e => e.CountryCode).HasMaxLength(3);
            entity.Property(e => e.EmailAddress).HasMaxLength(200);
            entity.Property(e => e.FullTin)
                .HasMaxLength(30)
                .HasColumnName("FullTIN");
            entity.Property(e => e.GstregisterNo)
                .HasMaxLength(20)
                .HasColumnName("GSTRegisterNo");
            entity.Property(e => e.IdentityNo).HasMaxLength(30);
            entity.Property(e => e.IdentityType).HasMaxLength(10);
            entity.Property(e => e.Msiccode)
                .HasMaxLength(5)
                .HasColumnName("MSICCode");
            entity.Property(e => e.Name).HasMaxLength(100);
            entity.Property(e => e.Phone).HasMaxLength(25);
            entity.Property(e => e.PostCode).HasMaxLength(10);
            entity.Property(e => e.SstregisterNo)
                .HasMaxLength(20)
                .HasColumnName("SSTRegisterNo");
            entity.Property(e => e.StateCode).HasMaxLength(2);
            entity.Property(e => e.TaxBranchId)
                .HasMaxLength(10)
                .HasColumnName("TaxBranchID");
            entity.Property(e => e.Tin)
                .HasMaxLength(20)
                .HasColumnName("TIN");
            entity.Property(e => e.TourismTaxRegisterNo).HasMaxLength(20);
            entity.Property(e => e.TradeName).HasMaxLength(100);
        });

        modelBuilder.Entity<TaxExemption>(entity =>
        {
            entity.HasKey(e => e.AutoKey).HasName("PK_TaxExemption_AutoKey");

            entity.ToTable("TaxExemption");

            entity.HasIndex(e => new { e.AccNo, e.ItemCode }, "UIX_TaxExemption_AccNo_ItemCode").IsUnique();

            entity.Property(e => e.AccNo).HasMaxLength(12);
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.SalesExemptionNo).HasMaxLength(60);
            entity.Property(e => e.TaxCode).HasMaxLength(14);

            entity.HasOne(d => d.TaxCodeNavigation).WithMany(p => p.TaxExemptions)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.TaxCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TaxExemption_TaxCode");
        });

        modelBuilder.Entity<TaxSetting>(entity =>
        {
            entity.HasKey(e => e.TaxName);

            entity.ToTable("TaxSetting");

            entity.Property(e => e.TaxName).HasMaxLength(100);
            entity.Property(e => e.TaxValue).HasMaxLength(300);
        });

        modelBuilder.Entity<TaxTran>(entity =>
        {
            entity.HasKey(e => e.TaxTransKey).HasName("PK_TaxTrans_TaxTransKey");

            entity.HasIndex(e => new { e.SourceType, e.SourceKey }, "IX_TaxTrans_SourceType_SourceKey");

            entity.HasIndex(e => new { e.SourceType, e.SourceKey, e.PaymentDocType, e.PaymentDocKey }, "IX_TaxTrans_SourceType_SourceKey_PaymentDocType_PaymentDocKey");

            entity.Property(e => e.Atc)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("ATC");
            entity.Property(e => e.CurrencyCode).HasMaxLength(5);
            entity.Property(e => e.CurrencyRate)
                .HasDefaultValue(1m)
                .HasColumnType("decimal(19, 12)");
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.OriginalDtlType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PaymentDocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.SourceType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.SupplyPurchase)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TariffCode).HasMaxLength(12);
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxAccNo).HasMaxLength(12);
            entity.Property(e => e.TaxCode).HasMaxLength(14);
            entity.Property(e => e.TaxDate).HasColumnType("datetime");
            entity.Property(e => e.TaxEntityId).HasColumnName("TaxEntityID");
            entity.Property(e => e.TaxExportCountry).HasMaxLength(50);
            entity.Property(e => e.TaxPermitNo).HasMaxLength(20);
            entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.TaxRefNo).HasMaxLength(30);
            entity.Property(e => e.TaxableAccNo).HasMaxLength(12);
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxableName).HasMaxLength(100);

            entity.HasOne(d => d.AtcNavigation).WithMany(p => p.TaxTrans)
                .HasForeignKey(d => d.Atc)
                .HasConstraintName("FK_TaxTrans_ATC");

            entity.HasOne(d => d.CurrencyCodeNavigation).WithMany(p => p.TaxTrans)
                .HasForeignKey(d => d.CurrencyCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TaxTrans_CurrencyCode");

            entity.HasOne(d => d.DeptNoNavigation).WithMany(p => p.TaxTrans)
                .HasForeignKey(d => d.DeptNo)
                .HasConstraintName("FK_TaxTrans_DeptNo");

            entity.HasOne(d => d.ProjNoNavigation).WithMany(p => p.TaxTrans)
                .HasForeignKey(d => d.ProjNo)
                .HasConstraintName("FK_TaxTrans_ProjNo");

            entity.HasOne(d => d.TariffCodeNavigation).WithMany(p => p.TaxTrans)
                .HasPrincipalKey(p => p.TariffCode)
                .HasForeignKey(d => d.TariffCode)
                .HasConstraintName("FK_TaxTrans_TariffCode");

            entity.HasOne(d => d.TaxAccNoNavigation).WithMany(p => p.TaxTranTaxAccNoNavigations)
                .HasForeignKey(d => d.TaxAccNo)
                .HasConstraintName("FK_TaxTrans_TaxAccNo");

            entity.HasOne(d => d.TaxCodeNavigation).WithMany(p => p.TaxTrans)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.TaxCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TaxTrans_TaxCode");

            entity.HasOne(d => d.TaxEntity).WithMany(p => p.TaxTrans)
                .HasForeignKey(d => d.TaxEntityId)
                .HasConstraintName("FK_TaxTrans_TaxEntityID");

            entity.HasOne(d => d.TaxableAccNoNavigation).WithMany(p => p.TaxTranTaxableAccNoNavigations)
                .HasForeignKey(d => d.TaxableAccNo)
                .HasConstraintName("FK_TaxTrans_TaxableAccNo");
        });

        modelBuilder.Entity<TaxTransAudit>(entity =>
        {
            entity.HasKey(e => e.TaxTransAuditKey).HasName("PK_TaxTransAudit_TaxTransAuditKey");

            entity.ToTable("TaxTransAudit");

            entity.Property(e => e.AuditDateTime).HasColumnType("datetime");
            entity.Property(e => e.UserId)
                .HasMaxLength(10)
                .HasColumnName("UserID");

            entity.HasOne(d => d.User).WithMany(p => p.TaxTransAudits)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TaxTransAudit_UserID");
        });

        modelBuilder.Entity<TaxTransAuditDtl>(entity =>
        {
            entity.HasKey(e => e.TaxTransAuditDtlKey).HasName("PK_TaxTransAuditDTL_TaxTransAuditDtlKey");

            entity.ToTable("TaxTransAuditDTL");

            entity.HasIndex(e => new { e.SourceType, e.SourceKey }, "IX_TaxTransAuditDTL_SourceType_SourceKey");

            entity.HasIndex(e => new { e.SourceType, e.SourceKey, e.PaymentDocType, e.PaymentDocKey }, "IX_TaxTransAuditDTL_SourceType_SourceKey_PaymentDocType_PaymentDocKey");

            entity.Property(e => e.Atc)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("ATC");
            entity.Property(e => e.CurrencyCode).HasMaxLength(5);
            entity.Property(e => e.CurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.OriginalDtlType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PaymentDocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.SourceType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.SupplyPurchase)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TariffCode).HasMaxLength(12);
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxAccNo).HasMaxLength(12);
            entity.Property(e => e.TaxCode).HasMaxLength(14);
            entity.Property(e => e.TaxDate).HasColumnType("datetime");
            entity.Property(e => e.TaxEntityId).HasColumnName("TaxEntityID");
            entity.Property(e => e.TaxExportCountry).HasMaxLength(50);
            entity.Property(e => e.TaxPermitNo).HasMaxLength(20);
            entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.TaxRefNo).HasMaxLength(30);
            entity.Property(e => e.TaxableAccNo).HasMaxLength(12);
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxableName).HasMaxLength(100);

            entity.HasOne(d => d.AtcNavigation).WithMany(p => p.TaxTransAuditDtls)
                .HasForeignKey(d => d.Atc)
                .HasConstraintName("FK_TaxTransAuditDTL_ATC");

            entity.HasOne(d => d.CurrencyCodeNavigation).WithMany(p => p.TaxTransAuditDtls)
                .HasForeignKey(d => d.CurrencyCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TaxTransAuditDTL_CurrencyCode");

            entity.HasOne(d => d.DeptNoNavigation).WithMany(p => p.TaxTransAuditDtls)
                .HasForeignKey(d => d.DeptNo)
                .HasConstraintName("FK_TaxTransAuditDTL_DeptNo");

            entity.HasOne(d => d.ProjNoNavigation).WithMany(p => p.TaxTransAuditDtls)
                .HasForeignKey(d => d.ProjNo)
                .HasConstraintName("FK_TaxTransAuditDTL_ProjNo");

            entity.HasOne(d => d.TariffCodeNavigation).WithMany(p => p.TaxTransAuditDtls)
                .HasPrincipalKey(p => p.TariffCode)
                .HasForeignKey(d => d.TariffCode)
                .HasConstraintName("FK_TaxTransAuditDTL_TariffCode");

            entity.HasOne(d => d.TaxAccNoNavigation).WithMany(p => p.TaxTransAuditDtlTaxAccNoNavigations)
                .HasForeignKey(d => d.TaxAccNo)
                .HasConstraintName("FK_TaxTransAuditDTL_TaxAccNo");

            entity.HasOne(d => d.TaxCodeNavigation).WithMany(p => p.TaxTransAuditDtls)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.TaxCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TaxTransAuditDTL_TaxCode");

            entity.HasOne(d => d.TaxEntity).WithMany(p => p.TaxTransAuditDtls)
                .HasForeignKey(d => d.TaxEntityId)
                .HasConstraintName("FK_TaxTransAuditDTL_TaxEntityID");

            entity.HasOne(d => d.TaxableAccNoNavigation).WithMany(p => p.TaxTransAuditDtlTaxableAccNoNavigations)
                .HasForeignKey(d => d.TaxableAccNo)
                .HasConstraintName("FK_TaxTransAuditDTL_TaxableAccNo");
        });

        modelBuilder.Entity<TaxTransCancelled>(entity =>
        {
            entity.HasKey(e => e.TaxTransKey).HasName("PK_TaxTransCancelled_TaxTransKey");

            entity.ToTable("TaxTransCancelled");

            entity.HasIndex(e => new { e.SourceType, e.SourceKey }, "IX_TaxTransCancelled_SourceType_SourceKey");

            entity.HasIndex(e => new { e.SourceType, e.SourceKey, e.PaymentDocType, e.PaymentDocKey }, "IX_TaxTransCancelled_SourceType_SourceKey_PaymentDocType_PaymentDocKey");

            entity.Property(e => e.Atc)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("ATC");
            entity.Property(e => e.CurrencyCode).HasMaxLength(5);
            entity.Property(e => e.CurrencyRate)
                .HasDefaultValue(1m)
                .HasColumnType("decimal(19, 12)");
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.OriginalDtlType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PaymentDocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.SourceType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.SupplyPurchase)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TariffCode).HasMaxLength(12);
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxAccNo).HasMaxLength(12);
            entity.Property(e => e.TaxCode).HasMaxLength(14);
            entity.Property(e => e.TaxDate).HasColumnType("datetime");
            entity.Property(e => e.TaxEntityId).HasColumnName("TaxEntityID");
            entity.Property(e => e.TaxExportCountry).HasMaxLength(50);
            entity.Property(e => e.TaxPermitNo).HasMaxLength(20);
            entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.TaxRefNo).HasMaxLength(30);
            entity.Property(e => e.TaxableAccNo).HasMaxLength(12);
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxableName).HasMaxLength(100);

            entity.HasOne(d => d.AtcNavigation).WithMany(p => p.TaxTransCancelleds)
                .HasForeignKey(d => d.Atc)
                .HasConstraintName("FK_TaxTransCancelled_ATC");

            entity.HasOne(d => d.CurrencyCodeNavigation).WithMany(p => p.TaxTransCancelleds)
                .HasForeignKey(d => d.CurrencyCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TaxTransCancelled_CurrencyCode");

            entity.HasOne(d => d.DeptNoNavigation).WithMany(p => p.TaxTransCancelleds)
                .HasForeignKey(d => d.DeptNo)
                .HasConstraintName("FK_TaxTransCancelled_DeptNo");

            entity.HasOne(d => d.ProjNoNavigation).WithMany(p => p.TaxTransCancelleds)
                .HasForeignKey(d => d.ProjNo)
                .HasConstraintName("FK_TaxTransCancelled_ProjNo");

            entity.HasOne(d => d.TariffCodeNavigation).WithMany(p => p.TaxTransCancelleds)
                .HasPrincipalKey(p => p.TariffCode)
                .HasForeignKey(d => d.TariffCode)
                .HasConstraintName("FK_TaxTransCancelled_TariffCode");

            entity.HasOne(d => d.TaxAccNoNavigation).WithMany(p => p.TaxTransCancelledTaxAccNoNavigations)
                .HasForeignKey(d => d.TaxAccNo)
                .HasConstraintName("FK_TaxTransCancelled_TaxAccNo");

            entity.HasOne(d => d.TaxCodeNavigation).WithMany(p => p.TaxTransCancelleds)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.TaxCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TaxTransCancelled_TaxCode");

            entity.HasOne(d => d.TaxEntity).WithMany(p => p.TaxTransCancelleds)
                .HasForeignKey(d => d.TaxEntityId)
                .HasConstraintName("FK_TaxTransCancelled_TaxEntityID");

            entity.HasOne(d => d.TaxableAccNoNavigation).WithMany(p => p.TaxTransCancelledTaxableAccNoNavigations)
                .HasForeignKey(d => d.TaxableAccNo)
                .HasConstraintName("FK_TaxTransCancelled_TaxableAccNo");
        });

        modelBuilder.Entity<TempDocument>(entity =>
        {
            entity.HasKey(e => e.DocKey).HasName("PK_TempDocument_DocKey");

            entity.ToTable("TempDocument");

            entity.Property(e => e.DocKey).ValueGeneratedNever();
            entity.Property(e => e.Compressed)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Description).HasMaxLength(80);
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.DocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.SaveReason).HasMaxLength(20);
            entity.Property(e => e.SaveTime).HasColumnType("datetime");
            entity.Property(e => e.UserId)
                .HasMaxLength(10)
                .HasColumnName("UserID");
        });

        modelBuilder.Entity<TemporaryCredit>(entity =>
        {
            entity.HasKey(e => e.AutoKey).HasName("PK_TemporaryCredit_AutoKey");

            entity.ToTable("TemporaryCredit");

            entity.HasIndex(e => new { e.AccNo, e.FromDate, e.ToDate }, "UIX_TemporaryCredit_AccNo_FormDate_ToDate").IsUnique();

            entity.Property(e => e.AccNo).HasMaxLength(12);
            entity.Property(e => e.CreditLimit).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.FromDate).HasColumnType("datetime");
            entity.Property(e => e.OverdueLimit).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Remark).HasMaxLength(40);
            entity.Property(e => e.ToDate).HasColumnType("datetime");

            entity.HasOne(d => d.AccNoNavigation).WithMany(p => p.TemporaryCredits)
                .HasForeignKey(d => d.AccNo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TemporaryCredit_AccNo");
        });

        modelBuilder.Entity<Term>(entity =>
        {
            entity.HasKey(e => e.AutoKey).HasName("PK_Terms_AutoKey");

            entity.ToTable(tb => tb.HasTrigger("UpdateTermsChangeCount"));

            entity.HasIndex(e => e.DisplayTerm, "UIX_Terms_DisplayTerm").IsUnique();

            entity.Property(e => e.DiscountPercent).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.DisplayTerm).HasMaxLength(30);
            entity.Property(e => e.TermType)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Terms).HasMaxLength(30);
        });

        modelBuilder.Entity<Udf>(entity =>
        {
            entity.HasKey(e => e.AutoKey).HasName("PK_UDF_AutoKey");

            entity.ToTable("UDF", tb => tb.HasTrigger("UDFChangeLog"));

            entity.HasIndex(e => e.Guid, "UIX_UDF_Guid").IsUnique();

            entity.HasIndex(e => new { e.TableName, e.FieldName }, "UIX_UDF_TableName_FieldName").IsUnique();

            entity.Property(e => e.Caption).HasMaxLength(80);
            entity.Property(e => e.FieldName).HasMaxLength(30);
            entity.Property(e => e.FieldType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TableName).HasMaxLength(30);
        });

        modelBuilder.Entity<Udflayout>(entity =>
        {
            entity.HasKey(e => e.AutoKey).HasName("PK_UDFLayout_AutoKey");

            entity.ToTable("UDFLayout", tb => tb.HasTrigger("UDFLayoutChangeLog"));

            entity.HasIndex(e => e.Guid, "UIX_UDFLayout_Guid").IsUnique();

            entity.HasIndex(e => new { e.TableName, e.LayoutName }, "UIX_UDFLayout_TableName_LayoutName").IsUnique();

            entity.Property(e => e.LayoutName).HasMaxLength(10);
            entity.Property(e => e.TableName).HasMaxLength(25);
        });

        modelBuilder.Entity<Udflist>(entity =>
        {
            entity.HasKey(e => e.AutoKey).HasName("PK_UDFList_AutoKey");

            entity.ToTable("UDFList", tb => tb.HasTrigger("UDFListChangeLog"));

            entity.HasIndex(e => e.Guid, "UIX_UDFList_Guid").IsUnique();

            entity.HasIndex(e => e.Name, "UIX_UDFList_Name").IsUnique();

            entity.Property(e => e.Name).HasMaxLength(30);
        });

        modelBuilder.Entity<UnapprovedDocument>(entity =>
        {
            entity.HasKey(e => e.DocKey).HasName("PK_UnapprovedDocument_DocKey");

            entity.ToTable("UnapprovedDocument");

            entity.Property(e => e.DocKey).ValueGeneratedNever();
            entity.Property(e => e.AccNo).HasMaxLength(12);
            entity.Property(e => e.Description).HasMaxLength(80);
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.DocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.NetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SaveTime).HasColumnType("datetime");
            entity.Property(e => e.UserId)
                .HasMaxLength(10)
                .HasColumnName("UserID");

            entity.HasOne(d => d.AccNoNavigation).WithMany(p => p.UnapprovedDocuments)
                .HasForeignKey(d => d.AccNo)
                .HasConstraintName("FK_UnapprovedDocument_AccNo");

            entity.HasOne(d => d.User).WithMany(p => p.UnapprovedDocuments)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UnapprovedDocument_UserID");
        });

        modelBuilder.Entity<UnrealizedGainLoss>(entity =>
        {
            entity.HasKey(e => e.UnrealizedGainLossKey).HasName("PK_UnrealizedGainLoss_UnrealizedGainLossKey");

            entity.ToTable("UnrealizedGainLoss");

            entity.Property(e => e.UnrealizedGainLossKey).ValueGeneratedNever();
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.DocNo2).HasMaxLength(30);
            entity.Property(e => e.GainLossJournalType).HasMaxLength(10);
            entity.Property(e => e.GlgainAccount)
                .HasMaxLength(12)
                .HasColumnName("GLGainAccount");
            entity.Property(e => e.GllossAccount)
                .HasMaxLength(12)
                .HasColumnName("GLLossAccount");
            entity.Property(e => e.GltrxId).HasColumnName("GLTrxID");
            entity.Property(e => e.Jekey).HasColumnName("JEKey");
            entity.Property(e => e.Jekey2).HasColumnName("JEKey2");
            entity.Property(e => e.ReverseGlposting)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("F")
                .IsFixedLength()
                .HasColumnName("ReverseGLPosting");
            entity.Property(e => e.TotalGainLoss).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.UnrealizedGainAccount).HasMaxLength(12);
            entity.Property(e => e.UnrealizedLossAccount).HasMaxLength(12);
            entity.Property(e => e.UseSingleGainLossAccount)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("T")
                .IsFixedLength();

            entity.HasOne(d => d.GainLossJournalTypeNavigation).WithMany(p => p.UnrealizedGainLosses)
                .HasPrincipalKey(p => p.JournalType)
                .HasForeignKey(d => d.GainLossJournalType)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UnrealizedGainLoss_GainLossJournalType");

            entity.HasOne(d => d.GlgainAccountNavigation).WithMany(p => p.UnrealizedGainLossGlgainAccountNavigations)
                .HasForeignKey(d => d.GlgainAccount)
                .HasConstraintName("FK_UnrealizedGainLoss_GLGainAccount");

            entity.HasOne(d => d.GllossAccountNavigation).WithMany(p => p.UnrealizedGainLossGllossAccountNavigations)
                .HasForeignKey(d => d.GllossAccount)
                .HasConstraintName("FK_UnrealizedGainLoss_GLLossAccount");

            entity.HasOne(d => d.UnrealizedGainAccountNavigation).WithMany(p => p.UnrealizedGainLossUnrealizedGainAccountNavigations)
                .HasForeignKey(d => d.UnrealizedGainAccount)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UnrealizedGainLoss_UnrealizedGainAccount");

            entity.HasOne(d => d.UnrealizedLossAccountNavigation).WithMany(p => p.UnrealizedGainLossUnrealizedLossAccountNavigations)
                .HasForeignKey(d => d.UnrealizedLossAccount)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UnrealizedGainLoss_UnrealizedLossAccount");
        });

        modelBuilder.Entity<UnrealizedGainLossDocument>(entity =>
        {
            entity.HasKey(e => e.DtlKey).HasName("PK_UnrealizedGainLossDocument_DtlKey");

            entity.ToTable("UnrealizedGainLossDocument");

            entity.Property(e => e.DtlKey).ValueGeneratedNever();
            entity.Property(e => e.AccNo).HasMaxLength(12);
            entity.Property(e => e.Category)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.CompanyName).HasMaxLength(100);
            entity.Property(e => e.CurrencyCode).HasMaxLength(5);
            entity.Property(e => e.CurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.DocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.GainLoss).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.NewRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.Outstanding).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ProjNo).HasMaxLength(10);

            entity.HasOne(d => d.AccNoNavigation).WithMany(p => p.UnrealizedGainLossDocuments)
                .HasForeignKey(d => d.AccNo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UnrealizedGainLossDocument_AccNo");

            entity.HasOne(d => d.CurrencyCodeNavigation).WithMany(p => p.UnrealizedGainLossDocuments)
                .HasForeignKey(d => d.CurrencyCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UnrealizedGainLossDocument_CurrencyCode");

            entity.HasOne(d => d.DeptNoNavigation).WithMany(p => p.UnrealizedGainLossDocuments)
                .HasForeignKey(d => d.DeptNo)
                .HasConstraintName("FK_UnrealizedGainLossDocument_DeptNo");

            entity.HasOne(d => d.ProjNoNavigation).WithMany(p => p.UnrealizedGainLossDocuments)
                .HasForeignKey(d => d.ProjNo)
                .HasConstraintName("FK_UnrealizedGainLossDocument_ProjNo");
        });

        modelBuilder.Entity<UnrealizedGainLossGlaccount>(entity =>
        {
            entity.HasKey(e => e.DtlKey).HasName("PK_UnrealizedGainLossGLAccount_DtlKey");

            entity.ToTable("UnrealizedGainLossGLAccount");

            entity.Property(e => e.DtlKey).ValueGeneratedNever();
            entity.Property(e => e.AccNo).HasMaxLength(12);
            entity.Property(e => e.Balance).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.GainLoss).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.HomeBalance).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.NewHomeBalance).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.RevalueRate).HasColumnType("decimal(19, 12)");

            entity.HasOne(d => d.AccNoNavigation).WithMany(p => p.UnrealizedGainLossGlaccounts)
                .HasForeignKey(d => d.AccNo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UnrealizedGainLossGLAccount_AccNo");
        });

        modelBuilder.Entity<UnrealizedGainLossRate>(entity =>
        {
            entity.HasKey(e => e.DtlKey).HasName("PK_UnrealizedGainLossRate_DtlKey");

            entity.ToTable("UnrealizedGainLossRate");

            entity.Property(e => e.DtlKey).ValueGeneratedNever();
            entity.Property(e => e.BankBuyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.BankSellRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.CurrencyCode).HasMaxLength(5);
            entity.Property(e => e.GlgainAccount)
                .HasMaxLength(12)
                .HasColumnName("GLGainAccount");
            entity.Property(e => e.GllossAccount)
                .HasMaxLength(12)
                .HasColumnName("GLLossAccount");
            entity.Property(e => e.UnrealizedGainAccount).HasMaxLength(12);
            entity.Property(e => e.UnrealizedLossAccount).HasMaxLength(12);

            entity.HasOne(d => d.CurrencyCodeNavigation).WithMany(p => p.UnrealizedGainLossRates)
                .HasForeignKey(d => d.CurrencyCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UnrealizedGainLossRate_CurrencyCode");

            entity.HasOne(d => d.GlgainAccountNavigation).WithMany(p => p.UnrealizedGainLossRateGlgainAccountNavigations)
                .HasForeignKey(d => d.GlgainAccount)
                .HasConstraintName("FK_UnrealizedGainLossRate_GLGainAccount");

            entity.HasOne(d => d.GllossAccountNavigation).WithMany(p => p.UnrealizedGainLossRateGllossAccountNavigations)
                .HasForeignKey(d => d.GllossAccount)
                .HasConstraintName("FK_UnrealizedGainLossRate_GLLossAccount");
        });

        modelBuilder.Entity<Uomconv>(entity =>
        {
            entity.HasKey(e => e.DocKey).HasName("PK_UOMConv_DocKey");

            entity.ToTable("UOMConv", tb => tb.HasTrigger("UpdateUOMConvertChangeCount"));

            entity.HasIndex(e => e.DocNo, "IX_UOMConv_DocNo").IsUnique();

            entity.Property(e => e.DocKey).ValueGeneratedNever();
            entity.Property(e => e.CanSync)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.FromDocNo).HasMaxLength(30);
            entity.Property(e => e.FromDocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");

            entity.HasOne(d => d.CreatedUser).WithMany(p => p.UomconvCreatedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.CreatedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UOMConv_CreatedUserID");

            entity.HasOne(d => d.LastModifiedUser).WithMany(p => p.UomconvLastModifiedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.LastModifiedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UOMConv_LastModifiedUserID");
        });

        modelBuilder.Entity<UomconvDtl>(entity =>
        {
            entity.HasKey(e => e.DtlKey).HasName("PK_UOMConvDTL_DtlKey");

            entity.ToTable("UOMConvDTL");

            entity.HasIndex(e => e.DocKey, "IX_UOMConvDTL_DocKey");

            entity.Property(e => e.DtlKey).ValueGeneratedNever();
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.FromQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.FromUom)
                .HasMaxLength(8)
                .HasColumnName("FromUOM");
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.ToQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.ToUom)
                .HasMaxLength(8)
                .HasColumnName("ToUOM");

            entity.HasOne(d => d.DeptNoNavigation).WithMany(p => p.UomconvDtls)
                .HasForeignKey(d => d.DeptNo)
                .HasConstraintName("FK_UOMConvDTL_DeptNo");

            entity.HasOne(d => d.LocationNavigation).WithMany(p => p.UomconvDtls)
                .HasPrincipalKey(p => p.Location1)
                .HasForeignKey(d => d.Location)
                .HasConstraintName("FK_UOMConvDTL_Location");

            entity.HasOne(d => d.ProjNoNavigation).WithMany(p => p.UomconvDtls)
                .HasForeignKey(d => d.ProjNo)
                .HasConstraintName("FK_UOMConvDTL_ProjNo");

            entity.HasOne(d => d.ItemBatch).WithMany(p => p.UomconvDtls)
                .HasPrincipalKey(p => new { p.ItemCode, p.BatchNo })
                .HasForeignKey(d => new { d.ItemCode, d.BatchNo })
                .HasConstraintName("FK_UOMConvDTL_ItemBatch");

            entity.HasOne(d => d.ItemUom).WithMany(p => p.UomconvDtlItemUoms)
                .HasPrincipalKey(p => new { p.ItemCode, p.Uom })
                .HasForeignKey(d => new { d.ItemCode, d.FromUom })
                .HasConstraintName("FK_UOMConvDTL_ItemFromUOM");

            entity.HasOne(d => d.ItemUomNavigation).WithMany(p => p.UomconvDtlItemUomNavigations)
                .HasPrincipalKey(p => new { p.ItemCode, p.Uom })
                .HasForeignKey(d => new { d.ItemCode, d.ToUom })
                .HasConstraintName("FK_UOMConvDTL_ItemToUOM");
        });

        modelBuilder.Entity<UpdateCost>(entity =>
        {
            entity.HasKey(e => e.DocKey).HasName("PK_UpdateCost_DocKey");

            entity.ToTable("UpdateCost", tb => tb.HasTrigger("UpdateUpdateCostChangeCount"));

            entity.HasIndex(e => e.DocNo, "IX_UpdateCost_DocNo").IsUnique();

            entity.Property(e => e.DocKey).ValueGeneratedNever();
            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.UpdateToRealCost)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.CreatedUser).WithMany(p => p.UpdateCostCreatedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.CreatedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UpdateCost_CreatedUserID");

            entity.HasOne(d => d.LastModifiedUser).WithMany(p => p.UpdateCostLastModifiedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.LastModifiedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UpdateCost_LastModifiedUserID");
        });

        modelBuilder.Entity<UpdateCostDtl>(entity =>
        {
            entity.HasKey(e => e.DtlKey).HasName("PK_UpdateCostDTL_DtlKey");

            entity.ToTable("UpdateCostDTL");

            entity.HasIndex(e => e.DocKey, "IX_UpdateCostDTL_DocKey");

            entity.Property(e => e.DtlKey).ValueGeneratedNever();
            entity.Property(e => e.Desc2).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.NewCost).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.OldCost).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");

            entity.HasOne(d => d.ItemUom).WithMany(p => p.UpdateCostDtls)
                .HasPrincipalKey(p => new { p.ItemCode, p.Uom })
                .HasForeignKey(d => new { d.ItemCode, d.Uom })
                .HasConstraintName("FK_UpdateCostDTL_ItemUOM");
        });

        modelBuilder.Entity<UpdateSalesDocument>(entity =>
        {
            entity.HasKey(e => new { e.DocKey, e.DocType }).HasName("PK_DocKey_DocType");

            entity.ToTable("UpdateSalesDocument");

            entity.Property(e => e.DocType)
                .HasMaxLength(2)
                .IsUnicode(false);
        });

        modelBuilder.Entity<UpdateSalesDocumentDtl>(entity =>
        {
            entity.HasKey(e => new { e.DtlKey, e.DocType }).HasName("PK_DtlKey_DocType");

            entity.ToTable("UpdateSalesDocumentDTL");

            entity.Property(e => e.DocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.LocalFoctotalCost)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("LocalFOCTotalCost");
            entity.Property(e => e.LocalFoctotalCostUpdated).HasColumnName("LocalFOCTotalCostUpdated");
            entity.Property(e => e.LocalTotalCost).HasColumnType("decimal(25, 8)");
        });

        modelBuilder.Entity<UpdateStockDocument>(entity =>
        {
            entity.HasKey(e => new { e.DocKey, e.DtlKey, e.DocType }).HasName("PK_DocKey_DtlKey_DocType");

            entity.ToTable("UpdateStockDocument");

            entity.Property(e => e.DocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.LocalTotalCost).HasColumnType("decimal(25, 8)");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.AutoKey).HasName("PK_Users_AutoKey");

            entity.ToTable(tb => tb.HasTrigger("UpdateUsersChangeCount"));

            entity.HasIndex(e => e.UserId, "UIX_Users_UserID").IsUnique();

            entity.Property(e => e.Department).HasMaxLength(30);
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.EmailAddress).HasMaxLength(200);
            entity.Property(e => e.FilterByAccNo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("F")
                .IsFixedLength();
            entity.Property(e => e.FilterByPurchaseAgent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FilterBySalesAgent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FilteredByCreatedUserId)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FilteredByCreatedUserID");
            entity.Property(e => e.FilteredByLastModifiedUserId)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FilteredByLastModifiedUserID");
            entity.Property(e => e.IsActive)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.IsExportCreditorToBranch)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("F")
                .IsFixedLength();
            entity.Property(e => e.IsExportCstoBranch)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("F")
                .IsFixedLength()
                .HasColumnName("IsExportCSToBranch");
            entity.Property(e => e.IsExportDebtorToBranch)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("F")
                .IsFixedLength();
            entity.Property(e => e.IsExportDotoBranch)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("F")
                .IsFixedLength()
                .HasColumnName("IsExportDOToBranch");
            entity.Property(e => e.IsExportItemToBranch)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("F")
                .IsFixedLength();
            entity.Property(e => e.IsExportIvtoBranch)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("F")
                .IsFixedLength()
                .HasColumnName("IsExportIVToBranch");
            entity.Property(e => e.IsExportPriceHistoryToBranch)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("F")
                .IsFixedLength();
            entity.Property(e => e.IsExportQttoBranch)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("F")
                .IsFixedLength()
                .HasColumnName("IsExportQTToBranch");
            entity.Property(e => e.IsExportSotoBranch)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("F")
                .IsFixedLength()
                .HasColumnName("IsExportSOToBranch");
            entity.Property(e => e.LastPasswordDate).HasColumnType("datetime");
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.PasswordAge).HasDefaultValue(-1);
            entity.Property(e => e.PasswordStrength)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PosmainPage).HasColumnName("POSMainPage");
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.PurchaseCreditLimitIncrementPercentage).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.PurchaseOverdueLimitIncrementPercentage).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SalesCreditLimitIncrementPercentage).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SalesOverdueLimitIncrementPercentage).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.StoreEmail).HasMaxLength(100);
            entity.Property(e => e.StorePassword).HasMaxLength(200);
            entity.Property(e => e.UserId)
                .HasMaxLength(10)
                .HasColumnName("UserID");
            entity.Property(e => e.UserName).HasMaxLength(40);
            entity.Property(e => e.UserType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("F")
                .IsFixedLength();

            entity.HasOne(d => d.DeptNoNavigation).WithMany(p => p.Users)
                .HasForeignKey(d => d.DeptNo)
                .HasConstraintName("FK_Users_DeptNo");

            entity.HasOne(d => d.LocationNavigation).WithMany(p => p.Users)
                .HasPrincipalKey(p => p.Location1)
                .HasForeignKey(d => d.Location)
                .HasConstraintName("FK_Users_Location");

            entity.HasOne(d => d.ProjNoNavigation).WithMany(p => p.Users)
                .HasForeignKey(d => d.ProjNo)
                .HasConstraintName("FK_Users_ProjNo");
        });

        modelBuilder.Entity<UserFormula>(entity =>
        {
            entity.HasKey(e => new { e.FormulaName, e.ColumnName, e.FormulaType });

            entity.ToTable("UserFormula");

            entity.Property(e => e.FormulaName).HasMaxLength(60);
            entity.Property(e => e.ColumnName).HasMaxLength(60);
            entity.Property(e => e.FormulaType).HasMaxLength(20);
        });

        modelBuilder.Entity<UserGroup>(entity =>
        {
            entity.HasKey(e => e.AutoKey).HasName("PK_UserGroup_AutoKey");

            entity.ToTable("UserGroup");

            entity.HasIndex(e => e.UserGroupId, "UIX_UserGroup").IsUnique();

            entity.Property(e => e.Description).HasMaxLength(40);
            entity.Property(e => e.UserGroupId)
                .HasMaxLength(40)
                .HasColumnName("UserGroupID");
        });

        modelBuilder.Entity<UserScript>(entity =>
        {
            entity.HasKey(e => e.ScriptName).HasName("PK_UserScript_ScriptName");

            entity.ToTable("UserScript", tb => tb.HasTrigger("UserScriptChangeLog"));

            entity.HasIndex(e => e.Guid, "UIX_UserScript_Guid").IsUnique();

            entity.Property(e => e.ScriptName).HasMaxLength(60);
            entity.Property(e => e.Language).HasMaxLength(5);
        });

        modelBuilder.Entity<UsersAccNo>(entity =>
        {
            entity.HasKey(e => new { e.UserId, e.AccNo }).HasName("PK_UsersAccNo_UserID_AccNo");

            entity.ToTable("UsersAccNo");

            entity.Property(e => e.UserId)
                .HasMaxLength(10)
                .HasColumnName("UserID");
            entity.Property(e => e.AccNo).HasMaxLength(12);
        });

        modelBuilder.Entity<UsersGroup>(entity =>
        {
            entity.HasKey(e => e.AutoKey).HasName("PK_UsersGroup_AutoKey");

            entity.ToTable("UsersGroup");

            entity.HasIndex(e => new { e.UserId, e.UserGroupId }, "UIX_UsersGroup_UserID_UserGroupID").IsUnique();

            entity.Property(e => e.UserGroupId)
                .HasMaxLength(40)
                .HasColumnName("UserGroupID");
            entity.Property(e => e.UserId)
                .HasMaxLength(10)
                .HasColumnName("UserID");

            entity.HasOne(d => d.UserGroup).WithMany(p => p.UsersGroups)
                .HasPrincipalKey(p => p.UserGroupId)
                .HasForeignKey(d => d.UserGroupId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UsersGroup_UserGroupID");
        });

        modelBuilder.Entity<UsersPurchaseAgent>(entity =>
        {
            entity.HasKey(e => new { e.UserId, e.PurchaseAgent }).HasName("PK_UsersPurchaseAgent_UserID_PurchaseAgent");

            entity.ToTable("UsersPurchaseAgent");

            entity.Property(e => e.UserId)
                .HasMaxLength(10)
                .HasColumnName("UserID");
            entity.Property(e => e.PurchaseAgent).HasMaxLength(12);
        });

        modelBuilder.Entity<UsersSalesAgent>(entity =>
        {
            entity.HasKey(e => new { e.UserId, e.SalesAgent }).HasName("PK_UsersSalesAgent_UserID_SalesAgent");

            entity.ToTable("UsersSalesAgent");

            entity.Property(e => e.UserId)
                .HasMaxLength(10)
                .HasColumnName("UserID");
            entity.Property(e => e.SalesAgent).HasMaxLength(12);
        });

        modelBuilder.Entity<UtdstockCost>(entity =>
        {
            entity.HasKey(e => e.UtdstockCostKey).HasName("PK_UTDStockCost_UTDStockCostKey");

            entity.ToTable("UTDStockCost");

            entity.HasIndex(e => new { e.ItemCode, e.Uom, e.Location, e.BatchNo }, "IX_UTDStockCost_ItemCode_UOM_Location_BatchNo");

            entity.Property(e => e.UtdstockCostKey)
                .ValueGeneratedNever()
                .HasColumnName("UTDStockCostKey");
            entity.Property(e => e.AdjustedCost).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.AverageCost)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(25, 8)");
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
            entity.Property(e => e.Utdcost)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UTDCost");
            entity.Property(e => e.Utdqty)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UTDQty");

            entity.HasOne(d => d.LocationNavigation).WithMany(p => p.UtdstockCosts)
                .HasPrincipalKey(p => p.Location1)
                .HasForeignKey(d => d.Location)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UTDStockCost_Location");

            entity.HasOne(d => d.ItemBatch).WithMany(p => p.UtdstockCosts)
                .HasPrincipalKey(p => new { p.ItemCode, p.BatchNo })
                .HasForeignKey(d => new { d.ItemCode, d.BatchNo })
                .HasConstraintName("FK_UTDStockCost_BatchNo");

            entity.HasOne(d => d.ItemUom).WithMany(p => p.UtdstockCosts)
                .HasPrincipalKey(p => new { p.ItemCode, p.Uom })
                .HasForeignKey(d => new { d.ItemCode, d.Uom })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UTDStockCost_ItemCode");
        });

        modelBuilder.Entity<UtdstockCostDtl>(entity =>
        {
            entity.HasKey(e => e.UtdstockCostDtlkey).HasName("PK_UTDStockCostDTL_UTDStockCostDTLKey");

            entity.ToTable("UTDStockCostDTL");

            entity.HasIndex(e => e.UtdstockCostKey, "IX_UTDStockCostDTL_UTDStockCostKey");

            entity.Property(e => e.UtdstockCostDtlkey).HasColumnName("UTDStockCostDTLKey");
            entity.Property(e => e.Cost).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.UtdstockCostKey).HasColumnName("UTDStockCostKey");
        });

        modelBuilder.Entity<V2Consignment>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("v2Consignment");

            entity.Property(e => e.Attention).HasMaxLength(40);
            entity.Property(e => e.BranchCode).HasMaxLength(20);
            entity.Property(e => e.CanSync)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.CurrencyCode).HasMaxLength(5);
            entity.Property(e => e.CurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.DebtorCode).HasMaxLength(12);
            entity.Property(e => e.DebtorName).HasMaxLength(100);
            entity.Property(e => e.DeliverAddr1).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr2).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr3).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr4).HasMaxLength(40);
            entity.Property(e => e.DeliverContact).HasMaxLength(40);
            entity.Property(e => e.DeliverFax1).HasMaxLength(25);
            entity.Property(e => e.DeliverPhone1).HasMaxLength(25);
            entity.Property(e => e.Description).HasMaxLength(80);
            entity.Property(e => e.DisplayTerm).HasMaxLength(30);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.DocStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Fax1).HasMaxLength(25);
            entity.Property(e => e.InvAddr1).HasMaxLength(40);
            entity.Property(e => e.InvAddr2).HasMaxLength(40);
            entity.Property(e => e.InvAddr3).HasMaxLength(40);
            entity.Property(e => e.InvAddr4).HasMaxLength(40);
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.LocalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.MultiPrice).HasMaxLength(8);
            entity.Property(e => e.NetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Note).IsUnicode(false);
            entity.Property(e => e.Phone1).HasMaxLength(25);
            entity.Property(e => e.Ref).HasMaxLength(40);
            entity.Property(e => e.RefDocNo).HasMaxLength(30);
            entity.Property(e => e.Remark1).HasMaxLength(40);
            entity.Property(e => e.Remark2).HasMaxLength(40);
            entity.Property(e => e.Remark3).HasMaxLength(40);
            entity.Property(e => e.Remark4).HasMaxLength(40);
            entity.Property(e => e.SalesAgent).HasMaxLength(12);
            entity.Property(e => e.SalesExemptionExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.SalesExemptionNo).HasMaxLength(60);
            entity.Property(e => e.SalesLocation).HasMaxLength(8);
            entity.Property(e => e.ShipInfo).HasMaxLength(40);
            entity.Property(e => e.ShipVia).HasMaxLength(20);
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyExTax).HasColumnType("decimal(38, 13)");
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(38, 13)");
            entity.Property(e => e.ToDocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.ToTaxCurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.Total).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalQty).HasColumnType("decimal(38, 8)");
            entity.Property(e => e.TotalWithTax).HasColumnType("decimal(20, 2)");
        });

        modelBuilder.Entity<V2ConsignmentDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("v2ConsignmentDetail");

            entity.Property(e => e.AddToSubTotal)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.CalcByPercent).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.DeliveryDate).HasColumnType("datetime");
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Desc2).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.Discount).HasMaxLength(20);
            entity.Property(e => e.DiscountAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DtlType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EstimatedDeliveryDate).HasMaxLength(20);
            entity.Property(e => e.FontStyle).HasMaxLength(8);
            entity.Property(e => e.FullTransferOption)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FurtherDescription).IsUnicode(false);
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.LocalSubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalSubTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.MainItem)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Numbering).HasMaxLength(6);
            entity.Property(e => e.PrintOut)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Remark).HasMaxLength(100);
            entity.Property(e => e.SmallestQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SmallestUnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SubTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SubTotalWithTax).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCode).HasMaxLength(14);
            entity.Property(e => e.TransferedQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.UnitPriceAfterDiscount).HasColumnType("decimal(38, 13)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
            entity.Property(e => e.UserUom)
                .HasMaxLength(8)
                .HasColumnName("UserUOM");
            entity.Property(e => e.YourPodate)
                .HasColumnType("datetime")
                .HasColumnName("YourPODate");
            entity.Property(e => e.YourPono)
                .HasMaxLength(25)
                .HasColumnName("YourPONo");
        });

        modelBuilder.Entity<V2ConsignmentReturn>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("v2ConsignmentReturn");

            entity.Property(e => e.Attention).HasMaxLength(40);
            entity.Property(e => e.BranchCode).HasMaxLength(20);
            entity.Property(e => e.CanSync)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.CurrencyCode).HasMaxLength(5);
            entity.Property(e => e.CurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.DebtorCode).HasMaxLength(12);
            entity.Property(e => e.DebtorName).HasMaxLength(100);
            entity.Property(e => e.DeliverAddr1).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr2).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr3).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr4).HasMaxLength(40);
            entity.Property(e => e.DeliverContact).HasMaxLength(40);
            entity.Property(e => e.DeliverFax1).HasMaxLength(25);
            entity.Property(e => e.DeliverPhone1).HasMaxLength(25);
            entity.Property(e => e.Description).HasMaxLength(80);
            entity.Property(e => e.DisplayTerm).HasMaxLength(30);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.DocStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Fax1).HasMaxLength(25);
            entity.Property(e => e.InvAddr1).HasMaxLength(40);
            entity.Property(e => e.InvAddr2).HasMaxLength(40);
            entity.Property(e => e.InvAddr3).HasMaxLength(40);
            entity.Property(e => e.InvAddr4).HasMaxLength(40);
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.LocalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.MultiPrice).HasMaxLength(8);
            entity.Property(e => e.NetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Note).IsUnicode(false);
            entity.Property(e => e.Phone1).HasMaxLength(25);
            entity.Property(e => e.Ref).HasMaxLength(40);
            entity.Property(e => e.RefDocNo).HasMaxLength(30);
            entity.Property(e => e.Remark1).HasMaxLength(40);
            entity.Property(e => e.Remark2).HasMaxLength(40);
            entity.Property(e => e.Remark3).HasMaxLength(40);
            entity.Property(e => e.Remark4).HasMaxLength(40);
            entity.Property(e => e.SalesAgent).HasMaxLength(12);
            entity.Property(e => e.SalesExemptionExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.SalesExemptionNo).HasMaxLength(60);
            entity.Property(e => e.SalesLocation).HasMaxLength(8);
            entity.Property(e => e.ShipInfo).HasMaxLength(40);
            entity.Property(e => e.ShipVia).HasMaxLength(20);
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyExTax).HasColumnType("decimal(38, 13)");
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(38, 13)");
            entity.Property(e => e.ToTaxCurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.Total).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalQty).HasColumnType("decimal(38, 8)");
            entity.Property(e => e.TotalWithTax).HasColumnType("decimal(20, 2)");
        });

        modelBuilder.Entity<V2ConsignmentReturnDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("v2ConsignmentReturnDetail");

            entity.Property(e => e.AddToSubTotal)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.CalcByPercent).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.DeliveryDate).HasColumnType("datetime");
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Desc2).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.Discount).HasMaxLength(20);
            entity.Property(e => e.DiscountAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DtlType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EstimatedDeliveryDate).HasMaxLength(20);
            entity.Property(e => e.FontStyle).HasMaxLength(8);
            entity.Property(e => e.FromDocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.FullTransferOption)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FurtherDescription).IsUnicode(false);
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.LocalSubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalSubTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.Lost)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.MainItem)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Numbering).HasMaxLength(6);
            entity.Property(e => e.PrintOut)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Remark).HasMaxLength(100);
            entity.Property(e => e.SmallestQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SmallestUnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SubTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SubTotalWithTax).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCode).HasMaxLength(14);
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.UnitPriceAfterDiscount).HasColumnType("decimal(38, 13)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
            entity.Property(e => e.UserUom)
                .HasMaxLength(8)
                .HasColumnName("UserUOM");
            entity.Property(e => e.YourPodate)
                .HasColumnType("datetime")
                .HasColumnName("YourPODate");
            entity.Property(e => e.YourPono)
                .HasMaxLength(25)
                .HasColumnName("YourPONo");
        });

        modelBuilder.Entity<V2ConsignmentReturnSubDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("v2ConsignmentReturnSubDetail");

            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.Desc2).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.FurtherDescription).IsUnicode(false);
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.PrintOut)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Remark).HasMaxLength(100);
            entity.Property(e => e.SubQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<V2ConsignmentSubDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("v2ConsignmentSubDetail");

            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.Desc2).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.FurtherDescription).IsUnicode(false);
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.PrintOut)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Remark).HasMaxLength(100);
            entity.Property(e => e.SubQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<V2Creditor>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("v2Creditor");

            entity.Property(e => e.AreaCode).HasMaxLength(12);
            entity.Property(e => e.CreditorAddress1).HasMaxLength(40);
            entity.Property(e => e.CreditorAddress2).HasMaxLength(40);
            entity.Property(e => e.CreditorAddress3).HasMaxLength(40);
            entity.Property(e => e.CreditorAddress4).HasMaxLength(40);
            entity.Property(e => e.CreditorAgingOn)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreditorAttention).HasMaxLength(40);
            entity.Property(e => e.CreditorCode).HasMaxLength(12);
            entity.Property(e => e.CreditorCompanyName).HasMaxLength(100);
            entity.Property(e => e.CreditorCreatedTimestamp).HasColumnType("datetime");
            entity.Property(e => e.CreditorCreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreditorCreatedUserID");
            entity.Property(e => e.CreditorCreditLimit).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.CreditorCurrencyCode).HasMaxLength(5);
            entity.Property(e => e.CreditorDeliverAddress1).HasMaxLength(40);
            entity.Property(e => e.CreditorDeliverAddress2).HasMaxLength(40);
            entity.Property(e => e.CreditorDeliverAddress3).HasMaxLength(40);
            entity.Property(e => e.CreditorDeliverAddress4).HasMaxLength(40);
            entity.Property(e => e.CreditorDeliverPostCode).HasMaxLength(10);
            entity.Property(e => e.CreditorDesc2).HasMaxLength(100);
            entity.Property(e => e.CreditorDisplayTerm).HasMaxLength(30);
            entity.Property(e => e.CreditorEmailAddress).HasMaxLength(200);
            entity.Property(e => e.CreditorExemptExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.CreditorExemptNo).HasMaxLength(60);
            entity.Property(e => e.CreditorFax1).HasMaxLength(25);
            entity.Property(e => e.CreditorFax2).HasMaxLength(25);
            entity.Property(e => e.CreditorLastModified).HasColumnType("datetime");
            entity.Property(e => e.CreditorLastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreditorLastModifiedUserID");
            entity.Property(e => e.CreditorMobile).HasMaxLength(25);
            entity.Property(e => e.CreditorNatureOfBusiness).HasMaxLength(40);
            entity.Property(e => e.CreditorNote).IsUnicode(false);
            entity.Property(e => e.CreditorOverdueLimit).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.CreditorPhone1).HasMaxLength(25);
            entity.Property(e => e.CreditorPhone2).HasMaxLength(25);
            entity.Property(e => e.CreditorPostCode).HasMaxLength(10);
            entity.Property(e => e.CreditorPriceCategory).HasMaxLength(12);
            entity.Property(e => e.CreditorRegisterNo).HasMaxLength(30);
            entity.Property(e => e.CreditorStatementType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreditorTaxCode).HasMaxLength(14);
            entity.Property(e => e.CreditorTaxRegisterNo).HasMaxLength(31);
            entity.Property(e => e.CreditorType).HasMaxLength(20);
            entity.Property(e => e.CreditorWebUrl)
                .HasMaxLength(80)
                .HasColumnName("CreditorWebURL");
            entity.Property(e => e.PurchaseAgent).HasMaxLength(12);
        });

        modelBuilder.Entity<V2Debtor>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("v2Debtor");

            entity.Property(e => e.AreaCode).HasMaxLength(12);
            entity.Property(e => e.DebtorAddress1).HasMaxLength(40);
            entity.Property(e => e.DebtorAddress2).HasMaxLength(40);
            entity.Property(e => e.DebtorAddress3).HasMaxLength(40);
            entity.Property(e => e.DebtorAddress4).HasMaxLength(40);
            entity.Property(e => e.DebtorAgingOn)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DebtorAttention).HasMaxLength(40);
            entity.Property(e => e.DebtorCode).HasMaxLength(12);
            entity.Property(e => e.DebtorCompanyName).HasMaxLength(100);
            entity.Property(e => e.DebtorCreatedTimestamp).HasColumnType("datetime");
            entity.Property(e => e.DebtorCreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("DebtorCreatedUserID");
            entity.Property(e => e.DebtorCreditLimit).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DebtorCurrencyCode).HasMaxLength(5);
            entity.Property(e => e.DebtorDeliverAddress1).HasMaxLength(40);
            entity.Property(e => e.DebtorDeliverAddress2).HasMaxLength(40);
            entity.Property(e => e.DebtorDeliverAddress3).HasMaxLength(40);
            entity.Property(e => e.DebtorDeliverAddress4).HasMaxLength(40);
            entity.Property(e => e.DebtorDeliverPostCode).HasMaxLength(10);
            entity.Property(e => e.DebtorDesc2).HasMaxLength(100);
            entity.Property(e => e.DebtorDisplayTerm).HasMaxLength(30);
            entity.Property(e => e.DebtorEmailAddress).HasMaxLength(200);
            entity.Property(e => e.DebtorExemptExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.DebtorExemptNo).HasMaxLength(60);
            entity.Property(e => e.DebtorFax1).HasMaxLength(25);
            entity.Property(e => e.DebtorFax2).HasMaxLength(25);
            entity.Property(e => e.DebtorLastModified).HasColumnType("datetime");
            entity.Property(e => e.DebtorLastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("DebtorLastModifiedUserID");
            entity.Property(e => e.DebtorMobile).HasMaxLength(25);
            entity.Property(e => e.DebtorNatureOfBusiness).HasMaxLength(40);
            entity.Property(e => e.DebtorNote).IsUnicode(false);
            entity.Property(e => e.DebtorOverdueLimit).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DebtorPhone1).HasMaxLength(25);
            entity.Property(e => e.DebtorPhone2).HasMaxLength(25);
            entity.Property(e => e.DebtorPostCode).HasMaxLength(10);
            entity.Property(e => e.DebtorPriceCategory).HasMaxLength(12);
            entity.Property(e => e.DebtorRegisterNo).HasMaxLength(30);
            entity.Property(e => e.DebtorStatementType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DebtorTaxCode).HasMaxLength(14);
            entity.Property(e => e.DebtorTaxRegisterNo).HasMaxLength(31);
            entity.Property(e => e.DebtorType).HasMaxLength(20);
            entity.Property(e => e.DebtorUdfBangsa1)
                .HasMaxLength(50)
                .HasColumnName("DebtorUDF_Bangsa1");
            entity.Property(e => e.DebtorUdfBangsa2)
                .HasMaxLength(50)
                .HasColumnName("DebtorUDF_Bangsa2");
            entity.Property(e => e.DebtorUdfJantina)
                .HasMaxLength(20)
                .HasColumnName("DebtorUDF_Jantina");
            entity.Property(e => e.DebtorUdfKerakyatan)
                .HasMaxLength(50)
                .HasColumnName("DebtorUDF_Kerakyatan");
            entity.Property(e => e.DebtorUdfTarikhLahir)
                .HasColumnType("datetime")
                .HasColumnName("DebtorUDF_TarikhLahir");
            entity.Property(e => e.DebtorWebUrl)
                .HasMaxLength(80)
                .HasColumnName("DebtorWebURL");
            entity.Property(e => e.SalesAgent).HasMaxLength(12);
        });

        modelBuilder.Entity<V2Item>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("v2Item");

            entity.Property(e => e.ItemBaseUom)
                .HasMaxLength(8)
                .HasColumnName("ItemBaseUOM");
            entity.Property(e => e.ItemBrand).HasMaxLength(20);
            entity.Property(e => e.ItemCategory).HasMaxLength(20);
            entity.Property(e => e.ItemClass).HasMaxLength(20);
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.ItemDesc2).HasMaxLength(100);
            entity.Property(e => e.ItemDescription).HasMaxLength(100);
            entity.Property(e => e.ItemFurtherDescription).IsUnicode(false);
            entity.Property(e => e.ItemGroup).HasMaxLength(8);
            entity.Property(e => e.ItemNote).IsUnicode(false);
            entity.Property(e => e.ItemType).HasMaxLength(12);
            entity.Property(e => e.ItemUdfWarDay).HasColumnName("ItemUDF_WarDay");
            entity.Property(e => e.LeadTime).HasMaxLength(40);
        });

        modelBuilder.Entity<V2PurchaseConsignment>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("v2PurchaseConsignment");

            entity.Property(e => e.Attention).HasMaxLength(40);
            entity.Property(e => e.BranchCode).HasMaxLength(20);
            entity.Property(e => e.CanSync)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.CreditorCode).HasMaxLength(12);
            entity.Property(e => e.CreditorName).HasMaxLength(100);
            entity.Property(e => e.CurrencyCode).HasMaxLength(5);
            entity.Property(e => e.CurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.DeliverAddr1).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr2).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr3).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr4).HasMaxLength(40);
            entity.Property(e => e.DeliverContact).HasMaxLength(40);
            entity.Property(e => e.DeliverFax1).HasMaxLength(25);
            entity.Property(e => e.DeliverPhone1).HasMaxLength(25);
            entity.Property(e => e.Description).HasMaxLength(80);
            entity.Property(e => e.DisplayTerm).HasMaxLength(30);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.DocStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Fax1).HasMaxLength(25);
            entity.Property(e => e.InvAddr1).HasMaxLength(40);
            entity.Property(e => e.InvAddr2).HasMaxLength(40);
            entity.Property(e => e.InvAddr3).HasMaxLength(40);
            entity.Property(e => e.InvAddr4).HasMaxLength(40);
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.LocalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.NetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Note).IsUnicode(false);
            entity.Property(e => e.Phone1).HasMaxLength(25);
            entity.Property(e => e.PurchaseAgent).HasMaxLength(12);
            entity.Property(e => e.PurchaseLocation).HasMaxLength(8);
            entity.Property(e => e.Ref).HasMaxLength(40);
            entity.Property(e => e.RefDocNo).HasMaxLength(30);
            entity.Property(e => e.Remark1).HasMaxLength(40);
            entity.Property(e => e.Remark2).HasMaxLength(40);
            entity.Property(e => e.Remark3).HasMaxLength(40);
            entity.Property(e => e.Remark4).HasMaxLength(40);
            entity.Property(e => e.ShipInfo).HasMaxLength(40);
            entity.Property(e => e.ShipVia).HasMaxLength(20);
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyExTax).HasColumnType("decimal(38, 13)");
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(38, 13)");
            entity.Property(e => e.ToDocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.ToTaxCurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.Total).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalQty).HasColumnType("decimal(38, 8)");
            entity.Property(e => e.TotalWithTax).HasColumnType("decimal(20, 2)");
        });

        modelBuilder.Entity<V2PurchaseConsignmentDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("v2PurchaseConsignmentDetail");

            entity.Property(e => e.AddToSubTotal)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.CalcByPercent).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.DeliveryDate).HasColumnType("datetime");
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Desc2).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.Discount).HasMaxLength(20);
            entity.Property(e => e.DiscountAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DtlType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EstimatedDeliveryDate).HasMaxLength(20);
            entity.Property(e => e.FontStyle).HasMaxLength(8);
            entity.Property(e => e.FullTransferOption)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FurtherDescription).IsUnicode(false);
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.LocalSubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalSubTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.MainItem)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Numbering).HasMaxLength(6);
            entity.Property(e => e.PrintOut)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Remark).HasMaxLength(100);
            entity.Property(e => e.SmallestQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SmallestUnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SubTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SubTotalWithTax).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCode).HasMaxLength(14);
            entity.Property(e => e.TransferedQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.UnitPriceAfterDiscount).HasColumnType("decimal(38, 13)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
            entity.Property(e => e.UserUom)
                .HasMaxLength(8)
                .HasColumnName("UserUOM");
        });

        modelBuilder.Entity<V2PurchaseConsignmentReturn>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("v2PurchaseConsignmentReturn");

            entity.Property(e => e.Attention).HasMaxLength(40);
            entity.Property(e => e.BranchCode).HasMaxLength(20);
            entity.Property(e => e.CanSync)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.CreditorCode).HasMaxLength(12);
            entity.Property(e => e.CreditorName).HasMaxLength(100);
            entity.Property(e => e.CurrencyCode).HasMaxLength(5);
            entity.Property(e => e.CurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.Description).HasMaxLength(80);
            entity.Property(e => e.DisplayTerm).HasMaxLength(30);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.DocStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Fax1).HasMaxLength(25);
            entity.Property(e => e.InvAddr1).HasMaxLength(40);
            entity.Property(e => e.InvAddr2).HasMaxLength(40);
            entity.Property(e => e.InvAddr3).HasMaxLength(40);
            entity.Property(e => e.InvAddr4).HasMaxLength(40);
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.LocalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.NetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Note).IsUnicode(false);
            entity.Property(e => e.Phone1).HasMaxLength(25);
            entity.Property(e => e.PurchaseAgent).HasMaxLength(12);
            entity.Property(e => e.PurchaseLocation).HasMaxLength(8);
            entity.Property(e => e.Ref).HasMaxLength(40);
            entity.Property(e => e.RefDocNo).HasMaxLength(30);
            entity.Property(e => e.Remark1).HasMaxLength(40);
            entity.Property(e => e.Remark2).HasMaxLength(40);
            entity.Property(e => e.Remark3).HasMaxLength(40);
            entity.Property(e => e.Remark4).HasMaxLength(40);
            entity.Property(e => e.ShipInfo).HasMaxLength(40);
            entity.Property(e => e.ShipVia).HasMaxLength(20);
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyExTax).HasColumnType("decimal(38, 13)");
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(38, 13)");
            entity.Property(e => e.ToTaxCurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.Total).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalQty).HasColumnType("decimal(38, 8)");
            entity.Property(e => e.TotalWithTax).HasColumnType("decimal(20, 2)");
        });

        modelBuilder.Entity<V2PurchaseConsignmentReturnDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("v2PurchaseConsignmentReturnDetail");

            entity.Property(e => e.AddToSubTotal)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.CalcByPercent).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Desc2).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.Discount).HasMaxLength(20);
            entity.Property(e => e.DiscountAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DtlType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FontStyle).HasMaxLength(8);
            entity.Property(e => e.FromDocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.FullTransferOption)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FurtherDescription).IsUnicode(false);
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.LocalSubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalSubTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.Lost)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.MainItem)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Numbering).HasMaxLength(6);
            entity.Property(e => e.PrintOut)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Remark).HasMaxLength(100);
            entity.Property(e => e.SmallestQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SmallestUnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SubTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SubTotalWithTax).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCode).HasMaxLength(14);
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.UnitPriceAfterDiscount).HasColumnType("decimal(38, 13)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
            entity.Property(e => e.UserUom)
                .HasMaxLength(8)
                .HasColumnName("UserUOM");
        });

        modelBuilder.Entity<V2PurchaseConsignmentReturnSubDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("v2PurchaseConsignmentReturnSubDetail");

            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.Desc2).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.FurtherDescription).IsUnicode(false);
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.PrintOut)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Remark).HasMaxLength(100);
            entity.Property(e => e.SubQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<V2PurchaseConsignmentSubDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("v2PurchaseConsignmentSubDetail");

            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.Desc2).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.FurtherDescription).IsUnicode(false);
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.PrintOut)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Remark).HasMaxLength(100);
            entity.Property(e => e.SubQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<V2PurchaseRequest>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("v2PurchaseRequest");

            entity.Property(e => e.ApprovalUserId)
                .HasMaxLength(10)
                .HasColumnName("ApprovalUserID");
            entity.Property(e => e.CanSync)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.Description).HasMaxLength(80);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.DocStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.PqudfSuperAppId)
                .HasMaxLength(32)
                .HasColumnName("PQUDF_SuperAppId");
            entity.Property(e => e.PurchaseLocation).HasMaxLength(8);
            entity.Property(e => e.Ref).HasMaxLength(40);
            entity.Property(e => e.RefDocNo).HasMaxLength(30);
            entity.Property(e => e.Remark1).HasMaxLength(40);
            entity.Property(e => e.Remark2).HasMaxLength(40);
            entity.Property(e => e.Remark3).HasMaxLength(40);
            entity.Property(e => e.Remark4).HasMaxLength(40);
            entity.Property(e => e.RequestedBy).HasMaxLength(40);
        });

        modelBuilder.Entity<V2PurchaseRequestDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("v2PurchaseRequestDetail");

            entity.Property(e => e.CreditorCode).HasMaxLength(12);
            entity.Property(e => e.CreditorName).HasMaxLength(100);
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Desc2).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.FontStyle).HasMaxLength(8);
            entity.Property(e => e.FurtherDescription).IsUnicode(false);
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.MainItem)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Numbering).HasMaxLength(6);
            entity.Property(e => e.PrintOut)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.RequiredDate).HasColumnType("datetime");
            entity.Property(e => e.SmallestQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Transferable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TransferedQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
            entity.Property(e => e.UserUom)
                .HasMaxLength(8)
                .HasColumnName("UserUOM");
        });

        modelBuilder.Entity<V2PurchaseRequestSubDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("v2PurchaseRequestSubDetail");

            entity.Property(e => e.Desc2).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.FurtherDescription).IsUnicode(false);
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.PrintOut)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<V2StockDisassembly>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("v2StockDisassembly");

            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.CanSync)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.DisassemblyCost).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.DtlTotal).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.IsMultilevel)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.ItemCost).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.NetTotal).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Note).IsUnicode(false);
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.RefDocNo).HasMaxLength(30);
            entity.Property(e => e.Remark1).HasMaxLength(40);
            entity.Property(e => e.Remark2).HasMaxLength(40);
            entity.Property(e => e.Remark3).HasMaxLength(40);
            entity.Property(e => e.Remark4).HasMaxLength(40);
            entity.Property(e => e.Total).HasColumnType("decimal(25, 8)");
        });

        modelBuilder.Entity<V2StockDisassemblyDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("v2StockDisassemblyDetail");

            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.CostFraction).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Desc2).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.FurtherDescription).IsUnicode(false);
            entity.Property(e => e.IsBomitem)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IsBOMItem");
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.ItemCost).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.Numbering).HasMaxLength(6);
            entity.Property(e => e.OverHeadCost).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.PrintOut)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Remark).HasMaxLength(40);
            entity.Property(e => e.SubTotalCost).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<V2StockTake>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("v2StockTake");

            entity.Property(e => e.CanSync)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.LastPostedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.Note).IsUnicode(false);
            entity.Property(e => e.RefDocNo).HasMaxLength(30);
            entity.Property(e => e.Remark1).HasMaxLength(40);
            entity.Property(e => e.Remark2).HasMaxLength(40);
            entity.Property(e => e.Remark3).HasMaxLength(40);
            entity.Property(e => e.Remark4).HasMaxLength(40);
            entity.Property(e => e.Total).HasColumnType("decimal(19, 2)");
        });

        modelBuilder.Entity<V2StockTakeDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("v2StockTakeDetail");

            entity.Property(e => e.BalQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.Desc2).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.DiffQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.FurtherDescription).IsUnicode(false);
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.Numbering).HasMaxLength(6);
            entity.Property(e => e.PhysicalQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.PrintOut)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Remarks).HasMaxLength(40);
            entity.Property(e => e.Shelf).HasMaxLength(20);
            entity.Property(e => e.SubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.UnitCost).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<V2TaxEntity>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("v2TaxEntity");

            entity.Property(e => e.Address).HasMaxLength(200);
            entity.Property(e => e.BusinessActivityDesc).HasMaxLength(500);
            entity.Property(e => e.City).HasMaxLength(50);
            entity.Property(e => e.CountryCode).HasMaxLength(3);
            entity.Property(e => e.EmailAddress).HasMaxLength(200);
            entity.Property(e => e.GstregisterNo)
                .HasMaxLength(20)
                .HasColumnName("GSTRegisterNo");
            entity.Property(e => e.IdentityNo).HasMaxLength(30);
            entity.Property(e => e.IdentityType).HasMaxLength(10);
            entity.Property(e => e.Msiccode)
                .HasMaxLength(5)
                .HasColumnName("MSICCode");
            entity.Property(e => e.Name).HasMaxLength(100);
            entity.Property(e => e.Phone).HasMaxLength(25);
            entity.Property(e => e.PostCode).HasMaxLength(10);
            entity.Property(e => e.SstregisterNo)
                .HasMaxLength(20)
                .HasColumnName("SSTRegisterNo");
            entity.Property(e => e.StateCode).HasMaxLength(2);
            entity.Property(e => e.TaxBranchId)
                .HasMaxLength(10)
                .HasColumnName("TaxBranchID");
            entity.Property(e => e.TaxEntityId)
                .ValueGeneratedOnAdd()
                .HasColumnName("TaxEntityID");
            entity.Property(e => e.TaxRegisterNo).HasMaxLength(31);
            entity.Property(e => e.Tin)
                .HasMaxLength(20)
                .HasColumnName("TIN");
            entity.Property(e => e.TourismTaxRegisterNo).HasMaxLength(20);
            entity.Property(e => e.TradeName).HasMaxLength(100);
        });

        modelBuilder.Entity<VAccNo>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vAccNo");

            entity.Property(e => e.AccCurrencyCode).HasMaxLength(5);
            entity.Property(e => e.AccDesc2).HasMaxLength(100);
            entity.Property(e => e.AccDescription).HasMaxLength(100);
            entity.Property(e => e.AccNo).HasMaxLength(12);
            entity.Property(e => e.AccType).HasMaxLength(2);
            entity.Property(e => e.SpecialAccType)
                .HasMaxLength(3)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VAdvancedQuotation>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vAdvancedQuotation");

            entity.Property(e => e.ApprovalUserId)
                .HasMaxLength(10)
                .HasColumnName("ApprovalUserID");
            entity.Property(e => e.ApprovalUserName).HasMaxLength(40);
            entity.Property(e => e.Attention).HasMaxLength(40);
            entity.Property(e => e.BranchAccNo).HasMaxLength(12);
            entity.Property(e => e.BranchAddress1).HasMaxLength(40);
            entity.Property(e => e.BranchAddress2).HasMaxLength(40);
            entity.Property(e => e.BranchAddress3).HasMaxLength(40);
            entity.Property(e => e.BranchAddress4).HasMaxLength(40);
            entity.Property(e => e.BranchAreaCode).HasMaxLength(12);
            entity.Property(e => e.BranchCode).HasMaxLength(20);
            entity.Property(e => e.BranchContact).HasMaxLength(40);
            entity.Property(e => e.BranchEmailAddress).HasMaxLength(80);
            entity.Property(e => e.BranchFax1).HasMaxLength(25);
            entity.Property(e => e.BranchFax2).HasMaxLength(25);
            entity.Property(e => e.BranchIsActive)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BranchMobile).HasMaxLength(25);
            entity.Property(e => e.BranchName).HasMaxLength(100);
            entity.Property(e => e.BranchPhone1).HasMaxLength(25);
            entity.Property(e => e.BranchPhone2).HasMaxLength(25);
            entity.Property(e => e.BranchPostCode).HasMaxLength(10);
            entity.Property(e => e.BranchPurchaseAgent).HasMaxLength(12);
            entity.Property(e => e.BranchSalesAgent).HasMaxLength(12);
            entity.Property(e => e.CanSync)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Cc)
                .HasMaxLength(20)
                .HasColumnName("CC");
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.CreatedUserName).HasMaxLength(40);
            entity.Property(e => e.CurrencyCode).HasMaxLength(5);
            entity.Property(e => e.CurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.CurrencySymbol).HasMaxLength(6);
            entity.Property(e => e.CurrencyWord).HasMaxLength(40);
            entity.Property(e => e.CurrencyWord2).HasMaxLength(40);
            entity.Property(e => e.DebtorAddress1).HasMaxLength(40);
            entity.Property(e => e.DebtorAddress2).HasMaxLength(40);
            entity.Property(e => e.DebtorAddress3).HasMaxLength(40);
            entity.Property(e => e.DebtorAddress4).HasMaxLength(40);
            entity.Property(e => e.DebtorAgingOn)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DebtorAreaCode).HasMaxLength(12);
            entity.Property(e => e.DebtorAreaDesc2).HasMaxLength(40);
            entity.Property(e => e.DebtorAreaDescription).HasMaxLength(40);
            entity.Property(e => e.DebtorAttention).HasMaxLength(40);
            entity.Property(e => e.DebtorCode).HasMaxLength(12);
            entity.Property(e => e.DebtorCompanyName).HasMaxLength(100);
            entity.Property(e => e.DebtorCreatedTimestamp).HasColumnType("datetime");
            entity.Property(e => e.DebtorCreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("DebtorCreatedUserID");
            entity.Property(e => e.DebtorCreditLimit).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DebtorCurrencyCode).HasMaxLength(5);
            entity.Property(e => e.DebtorDeliverAddress1).HasMaxLength(40);
            entity.Property(e => e.DebtorDeliverAddress2).HasMaxLength(40);
            entity.Property(e => e.DebtorDeliverAddress3).HasMaxLength(40);
            entity.Property(e => e.DebtorDeliverAddress4).HasMaxLength(40);
            entity.Property(e => e.DebtorDeliverPostCode).HasMaxLength(10);
            entity.Property(e => e.DebtorDesc2).HasMaxLength(100);
            entity.Property(e => e.DebtorDisplayTerm).HasMaxLength(30);
            entity.Property(e => e.DebtorEmailAddress).HasMaxLength(200);
            entity.Property(e => e.DebtorExemptExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.DebtorExemptNo).HasMaxLength(60);
            entity.Property(e => e.DebtorFax1).HasMaxLength(25);
            entity.Property(e => e.DebtorFax2).HasMaxLength(25);
            entity.Property(e => e.DebtorGstregisterNo)
                .HasMaxLength(20)
                .HasColumnName("DebtorGSTRegisterNo");
            entity.Property(e => e.DebtorGststatusVerifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("DebtorGSTStatusVerifiedDate");
            entity.Property(e => e.DebtorInclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DebtorLastModified).HasColumnType("datetime");
            entity.Property(e => e.DebtorLastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("DebtorLastModifiedUserID");
            entity.Property(e => e.DebtorMobile).HasMaxLength(25);
            entity.Property(e => e.DebtorName).HasMaxLength(100);
            entity.Property(e => e.DebtorNatureOfBusiness).HasMaxLength(40);
            entity.Property(e => e.DebtorOverdueLimit).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DebtorParentAccNo).HasMaxLength(12);
            entity.Property(e => e.DebtorPhone1).HasMaxLength(25);
            entity.Property(e => e.DebtorPhone2).HasMaxLength(25);
            entity.Property(e => e.DebtorPostCode).HasMaxLength(10);
            entity.Property(e => e.DebtorPriceCategory).HasMaxLength(12);
            entity.Property(e => e.DebtorRegisterNo).HasMaxLength(30);
            entity.Property(e => e.DebtorSalesAgent).HasMaxLength(12);
            entity.Property(e => e.DebtorSalesAgentDesc2).HasMaxLength(40);
            entity.Property(e => e.DebtorSalesAgentDescription).HasMaxLength(40);
            entity.Property(e => e.DebtorSelfBilledApprovalNo).HasMaxLength(30);
            entity.Property(e => e.DebtorSstregisterNo)
                .HasMaxLength(20)
                .HasColumnName("DebtorSSTRegisterNo");
            entity.Property(e => e.DebtorStatementType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DebtorTaxCode).HasMaxLength(14);
            entity.Property(e => e.DebtorTaxRegisterNo).HasMaxLength(30);
            entity.Property(e => e.DebtorType).HasMaxLength(20);
            entity.Property(e => e.DebtorTypeDesc2).HasMaxLength(40);
            entity.Property(e => e.DebtorTypeDescription).HasMaxLength(40);
            entity.Property(e => e.DebtorUdfBangsa1)
                .HasMaxLength(50)
                .HasColumnName("DebtorUDF_Bangsa1");
            entity.Property(e => e.DebtorUdfBangsa2)
                .HasMaxLength(50)
                .HasColumnName("DebtorUDF_Bangsa2");
            entity.Property(e => e.DebtorUdfJantina)
                .HasMaxLength(20)
                .HasColumnName("DebtorUDF_Jantina");
            entity.Property(e => e.DebtorUdfKerakyatan)
                .HasMaxLength(50)
                .HasColumnName("DebtorUDF_Kerakyatan");
            entity.Property(e => e.DebtorUdfTarikhLahir)
                .HasColumnType("datetime")
                .HasColumnName("DebtorUDF_TarikhLahir");
            entity.Property(e => e.DebtorWebUrl)
                .HasMaxLength(80)
                .HasColumnName("DebtorWebURL");
            entity.Property(e => e.DeliverAddr1).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr2).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr3).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr4).HasMaxLength(40);
            entity.Property(e => e.DeliverContact).HasMaxLength(40);
            entity.Property(e => e.DeliverFax1).HasMaxLength(25);
            entity.Property(e => e.DeliverPhone1).HasMaxLength(25);
            entity.Property(e => e.DeliveryTerm).HasMaxLength(40);
            entity.Property(e => e.Description).HasMaxLength(80);
            entity.Property(e => e.DisplayTerm).HasMaxLength(30);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.ExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Fax1).HasMaxLength(25);
            entity.Property(e => e.FcgainAccount)
                .HasMaxLength(12)
                .HasColumnName("FCGainAccount");
            entity.Property(e => e.FclossAccount)
                .HasMaxLength(12)
                .HasColumnName("FCLossAccount");
            entity.Property(e => e.FinalTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer1TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Footer2Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer2TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Footer3Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer3TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.GainLossJournalType).HasMaxLength(10);
            entity.Property(e => e.InclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.InvAddr1).HasMaxLength(40);
            entity.Property(e => e.InvAddr2).HasMaxLength(40);
            entity.Property(e => e.InvAddr3).HasMaxLength(40);
            entity.Property(e => e.InvAddr4).HasMaxLength(40);
            entity.Property(e => e.IsDebtorTaxRegistered)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.IsRoundAdj)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.LastModifiedUserName).HasMaxLength(40);
            entity.Property(e => e.LocalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.MultiPrice).HasMaxLength(8);
            entity.Property(e => e.NetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.PaymentTerm).HasMaxLength(40);
            entity.Property(e => e.Phone1).HasMaxLength(25);
            entity.Property(e => e.Qtstatus)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("QTStatus");
            entity.Property(e => e.Reason).HasMaxLength(200);
            entity.Property(e => e.Ref).HasMaxLength(40);
            entity.Property(e => e.RefDocNo).HasMaxLength(30);
            entity.Property(e => e.Remark1).HasMaxLength(40);
            entity.Property(e => e.Remark2).HasMaxLength(40);
            entity.Property(e => e.Remark3).HasMaxLength(40);
            entity.Property(e => e.Remark4).HasMaxLength(40);
            entity.Property(e => e.RoundAdj).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SalesAgent).HasMaxLength(12);
            entity.Property(e => e.SalesAgentDesc2).HasMaxLength(40);
            entity.Property(e => e.SalesAgentDescription).HasMaxLength(40);
            entity.Property(e => e.SalesExemptionExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.SalesExemptionNo).HasMaxLength(60);
            entity.Property(e => e.SalesLocation).HasMaxLength(8);
            entity.Property(e => e.ShipInfo).HasMaxLength(40);
            entity.Property(e => e.ShipVia).HasMaxLength(20);
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyExTax).HasColumnType("decimal(38, 13)");
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxRegisterNo).HasMaxLength(30);
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ToDocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.ToTaxCurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.Total).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalWithTax).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.Transferable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Validity).HasMaxLength(40);
            entity.Property(e => e.YourRef).HasMaxLength(30);
        });

        modelBuilder.Entity<VAdvancedQuotationDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vAdvancedQuotationDetail");

            entity.Property(e => e.AddToCost)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AddToSubTotal)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BarCode).HasMaxLength(30);
            entity.Property(e => e.BatchBalQty).HasColumnType("decimal(38, 8)");
            entity.Property(e => e.CalcByPercent).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.DeliveryDate).HasColumnType("datetime");
            entity.Property(e => e.DeptDesc2).HasMaxLength(40);
            entity.Property(e => e.DeptDescription).HasMaxLength(40);
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Desc2).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.Discount).HasMaxLength(20);
            entity.Property(e => e.DiscountAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DocTaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.DtlType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EstimatedDeliveryDate).HasMaxLength(20);
            entity.Property(e => e.FontStyle).HasMaxLength(8);
            entity.Property(e => e.GovtTaxCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.ItemBaseUom)
                .HasMaxLength(8)
                .HasColumnName("ItemBaseUOM");
            entity.Property(e => e.ItemBrand).HasMaxLength(20);
            entity.Property(e => e.ItemBrandDescription).HasMaxLength(40);
            entity.Property(e => e.ItemCategory).HasMaxLength(20);
            entity.Property(e => e.ItemCategoryDescription).HasMaxLength(40);
            entity.Property(e => e.ItemClass).HasMaxLength(20);
            entity.Property(e => e.ItemClassDescription).HasMaxLength(40);
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.ItemDesc2).HasMaxLength(100);
            entity.Property(e => e.ItemDescription).HasMaxLength(100);
            entity.Property(e => e.ItemGroup).HasMaxLength(8);
            entity.Property(e => e.ItemGroupDescription).HasMaxLength(40);
            entity.Property(e => e.ItemType).HasMaxLength(12);
            entity.Property(e => e.ItemTypeDescription).HasMaxLength(40);
            entity.Property(e => e.ItemUdfWarDay).HasColumnName("ItemUDF_WarDay");
            entity.Property(e => e.LeadTime).HasMaxLength(40);
            entity.Property(e => e.LocalSubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalSubTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.LocationAddr1).HasMaxLength(40);
            entity.Property(e => e.LocationAddr2).HasMaxLength(40);
            entity.Property(e => e.LocationAddr3).HasMaxLength(40);
            entity.Property(e => e.LocationAddr4).HasMaxLength(40);
            entity.Property(e => e.LocationBalQty).HasColumnType("decimal(38, 8)");
            entity.Property(e => e.LocationContact).HasMaxLength(40);
            entity.Property(e => e.LocationDesc2).HasMaxLength(80);
            entity.Property(e => e.LocationDescription).HasMaxLength(80);
            entity.Property(e => e.LocationFax1).HasMaxLength(25);
            entity.Property(e => e.LocationFax2).HasMaxLength(25);
            entity.Property(e => e.LocationPhone1).HasMaxLength(25);
            entity.Property(e => e.LocationPhone2).HasMaxLength(25);
            entity.Property(e => e.LocationPostCode).HasMaxLength(10);
            entity.Property(e => e.MainItem)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Numbering).HasMaxLength(6);
            entity.Property(e => e.PrintOut)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.ProjectDesc2).HasMaxLength(40);
            entity.Property(e => e.ProjectDescription).HasMaxLength(40);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SalesExemptionNo).HasMaxLength(60);
            entity.Property(e => e.Shelf).HasMaxLength(20);
            entity.Property(e => e.SmallestQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SmallestUnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SubTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SubTotalWithTax).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxAccNo).HasMaxLength(12);
            entity.Property(e => e.TaxCode).HasMaxLength(14);
            entity.Property(e => e.TaxCodeDescription).HasMaxLength(120);
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Transferable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TransferedQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.UnitPriceAfterDiscount).HasColumnType("decimal(38, 13)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
            entity.Property(e => e.UombalQty)
                .HasColumnType("decimal(38, 8)")
                .HasColumnName("UOMBalQty");
            entity.Property(e => e.Uomcost)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMCost");
            entity.Property(e => e.UomitemCode)
                .HasMaxLength(30)
                .HasColumnName("UOMItemCode");
            entity.Property(e => e.Uomprice)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMPrice");
            entity.Property(e => e.Uomprice2)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMPrice2");
            entity.Property(e => e.Uomrate)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMRate");
            entity.Property(e => e.UomrealCost)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMRealCost");
            entity.Property(e => e.UserUom)
                .HasMaxLength(8)
                .HasColumnName("UserUOM");
            entity.Property(e => e.Volume).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.VolumeUom)
                .HasMaxLength(8)
                .HasColumnName("VolumeUOM");
            entity.Property(e => e.Weight).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.WeightUom)
                .HasMaxLength(8)
                .HasColumnName("WeightUOM");
        });

        modelBuilder.Entity<VAdvancedQuotationSubDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vAdvancedQuotationSubDetail");

            entity.Property(e => e.AddToCost)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Desc2).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.DocTaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.GovtTaxCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.LocalSubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.PrintOut)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SalesExemptionNo).HasMaxLength(60);
            entity.Property(e => e.SubQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxAccNo).HasMaxLength(12);
            entity.Property(e => e.TaxCode).HasMaxLength(14);
            entity.Property(e => e.TaxCodeDescription).HasMaxLength(120);
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<VApcreditNote>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vAPCreditNote");

            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Cntype)
                .HasMaxLength(12)
                .HasColumnName("CNType");
            entity.Property(e => e.CntypeDescription)
                .HasMaxLength(40)
                .HasColumnName("CNTypeDescription");
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.CreatedUserName).HasMaxLength(40);
            entity.Property(e => e.CreditorAddress1).HasMaxLength(40);
            entity.Property(e => e.CreditorAddress2).HasMaxLength(40);
            entity.Property(e => e.CreditorAddress3).HasMaxLength(40);
            entity.Property(e => e.CreditorAddress4).HasMaxLength(40);
            entity.Property(e => e.CreditorAgingOn)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreditorAreaCode).HasMaxLength(12);
            entity.Property(e => e.CreditorAreaDesc2).HasMaxLength(40);
            entity.Property(e => e.CreditorAreaDescription).HasMaxLength(40);
            entity.Property(e => e.CreditorAttention).HasMaxLength(40);
            entity.Property(e => e.CreditorCode).HasMaxLength(12);
            entity.Property(e => e.CreditorCompanyName).HasMaxLength(100);
            entity.Property(e => e.CreditorCreatedTimestamp).HasColumnType("datetime");
            entity.Property(e => e.CreditorCreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreditorCreatedUserID");
            entity.Property(e => e.CreditorCreditLimit).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.CreditorCurrencyCode).HasMaxLength(5);
            entity.Property(e => e.CreditorDeliverAddress1).HasMaxLength(40);
            entity.Property(e => e.CreditorDeliverAddress2).HasMaxLength(40);
            entity.Property(e => e.CreditorDeliverAddress3).HasMaxLength(40);
            entity.Property(e => e.CreditorDeliverAddress4).HasMaxLength(40);
            entity.Property(e => e.CreditorDeliverPostCode).HasMaxLength(10);
            entity.Property(e => e.CreditorDesc2).HasMaxLength(100);
            entity.Property(e => e.CreditorDisplayTerm).HasMaxLength(30);
            entity.Property(e => e.CreditorEmailAddress).HasMaxLength(200);
            entity.Property(e => e.CreditorExemptExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.CreditorExemptNo).HasMaxLength(60);
            entity.Property(e => e.CreditorFax1).HasMaxLength(25);
            entity.Property(e => e.CreditorFax2).HasMaxLength(25);
            entity.Property(e => e.CreditorGstregisterNo)
                .HasMaxLength(20)
                .HasColumnName("CreditorGSTRegisterNo");
            entity.Property(e => e.CreditorGststatusVerifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("CreditorGSTStatusVerifiedDate");
            entity.Property(e => e.CreditorInclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreditorLastModified).HasColumnType("datetime");
            entity.Property(e => e.CreditorLastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreditorLastModifiedUserID");
            entity.Property(e => e.CreditorMobile).HasMaxLength(25);
            entity.Property(e => e.CreditorNatureOfBusiness).HasMaxLength(40);
            entity.Property(e => e.CreditorOverdueLimit).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.CreditorParentAccNo).HasMaxLength(12);
            entity.Property(e => e.CreditorPhone1).HasMaxLength(25);
            entity.Property(e => e.CreditorPhone2).HasMaxLength(25);
            entity.Property(e => e.CreditorPostCode).HasMaxLength(10);
            entity.Property(e => e.CreditorPriceCategory).HasMaxLength(12);
            entity.Property(e => e.CreditorPurchaseAgent).HasMaxLength(12);
            entity.Property(e => e.CreditorPurchaseAgentDesc2).HasMaxLength(40);
            entity.Property(e => e.CreditorPurchaseAgentDescription).HasMaxLength(40);
            entity.Property(e => e.CreditorRegisterNo).HasMaxLength(30);
            entity.Property(e => e.CreditorSelfBilledApprovalNo).HasMaxLength(30);
            entity.Property(e => e.CreditorSstregisterNo)
                .HasMaxLength(20)
                .HasColumnName("CreditorSSTRegisterNo");
            entity.Property(e => e.CreditorStatementType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreditorTaxCode).HasMaxLength(14);
            entity.Property(e => e.CreditorTaxRegisterNo).HasMaxLength(30);
            entity.Property(e => e.CreditorType).HasMaxLength(20);
            entity.Property(e => e.CreditorTypeDesc2).HasMaxLength(40);
            entity.Property(e => e.CreditorTypeDescription).HasMaxLength(40);
            entity.Property(e => e.CreditorWebUrl)
                .HasMaxLength(80)
                .HasColumnName("CreditorWebURL");
            entity.Property(e => e.CurrencyCode).HasMaxLength(5);
            entity.Property(e => e.CurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.CurrencySymbol).HasMaxLength(6);
            entity.Property(e => e.CurrencyWord).HasMaxLength(40);
            entity.Property(e => e.CurrencyWord2).HasMaxLength(40);
            entity.Property(e => e.Description).HasMaxLength(80);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocDate2).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.DocStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EinvoiceStatus)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceStatus");
            entity.Property(e => e.EinvoiceUuid)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceUuid");
            entity.Property(e => e.EinvoiceValidatedDateTime)
                .HasColumnType("datetime")
                .HasColumnName("EInvoiceValidatedDateTime");
            entity.Property(e => e.EinvoiceValidationLink)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("EInvoiceValidationLink");
            entity.Property(e => e.ExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.FcgainAccount)
                .HasMaxLength(12)
                .HasColumnName("FCGainAccount");
            entity.Property(e => e.FclossAccount)
                .HasMaxLength(12)
                .HasColumnName("FCLossAccount");
            entity.Property(e => e.GainLossJournalType).HasMaxLength(10);
            entity.Property(e => e.InclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.KnockOffAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.LastModifiedUserName).HasMaxLength(40);
            entity.Property(e => e.LocalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTotal2).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.NetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Reason).HasMaxLength(80);
            entity.Property(e => e.Ref).HasMaxLength(40);
            entity.Property(e => e.RefNo2).HasMaxLength(30);
            entity.Property(e => e.RefundAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SourceType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.SupplierCnno)
                .HasMaxLength(30)
                .HasColumnName("SupplierCNNo");
            entity.Property(e => e.SupplierInvoiceNo).HasMaxLength(100);
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxDate).HasColumnType("datetime");
            entity.Property(e => e.TaxDocNo).HasMaxLength(20);
            entity.Property(e => e.TaxRegisterNo).HasMaxLength(30);
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ToTaxCurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.Total).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Total2).HasColumnType("decimal(19, 2)");
        });

        modelBuilder.Entity<VApcreditNoteDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vAPCreditNoteDetail");

            entity.Property(e => e.AccNo).HasMaxLength(12);
            entity.Property(e => e.Amount).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.DocTaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.KnockOffAmount).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalNetAmount).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalSubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxAdjustment).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalUnappliedAmount).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.NetAmount).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.SubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SupplyPurchase)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TariffCode).HasMaxLength(12);
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxAdjustment).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCode).HasMaxLength(14);
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxPermitNo).HasMaxLength(20);
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ToAccountRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.UnappliedAmount).HasColumnType("decimal(19, 2)");
        });

        modelBuilder.Entity<VApdebitNote>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vAPDebitNote");

            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.CreatedUserName).HasMaxLength(40);
            entity.Property(e => e.CreditorAddress1).HasMaxLength(40);
            entity.Property(e => e.CreditorAddress2).HasMaxLength(40);
            entity.Property(e => e.CreditorAddress3).HasMaxLength(40);
            entity.Property(e => e.CreditorAddress4).HasMaxLength(40);
            entity.Property(e => e.CreditorAgingOn)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreditorAreaCode).HasMaxLength(12);
            entity.Property(e => e.CreditorAreaDesc2).HasMaxLength(40);
            entity.Property(e => e.CreditorAreaDescription).HasMaxLength(40);
            entity.Property(e => e.CreditorAttention).HasMaxLength(40);
            entity.Property(e => e.CreditorCode).HasMaxLength(12);
            entity.Property(e => e.CreditorCompanyName).HasMaxLength(100);
            entity.Property(e => e.CreditorCreatedTimestamp).HasColumnType("datetime");
            entity.Property(e => e.CreditorCreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreditorCreatedUserID");
            entity.Property(e => e.CreditorCreditLimit).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.CreditorCurrencyCode).HasMaxLength(5);
            entity.Property(e => e.CreditorDeliverAddress1).HasMaxLength(40);
            entity.Property(e => e.CreditorDeliverAddress2).HasMaxLength(40);
            entity.Property(e => e.CreditorDeliverAddress3).HasMaxLength(40);
            entity.Property(e => e.CreditorDeliverAddress4).HasMaxLength(40);
            entity.Property(e => e.CreditorDeliverPostCode).HasMaxLength(10);
            entity.Property(e => e.CreditorDesc2).HasMaxLength(100);
            entity.Property(e => e.CreditorDisplayTerm).HasMaxLength(30);
            entity.Property(e => e.CreditorEmailAddress).HasMaxLength(200);
            entity.Property(e => e.CreditorExemptExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.CreditorExemptNo).HasMaxLength(60);
            entity.Property(e => e.CreditorFax1).HasMaxLength(25);
            entity.Property(e => e.CreditorFax2).HasMaxLength(25);
            entity.Property(e => e.CreditorGstregisterNo)
                .HasMaxLength(20)
                .HasColumnName("CreditorGSTRegisterNo");
            entity.Property(e => e.CreditorGststatusVerifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("CreditorGSTStatusVerifiedDate");
            entity.Property(e => e.CreditorInclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreditorLastModified).HasColumnType("datetime");
            entity.Property(e => e.CreditorLastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreditorLastModifiedUserID");
            entity.Property(e => e.CreditorMobile).HasMaxLength(25);
            entity.Property(e => e.CreditorNatureOfBusiness).HasMaxLength(40);
            entity.Property(e => e.CreditorOverdueLimit).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.CreditorParentAccNo).HasMaxLength(12);
            entity.Property(e => e.CreditorPhone1).HasMaxLength(25);
            entity.Property(e => e.CreditorPhone2).HasMaxLength(25);
            entity.Property(e => e.CreditorPostCode).HasMaxLength(10);
            entity.Property(e => e.CreditorPriceCategory).HasMaxLength(12);
            entity.Property(e => e.CreditorPurchaseAgent).HasMaxLength(12);
            entity.Property(e => e.CreditorPurchaseAgentDesc2).HasMaxLength(40);
            entity.Property(e => e.CreditorPurchaseAgentDescription).HasMaxLength(40);
            entity.Property(e => e.CreditorRegisterNo).HasMaxLength(30);
            entity.Property(e => e.CreditorSelfBilledApprovalNo).HasMaxLength(30);
            entity.Property(e => e.CreditorSstregisterNo)
                .HasMaxLength(20)
                .HasColumnName("CreditorSSTRegisterNo");
            entity.Property(e => e.CreditorStatementType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreditorTaxCode).HasMaxLength(14);
            entity.Property(e => e.CreditorTaxRegisterNo).HasMaxLength(30);
            entity.Property(e => e.CreditorType).HasMaxLength(20);
            entity.Property(e => e.CreditorTypeDesc2).HasMaxLength(40);
            entity.Property(e => e.CreditorTypeDescription).HasMaxLength(40);
            entity.Property(e => e.CreditorWebUrl)
                .HasMaxLength(80)
                .HasColumnName("CreditorWebURL");
            entity.Property(e => e.CurrencyCode).HasMaxLength(5);
            entity.Property(e => e.CurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.CurrencySymbol).HasMaxLength(6);
            entity.Property(e => e.CurrencyWord).HasMaxLength(40);
            entity.Property(e => e.CurrencyWord2).HasMaxLength(40);
            entity.Property(e => e.Description).HasMaxLength(80);
            entity.Property(e => e.DisplayTerm).HasMaxLength(30);
            entity.Property(e => e.Dntype)
                .HasMaxLength(12)
                .HasColumnName("DNType");
            entity.Property(e => e.DntypeDescription)
                .HasMaxLength(40)
                .HasColumnName("DNTypeDescription");
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocDate2).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.DocStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DueDate).HasColumnType("datetime");
            entity.Property(e => e.EinvoiceStatus)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceStatus");
            entity.Property(e => e.EinvoiceUuid)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceUuid");
            entity.Property(e => e.EinvoiceValidatedDateTime)
                .HasColumnType("datetime")
                .HasColumnName("EInvoiceValidatedDateTime");
            entity.Property(e => e.EinvoiceValidationLink)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("EInvoiceValidationLink");
            entity.Property(e => e.ExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.FcgainAccount)
                .HasMaxLength(12)
                .HasColumnName("FCGainAccount");
            entity.Property(e => e.FclossAccount)
                .HasMaxLength(12)
                .HasColumnName("FCLossAccount");
            entity.Property(e => e.GainLossJournalType).HasMaxLength(10);
            entity.Property(e => e.InclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.LastModifiedUserName).HasMaxLength(40);
            entity.Property(e => e.LocalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalPaymentAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTotal2).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.NetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Outstanding).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.PaymentAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Reason).HasMaxLength(80);
            entity.Property(e => e.Ref).HasMaxLength(40);
            entity.Property(e => e.RefNo2).HasMaxLength(30);
            entity.Property(e => e.SourceType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.SupplierDnno)
                .HasMaxLength(30)
                .HasColumnName("SupplierDNNo");
            entity.Property(e => e.SupplierInvoiceNo).HasMaxLength(100);
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxDate).HasColumnType("datetime");
            entity.Property(e => e.TaxDocNo).HasMaxLength(20);
            entity.Property(e => e.TaxRegisterNo).HasMaxLength(30);
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ToTaxCurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.Total).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Total2).HasColumnType("decimal(19, 2)");
        });

        modelBuilder.Entity<VApdebitNoteDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vAPDebitNoteDetail");

            entity.Property(e => e.AccNo).HasMaxLength(12);
            entity.Property(e => e.Amount).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.DocTaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.KnockOffAmount).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalNetAmount).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalSubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxAdjustment).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.NetAmount).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.SubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SupplyPurchase)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TariffCode).HasMaxLength(12);
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxAdjustment).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCode).HasMaxLength(14);
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxPermitNo).HasMaxLength(20);
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ToAccountRate).HasColumnType("decimal(19, 12)");
        });

        modelBuilder.Entity<VApdeposit>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vAPDeposit");

            entity.Property(e => e.Attention).HasMaxLength(40);
            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.CreatedUserName).HasMaxLength(40);
            entity.Property(e => e.CreditorAddress1).HasMaxLength(40);
            entity.Property(e => e.CreditorAddress2).HasMaxLength(40);
            entity.Property(e => e.CreditorAddress3).HasMaxLength(40);
            entity.Property(e => e.CreditorAddress4).HasMaxLength(40);
            entity.Property(e => e.CreditorAgingOn)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreditorAreaCode).HasMaxLength(12);
            entity.Property(e => e.CreditorAreaDesc2).HasMaxLength(40);
            entity.Property(e => e.CreditorAreaDescription).HasMaxLength(40);
            entity.Property(e => e.CreditorAttention).HasMaxLength(40);
            entity.Property(e => e.CreditorCode).HasMaxLength(12);
            entity.Property(e => e.CreditorCompanyName).HasMaxLength(100);
            entity.Property(e => e.CreditorCreatedTimestamp).HasColumnType("datetime");
            entity.Property(e => e.CreditorCreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreditorCreatedUserID");
            entity.Property(e => e.CreditorCreditLimit).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.CreditorCurrencyCode).HasMaxLength(5);
            entity.Property(e => e.CreditorDeliverAddress1).HasMaxLength(40);
            entity.Property(e => e.CreditorDeliverAddress2).HasMaxLength(40);
            entity.Property(e => e.CreditorDeliverAddress3).HasMaxLength(40);
            entity.Property(e => e.CreditorDeliverAddress4).HasMaxLength(40);
            entity.Property(e => e.CreditorDeliverPostCode).HasMaxLength(10);
            entity.Property(e => e.CreditorDesc2).HasMaxLength(100);
            entity.Property(e => e.CreditorDisplayTerm).HasMaxLength(30);
            entity.Property(e => e.CreditorEmailAddress).HasMaxLength(200);
            entity.Property(e => e.CreditorExemptExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.CreditorExemptNo).HasMaxLength(60);
            entity.Property(e => e.CreditorFax1).HasMaxLength(25);
            entity.Property(e => e.CreditorFax2).HasMaxLength(25);
            entity.Property(e => e.CreditorGstregisterNo)
                .HasMaxLength(20)
                .HasColumnName("CreditorGSTRegisterNo");
            entity.Property(e => e.CreditorGststatusVerifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("CreditorGSTStatusVerifiedDate");
            entity.Property(e => e.CreditorInclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreditorLastModified).HasColumnType("datetime");
            entity.Property(e => e.CreditorLastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreditorLastModifiedUserID");
            entity.Property(e => e.CreditorMobile).HasMaxLength(25);
            entity.Property(e => e.CreditorName).HasMaxLength(100);
            entity.Property(e => e.CreditorNatureOfBusiness).HasMaxLength(40);
            entity.Property(e => e.CreditorOverdueLimit).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.CreditorParentAccNo).HasMaxLength(12);
            entity.Property(e => e.CreditorPhone1).HasMaxLength(25);
            entity.Property(e => e.CreditorPhone2).HasMaxLength(25);
            entity.Property(e => e.CreditorPostCode).HasMaxLength(10);
            entity.Property(e => e.CreditorPriceCategory).HasMaxLength(12);
            entity.Property(e => e.CreditorPurchaseAgent).HasMaxLength(12);
            entity.Property(e => e.CreditorPurchaseAgentDesc2).HasMaxLength(40);
            entity.Property(e => e.CreditorPurchaseAgentDescription).HasMaxLength(40);
            entity.Property(e => e.CreditorRegisterNo).HasMaxLength(30);
            entity.Property(e => e.CreditorSelfBilledApprovalNo).HasMaxLength(30);
            entity.Property(e => e.CreditorSstregisterNo)
                .HasMaxLength(20)
                .HasColumnName("CreditorSSTRegisterNo");
            entity.Property(e => e.CreditorStatementType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreditorTaxCode).HasMaxLength(14);
            entity.Property(e => e.CreditorTaxRegisterNo).HasMaxLength(30);
            entity.Property(e => e.CreditorType).HasMaxLength(20);
            entity.Property(e => e.CreditorTypeDesc2).HasMaxLength(40);
            entity.Property(e => e.CreditorTypeDescription).HasMaxLength(40);
            entity.Property(e => e.CreditorWebUrl)
                .HasMaxLength(80)
                .HasColumnName("CreditorWebURL");
            entity.Property(e => e.CurrencyCode).HasMaxLength(5);
            entity.Property(e => e.CurrencySymbol).HasMaxLength(6);
            entity.Property(e => e.CurrencyWord).HasMaxLength(40);
            entity.Property(e => e.CurrencyWord2).HasMaxLength(40);
            entity.Property(e => e.DepositPaymentMethod).HasMaxLength(20);
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Description).HasMaxLength(80);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.Fax1).HasMaxLength(25);
            entity.Property(e => e.FcgainAccount)
                .HasMaxLength(12)
                .HasColumnName("FCGainAccount");
            entity.Property(e => e.FclossAccount)
                .HasMaxLength(12)
                .HasColumnName("FCLossAccount");
            entity.Property(e => e.GainLossJournalType).HasMaxLength(10);
            entity.Property(e => e.InvAddr1).HasMaxLength(40);
            entity.Property(e => e.InvAddr2).HasMaxLength(40);
            entity.Property(e => e.InvAddr3).HasMaxLength(40);
            entity.Property(e => e.InvAddr4).HasMaxLength(40);
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.LastModifiedUserName).HasMaxLength(40);
            entity.Property(e => e.LocalPaymentAmt).HasColumnType("decimal(38, 13)");
            entity.Property(e => e.Outstanding).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.PaymentAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Phone1).HasMaxLength(25);
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.ToDepositRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.ToHomeRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.TransferedAmt).HasColumnType("decimal(19, 2)");
        });

        modelBuilder.Entity<VApdepositDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vAPDepositDetail");

            entity.Property(e => e.BankCharge).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.BankChargeDeptNo).HasMaxLength(10);
            entity.Property(e => e.BankChargeProjNo).HasMaxLength(10);
            entity.Property(e => e.BankChargeTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.BankChargeTaxCode).HasMaxLength(14);
            entity.Property(e => e.BankChargeTaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.BankChargeTaxRefNo).HasMaxLength(30);
            entity.Property(e => e.ChequeNo).HasMaxLength(30);
            entity.Property(e => e.IsRchq)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IsRCHQ");
            entity.Property(e => e.PaymentAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.PaymentBy).HasMaxLength(20);
            entity.Property(e => e.PaymentMethod).HasMaxLength(20);
            entity.Property(e => e.Rchqdate)
                .HasColumnType("datetime")
                .HasColumnName("RCHQDate");
        });

        modelBuilder.Entity<VApinvoice>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vAPInvoice");

            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.CreatedUserName).HasMaxLength(40);
            entity.Property(e => e.CreditorAddress1).HasMaxLength(40);
            entity.Property(e => e.CreditorAddress2).HasMaxLength(40);
            entity.Property(e => e.CreditorAddress3).HasMaxLength(40);
            entity.Property(e => e.CreditorAddress4).HasMaxLength(40);
            entity.Property(e => e.CreditorAgingOn)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreditorAreaCode).HasMaxLength(12);
            entity.Property(e => e.CreditorAreaDesc2).HasMaxLength(40);
            entity.Property(e => e.CreditorAreaDescription).HasMaxLength(40);
            entity.Property(e => e.CreditorAttention).HasMaxLength(40);
            entity.Property(e => e.CreditorCode).HasMaxLength(12);
            entity.Property(e => e.CreditorCompanyName).HasMaxLength(100);
            entity.Property(e => e.CreditorCreatedTimestamp).HasColumnType("datetime");
            entity.Property(e => e.CreditorCreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreditorCreatedUserID");
            entity.Property(e => e.CreditorCreditLimit).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.CreditorCurrencyCode).HasMaxLength(5);
            entity.Property(e => e.CreditorDeliverAddress1).HasMaxLength(40);
            entity.Property(e => e.CreditorDeliverAddress2).HasMaxLength(40);
            entity.Property(e => e.CreditorDeliverAddress3).HasMaxLength(40);
            entity.Property(e => e.CreditorDeliverAddress4).HasMaxLength(40);
            entity.Property(e => e.CreditorDeliverPostCode).HasMaxLength(10);
            entity.Property(e => e.CreditorDesc2).HasMaxLength(100);
            entity.Property(e => e.CreditorDisplayTerm).HasMaxLength(30);
            entity.Property(e => e.CreditorEmailAddress).HasMaxLength(200);
            entity.Property(e => e.CreditorExemptExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.CreditorExemptNo).HasMaxLength(60);
            entity.Property(e => e.CreditorFax1).HasMaxLength(25);
            entity.Property(e => e.CreditorFax2).HasMaxLength(25);
            entity.Property(e => e.CreditorGstregisterNo)
                .HasMaxLength(20)
                .HasColumnName("CreditorGSTRegisterNo");
            entity.Property(e => e.CreditorGststatusVerifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("CreditorGSTStatusVerifiedDate");
            entity.Property(e => e.CreditorInclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreditorLastModified).HasColumnType("datetime");
            entity.Property(e => e.CreditorLastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreditorLastModifiedUserID");
            entity.Property(e => e.CreditorMobile).HasMaxLength(25);
            entity.Property(e => e.CreditorNatureOfBusiness).HasMaxLength(40);
            entity.Property(e => e.CreditorOverdueLimit).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.CreditorParentAccNo).HasMaxLength(12);
            entity.Property(e => e.CreditorPhone1).HasMaxLength(25);
            entity.Property(e => e.CreditorPhone2).HasMaxLength(25);
            entity.Property(e => e.CreditorPostCode).HasMaxLength(10);
            entity.Property(e => e.CreditorPriceCategory).HasMaxLength(12);
            entity.Property(e => e.CreditorPurchaseAgent).HasMaxLength(12);
            entity.Property(e => e.CreditorPurchaseAgentDesc2).HasMaxLength(40);
            entity.Property(e => e.CreditorPurchaseAgentDescription).HasMaxLength(40);
            entity.Property(e => e.CreditorRegisterNo).HasMaxLength(30);
            entity.Property(e => e.CreditorSelfBilledApprovalNo).HasMaxLength(30);
            entity.Property(e => e.CreditorSstregisterNo)
                .HasMaxLength(20)
                .HasColumnName("CreditorSSTRegisterNo");
            entity.Property(e => e.CreditorStatementType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreditorTaxCode).HasMaxLength(14);
            entity.Property(e => e.CreditorTaxRegisterNo).HasMaxLength(30);
            entity.Property(e => e.CreditorType).HasMaxLength(20);
            entity.Property(e => e.CreditorTypeDesc2).HasMaxLength(40);
            entity.Property(e => e.CreditorTypeDescription).HasMaxLength(40);
            entity.Property(e => e.CreditorWebUrl)
                .HasMaxLength(80)
                .HasColumnName("CreditorWebURL");
            entity.Property(e => e.CurrencyCode).HasMaxLength(5);
            entity.Property(e => e.CurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.CurrencySymbol).HasMaxLength(6);
            entity.Property(e => e.CurrencyWord).HasMaxLength(40);
            entity.Property(e => e.CurrencyWord2).HasMaxLength(40);
            entity.Property(e => e.Description).HasMaxLength(80);
            entity.Property(e => e.DisplayTerm).HasMaxLength(30);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocDate2).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.DocStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DueDate).HasColumnType("datetime");
            entity.Property(e => e.EinvoiceStatus)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceStatus");
            entity.Property(e => e.EinvoiceUuid)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceUuid");
            entity.Property(e => e.EinvoiceValidatedDateTime)
                .HasColumnType("datetime")
                .HasColumnName("EInvoiceValidatedDateTime");
            entity.Property(e => e.EinvoiceValidationLink)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("EInvoiceValidationLink");
            entity.Property(e => e.ExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.FcgainAccount)
                .HasMaxLength(12)
                .HasColumnName("FCGainAccount");
            entity.Property(e => e.FclossAccount)
                .HasMaxLength(12)
                .HasColumnName("FCLossAccount");
            entity.Property(e => e.GainLossJournalType).HasMaxLength(10);
            entity.Property(e => e.InclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.LastModifiedUserName).HasMaxLength(40);
            entity.Property(e => e.LocalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalPaymentAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTotal2).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.NetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Outstanding).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.PaymentAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.RefNo2).HasMaxLength(30);
            entity.Property(e => e.SourceType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.SupplierInvoiceNo).HasMaxLength(30);
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxDate).HasColumnType("datetime");
            entity.Property(e => e.TaxDocNo).HasMaxLength(20);
            entity.Property(e => e.TaxRegisterNo).HasMaxLength(30);
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ToTaxCurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.Total).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Total2).HasColumnType("decimal(19, 2)");
        });

        modelBuilder.Entity<VApinvoiceDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vAPInvoiceDetail");

            entity.Property(e => e.AccNo).HasMaxLength(12);
            entity.Property(e => e.Amount).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.DocTaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.KnockOffAmount).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalNetAmount).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalSubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxAdjustment).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.NetAmount).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.SubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TariffCode).HasMaxLength(12);
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxAdjustment).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCode).HasMaxLength(14);
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxPermitNo).HasMaxLength(20);
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ToAccountRate).HasColumnType("decimal(19, 12)");
        });

        modelBuilder.Entity<VAppayment>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vAPPayment");

            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.CreatedUserName).HasMaxLength(40);
            entity.Property(e => e.CreditorAddress1).HasMaxLength(40);
            entity.Property(e => e.CreditorAddress2).HasMaxLength(40);
            entity.Property(e => e.CreditorAddress3).HasMaxLength(40);
            entity.Property(e => e.CreditorAddress4).HasMaxLength(40);
            entity.Property(e => e.CreditorAgingOn)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreditorAreaCode).HasMaxLength(12);
            entity.Property(e => e.CreditorAreaDesc2).HasMaxLength(40);
            entity.Property(e => e.CreditorAreaDescription).HasMaxLength(40);
            entity.Property(e => e.CreditorAttention).HasMaxLength(40);
            entity.Property(e => e.CreditorCode).HasMaxLength(12);
            entity.Property(e => e.CreditorCompanyName).HasMaxLength(100);
            entity.Property(e => e.CreditorCreatedTimestamp).HasColumnType("datetime");
            entity.Property(e => e.CreditorCreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreditorCreatedUserID");
            entity.Property(e => e.CreditorCreditLimit).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.CreditorCurrencyCode).HasMaxLength(5);
            entity.Property(e => e.CreditorDeliverAddress1).HasMaxLength(40);
            entity.Property(e => e.CreditorDeliverAddress2).HasMaxLength(40);
            entity.Property(e => e.CreditorDeliverAddress3).HasMaxLength(40);
            entity.Property(e => e.CreditorDeliverAddress4).HasMaxLength(40);
            entity.Property(e => e.CreditorDeliverPostCode).HasMaxLength(10);
            entity.Property(e => e.CreditorDesc2).HasMaxLength(100);
            entity.Property(e => e.CreditorDisplayTerm).HasMaxLength(30);
            entity.Property(e => e.CreditorEmailAddress).HasMaxLength(200);
            entity.Property(e => e.CreditorExemptExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.CreditorExemptNo).HasMaxLength(60);
            entity.Property(e => e.CreditorFax1).HasMaxLength(25);
            entity.Property(e => e.CreditorFax2).HasMaxLength(25);
            entity.Property(e => e.CreditorGstregisterNo)
                .HasMaxLength(20)
                .HasColumnName("CreditorGSTRegisterNo");
            entity.Property(e => e.CreditorGststatusVerifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("CreditorGSTStatusVerifiedDate");
            entity.Property(e => e.CreditorInclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreditorLastModified).HasColumnType("datetime");
            entity.Property(e => e.CreditorLastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreditorLastModifiedUserID");
            entity.Property(e => e.CreditorMobile).HasMaxLength(25);
            entity.Property(e => e.CreditorNatureOfBusiness).HasMaxLength(40);
            entity.Property(e => e.CreditorOverdueLimit).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.CreditorParentAccNo).HasMaxLength(12);
            entity.Property(e => e.CreditorPhone1).HasMaxLength(25);
            entity.Property(e => e.CreditorPhone2).HasMaxLength(25);
            entity.Property(e => e.CreditorPostCode).HasMaxLength(10);
            entity.Property(e => e.CreditorPriceCategory).HasMaxLength(12);
            entity.Property(e => e.CreditorPurchaseAgent).HasMaxLength(12);
            entity.Property(e => e.CreditorPurchaseAgentDesc2).HasMaxLength(40);
            entity.Property(e => e.CreditorPurchaseAgentDescription).HasMaxLength(40);
            entity.Property(e => e.CreditorRegisterNo).HasMaxLength(30);
            entity.Property(e => e.CreditorSelfBilledApprovalNo).HasMaxLength(30);
            entity.Property(e => e.CreditorSstregisterNo)
                .HasMaxLength(20)
                .HasColumnName("CreditorSSTRegisterNo");
            entity.Property(e => e.CreditorStatementType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreditorTaxCode).HasMaxLength(14);
            entity.Property(e => e.CreditorTaxRegisterNo).HasMaxLength(30);
            entity.Property(e => e.CreditorType).HasMaxLength(20);
            entity.Property(e => e.CreditorTypeDesc2).HasMaxLength(40);
            entity.Property(e => e.CreditorTypeDescription).HasMaxLength(40);
            entity.Property(e => e.CreditorWebUrl)
                .HasMaxLength(80)
                .HasColumnName("CreditorWebURL");
            entity.Property(e => e.CurrencyCode).HasMaxLength(5);
            entity.Property(e => e.CurrencySymbol).HasMaxLength(6);
            entity.Property(e => e.CurrencyWord).HasMaxLength(40);
            entity.Property(e => e.CurrencyWord2).HasMaxLength(40);
            entity.Property(e => e.DeptDesc2).HasMaxLength(40);
            entity.Property(e => e.DeptDescription).HasMaxLength(40);
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Description).HasMaxLength(80);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.DocNo2).HasMaxLength(25);
            entity.Property(e => e.DocStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FcgainAccount)
                .HasMaxLength(12)
                .HasColumnName("FCGainAccount");
            entity.Property(e => e.FclossAccount)
                .HasMaxLength(12)
                .HasColumnName("FCLossAccount");
            entity.Property(e => e.GainLossJournalType).HasMaxLength(10);
            entity.Property(e => e.KnockOffAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.LastModifiedUserName).HasMaxLength(40);
            entity.Property(e => e.LocalPaymentAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalUnappliedAmount).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.PaymentAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.ProjectDesc2).HasMaxLength(40);
            entity.Property(e => e.ProjectDescription).HasMaxLength(40);
            entity.Property(e => e.RefundAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SourceType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.ToCreditorRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.ToHomeRate).HasColumnType("decimal(19, 12)");
        });

        modelBuilder.Entity<VAppaymentDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vAPPaymentDetail");

            entity.Property(e => e.BankCharge).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.BankChargeDeptNo).HasMaxLength(10);
            entity.Property(e => e.BankChargeProjNo).HasMaxLength(10);
            entity.Property(e => e.BankChargeTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.BankChargeTaxCode).HasMaxLength(14);
            entity.Property(e => e.BankChargeTaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.BankChargeTaxRefNo).HasMaxLength(30);
            entity.Property(e => e.ChequeNo).HasMaxLength(30);
            entity.Property(e => e.CreditorPaymentAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.IsRchq)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IsRCHQ");
            entity.Property(e => e.LocalPaymentAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.PaymentAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.PaymentBy).HasMaxLength(20);
            entity.Property(e => e.PaymentMethod).HasMaxLength(20);
            entity.Property(e => e.Rchqdate)
                .HasColumnType("datetime")
                .HasColumnName("RCHQDate");
        });

        modelBuilder.Entity<VAprefund>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vAPRefund");

            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.CreatedUserName).HasMaxLength(40);
            entity.Property(e => e.CreditorAddress1).HasMaxLength(40);
            entity.Property(e => e.CreditorAddress2).HasMaxLength(40);
            entity.Property(e => e.CreditorAddress3).HasMaxLength(40);
            entity.Property(e => e.CreditorAddress4).HasMaxLength(40);
            entity.Property(e => e.CreditorAgingOn)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreditorAreaCode).HasMaxLength(12);
            entity.Property(e => e.CreditorAreaDesc2).HasMaxLength(40);
            entity.Property(e => e.CreditorAreaDescription).HasMaxLength(40);
            entity.Property(e => e.CreditorAttention).HasMaxLength(40);
            entity.Property(e => e.CreditorCode).HasMaxLength(12);
            entity.Property(e => e.CreditorCompanyName).HasMaxLength(100);
            entity.Property(e => e.CreditorCreatedTimestamp).HasColumnType("datetime");
            entity.Property(e => e.CreditorCreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreditorCreatedUserID");
            entity.Property(e => e.CreditorCreditLimit).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.CreditorCurrencyCode).HasMaxLength(5);
            entity.Property(e => e.CreditorDeliverAddress1).HasMaxLength(40);
            entity.Property(e => e.CreditorDeliverAddress2).HasMaxLength(40);
            entity.Property(e => e.CreditorDeliverAddress3).HasMaxLength(40);
            entity.Property(e => e.CreditorDeliverAddress4).HasMaxLength(40);
            entity.Property(e => e.CreditorDeliverPostCode).HasMaxLength(10);
            entity.Property(e => e.CreditorDesc2).HasMaxLength(100);
            entity.Property(e => e.CreditorDisplayTerm).HasMaxLength(30);
            entity.Property(e => e.CreditorEmailAddress).HasMaxLength(200);
            entity.Property(e => e.CreditorExemptExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.CreditorExemptNo).HasMaxLength(60);
            entity.Property(e => e.CreditorFax1).HasMaxLength(25);
            entity.Property(e => e.CreditorFax2).HasMaxLength(25);
            entity.Property(e => e.CreditorGstregisterNo)
                .HasMaxLength(20)
                .HasColumnName("CreditorGSTRegisterNo");
            entity.Property(e => e.CreditorGststatusVerifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("CreditorGSTStatusVerifiedDate");
            entity.Property(e => e.CreditorInclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreditorLastModified).HasColumnType("datetime");
            entity.Property(e => e.CreditorLastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreditorLastModifiedUserID");
            entity.Property(e => e.CreditorMobile).HasMaxLength(25);
            entity.Property(e => e.CreditorNatureOfBusiness).HasMaxLength(40);
            entity.Property(e => e.CreditorOverdueLimit).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.CreditorParentAccNo).HasMaxLength(12);
            entity.Property(e => e.CreditorPhone1).HasMaxLength(25);
            entity.Property(e => e.CreditorPhone2).HasMaxLength(25);
            entity.Property(e => e.CreditorPostCode).HasMaxLength(10);
            entity.Property(e => e.CreditorPriceCategory).HasMaxLength(12);
            entity.Property(e => e.CreditorPurchaseAgent).HasMaxLength(12);
            entity.Property(e => e.CreditorPurchaseAgentDesc2).HasMaxLength(40);
            entity.Property(e => e.CreditorPurchaseAgentDescription).HasMaxLength(40);
            entity.Property(e => e.CreditorRegisterNo).HasMaxLength(30);
            entity.Property(e => e.CreditorSelfBilledApprovalNo).HasMaxLength(30);
            entity.Property(e => e.CreditorSstregisterNo)
                .HasMaxLength(20)
                .HasColumnName("CreditorSSTRegisterNo");
            entity.Property(e => e.CreditorStatementType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreditorTaxCode).HasMaxLength(14);
            entity.Property(e => e.CreditorTaxRegisterNo).HasMaxLength(30);
            entity.Property(e => e.CreditorType).HasMaxLength(20);
            entity.Property(e => e.CreditorTypeDesc2).HasMaxLength(40);
            entity.Property(e => e.CreditorTypeDescription).HasMaxLength(40);
            entity.Property(e => e.CreditorWebUrl)
                .HasMaxLength(80)
                .HasColumnName("CreditorWebURL");
            entity.Property(e => e.CurrencyCode).HasMaxLength(5);
            entity.Property(e => e.CurrencySymbol).HasMaxLength(6);
            entity.Property(e => e.CurrencyWord).HasMaxLength(40);
            entity.Property(e => e.CurrencyWord2).HasMaxLength(40);
            entity.Property(e => e.DeptDesc2).HasMaxLength(40);
            entity.Property(e => e.DeptDescription).HasMaxLength(40);
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Description).HasMaxLength(80);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.DocNo2).HasMaxLength(25);
            entity.Property(e => e.DocStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FcgainAccount)
                .HasMaxLength(12)
                .HasColumnName("FCGainAccount");
            entity.Property(e => e.FclossAccount)
                .HasMaxLength(12)
                .HasColumnName("FCLossAccount");
            entity.Property(e => e.GainLossJournalType).HasMaxLength(10);
            entity.Property(e => e.KnockOffAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.LastModifiedUserName).HasMaxLength(40);
            entity.Property(e => e.LocalPaymentAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.PaymentAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.ProjectDesc2).HasMaxLength(40);
            entity.Property(e => e.ProjectDescription).HasMaxLength(40);
            entity.Property(e => e.SourceType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.ToCreditorRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.ToHomeRate).HasColumnType("decimal(19, 12)");
        });

        modelBuilder.Entity<VAprefundDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vAPRefundDetail");

            entity.Property(e => e.BankCharge).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.BankChargeDeptNo).HasMaxLength(10);
            entity.Property(e => e.BankChargeProjNo).HasMaxLength(10);
            entity.Property(e => e.BankChargeTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.BankChargeTaxCode).HasMaxLength(14);
            entity.Property(e => e.BankChargeTaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.BankChargeTaxRefNo).HasMaxLength(30);
            entity.Property(e => e.ChequeNo).HasMaxLength(30);
            entity.Property(e => e.CreditorPaymentAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.IsRchq)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IsRCHQ");
            entity.Property(e => e.LocalPaymentAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.PaymentAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.PaymentBy).HasMaxLength(20);
            entity.Property(e => e.PaymentMethod).HasMaxLength(20);
            entity.Property(e => e.Rchqdate)
                .HasColumnType("datetime")
                .HasColumnName("RCHQDate");
        });

        modelBuilder.Entity<VArapcontra>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vARAPContra");

            entity.Property(e => e.ApknockOffAmt)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("APKnockOffAmt");
            entity.Property(e => e.AplocalNetTotal)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("APLocalNetTotal");
            entity.Property(e => e.ArknockOffAmt)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("ARKnockOffAmt");
            entity.Property(e => e.ArlocalNetTotal)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("ARLocalNetTotal");
            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.CreatedUserName).HasMaxLength(40);
            entity.Property(e => e.CreditorAddress1).HasMaxLength(40);
            entity.Property(e => e.CreditorAddress2).HasMaxLength(40);
            entity.Property(e => e.CreditorAddress3).HasMaxLength(40);
            entity.Property(e => e.CreditorAddress4).HasMaxLength(40);
            entity.Property(e => e.CreditorAgingOn)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreditorAreaCode).HasMaxLength(12);
            entity.Property(e => e.CreditorAreaDesc2).HasMaxLength(40);
            entity.Property(e => e.CreditorAreaDescription).HasMaxLength(40);
            entity.Property(e => e.CreditorAttention).HasMaxLength(40);
            entity.Property(e => e.CreditorCode).HasMaxLength(12);
            entity.Property(e => e.CreditorCompanyName).HasMaxLength(100);
            entity.Property(e => e.CreditorCreatedTimestamp).HasColumnType("datetime");
            entity.Property(e => e.CreditorCreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreditorCreatedUserID");
            entity.Property(e => e.CreditorCreditLimit).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.CreditorCurrencyCode).HasMaxLength(5);
            entity.Property(e => e.CreditorDeliverAddress1).HasMaxLength(40);
            entity.Property(e => e.CreditorDeliverAddress2).HasMaxLength(40);
            entity.Property(e => e.CreditorDeliverAddress3).HasMaxLength(40);
            entity.Property(e => e.CreditorDeliverAddress4).HasMaxLength(40);
            entity.Property(e => e.CreditorDeliverPostCode).HasMaxLength(10);
            entity.Property(e => e.CreditorDesc2).HasMaxLength(100);
            entity.Property(e => e.CreditorDisplayTerm).HasMaxLength(30);
            entity.Property(e => e.CreditorEmailAddress).HasMaxLength(200);
            entity.Property(e => e.CreditorExemptExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.CreditorExemptNo).HasMaxLength(60);
            entity.Property(e => e.CreditorFax1).HasMaxLength(25);
            entity.Property(e => e.CreditorFax2).HasMaxLength(25);
            entity.Property(e => e.CreditorGstregisterNo)
                .HasMaxLength(20)
                .HasColumnName("CreditorGSTRegisterNo");
            entity.Property(e => e.CreditorGststatusVerifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("CreditorGSTStatusVerifiedDate");
            entity.Property(e => e.CreditorInclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreditorLastModified).HasColumnType("datetime");
            entity.Property(e => e.CreditorLastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreditorLastModifiedUserID");
            entity.Property(e => e.CreditorMobile).HasMaxLength(25);
            entity.Property(e => e.CreditorNatureOfBusiness).HasMaxLength(40);
            entity.Property(e => e.CreditorOverdueLimit).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.CreditorParentAccNo).HasMaxLength(12);
            entity.Property(e => e.CreditorPhone1).HasMaxLength(25);
            entity.Property(e => e.CreditorPhone2).HasMaxLength(25);
            entity.Property(e => e.CreditorPostCode).HasMaxLength(10);
            entity.Property(e => e.CreditorPriceCategory).HasMaxLength(12);
            entity.Property(e => e.CreditorPurchaseAgent).HasMaxLength(12);
            entity.Property(e => e.CreditorPurchaseAgentDesc2).HasMaxLength(40);
            entity.Property(e => e.CreditorPurchaseAgentDescription).HasMaxLength(40);
            entity.Property(e => e.CreditorRegisterNo).HasMaxLength(30);
            entity.Property(e => e.CreditorSelfBilledApprovalNo).HasMaxLength(30);
            entity.Property(e => e.CreditorSstregisterNo)
                .HasMaxLength(20)
                .HasColumnName("CreditorSSTRegisterNo");
            entity.Property(e => e.CreditorStatementType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreditorTaxCode).HasMaxLength(14);
            entity.Property(e => e.CreditorTaxRegisterNo).HasMaxLength(30);
            entity.Property(e => e.CreditorType).HasMaxLength(20);
            entity.Property(e => e.CreditorTypeDesc2).HasMaxLength(40);
            entity.Property(e => e.CreditorTypeDescription).HasMaxLength(40);
            entity.Property(e => e.CreditorWebUrl)
                .HasMaxLength(80)
                .HasColumnName("CreditorWebURL");
            entity.Property(e => e.CurrencyCode).HasMaxLength(5);
            entity.Property(e => e.CurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.CurrencySymbol).HasMaxLength(6);
            entity.Property(e => e.CurrencyWord).HasMaxLength(40);
            entity.Property(e => e.CurrencyWord2).HasMaxLength(40);
            entity.Property(e => e.DebtorAddress1).HasMaxLength(40);
            entity.Property(e => e.DebtorAddress2).HasMaxLength(40);
            entity.Property(e => e.DebtorAddress3).HasMaxLength(40);
            entity.Property(e => e.DebtorAddress4).HasMaxLength(40);
            entity.Property(e => e.DebtorAgingOn)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DebtorAreaCode).HasMaxLength(12);
            entity.Property(e => e.DebtorAreaDesc2).HasMaxLength(40);
            entity.Property(e => e.DebtorAreaDescription).HasMaxLength(40);
            entity.Property(e => e.DebtorAttention).HasMaxLength(40);
            entity.Property(e => e.DebtorCode).HasMaxLength(12);
            entity.Property(e => e.DebtorCompanyName).HasMaxLength(100);
            entity.Property(e => e.DebtorCreatedTimestamp).HasColumnType("datetime");
            entity.Property(e => e.DebtorCreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("DebtorCreatedUserID");
            entity.Property(e => e.DebtorCreditLimit).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DebtorCurrencyCode).HasMaxLength(5);
            entity.Property(e => e.DebtorDeliverAddress1).HasMaxLength(40);
            entity.Property(e => e.DebtorDeliverAddress2).HasMaxLength(40);
            entity.Property(e => e.DebtorDeliverAddress3).HasMaxLength(40);
            entity.Property(e => e.DebtorDeliverAddress4).HasMaxLength(40);
            entity.Property(e => e.DebtorDeliverPostCode).HasMaxLength(10);
            entity.Property(e => e.DebtorDesc2).HasMaxLength(100);
            entity.Property(e => e.DebtorDisplayTerm).HasMaxLength(30);
            entity.Property(e => e.DebtorEmailAddress).HasMaxLength(200);
            entity.Property(e => e.DebtorExemptExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.DebtorExemptNo).HasMaxLength(60);
            entity.Property(e => e.DebtorFax1).HasMaxLength(25);
            entity.Property(e => e.DebtorFax2).HasMaxLength(25);
            entity.Property(e => e.DebtorGstregisterNo)
                .HasMaxLength(20)
                .HasColumnName("DebtorGSTRegisterNo");
            entity.Property(e => e.DebtorGststatusVerifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("DebtorGSTStatusVerifiedDate");
            entity.Property(e => e.DebtorInclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DebtorLastModified).HasColumnType("datetime");
            entity.Property(e => e.DebtorLastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("DebtorLastModifiedUserID");
            entity.Property(e => e.DebtorMobile).HasMaxLength(25);
            entity.Property(e => e.DebtorNatureOfBusiness).HasMaxLength(40);
            entity.Property(e => e.DebtorOverdueLimit).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DebtorParentAccNo).HasMaxLength(12);
            entity.Property(e => e.DebtorPhone1).HasMaxLength(25);
            entity.Property(e => e.DebtorPhone2).HasMaxLength(25);
            entity.Property(e => e.DebtorPostCode).HasMaxLength(10);
            entity.Property(e => e.DebtorPriceCategory).HasMaxLength(12);
            entity.Property(e => e.DebtorRegisterNo).HasMaxLength(30);
            entity.Property(e => e.DebtorSalesAgent).HasMaxLength(12);
            entity.Property(e => e.DebtorSalesAgentDesc2).HasMaxLength(40);
            entity.Property(e => e.DebtorSalesAgentDescription).HasMaxLength(40);
            entity.Property(e => e.DebtorSelfBilledApprovalNo).HasMaxLength(30);
            entity.Property(e => e.DebtorSstregisterNo)
                .HasMaxLength(20)
                .HasColumnName("DebtorSSTRegisterNo");
            entity.Property(e => e.DebtorStatementType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DebtorTaxCode).HasMaxLength(14);
            entity.Property(e => e.DebtorTaxRegisterNo).HasMaxLength(30);
            entity.Property(e => e.DebtorType).HasMaxLength(20);
            entity.Property(e => e.DebtorTypeDesc2).HasMaxLength(40);
            entity.Property(e => e.DebtorTypeDescription).HasMaxLength(40);
            entity.Property(e => e.DebtorUdfBangsa1)
                .HasMaxLength(50)
                .HasColumnName("DebtorUDF_Bangsa1");
            entity.Property(e => e.DebtorUdfBangsa2)
                .HasMaxLength(50)
                .HasColumnName("DebtorUDF_Bangsa2");
            entity.Property(e => e.DebtorUdfJantina)
                .HasMaxLength(20)
                .HasColumnName("DebtorUDF_Jantina");
            entity.Property(e => e.DebtorUdfKerakyatan)
                .HasMaxLength(50)
                .HasColumnName("DebtorUDF_Kerakyatan");
            entity.Property(e => e.DebtorUdfTarikhLahir)
                .HasColumnType("datetime")
                .HasColumnName("DebtorUDF_TarikhLahir");
            entity.Property(e => e.DebtorWebUrl)
                .HasMaxLength(80)
                .HasColumnName("DebtorWebURL");
            entity.Property(e => e.DeptDesc2).HasMaxLength(40);
            entity.Property(e => e.DeptDescription).HasMaxLength(40);
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Description).HasMaxLength(80);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.DocStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FcgainAccount)
                .HasMaxLength(12)
                .HasColumnName("FCGainAccount");
            entity.Property(e => e.FclossAccount)
                .HasMaxLength(12)
                .HasColumnName("FCLossAccount");
            entity.Property(e => e.GainLossJournalType).HasMaxLength(10);
            entity.Property(e => e.IsDebtorTaxRegistered)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Jekey).HasColumnName("JEKey");
            entity.Property(e => e.JournalType).HasMaxLength(10);
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.LastModifiedUserName).HasMaxLength(40);
            entity.Property(e => e.NetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.ProjectDesc2).HasMaxLength(40);
            entity.Property(e => e.ProjectDescription).HasMaxLength(40);
            entity.Property(e => e.Ref).HasMaxLength(40);
            entity.Property(e => e.SourceType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.TempAccNo).HasMaxLength(12);
        });

        modelBuilder.Entity<VArcreditNote>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vARCreditNote");

            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Cntype)
                .HasMaxLength(12)
                .HasColumnName("CNType");
            entity.Property(e => e.CntypeDescription)
                .HasMaxLength(40)
                .HasColumnName("CNTypeDescription");
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.CreatedUserName).HasMaxLength(40);
            entity.Property(e => e.CurrencyCode).HasMaxLength(5);
            entity.Property(e => e.CurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.CurrencySymbol).HasMaxLength(6);
            entity.Property(e => e.CurrencyWord).HasMaxLength(40);
            entity.Property(e => e.CurrencyWord2).HasMaxLength(40);
            entity.Property(e => e.DebtorAddress1).HasMaxLength(40);
            entity.Property(e => e.DebtorAddress2).HasMaxLength(40);
            entity.Property(e => e.DebtorAddress3).HasMaxLength(40);
            entity.Property(e => e.DebtorAddress4).HasMaxLength(40);
            entity.Property(e => e.DebtorAgingOn)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DebtorAreaCode).HasMaxLength(12);
            entity.Property(e => e.DebtorAreaDesc2).HasMaxLength(40);
            entity.Property(e => e.DebtorAreaDescription).HasMaxLength(40);
            entity.Property(e => e.DebtorAttention).HasMaxLength(40);
            entity.Property(e => e.DebtorCode).HasMaxLength(12);
            entity.Property(e => e.DebtorCompanyName).HasMaxLength(100);
            entity.Property(e => e.DebtorCreatedTimestamp).HasColumnType("datetime");
            entity.Property(e => e.DebtorCreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("DebtorCreatedUserID");
            entity.Property(e => e.DebtorCreditLimit).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DebtorCurrencyCode).HasMaxLength(5);
            entity.Property(e => e.DebtorDeliverAddress1).HasMaxLength(40);
            entity.Property(e => e.DebtorDeliverAddress2).HasMaxLength(40);
            entity.Property(e => e.DebtorDeliverAddress3).HasMaxLength(40);
            entity.Property(e => e.DebtorDeliverAddress4).HasMaxLength(40);
            entity.Property(e => e.DebtorDeliverPostCode).HasMaxLength(10);
            entity.Property(e => e.DebtorDesc2).HasMaxLength(100);
            entity.Property(e => e.DebtorDisplayTerm).HasMaxLength(30);
            entity.Property(e => e.DebtorEmailAddress).HasMaxLength(200);
            entity.Property(e => e.DebtorExemptExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.DebtorExemptNo).HasMaxLength(60);
            entity.Property(e => e.DebtorFax1).HasMaxLength(25);
            entity.Property(e => e.DebtorFax2).HasMaxLength(25);
            entity.Property(e => e.DebtorGstregisterNo)
                .HasMaxLength(20)
                .HasColumnName("DebtorGSTRegisterNo");
            entity.Property(e => e.DebtorGststatusVerifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("DebtorGSTStatusVerifiedDate");
            entity.Property(e => e.DebtorInclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DebtorLastModified).HasColumnType("datetime");
            entity.Property(e => e.DebtorLastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("DebtorLastModifiedUserID");
            entity.Property(e => e.DebtorMobile).HasMaxLength(25);
            entity.Property(e => e.DebtorNatureOfBusiness).HasMaxLength(40);
            entity.Property(e => e.DebtorOverdueLimit).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DebtorParentAccNo).HasMaxLength(12);
            entity.Property(e => e.DebtorPhone1).HasMaxLength(25);
            entity.Property(e => e.DebtorPhone2).HasMaxLength(25);
            entity.Property(e => e.DebtorPostCode).HasMaxLength(10);
            entity.Property(e => e.DebtorPriceCategory).HasMaxLength(12);
            entity.Property(e => e.DebtorRegisterNo).HasMaxLength(30);
            entity.Property(e => e.DebtorSalesAgent).HasMaxLength(12);
            entity.Property(e => e.DebtorSalesAgentDesc2).HasMaxLength(40);
            entity.Property(e => e.DebtorSalesAgentDescription).HasMaxLength(40);
            entity.Property(e => e.DebtorSelfBilledApprovalNo).HasMaxLength(30);
            entity.Property(e => e.DebtorSstregisterNo)
                .HasMaxLength(20)
                .HasColumnName("DebtorSSTRegisterNo");
            entity.Property(e => e.DebtorStatementType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DebtorTaxCode).HasMaxLength(14);
            entity.Property(e => e.DebtorTaxRegisterNo).HasMaxLength(30);
            entity.Property(e => e.DebtorType).HasMaxLength(20);
            entity.Property(e => e.DebtorTypeDesc2).HasMaxLength(40);
            entity.Property(e => e.DebtorTypeDescription).HasMaxLength(40);
            entity.Property(e => e.DebtorUdfBangsa1)
                .HasMaxLength(50)
                .HasColumnName("DebtorUDF_Bangsa1");
            entity.Property(e => e.DebtorUdfBangsa2)
                .HasMaxLength(50)
                .HasColumnName("DebtorUDF_Bangsa2");
            entity.Property(e => e.DebtorUdfJantina)
                .HasMaxLength(20)
                .HasColumnName("DebtorUDF_Jantina");
            entity.Property(e => e.DebtorUdfKerakyatan)
                .HasMaxLength(50)
                .HasColumnName("DebtorUDF_Kerakyatan");
            entity.Property(e => e.DebtorUdfTarikhLahir)
                .HasColumnType("datetime")
                .HasColumnName("DebtorUDF_TarikhLahir");
            entity.Property(e => e.DebtorWebUrl)
                .HasMaxLength(80)
                .HasColumnName("DebtorWebURL");
            entity.Property(e => e.Description).HasMaxLength(80);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.DocStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EinvoiceAipsubmissionDateTime)
                .HasColumnType("datetime")
                .HasColumnName("EInvoiceAIPSubmissionDateTime");
            entity.Property(e => e.EinvoiceCancelDateTime)
                .HasColumnType("datetime")
                .HasColumnName("EInvoiceCancelDateTime");
            entity.Property(e => e.EinvoiceCancelReason)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceCancelReason");
            entity.Property(e => e.EinvoiceError)
                .IsUnicode(false)
                .HasColumnName("EInvoiceError");
            entity.Property(e => e.EinvoiceIssueDateTime)
                .HasColumnType("datetime")
                .HasColumnName("EInvoiceIssueDateTime");
            entity.Property(e => e.EinvoiceStatus)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceStatus");
            entity.Property(e => e.EinvoiceSubmissionDateTime)
                .HasColumnType("datetime")
                .HasColumnName("EInvoiceSubmissionDateTime");
            entity.Property(e => e.EinvoiceSubmissionUuid)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceSubmissionUuid");
            entity.Property(e => e.EinvoiceTraceId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceTraceId");
            entity.Property(e => e.EinvoiceUuid)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceUuid");
            entity.Property(e => e.EinvoiceValidatedDateTime)
                .HasColumnType("datetime")
                .HasColumnName("EInvoiceValidatedDateTime");
            entity.Property(e => e.EinvoiceValidationLink)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("EInvoiceValidationLink");
            entity.Property(e => e.ExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.FcgainAccount)
                .HasMaxLength(12)
                .HasColumnName("FCGainAccount");
            entity.Property(e => e.FclossAccount)
                .HasMaxLength(12)
                .HasColumnName("FCLossAccount");
            entity.Property(e => e.GainLossJournalType).HasMaxLength(10);
            entity.Property(e => e.InclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.IsDebtorTaxRegistered)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.KnockOffAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.LastModifiedUserName).HasMaxLength(40);
            entity.Property(e => e.LocalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTotal2).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.NetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.OurInvoiceNo).HasMaxLength(100);
            entity.Property(e => e.Reason).HasMaxLength(80);
            entity.Property(e => e.Ref).HasMaxLength(40);
            entity.Property(e => e.RefNo2).HasMaxLength(30);
            entity.Property(e => e.RefundAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SourceType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.SubmitEinvoice)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SubmitEInvoice");
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxDate).HasColumnType("datetime");
            entity.Property(e => e.TaxDocNo).HasMaxLength(20);
            entity.Property(e => e.TaxRegisterNo).HasMaxLength(30);
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ToTaxCurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.Total).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Total2).HasColumnType("decimal(19, 2)");
        });

        modelBuilder.Entity<VArcreditNoteDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vARCreditNoteDetail");

            entity.Property(e => e.AccNo).HasMaxLength(12);
            entity.Property(e => e.Amount).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Classification)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.DocTaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.KnockOffAmount).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalNetAmount).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalSubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxAdjustment).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalUnappliedAmount).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.NetAmount).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.SalesExemptionNo).HasMaxLength(60);
            entity.Property(e => e.SubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SupplyPurchase)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TariffCode).HasMaxLength(12);
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxAdjustment).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCode).HasMaxLength(14);
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxPermitNo).HasMaxLength(20);
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ToAccountRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.UnappliedAmount).HasColumnType("decimal(19, 2)");
        });

        modelBuilder.Entity<VArdebitNote>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vARDebitNote");

            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.CreatedUserName).HasMaxLength(40);
            entity.Property(e => e.CurrencyCode).HasMaxLength(5);
            entity.Property(e => e.CurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.CurrencySymbol).HasMaxLength(6);
            entity.Property(e => e.CurrencyWord).HasMaxLength(40);
            entity.Property(e => e.CurrencyWord2).HasMaxLength(40);
            entity.Property(e => e.DebtorAddress1).HasMaxLength(40);
            entity.Property(e => e.DebtorAddress2).HasMaxLength(40);
            entity.Property(e => e.DebtorAddress3).HasMaxLength(40);
            entity.Property(e => e.DebtorAddress4).HasMaxLength(40);
            entity.Property(e => e.DebtorAgingOn)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DebtorAreaCode).HasMaxLength(12);
            entity.Property(e => e.DebtorAreaDesc2).HasMaxLength(40);
            entity.Property(e => e.DebtorAreaDescription).HasMaxLength(40);
            entity.Property(e => e.DebtorAttention).HasMaxLength(40);
            entity.Property(e => e.DebtorCode).HasMaxLength(12);
            entity.Property(e => e.DebtorCompanyName).HasMaxLength(100);
            entity.Property(e => e.DebtorCreatedTimestamp).HasColumnType("datetime");
            entity.Property(e => e.DebtorCreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("DebtorCreatedUserID");
            entity.Property(e => e.DebtorCreditLimit).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DebtorCurrencyCode).HasMaxLength(5);
            entity.Property(e => e.DebtorDeliverAddress1).HasMaxLength(40);
            entity.Property(e => e.DebtorDeliverAddress2).HasMaxLength(40);
            entity.Property(e => e.DebtorDeliverAddress3).HasMaxLength(40);
            entity.Property(e => e.DebtorDeliverAddress4).HasMaxLength(40);
            entity.Property(e => e.DebtorDeliverPostCode).HasMaxLength(10);
            entity.Property(e => e.DebtorDesc2).HasMaxLength(100);
            entity.Property(e => e.DebtorDisplayTerm).HasMaxLength(30);
            entity.Property(e => e.DebtorEmailAddress).HasMaxLength(200);
            entity.Property(e => e.DebtorExemptExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.DebtorExemptNo).HasMaxLength(60);
            entity.Property(e => e.DebtorFax1).HasMaxLength(25);
            entity.Property(e => e.DebtorFax2).HasMaxLength(25);
            entity.Property(e => e.DebtorGstregisterNo)
                .HasMaxLength(20)
                .HasColumnName("DebtorGSTRegisterNo");
            entity.Property(e => e.DebtorGststatusVerifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("DebtorGSTStatusVerifiedDate");
            entity.Property(e => e.DebtorInclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DebtorLastModified).HasColumnType("datetime");
            entity.Property(e => e.DebtorLastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("DebtorLastModifiedUserID");
            entity.Property(e => e.DebtorMobile).HasMaxLength(25);
            entity.Property(e => e.DebtorNatureOfBusiness).HasMaxLength(40);
            entity.Property(e => e.DebtorOverdueLimit).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DebtorParentAccNo).HasMaxLength(12);
            entity.Property(e => e.DebtorPhone1).HasMaxLength(25);
            entity.Property(e => e.DebtorPhone2).HasMaxLength(25);
            entity.Property(e => e.DebtorPostCode).HasMaxLength(10);
            entity.Property(e => e.DebtorPriceCategory).HasMaxLength(12);
            entity.Property(e => e.DebtorRegisterNo).HasMaxLength(30);
            entity.Property(e => e.DebtorSalesAgent).HasMaxLength(12);
            entity.Property(e => e.DebtorSalesAgentDesc2).HasMaxLength(40);
            entity.Property(e => e.DebtorSalesAgentDescription).HasMaxLength(40);
            entity.Property(e => e.DebtorSelfBilledApprovalNo).HasMaxLength(30);
            entity.Property(e => e.DebtorSstregisterNo)
                .HasMaxLength(20)
                .HasColumnName("DebtorSSTRegisterNo");
            entity.Property(e => e.DebtorStatementType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DebtorTaxCode).HasMaxLength(14);
            entity.Property(e => e.DebtorTaxRegisterNo).HasMaxLength(30);
            entity.Property(e => e.DebtorType).HasMaxLength(20);
            entity.Property(e => e.DebtorTypeDesc2).HasMaxLength(40);
            entity.Property(e => e.DebtorTypeDescription).HasMaxLength(40);
            entity.Property(e => e.DebtorUdfBangsa1)
                .HasMaxLength(50)
                .HasColumnName("DebtorUDF_Bangsa1");
            entity.Property(e => e.DebtorUdfBangsa2)
                .HasMaxLength(50)
                .HasColumnName("DebtorUDF_Bangsa2");
            entity.Property(e => e.DebtorUdfJantina)
                .HasMaxLength(20)
                .HasColumnName("DebtorUDF_Jantina");
            entity.Property(e => e.DebtorUdfKerakyatan)
                .HasMaxLength(50)
                .HasColumnName("DebtorUDF_Kerakyatan");
            entity.Property(e => e.DebtorUdfTarikhLahir)
                .HasColumnType("datetime")
                .HasColumnName("DebtorUDF_TarikhLahir");
            entity.Property(e => e.DebtorWebUrl)
                .HasMaxLength(80)
                .HasColumnName("DebtorWebURL");
            entity.Property(e => e.Description).HasMaxLength(80);
            entity.Property(e => e.DisplayTerm).HasMaxLength(30);
            entity.Property(e => e.Dntype)
                .HasMaxLength(12)
                .HasColumnName("DNType");
            entity.Property(e => e.DntypeDescription)
                .HasMaxLength(40)
                .HasColumnName("DNTypeDescription");
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.DocStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DueDate).HasColumnType("datetime");
            entity.Property(e => e.ExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.FcgainAccount)
                .HasMaxLength(12)
                .HasColumnName("FCGainAccount");
            entity.Property(e => e.FclossAccount)
                .HasMaxLength(12)
                .HasColumnName("FCLossAccount");
            entity.Property(e => e.GainLossJournalType).HasMaxLength(10);
            entity.Property(e => e.InclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.IsDebtorTaxRegistered)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.LastModifiedUserName).HasMaxLength(40);
            entity.Property(e => e.LocalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalPaymentAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTotal2).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.NetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.OurInvoiceNo).HasMaxLength(100);
            entity.Property(e => e.Outstanding).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.PaymentAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Reason).HasMaxLength(80);
            entity.Property(e => e.Ref).HasMaxLength(40);
            entity.Property(e => e.RefNo2).HasMaxLength(30);
            entity.Property(e => e.SourceType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxDate).HasColumnType("datetime");
            entity.Property(e => e.TaxDocNo).HasMaxLength(20);
            entity.Property(e => e.TaxRegisterNo).HasMaxLength(30);
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ToTaxCurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.Total).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Total2).HasColumnType("decimal(19, 2)");
        });

        modelBuilder.Entity<VArdebitNoteDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vARDebitNoteDetail");

            entity.Property(e => e.AccNo).HasMaxLength(12);
            entity.Property(e => e.Amount).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.DocTaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.KnockOffAmount).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalNetAmount).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalSubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxAdjustment).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.NetAmount).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.SubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SupplyPurchase)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TariffCode).HasMaxLength(12);
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxAdjustment).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCode).HasMaxLength(14);
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxPermitNo).HasMaxLength(20);
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ToAccountRate).HasColumnType("decimal(19, 12)");
        });

        modelBuilder.Entity<VArdeposit>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vARDeposit");

            entity.Property(e => e.Attention).HasMaxLength(40);
            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.CreatedUserName).HasMaxLength(40);
            entity.Property(e => e.CurrencyCode).HasMaxLength(5);
            entity.Property(e => e.CurrencySymbol).HasMaxLength(6);
            entity.Property(e => e.CurrencyWord).HasMaxLength(40);
            entity.Property(e => e.CurrencyWord2).HasMaxLength(40);
            entity.Property(e => e.DebtorAddress1).HasMaxLength(40);
            entity.Property(e => e.DebtorAddress2).HasMaxLength(40);
            entity.Property(e => e.DebtorAddress3).HasMaxLength(40);
            entity.Property(e => e.DebtorAddress4).HasMaxLength(40);
            entity.Property(e => e.DebtorAgingOn)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DebtorAreaCode).HasMaxLength(12);
            entity.Property(e => e.DebtorAreaDesc2).HasMaxLength(40);
            entity.Property(e => e.DebtorAreaDescription).HasMaxLength(40);
            entity.Property(e => e.DebtorAttention).HasMaxLength(40);
            entity.Property(e => e.DebtorCode).HasMaxLength(12);
            entity.Property(e => e.DebtorCompanyName).HasMaxLength(100);
            entity.Property(e => e.DebtorCreatedTimestamp).HasColumnType("datetime");
            entity.Property(e => e.DebtorCreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("DebtorCreatedUserID");
            entity.Property(e => e.DebtorCreditLimit).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DebtorCurrencyCode).HasMaxLength(5);
            entity.Property(e => e.DebtorDeliverAddress1).HasMaxLength(40);
            entity.Property(e => e.DebtorDeliverAddress2).HasMaxLength(40);
            entity.Property(e => e.DebtorDeliverAddress3).HasMaxLength(40);
            entity.Property(e => e.DebtorDeliverAddress4).HasMaxLength(40);
            entity.Property(e => e.DebtorDeliverPostCode).HasMaxLength(10);
            entity.Property(e => e.DebtorDesc2).HasMaxLength(100);
            entity.Property(e => e.DebtorDisplayTerm).HasMaxLength(30);
            entity.Property(e => e.DebtorEmailAddress).HasMaxLength(200);
            entity.Property(e => e.DebtorExemptExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.DebtorExemptNo).HasMaxLength(60);
            entity.Property(e => e.DebtorFax1).HasMaxLength(25);
            entity.Property(e => e.DebtorFax2).HasMaxLength(25);
            entity.Property(e => e.DebtorGstregisterNo)
                .HasMaxLength(20)
                .HasColumnName("DebtorGSTRegisterNo");
            entity.Property(e => e.DebtorGststatusVerifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("DebtorGSTStatusVerifiedDate");
            entity.Property(e => e.DebtorInclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DebtorLastModified).HasColumnType("datetime");
            entity.Property(e => e.DebtorLastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("DebtorLastModifiedUserID");
            entity.Property(e => e.DebtorMobile).HasMaxLength(25);
            entity.Property(e => e.DebtorName).HasMaxLength(100);
            entity.Property(e => e.DebtorNatureOfBusiness).HasMaxLength(40);
            entity.Property(e => e.DebtorOverdueLimit).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DebtorParentAccNo).HasMaxLength(12);
            entity.Property(e => e.DebtorPhone1).HasMaxLength(25);
            entity.Property(e => e.DebtorPhone2).HasMaxLength(25);
            entity.Property(e => e.DebtorPostCode).HasMaxLength(10);
            entity.Property(e => e.DebtorPriceCategory).HasMaxLength(12);
            entity.Property(e => e.DebtorRegisterNo).HasMaxLength(30);
            entity.Property(e => e.DebtorSalesAgent).HasMaxLength(12);
            entity.Property(e => e.DebtorSalesAgentDesc2).HasMaxLength(40);
            entity.Property(e => e.DebtorSalesAgentDescription).HasMaxLength(40);
            entity.Property(e => e.DebtorSelfBilledApprovalNo).HasMaxLength(30);
            entity.Property(e => e.DebtorSstregisterNo)
                .HasMaxLength(20)
                .HasColumnName("DebtorSSTRegisterNo");
            entity.Property(e => e.DebtorStatementType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DebtorTaxCode).HasMaxLength(14);
            entity.Property(e => e.DebtorTaxRegisterNo).HasMaxLength(30);
            entity.Property(e => e.DebtorType).HasMaxLength(20);
            entity.Property(e => e.DebtorTypeDesc2).HasMaxLength(40);
            entity.Property(e => e.DebtorTypeDescription).HasMaxLength(40);
            entity.Property(e => e.DebtorUdfBangsa1)
                .HasMaxLength(50)
                .HasColumnName("DebtorUDF_Bangsa1");
            entity.Property(e => e.DebtorUdfBangsa2)
                .HasMaxLength(50)
                .HasColumnName("DebtorUDF_Bangsa2");
            entity.Property(e => e.DebtorUdfJantina)
                .HasMaxLength(20)
                .HasColumnName("DebtorUDF_Jantina");
            entity.Property(e => e.DebtorUdfKerakyatan)
                .HasMaxLength(50)
                .HasColumnName("DebtorUDF_Kerakyatan");
            entity.Property(e => e.DebtorUdfTarikhLahir)
                .HasColumnType("datetime")
                .HasColumnName("DebtorUDF_TarikhLahir");
            entity.Property(e => e.DebtorWebUrl)
                .HasMaxLength(80)
                .HasColumnName("DebtorWebURL");
            entity.Property(e => e.DepositPaymentMethod).HasMaxLength(20);
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Description).HasMaxLength(80);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.Fax1).HasMaxLength(25);
            entity.Property(e => e.FcgainAccount)
                .HasMaxLength(12)
                .HasColumnName("FCGainAccount");
            entity.Property(e => e.FclossAccount)
                .HasMaxLength(12)
                .HasColumnName("FCLossAccount");
            entity.Property(e => e.GainLossJournalType).HasMaxLength(10);
            entity.Property(e => e.InvAddr1).HasMaxLength(40);
            entity.Property(e => e.InvAddr2).HasMaxLength(40);
            entity.Property(e => e.InvAddr3).HasMaxLength(40);
            entity.Property(e => e.InvAddr4).HasMaxLength(40);
            entity.Property(e => e.IsDebtorTaxRegistered)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.LastModifiedUserName).HasMaxLength(40);
            entity.Property(e => e.LocalPaymentAmt).HasColumnType("decimal(38, 13)");
            entity.Property(e => e.Outstanding).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.PaymentAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Phone1).HasMaxLength(25);
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.ToDepositRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.ToHomeRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.TransferedAmt).HasColumnType("decimal(19, 2)");
        });

        modelBuilder.Entity<VArdepositDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vARDepositDetail");

            entity.Property(e => e.BankCharge).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.BankChargeDeptNo).HasMaxLength(10);
            entity.Property(e => e.BankChargeProjNo).HasMaxLength(10);
            entity.Property(e => e.BankChargeTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.BankChargeTaxCode).HasMaxLength(14);
            entity.Property(e => e.BankChargeTaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.BankChargeTaxRefNo).HasMaxLength(30);
            entity.Property(e => e.ChequeNo).HasMaxLength(30);
            entity.Property(e => e.IsRchq)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IsRCHQ");
            entity.Property(e => e.PaymentAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.PaymentBy).HasMaxLength(20);
            entity.Property(e => e.PaymentMethod).HasMaxLength(20);
            entity.Property(e => e.Rchqdate)
                .HasColumnType("datetime")
                .HasColumnName("RCHQDate");
        });

        modelBuilder.Entity<VArinvoice>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vARInvoice");

            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.CreatedUserName).HasMaxLength(40);
            entity.Property(e => e.CurrencyCode).HasMaxLength(5);
            entity.Property(e => e.CurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.CurrencySymbol).HasMaxLength(6);
            entity.Property(e => e.CurrencyWord).HasMaxLength(40);
            entity.Property(e => e.CurrencyWord2).HasMaxLength(40);
            entity.Property(e => e.DebtorAddress1).HasMaxLength(40);
            entity.Property(e => e.DebtorAddress2).HasMaxLength(40);
            entity.Property(e => e.DebtorAddress3).HasMaxLength(40);
            entity.Property(e => e.DebtorAddress4).HasMaxLength(40);
            entity.Property(e => e.DebtorAgingOn)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DebtorAreaCode).HasMaxLength(12);
            entity.Property(e => e.DebtorAreaDesc2).HasMaxLength(40);
            entity.Property(e => e.DebtorAreaDescription).HasMaxLength(40);
            entity.Property(e => e.DebtorAttention).HasMaxLength(40);
            entity.Property(e => e.DebtorCode).HasMaxLength(12);
            entity.Property(e => e.DebtorCompanyName).HasMaxLength(100);
            entity.Property(e => e.DebtorCreatedTimestamp).HasColumnType("datetime");
            entity.Property(e => e.DebtorCreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("DebtorCreatedUserID");
            entity.Property(e => e.DebtorCreditLimit).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DebtorCurrencyCode).HasMaxLength(5);
            entity.Property(e => e.DebtorDeliverAddress1).HasMaxLength(40);
            entity.Property(e => e.DebtorDeliverAddress2).HasMaxLength(40);
            entity.Property(e => e.DebtorDeliverAddress3).HasMaxLength(40);
            entity.Property(e => e.DebtorDeliverAddress4).HasMaxLength(40);
            entity.Property(e => e.DebtorDeliverPostCode).HasMaxLength(10);
            entity.Property(e => e.DebtorDesc2).HasMaxLength(100);
            entity.Property(e => e.DebtorDisplayTerm).HasMaxLength(30);
            entity.Property(e => e.DebtorEmailAddress).HasMaxLength(200);
            entity.Property(e => e.DebtorExemptExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.DebtorExemptNo).HasMaxLength(60);
            entity.Property(e => e.DebtorFax1).HasMaxLength(25);
            entity.Property(e => e.DebtorFax2).HasMaxLength(25);
            entity.Property(e => e.DebtorGstregisterNo)
                .HasMaxLength(20)
                .HasColumnName("DebtorGSTRegisterNo");
            entity.Property(e => e.DebtorGststatusVerifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("DebtorGSTStatusVerifiedDate");
            entity.Property(e => e.DebtorInclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DebtorLastModified).HasColumnType("datetime");
            entity.Property(e => e.DebtorLastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("DebtorLastModifiedUserID");
            entity.Property(e => e.DebtorMobile).HasMaxLength(25);
            entity.Property(e => e.DebtorNatureOfBusiness).HasMaxLength(40);
            entity.Property(e => e.DebtorOverdueLimit).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DebtorParentAccNo).HasMaxLength(12);
            entity.Property(e => e.DebtorPhone1).HasMaxLength(25);
            entity.Property(e => e.DebtorPhone2).HasMaxLength(25);
            entity.Property(e => e.DebtorPostCode).HasMaxLength(10);
            entity.Property(e => e.DebtorPriceCategory).HasMaxLength(12);
            entity.Property(e => e.DebtorRegisterNo).HasMaxLength(30);
            entity.Property(e => e.DebtorSalesAgent).HasMaxLength(12);
            entity.Property(e => e.DebtorSalesAgentDesc2).HasMaxLength(40);
            entity.Property(e => e.DebtorSalesAgentDescription).HasMaxLength(40);
            entity.Property(e => e.DebtorSelfBilledApprovalNo).HasMaxLength(30);
            entity.Property(e => e.DebtorSstregisterNo)
                .HasMaxLength(20)
                .HasColumnName("DebtorSSTRegisterNo");
            entity.Property(e => e.DebtorStatementType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DebtorTaxCode).HasMaxLength(14);
            entity.Property(e => e.DebtorTaxRegisterNo).HasMaxLength(30);
            entity.Property(e => e.DebtorType).HasMaxLength(20);
            entity.Property(e => e.DebtorTypeDesc2).HasMaxLength(40);
            entity.Property(e => e.DebtorTypeDescription).HasMaxLength(40);
            entity.Property(e => e.DebtorUdfBangsa1)
                .HasMaxLength(50)
                .HasColumnName("DebtorUDF_Bangsa1");
            entity.Property(e => e.DebtorUdfBangsa2)
                .HasMaxLength(50)
                .HasColumnName("DebtorUDF_Bangsa2");
            entity.Property(e => e.DebtorUdfJantina)
                .HasMaxLength(20)
                .HasColumnName("DebtorUDF_Jantina");
            entity.Property(e => e.DebtorUdfKerakyatan)
                .HasMaxLength(50)
                .HasColumnName("DebtorUDF_Kerakyatan");
            entity.Property(e => e.DebtorUdfTarikhLahir)
                .HasColumnType("datetime")
                .HasColumnName("DebtorUDF_TarikhLahir");
            entity.Property(e => e.DebtorWebUrl)
                .HasMaxLength(80)
                .HasColumnName("DebtorWebURL");
            entity.Property(e => e.Description).HasMaxLength(80);
            entity.Property(e => e.DisplayTerm).HasMaxLength(30);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.DocStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DueDate).HasColumnType("datetime");
            entity.Property(e => e.ExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.FcgainAccount)
                .HasMaxLength(12)
                .HasColumnName("FCGainAccount");
            entity.Property(e => e.FclossAccount)
                .HasMaxLength(12)
                .HasColumnName("FCLossAccount");
            entity.Property(e => e.GainLossJournalType).HasMaxLength(10);
            entity.Property(e => e.InclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.IsDebtorTaxRegistered)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.LastModifiedUserName).HasMaxLength(40);
            entity.Property(e => e.LocalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalPaymentAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTotal2).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.NetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Outstanding).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.PaymentAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.RefNo2).HasMaxLength(30);
            entity.Property(e => e.SourceType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxDate).HasColumnType("datetime");
            entity.Property(e => e.TaxDocNo).HasMaxLength(20);
            entity.Property(e => e.TaxRegisterNo).HasMaxLength(30);
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ToTaxCurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.Total).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Total2).HasColumnType("decimal(19, 2)");
        });

        modelBuilder.Entity<VArinvoiceDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vARInvoiceDetail");

            entity.Property(e => e.AccNo).HasMaxLength(12);
            entity.Property(e => e.Amount).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.DocTaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.KnockOffAmount).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalNetAmount).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalSubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxAdjustment).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.NetAmount).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.SubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TariffCode).HasMaxLength(12);
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxAdjustment).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCode).HasMaxLength(14);
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxPermitNo).HasMaxLength(20);
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ToAccountRate).HasColumnType("decimal(19, 12)");
        });

        modelBuilder.Entity<VArpayment>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vARPayment");

            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.CreatedUserName).HasMaxLength(40);
            entity.Property(e => e.CurrencyCode).HasMaxLength(5);
            entity.Property(e => e.CurrencySymbol).HasMaxLength(6);
            entity.Property(e => e.CurrencyWord).HasMaxLength(40);
            entity.Property(e => e.CurrencyWord2).HasMaxLength(40);
            entity.Property(e => e.DebtorAddress1).HasMaxLength(40);
            entity.Property(e => e.DebtorAddress2).HasMaxLength(40);
            entity.Property(e => e.DebtorAddress3).HasMaxLength(40);
            entity.Property(e => e.DebtorAddress4).HasMaxLength(40);
            entity.Property(e => e.DebtorAgingOn)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DebtorAreaCode).HasMaxLength(12);
            entity.Property(e => e.DebtorAreaDesc2).HasMaxLength(40);
            entity.Property(e => e.DebtorAreaDescription).HasMaxLength(40);
            entity.Property(e => e.DebtorAttention).HasMaxLength(40);
            entity.Property(e => e.DebtorCode).HasMaxLength(12);
            entity.Property(e => e.DebtorCompanyName).HasMaxLength(100);
            entity.Property(e => e.DebtorCreatedTimestamp).HasColumnType("datetime");
            entity.Property(e => e.DebtorCreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("DebtorCreatedUserID");
            entity.Property(e => e.DebtorCreditLimit).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DebtorCurrencyCode).HasMaxLength(5);
            entity.Property(e => e.DebtorDeliverAddress1).HasMaxLength(40);
            entity.Property(e => e.DebtorDeliverAddress2).HasMaxLength(40);
            entity.Property(e => e.DebtorDeliverAddress3).HasMaxLength(40);
            entity.Property(e => e.DebtorDeliverAddress4).HasMaxLength(40);
            entity.Property(e => e.DebtorDeliverPostCode).HasMaxLength(10);
            entity.Property(e => e.DebtorDesc2).HasMaxLength(100);
            entity.Property(e => e.DebtorDisplayTerm).HasMaxLength(30);
            entity.Property(e => e.DebtorEmailAddress).HasMaxLength(200);
            entity.Property(e => e.DebtorExemptExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.DebtorExemptNo).HasMaxLength(60);
            entity.Property(e => e.DebtorFax1).HasMaxLength(25);
            entity.Property(e => e.DebtorFax2).HasMaxLength(25);
            entity.Property(e => e.DebtorGstregisterNo)
                .HasMaxLength(20)
                .HasColumnName("DebtorGSTRegisterNo");
            entity.Property(e => e.DebtorGststatusVerifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("DebtorGSTStatusVerifiedDate");
            entity.Property(e => e.DebtorInclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DebtorLastModified).HasColumnType("datetime");
            entity.Property(e => e.DebtorLastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("DebtorLastModifiedUserID");
            entity.Property(e => e.DebtorMobile).HasMaxLength(25);
            entity.Property(e => e.DebtorNatureOfBusiness).HasMaxLength(40);
            entity.Property(e => e.DebtorOverdueLimit).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DebtorParentAccNo).HasMaxLength(12);
            entity.Property(e => e.DebtorPhone1).HasMaxLength(25);
            entity.Property(e => e.DebtorPhone2).HasMaxLength(25);
            entity.Property(e => e.DebtorPostCode).HasMaxLength(10);
            entity.Property(e => e.DebtorPriceCategory).HasMaxLength(12);
            entity.Property(e => e.DebtorRegisterNo).HasMaxLength(30);
            entity.Property(e => e.DebtorSalesAgent).HasMaxLength(12);
            entity.Property(e => e.DebtorSalesAgentDesc2).HasMaxLength(40);
            entity.Property(e => e.DebtorSalesAgentDescription).HasMaxLength(40);
            entity.Property(e => e.DebtorSelfBilledApprovalNo).HasMaxLength(30);
            entity.Property(e => e.DebtorSstregisterNo)
                .HasMaxLength(20)
                .HasColumnName("DebtorSSTRegisterNo");
            entity.Property(e => e.DebtorStatementType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DebtorTaxCode).HasMaxLength(14);
            entity.Property(e => e.DebtorTaxRegisterNo).HasMaxLength(30);
            entity.Property(e => e.DebtorType).HasMaxLength(20);
            entity.Property(e => e.DebtorTypeDesc2).HasMaxLength(40);
            entity.Property(e => e.DebtorTypeDescription).HasMaxLength(40);
            entity.Property(e => e.DebtorUdfBangsa1)
                .HasMaxLength(50)
                .HasColumnName("DebtorUDF_Bangsa1");
            entity.Property(e => e.DebtorUdfBangsa2)
                .HasMaxLength(50)
                .HasColumnName("DebtorUDF_Bangsa2");
            entity.Property(e => e.DebtorUdfJantina)
                .HasMaxLength(20)
                .HasColumnName("DebtorUDF_Jantina");
            entity.Property(e => e.DebtorUdfKerakyatan)
                .HasMaxLength(50)
                .HasColumnName("DebtorUDF_Kerakyatan");
            entity.Property(e => e.DebtorUdfTarikhLahir)
                .HasColumnType("datetime")
                .HasColumnName("DebtorUDF_TarikhLahir");
            entity.Property(e => e.DebtorWebUrl)
                .HasMaxLength(80)
                .HasColumnName("DebtorWebURL");
            entity.Property(e => e.DeptDesc2).HasMaxLength(40);
            entity.Property(e => e.DeptDescription).HasMaxLength(40);
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Description).HasMaxLength(80);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.DocNo2).HasMaxLength(25);
            entity.Property(e => e.DocStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FcgainAccount)
                .HasMaxLength(12)
                .HasColumnName("FCGainAccount");
            entity.Property(e => e.FclossAccount)
                .HasMaxLength(12)
                .HasColumnName("FCLossAccount");
            entity.Property(e => e.GainLossJournalType).HasMaxLength(10);
            entity.Property(e => e.IsDebtorTaxRegistered)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.KnockOffAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.LastModifiedUserName).HasMaxLength(40);
            entity.Property(e => e.LocalPaymentAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalUnappliedAmount).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.PaymentAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.ProjectDesc2).HasMaxLength(40);
            entity.Property(e => e.ProjectDescription).HasMaxLength(40);
            entity.Property(e => e.RefundAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SourceType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.ToDebtorRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.ToHomeRate).HasColumnType("decimal(19, 12)");
        });

        modelBuilder.Entity<VArpaymentDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vARPaymentDetail");

            entity.Property(e => e.BankCharge).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.BankChargeDeptNo).HasMaxLength(10);
            entity.Property(e => e.BankChargeProjNo).HasMaxLength(10);
            entity.Property(e => e.BankChargeTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.BankChargeTaxCode).HasMaxLength(14);
            entity.Property(e => e.BankChargeTaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.BankChargeTaxRefNo).HasMaxLength(30);
            entity.Property(e => e.ChequeNo).HasMaxLength(30);
            entity.Property(e => e.DebtorPaymentAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.IsRchq)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IsRCHQ");
            entity.Property(e => e.LocalPaymentAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.PaymentAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.PaymentBy).HasMaxLength(20);
            entity.Property(e => e.PaymentMethod).HasMaxLength(20);
            entity.Property(e => e.Rchqdate)
                .HasColumnType("datetime")
                .HasColumnName("RCHQDate");
        });

        modelBuilder.Entity<VArrefund>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vARRefund");

            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.CreatedUserName).HasMaxLength(40);
            entity.Property(e => e.CurrencyCode).HasMaxLength(5);
            entity.Property(e => e.CurrencySymbol).HasMaxLength(6);
            entity.Property(e => e.CurrencyWord).HasMaxLength(40);
            entity.Property(e => e.CurrencyWord2).HasMaxLength(40);
            entity.Property(e => e.DebtorAddress1).HasMaxLength(40);
            entity.Property(e => e.DebtorAddress2).HasMaxLength(40);
            entity.Property(e => e.DebtorAddress3).HasMaxLength(40);
            entity.Property(e => e.DebtorAddress4).HasMaxLength(40);
            entity.Property(e => e.DebtorAgingOn)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DebtorAreaCode).HasMaxLength(12);
            entity.Property(e => e.DebtorAreaDesc2).HasMaxLength(40);
            entity.Property(e => e.DebtorAreaDescription).HasMaxLength(40);
            entity.Property(e => e.DebtorAttention).HasMaxLength(40);
            entity.Property(e => e.DebtorCode).HasMaxLength(12);
            entity.Property(e => e.DebtorCompanyName).HasMaxLength(100);
            entity.Property(e => e.DebtorCreatedTimestamp).HasColumnType("datetime");
            entity.Property(e => e.DebtorCreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("DebtorCreatedUserID");
            entity.Property(e => e.DebtorCreditLimit).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DebtorCurrencyCode).HasMaxLength(5);
            entity.Property(e => e.DebtorDeliverAddress1).HasMaxLength(40);
            entity.Property(e => e.DebtorDeliverAddress2).HasMaxLength(40);
            entity.Property(e => e.DebtorDeliverAddress3).HasMaxLength(40);
            entity.Property(e => e.DebtorDeliverAddress4).HasMaxLength(40);
            entity.Property(e => e.DebtorDeliverPostCode).HasMaxLength(10);
            entity.Property(e => e.DebtorDesc2).HasMaxLength(100);
            entity.Property(e => e.DebtorDisplayTerm).HasMaxLength(30);
            entity.Property(e => e.DebtorEmailAddress).HasMaxLength(200);
            entity.Property(e => e.DebtorExemptExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.DebtorExemptNo).HasMaxLength(60);
            entity.Property(e => e.DebtorFax1).HasMaxLength(25);
            entity.Property(e => e.DebtorFax2).HasMaxLength(25);
            entity.Property(e => e.DebtorGstregisterNo)
                .HasMaxLength(20)
                .HasColumnName("DebtorGSTRegisterNo");
            entity.Property(e => e.DebtorGststatusVerifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("DebtorGSTStatusVerifiedDate");
            entity.Property(e => e.DebtorInclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DebtorLastModified).HasColumnType("datetime");
            entity.Property(e => e.DebtorLastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("DebtorLastModifiedUserID");
            entity.Property(e => e.DebtorMobile).HasMaxLength(25);
            entity.Property(e => e.DebtorNatureOfBusiness).HasMaxLength(40);
            entity.Property(e => e.DebtorOverdueLimit).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DebtorParentAccNo).HasMaxLength(12);
            entity.Property(e => e.DebtorPhone1).HasMaxLength(25);
            entity.Property(e => e.DebtorPhone2).HasMaxLength(25);
            entity.Property(e => e.DebtorPostCode).HasMaxLength(10);
            entity.Property(e => e.DebtorPriceCategory).HasMaxLength(12);
            entity.Property(e => e.DebtorRegisterNo).HasMaxLength(30);
            entity.Property(e => e.DebtorSalesAgent).HasMaxLength(12);
            entity.Property(e => e.DebtorSalesAgentDesc2).HasMaxLength(40);
            entity.Property(e => e.DebtorSalesAgentDescription).HasMaxLength(40);
            entity.Property(e => e.DebtorSelfBilledApprovalNo).HasMaxLength(30);
            entity.Property(e => e.DebtorSstregisterNo)
                .HasMaxLength(20)
                .HasColumnName("DebtorSSTRegisterNo");
            entity.Property(e => e.DebtorStatementType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DebtorTaxCode).HasMaxLength(14);
            entity.Property(e => e.DebtorTaxRegisterNo).HasMaxLength(30);
            entity.Property(e => e.DebtorType).HasMaxLength(20);
            entity.Property(e => e.DebtorTypeDesc2).HasMaxLength(40);
            entity.Property(e => e.DebtorTypeDescription).HasMaxLength(40);
            entity.Property(e => e.DebtorUdfBangsa1)
                .HasMaxLength(50)
                .HasColumnName("DebtorUDF_Bangsa1");
            entity.Property(e => e.DebtorUdfBangsa2)
                .HasMaxLength(50)
                .HasColumnName("DebtorUDF_Bangsa2");
            entity.Property(e => e.DebtorUdfJantina)
                .HasMaxLength(20)
                .HasColumnName("DebtorUDF_Jantina");
            entity.Property(e => e.DebtorUdfKerakyatan)
                .HasMaxLength(50)
                .HasColumnName("DebtorUDF_Kerakyatan");
            entity.Property(e => e.DebtorUdfTarikhLahir)
                .HasColumnType("datetime")
                .HasColumnName("DebtorUDF_TarikhLahir");
            entity.Property(e => e.DebtorWebUrl)
                .HasMaxLength(80)
                .HasColumnName("DebtorWebURL");
            entity.Property(e => e.DeptDesc2).HasMaxLength(40);
            entity.Property(e => e.DeptDescription).HasMaxLength(40);
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Description).HasMaxLength(80);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.DocNo2).HasMaxLength(25);
            entity.Property(e => e.DocStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EinvoiceAipsubmissionDateTime)
                .HasColumnType("datetime")
                .HasColumnName("EInvoiceAIPSubmissionDateTime");
            entity.Property(e => e.EinvoiceCancelDateTime)
                .HasColumnType("datetime")
                .HasColumnName("EInvoiceCancelDateTime");
            entity.Property(e => e.EinvoiceCancelReason)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceCancelReason");
            entity.Property(e => e.EinvoiceError)
                .IsUnicode(false)
                .HasColumnName("EInvoiceError");
            entity.Property(e => e.EinvoiceIssueDateTime)
                .HasColumnType("datetime")
                .HasColumnName("EInvoiceIssueDateTime");
            entity.Property(e => e.EinvoiceStatus)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceStatus");
            entity.Property(e => e.EinvoiceSubmissionDateTime)
                .HasColumnType("datetime")
                .HasColumnName("EInvoiceSubmissionDateTime");
            entity.Property(e => e.EinvoiceSubmissionUuid)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceSubmissionUuid");
            entity.Property(e => e.EinvoiceTraceId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceTraceId");
            entity.Property(e => e.EinvoiceUuid)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceUuid");
            entity.Property(e => e.EinvoiceValidatedDateTime)
                .HasColumnType("datetime")
                .HasColumnName("EInvoiceValidatedDateTime");
            entity.Property(e => e.EinvoiceValidationLink)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("EInvoiceValidationLink");
            entity.Property(e => e.FcgainAccount)
                .HasMaxLength(12)
                .HasColumnName("FCGainAccount");
            entity.Property(e => e.FclossAccount)
                .HasMaxLength(12)
                .HasColumnName("FCLossAccount");
            entity.Property(e => e.GainLossJournalType).HasMaxLength(10);
            entity.Property(e => e.IsDebtorTaxRegistered)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.KnockOffAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.LastModifiedUserName).HasMaxLength(40);
            entity.Property(e => e.LocalPaymentAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.PaymentAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.ProjectDesc2).HasMaxLength(40);
            entity.Property(e => e.ProjectDescription).HasMaxLength(40);
            entity.Property(e => e.SourceType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.SubmitEinvoice)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SubmitEInvoice");
            entity.Property(e => e.TaxEntityId).HasColumnName("TaxEntityID");
            entity.Property(e => e.ToDebtorRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.ToHomeRate).HasColumnType("decimal(19, 12)");
        });

        modelBuilder.Entity<VArrefundDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vARRefundDetail");

            entity.Property(e => e.BankCharge).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.BankChargeDeptNo).HasMaxLength(10);
            entity.Property(e => e.BankChargeProjNo).HasMaxLength(10);
            entity.Property(e => e.BankChargeTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.BankChargeTaxCode).HasMaxLength(14);
            entity.Property(e => e.BankChargeTaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.BankChargeTaxRefNo).HasMaxLength(30);
            entity.Property(e => e.ChequeNo).HasMaxLength(30);
            entity.Property(e => e.DebtorPaymentAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.IsRchq)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IsRCHQ");
            entity.Property(e => e.LocalPaymentAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.PaymentAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.PaymentBy).HasMaxLength(20);
            entity.Property(e => e.PaymentMethod).HasMaxLength(20);
            entity.Property(e => e.Rchqdate)
                .HasColumnType("datetime")
                .HasColumnName("RCHQDate");
        });

        modelBuilder.Entity<VBonusPointRedemption>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vBonusPointRedemption");

            entity.Property(e => e.CanSync)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.CreatedUserName).HasMaxLength(40);
            entity.Property(e => e.DebtorAddress1).HasMaxLength(40);
            entity.Property(e => e.DebtorAddress2).HasMaxLength(40);
            entity.Property(e => e.DebtorAddress3).HasMaxLength(40);
            entity.Property(e => e.DebtorAddress4).HasMaxLength(40);
            entity.Property(e => e.DebtorAgingOn)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DebtorAreaCode).HasMaxLength(12);
            entity.Property(e => e.DebtorAreaDesc2).HasMaxLength(40);
            entity.Property(e => e.DebtorAreaDescription).HasMaxLength(40);
            entity.Property(e => e.DebtorAttention).HasMaxLength(40);
            entity.Property(e => e.DebtorCode).HasMaxLength(12);
            entity.Property(e => e.DebtorCompanyName).HasMaxLength(100);
            entity.Property(e => e.DebtorCreatedTimestamp).HasColumnType("datetime");
            entity.Property(e => e.DebtorCreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("DebtorCreatedUserID");
            entity.Property(e => e.DebtorCreditLimit).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DebtorCurrencyCode).HasMaxLength(5);
            entity.Property(e => e.DebtorDeliverAddress1).HasMaxLength(40);
            entity.Property(e => e.DebtorDeliverAddress2).HasMaxLength(40);
            entity.Property(e => e.DebtorDeliverAddress3).HasMaxLength(40);
            entity.Property(e => e.DebtorDeliverAddress4).HasMaxLength(40);
            entity.Property(e => e.DebtorDeliverPostCode).HasMaxLength(10);
            entity.Property(e => e.DebtorDesc2).HasMaxLength(100);
            entity.Property(e => e.DebtorDisplayTerm).HasMaxLength(30);
            entity.Property(e => e.DebtorEmailAddress).HasMaxLength(200);
            entity.Property(e => e.DebtorExemptExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.DebtorExemptNo).HasMaxLength(60);
            entity.Property(e => e.DebtorFax1).HasMaxLength(25);
            entity.Property(e => e.DebtorFax2).HasMaxLength(25);
            entity.Property(e => e.DebtorGstregisterNo)
                .HasMaxLength(20)
                .HasColumnName("DebtorGSTRegisterNo");
            entity.Property(e => e.DebtorGststatusVerifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("DebtorGSTStatusVerifiedDate");
            entity.Property(e => e.DebtorInclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DebtorLastModified).HasColumnType("datetime");
            entity.Property(e => e.DebtorLastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("DebtorLastModifiedUserID");
            entity.Property(e => e.DebtorMobile).HasMaxLength(25);
            entity.Property(e => e.DebtorNatureOfBusiness).HasMaxLength(40);
            entity.Property(e => e.DebtorOverdueLimit).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DebtorParentAccNo).HasMaxLength(12);
            entity.Property(e => e.DebtorPhone1).HasMaxLength(25);
            entity.Property(e => e.DebtorPhone2).HasMaxLength(25);
            entity.Property(e => e.DebtorPostCode).HasMaxLength(10);
            entity.Property(e => e.DebtorPriceCategory).HasMaxLength(12);
            entity.Property(e => e.DebtorRegisterNo).HasMaxLength(30);
            entity.Property(e => e.DebtorSalesAgent).HasMaxLength(12);
            entity.Property(e => e.DebtorSalesAgentDesc2).HasMaxLength(40);
            entity.Property(e => e.DebtorSalesAgentDescription).HasMaxLength(40);
            entity.Property(e => e.DebtorSelfBilledApprovalNo).HasMaxLength(30);
            entity.Property(e => e.DebtorSstregisterNo)
                .HasMaxLength(20)
                .HasColumnName("DebtorSSTRegisterNo");
            entity.Property(e => e.DebtorStatementType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DebtorTaxCode).HasMaxLength(14);
            entity.Property(e => e.DebtorTaxRegisterNo).HasMaxLength(30);
            entity.Property(e => e.DebtorType).HasMaxLength(20);
            entity.Property(e => e.DebtorTypeDesc2).HasMaxLength(40);
            entity.Property(e => e.DebtorTypeDescription).HasMaxLength(40);
            entity.Property(e => e.DebtorUdfBangsa1)
                .HasMaxLength(50)
                .HasColumnName("DebtorUDF_Bangsa1");
            entity.Property(e => e.DebtorUdfBangsa2)
                .HasMaxLength(50)
                .HasColumnName("DebtorUDF_Bangsa2");
            entity.Property(e => e.DebtorUdfJantina)
                .HasMaxLength(20)
                .HasColumnName("DebtorUDF_Jantina");
            entity.Property(e => e.DebtorUdfKerakyatan)
                .HasMaxLength(50)
                .HasColumnName("DebtorUDF_Kerakyatan");
            entity.Property(e => e.DebtorUdfTarikhLahir)
                .HasColumnType("datetime")
                .HasColumnName("DebtorUDF_TarikhLahir");
            entity.Property(e => e.DebtorWebUrl)
                .HasMaxLength(80)
                .HasColumnName("DebtorWebURL");
            entity.Property(e => e.Description).HasMaxLength(40);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.IsDebtorTaxRegistered)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.LastModifiedUserName).HasMaxLength(40);
            entity.Property(e => e.MemberAddress1).HasMaxLength(40);
            entity.Property(e => e.MemberAddress2).HasMaxLength(40);
            entity.Property(e => e.MemberAddress3).HasMaxLength(40);
            entity.Property(e => e.MemberAddress4).HasMaxLength(40);
            entity.Property(e => e.MemberDepartment).HasMaxLength(30);
            entity.Property(e => e.MemberDirectFax).HasMaxLength(25);
            entity.Property(e => e.MemberDirectPhone).HasMaxLength(25);
            entity.Property(e => e.MemberEmailAddress).HasMaxLength(200);
            entity.Property(e => e.MemberImaddress)
                .HasMaxLength(40)
                .HasColumnName("MemberIMAddress");
            entity.Property(e => e.MemberMobilePhone).HasMaxLength(25);
            entity.Property(e => e.MemberName).HasMaxLength(100);
            entity.Property(e => e.MemberNo).HasMaxLength(20);
            entity.Property(e => e.MemberTitle).HasMaxLength(40);
            entity.Property(e => e.TotalPointRedeem).HasColumnType("decimal(19, 2)");
        });

        modelBuilder.Entity<VBonusPointRedemptionDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vBonusPointRedemptionDetail");

            entity.Property(e => e.BarCode).HasMaxLength(30);
            entity.Property(e => e.BatchBalQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.BatchDescription).HasMaxLength(40);
            entity.Property(e => e.BatchExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.BatchItemCode).HasMaxLength(30);
            entity.Property(e => e.BatchManufacturedDate).HasColumnType("datetime");
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.DeptDesc2).HasMaxLength(40);
            entity.Property(e => e.DeptDescription).HasMaxLength(40);
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.ItemBaseUom)
                .HasMaxLength(8)
                .HasColumnName("ItemBaseUOM");
            entity.Property(e => e.ItemBrand).HasMaxLength(20);
            entity.Property(e => e.ItemBrandDescription).HasMaxLength(40);
            entity.Property(e => e.ItemCategory).HasMaxLength(20);
            entity.Property(e => e.ItemCategoryDescription).HasMaxLength(40);
            entity.Property(e => e.ItemClass).HasMaxLength(20);
            entity.Property(e => e.ItemClassDescription).HasMaxLength(40);
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.ItemDesc2).HasMaxLength(100);
            entity.Property(e => e.ItemDescription).HasMaxLength(100);
            entity.Property(e => e.ItemGroup).HasMaxLength(8);
            entity.Property(e => e.ItemGroupDescription).HasMaxLength(40);
            entity.Property(e => e.ItemType).HasMaxLength(12);
            entity.Property(e => e.ItemTypeDescription).HasMaxLength(40);
            entity.Property(e => e.ItemUdfWarDay).HasColumnName("ItemUDF_WarDay");
            entity.Property(e => e.LeadTime).HasMaxLength(40);
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.LocationAddr1).HasMaxLength(40);
            entity.Property(e => e.LocationAddr2).HasMaxLength(40);
            entity.Property(e => e.LocationAddr3).HasMaxLength(40);
            entity.Property(e => e.LocationAddr4).HasMaxLength(40);
            entity.Property(e => e.LocationBalQty).HasColumnType("decimal(38, 8)");
            entity.Property(e => e.LocationContact).HasMaxLength(40);
            entity.Property(e => e.LocationDesc2).HasMaxLength(80);
            entity.Property(e => e.LocationDescription).HasMaxLength(80);
            entity.Property(e => e.LocationFax1).HasMaxLength(25);
            entity.Property(e => e.LocationFax2).HasMaxLength(25);
            entity.Property(e => e.LocationPhone1).HasMaxLength(25);
            entity.Property(e => e.LocationPhone2).HasMaxLength(25);
            entity.Property(e => e.LocationPostCode).HasMaxLength(10);
            entity.Property(e => e.PrintOut)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.ProjectDesc2).HasMaxLength(40);
            entity.Property(e => e.ProjectDescription).HasMaxLength(40);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SerialNoList).HasColumnType("ntext");
            entity.Property(e => e.Shelf).HasMaxLength(20);
            entity.Property(e => e.SmallestQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.UnitPoint).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
            entity.Property(e => e.UombalQty)
                .HasColumnType("decimal(38, 8)")
                .HasColumnName("UOMBalQty");
            entity.Property(e => e.Uomcost)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMCost");
            entity.Property(e => e.UomitemCode)
                .HasMaxLength(30)
                .HasColumnName("UOMItemCode");
            entity.Property(e => e.Uomprice)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMPrice");
            entity.Property(e => e.Uomprice2)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMPrice2");
            entity.Property(e => e.Uomrate)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMRate");
            entity.Property(e => e.UomrealCost)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMRealCost");
            entity.Property(e => e.Volume).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.VolumeUom)
                .HasMaxLength(8)
                .HasColumnName("VolumeUOM");
            entity.Property(e => e.Weight).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.WeightUom)
                .HasMaxLength(8)
                .HasColumnName("WeightUOM");
        });

        modelBuilder.Entity<VBranch>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vBranch");

            entity.Property(e => e.BranchAccNo).HasMaxLength(12);
            entity.Property(e => e.BranchAddress1).HasMaxLength(40);
            entity.Property(e => e.BranchAddress2).HasMaxLength(40);
            entity.Property(e => e.BranchAddress3).HasMaxLength(40);
            entity.Property(e => e.BranchAddress4).HasMaxLength(40);
            entity.Property(e => e.BranchAreaCode).HasMaxLength(12);
            entity.Property(e => e.BranchCode).HasMaxLength(20);
            entity.Property(e => e.BranchContact).HasMaxLength(40);
            entity.Property(e => e.BranchEmailAddress).HasMaxLength(80);
            entity.Property(e => e.BranchFax1).HasMaxLength(25);
            entity.Property(e => e.BranchFax2).HasMaxLength(25);
            entity.Property(e => e.BranchIsActive)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BranchMobile).HasMaxLength(25);
            entity.Property(e => e.BranchName).HasMaxLength(100);
            entity.Property(e => e.BranchPhone1).HasMaxLength(25);
            entity.Property(e => e.BranchPhone2).HasMaxLength(25);
            entity.Property(e => e.BranchPostCode).HasMaxLength(10);
            entity.Property(e => e.BranchPurchaseAgent).HasMaxLength(12);
            entity.Property(e => e.BranchSalesAgent).HasMaxLength(12);
        });

        modelBuilder.Entity<VCancelPo>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vCancelPO");

            entity.Property(e => e.Attention).HasMaxLength(40);
            entity.Property(e => e.BranchAccNo).HasMaxLength(12);
            entity.Property(e => e.BranchAddress1).HasMaxLength(40);
            entity.Property(e => e.BranchAddress2).HasMaxLength(40);
            entity.Property(e => e.BranchAddress3).HasMaxLength(40);
            entity.Property(e => e.BranchAddress4).HasMaxLength(40);
            entity.Property(e => e.BranchAreaCode).HasMaxLength(12);
            entity.Property(e => e.BranchCode).HasMaxLength(20);
            entity.Property(e => e.BranchContact).HasMaxLength(40);
            entity.Property(e => e.BranchEmailAddress).HasMaxLength(80);
            entity.Property(e => e.BranchFax1).HasMaxLength(25);
            entity.Property(e => e.BranchFax2).HasMaxLength(25);
            entity.Property(e => e.BranchIsActive)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BranchMobile).HasMaxLength(25);
            entity.Property(e => e.BranchName).HasMaxLength(100);
            entity.Property(e => e.BranchPhone1).HasMaxLength(25);
            entity.Property(e => e.BranchPhone2).HasMaxLength(25);
            entity.Property(e => e.BranchPostCode).HasMaxLength(10);
            entity.Property(e => e.BranchPurchaseAgent).HasMaxLength(12);
            entity.Property(e => e.BranchSalesAgent).HasMaxLength(12);
            entity.Property(e => e.CanSync)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.CreatedUserName).HasMaxLength(40);
            entity.Property(e => e.CreditorAddress1).HasMaxLength(40);
            entity.Property(e => e.CreditorAddress2).HasMaxLength(40);
            entity.Property(e => e.CreditorAddress3).HasMaxLength(40);
            entity.Property(e => e.CreditorAddress4).HasMaxLength(40);
            entity.Property(e => e.CreditorAgingOn)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreditorAreaCode).HasMaxLength(12);
            entity.Property(e => e.CreditorAreaDesc2).HasMaxLength(40);
            entity.Property(e => e.CreditorAreaDescription).HasMaxLength(40);
            entity.Property(e => e.CreditorAttention).HasMaxLength(40);
            entity.Property(e => e.CreditorCode).HasMaxLength(12);
            entity.Property(e => e.CreditorCompanyName).HasMaxLength(100);
            entity.Property(e => e.CreditorCreatedTimestamp).HasColumnType("datetime");
            entity.Property(e => e.CreditorCreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreditorCreatedUserID");
            entity.Property(e => e.CreditorCreditLimit).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.CreditorCurrencyCode).HasMaxLength(5);
            entity.Property(e => e.CreditorDeliverAddress1).HasMaxLength(40);
            entity.Property(e => e.CreditorDeliverAddress2).HasMaxLength(40);
            entity.Property(e => e.CreditorDeliverAddress3).HasMaxLength(40);
            entity.Property(e => e.CreditorDeliverAddress4).HasMaxLength(40);
            entity.Property(e => e.CreditorDeliverPostCode).HasMaxLength(10);
            entity.Property(e => e.CreditorDesc2).HasMaxLength(100);
            entity.Property(e => e.CreditorDisplayTerm).HasMaxLength(30);
            entity.Property(e => e.CreditorEmailAddress).HasMaxLength(200);
            entity.Property(e => e.CreditorExemptExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.CreditorExemptNo).HasMaxLength(60);
            entity.Property(e => e.CreditorFax1).HasMaxLength(25);
            entity.Property(e => e.CreditorFax2).HasMaxLength(25);
            entity.Property(e => e.CreditorGstregisterNo)
                .HasMaxLength(20)
                .HasColumnName("CreditorGSTRegisterNo");
            entity.Property(e => e.CreditorGststatusVerifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("CreditorGSTStatusVerifiedDate");
            entity.Property(e => e.CreditorInclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreditorLastModified).HasColumnType("datetime");
            entity.Property(e => e.CreditorLastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreditorLastModifiedUserID");
            entity.Property(e => e.CreditorMobile).HasMaxLength(25);
            entity.Property(e => e.CreditorName).HasMaxLength(100);
            entity.Property(e => e.CreditorNatureOfBusiness).HasMaxLength(40);
            entity.Property(e => e.CreditorOverdueLimit).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.CreditorParentAccNo).HasMaxLength(12);
            entity.Property(e => e.CreditorPhone1).HasMaxLength(25);
            entity.Property(e => e.CreditorPhone2).HasMaxLength(25);
            entity.Property(e => e.CreditorPostCode).HasMaxLength(10);
            entity.Property(e => e.CreditorPriceCategory).HasMaxLength(12);
            entity.Property(e => e.CreditorPurchaseAgent).HasMaxLength(12);
            entity.Property(e => e.CreditorPurchaseAgentDesc2).HasMaxLength(40);
            entity.Property(e => e.CreditorPurchaseAgentDescription).HasMaxLength(40);
            entity.Property(e => e.CreditorRegisterNo).HasMaxLength(30);
            entity.Property(e => e.CreditorSelfBilledApprovalNo).HasMaxLength(30);
            entity.Property(e => e.CreditorSstregisterNo)
                .HasMaxLength(20)
                .HasColumnName("CreditorSSTRegisterNo");
            entity.Property(e => e.CreditorStatementType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreditorTaxCode).HasMaxLength(14);
            entity.Property(e => e.CreditorTaxRegisterNo).HasMaxLength(30);
            entity.Property(e => e.CreditorType).HasMaxLength(20);
            entity.Property(e => e.CreditorTypeDesc2).HasMaxLength(40);
            entity.Property(e => e.CreditorTypeDescription).HasMaxLength(40);
            entity.Property(e => e.CreditorWebUrl)
                .HasMaxLength(80)
                .HasColumnName("CreditorWebURL");
            entity.Property(e => e.CurrencyCode).HasMaxLength(5);
            entity.Property(e => e.CurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.CurrencySymbol).HasMaxLength(6);
            entity.Property(e => e.CurrencyWord).HasMaxLength(40);
            entity.Property(e => e.CurrencyWord2).HasMaxLength(40);
            entity.Property(e => e.Description).HasMaxLength(80);
            entity.Property(e => e.DisplayTerm).HasMaxLength(30);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.DocStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Fax1).HasMaxLength(25);
            entity.Property(e => e.FcgainAccount)
                .HasMaxLength(12)
                .HasColumnName("FCGainAccount");
            entity.Property(e => e.FclossAccount)
                .HasMaxLength(12)
                .HasColumnName("FCLossAccount");
            entity.Property(e => e.Footer1Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer1TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Footer2Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer2TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Footer3Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer3TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.GainLossJournalType).HasMaxLength(10);
            entity.Property(e => e.InclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.InvAddr1).HasMaxLength(40);
            entity.Property(e => e.InvAddr2).HasMaxLength(40);
            entity.Property(e => e.InvAddr3).HasMaxLength(40);
            entity.Property(e => e.InvAddr4).HasMaxLength(40);
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.LastModifiedUserName).HasMaxLength(40);
            entity.Property(e => e.LocalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.NetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Phone1).HasMaxLength(25);
            entity.Property(e => e.PurchaseAgent).HasMaxLength(12);
            entity.Property(e => e.PurchaseAgentDesc2).HasMaxLength(40);
            entity.Property(e => e.PurchaseAgentDescription).HasMaxLength(40);
            entity.Property(e => e.PurchaseLocation).HasMaxLength(8);
            entity.Property(e => e.Ref).HasMaxLength(40);
            entity.Property(e => e.RefDocNo).HasMaxLength(30);
            entity.Property(e => e.Remark1).HasMaxLength(40);
            entity.Property(e => e.Remark2).HasMaxLength(40);
            entity.Property(e => e.Remark3).HasMaxLength(40);
            entity.Property(e => e.Remark4).HasMaxLength(40);
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyExTax).HasColumnType("decimal(38, 13)");
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxRegisterNo).HasMaxLength(30);
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ToTaxCurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.Total).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalWithTax).HasColumnType("decimal(20, 2)");
        });

        modelBuilder.Entity<VCancelPodetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vCancelPODetail");

            entity.Property(e => e.AddToCost)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AddToSubTotal)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BarCode).HasMaxLength(30);
            entity.Property(e => e.CalcByPercent).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.DeliveryDate).HasColumnType("datetime");
            entity.Property(e => e.DeptDesc2).HasMaxLength(40);
            entity.Property(e => e.DeptDescription).HasMaxLength(40);
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Desc2).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.Discount).HasMaxLength(20);
            entity.Property(e => e.DiscountAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DocTaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.DtlType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EstimatedDeliveryDate).HasMaxLength(20);
            entity.Property(e => e.Focqty)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("FOCQty");
            entity.Property(e => e.FontStyle).HasMaxLength(8);
            entity.Property(e => e.FromDocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.FullTransferOption)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.GovtTaxCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.ItemBaseUom)
                .HasMaxLength(8)
                .HasColumnName("ItemBaseUOM");
            entity.Property(e => e.ItemBrand).HasMaxLength(20);
            entity.Property(e => e.ItemBrandDescription).HasMaxLength(40);
            entity.Property(e => e.ItemCategory).HasMaxLength(20);
            entity.Property(e => e.ItemCategoryDescription).HasMaxLength(40);
            entity.Property(e => e.ItemClass).HasMaxLength(20);
            entity.Property(e => e.ItemClassDescription).HasMaxLength(40);
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.ItemDesc2).HasMaxLength(100);
            entity.Property(e => e.ItemDescription).HasMaxLength(100);
            entity.Property(e => e.ItemGroup).HasMaxLength(8);
            entity.Property(e => e.ItemGroupDescription).HasMaxLength(40);
            entity.Property(e => e.ItemType).HasMaxLength(12);
            entity.Property(e => e.ItemTypeDescription).HasMaxLength(40);
            entity.Property(e => e.ItemUdfWarDay).HasColumnName("ItemUDF_WarDay");
            entity.Property(e => e.LeadTime).HasMaxLength(40);
            entity.Property(e => e.LocalSubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalSubTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.LocationAddr1).HasMaxLength(40);
            entity.Property(e => e.LocationAddr2).HasMaxLength(40);
            entity.Property(e => e.LocationAddr3).HasMaxLength(40);
            entity.Property(e => e.LocationAddr4).HasMaxLength(40);
            entity.Property(e => e.LocationBalQty).HasColumnType("decimal(38, 8)");
            entity.Property(e => e.LocationContact).HasMaxLength(40);
            entity.Property(e => e.LocationDesc2).HasMaxLength(80);
            entity.Property(e => e.LocationDescription).HasMaxLength(80);
            entity.Property(e => e.LocationFax1).HasMaxLength(25);
            entity.Property(e => e.LocationFax2).HasMaxLength(25);
            entity.Property(e => e.LocationPhone1).HasMaxLength(25);
            entity.Property(e => e.LocationPhone2).HasMaxLength(25);
            entity.Property(e => e.LocationPostCode).HasMaxLength(10);
            entity.Property(e => e.MainItem)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Numbering).HasMaxLength(6);
            entity.Property(e => e.PrintOut)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.ProjectDesc2).HasMaxLength(40);
            entity.Property(e => e.ProjectDescription).HasMaxLength(40);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SalesExemptionNo).HasMaxLength(60);
            entity.Property(e => e.Shelf).HasMaxLength(20);
            entity.Property(e => e.SmallestQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SmallestUnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SubTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SubTotalWithTax).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxAccNo).HasMaxLength(12);
            entity.Property(e => e.TaxCode).HasMaxLength(14);
            entity.Property(e => e.TaxCodeDescription).HasMaxLength(120);
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.UnitPriceAfterDiscount).HasColumnType("decimal(38, 13)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
            entity.Property(e => e.UombalQty)
                .HasColumnType("decimal(38, 8)")
                .HasColumnName("UOMBalQty");
            entity.Property(e => e.Uomcost)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMCost");
            entity.Property(e => e.UomitemCode)
                .HasMaxLength(30)
                .HasColumnName("UOMItemCode");
            entity.Property(e => e.Uomprice)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMPrice");
            entity.Property(e => e.Uomprice2)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMPrice2");
            entity.Property(e => e.Uomrate)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMRate");
            entity.Property(e => e.UomrealCost)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMRealCost");
            entity.Property(e => e.UserUom)
                .HasMaxLength(8)
                .HasColumnName("UserUOM");
            entity.Property(e => e.Volume).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.VolumeUom)
                .HasMaxLength(8)
                .HasColumnName("VolumeUOM");
            entity.Property(e => e.Weight).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.WeightUom)
                .HasMaxLength(8)
                .HasColumnName("WeightUOM");
        });

        modelBuilder.Entity<VCancelPosubDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vCancelPOSubDetail");

            entity.Property(e => e.AddToCost)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Desc2).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.DocTaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.GovtTaxCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.LocalSubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.PrintOut)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SalesExemptionNo).HasMaxLength(60);
            entity.Property(e => e.SubQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxAccNo).HasMaxLength(12);
            entity.Property(e => e.TaxCode).HasMaxLength(14);
            entity.Property(e => e.TaxCodeDescription).HasMaxLength(120);
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<VCancelSo>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vCancelSO");

            entity.Property(e => e.Attention).HasMaxLength(40);
            entity.Property(e => e.BranchAccNo).HasMaxLength(12);
            entity.Property(e => e.BranchAddress1).HasMaxLength(40);
            entity.Property(e => e.BranchAddress2).HasMaxLength(40);
            entity.Property(e => e.BranchAddress3).HasMaxLength(40);
            entity.Property(e => e.BranchAddress4).HasMaxLength(40);
            entity.Property(e => e.BranchAreaCode).HasMaxLength(12);
            entity.Property(e => e.BranchCode).HasMaxLength(20);
            entity.Property(e => e.BranchContact).HasMaxLength(40);
            entity.Property(e => e.BranchEmailAddress).HasMaxLength(80);
            entity.Property(e => e.BranchFax1).HasMaxLength(25);
            entity.Property(e => e.BranchFax2).HasMaxLength(25);
            entity.Property(e => e.BranchIsActive)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BranchMobile).HasMaxLength(25);
            entity.Property(e => e.BranchName).HasMaxLength(100);
            entity.Property(e => e.BranchPhone1).HasMaxLength(25);
            entity.Property(e => e.BranchPhone2).HasMaxLength(25);
            entity.Property(e => e.BranchPostCode).HasMaxLength(10);
            entity.Property(e => e.BranchPurchaseAgent).HasMaxLength(12);
            entity.Property(e => e.BranchSalesAgent).HasMaxLength(12);
            entity.Property(e => e.CanSync)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.CreatedUserName).HasMaxLength(40);
            entity.Property(e => e.CurrencyCode).HasMaxLength(5);
            entity.Property(e => e.CurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.CurrencySymbol).HasMaxLength(6);
            entity.Property(e => e.CurrencyWord).HasMaxLength(40);
            entity.Property(e => e.CurrencyWord2).HasMaxLength(40);
            entity.Property(e => e.DebtorAddress1).HasMaxLength(40);
            entity.Property(e => e.DebtorAddress2).HasMaxLength(40);
            entity.Property(e => e.DebtorAddress3).HasMaxLength(40);
            entity.Property(e => e.DebtorAddress4).HasMaxLength(40);
            entity.Property(e => e.DebtorAgingOn)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DebtorAreaCode).HasMaxLength(12);
            entity.Property(e => e.DebtorAreaDesc2).HasMaxLength(40);
            entity.Property(e => e.DebtorAreaDescription).HasMaxLength(40);
            entity.Property(e => e.DebtorAttention).HasMaxLength(40);
            entity.Property(e => e.DebtorCode).HasMaxLength(12);
            entity.Property(e => e.DebtorCompanyName).HasMaxLength(100);
            entity.Property(e => e.DebtorCreatedTimestamp).HasColumnType("datetime");
            entity.Property(e => e.DebtorCreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("DebtorCreatedUserID");
            entity.Property(e => e.DebtorCreditLimit).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DebtorCurrencyCode).HasMaxLength(5);
            entity.Property(e => e.DebtorDeliverAddress1).HasMaxLength(40);
            entity.Property(e => e.DebtorDeliverAddress2).HasMaxLength(40);
            entity.Property(e => e.DebtorDeliverAddress3).HasMaxLength(40);
            entity.Property(e => e.DebtorDeliverAddress4).HasMaxLength(40);
            entity.Property(e => e.DebtorDeliverPostCode).HasMaxLength(10);
            entity.Property(e => e.DebtorDesc2).HasMaxLength(100);
            entity.Property(e => e.DebtorDisplayTerm).HasMaxLength(30);
            entity.Property(e => e.DebtorEmailAddress).HasMaxLength(200);
            entity.Property(e => e.DebtorExemptExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.DebtorExemptNo).HasMaxLength(60);
            entity.Property(e => e.DebtorFax1).HasMaxLength(25);
            entity.Property(e => e.DebtorFax2).HasMaxLength(25);
            entity.Property(e => e.DebtorGstregisterNo)
                .HasMaxLength(20)
                .HasColumnName("DebtorGSTRegisterNo");
            entity.Property(e => e.DebtorGststatusVerifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("DebtorGSTStatusVerifiedDate");
            entity.Property(e => e.DebtorInclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DebtorLastModified).HasColumnType("datetime");
            entity.Property(e => e.DebtorLastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("DebtorLastModifiedUserID");
            entity.Property(e => e.DebtorMobile).HasMaxLength(25);
            entity.Property(e => e.DebtorName).HasMaxLength(100);
            entity.Property(e => e.DebtorNatureOfBusiness).HasMaxLength(40);
            entity.Property(e => e.DebtorOverdueLimit).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DebtorParentAccNo).HasMaxLength(12);
            entity.Property(e => e.DebtorPhone1).HasMaxLength(25);
            entity.Property(e => e.DebtorPhone2).HasMaxLength(25);
            entity.Property(e => e.DebtorPostCode).HasMaxLength(10);
            entity.Property(e => e.DebtorPriceCategory).HasMaxLength(12);
            entity.Property(e => e.DebtorRegisterNo).HasMaxLength(30);
            entity.Property(e => e.DebtorSalesAgent).HasMaxLength(12);
            entity.Property(e => e.DebtorSalesAgentDesc2).HasMaxLength(40);
            entity.Property(e => e.DebtorSalesAgentDescription).HasMaxLength(40);
            entity.Property(e => e.DebtorSelfBilledApprovalNo).HasMaxLength(30);
            entity.Property(e => e.DebtorSstregisterNo)
                .HasMaxLength(20)
                .HasColumnName("DebtorSSTRegisterNo");
            entity.Property(e => e.DebtorStatementType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DebtorTaxCode).HasMaxLength(14);
            entity.Property(e => e.DebtorTaxRegisterNo).HasMaxLength(30);
            entity.Property(e => e.DebtorType).HasMaxLength(20);
            entity.Property(e => e.DebtorTypeDesc2).HasMaxLength(40);
            entity.Property(e => e.DebtorTypeDescription).HasMaxLength(40);
            entity.Property(e => e.DebtorUdfBangsa1)
                .HasMaxLength(50)
                .HasColumnName("DebtorUDF_Bangsa1");
            entity.Property(e => e.DebtorUdfBangsa2)
                .HasMaxLength(50)
                .HasColumnName("DebtorUDF_Bangsa2");
            entity.Property(e => e.DebtorUdfJantina)
                .HasMaxLength(20)
                .HasColumnName("DebtorUDF_Jantina");
            entity.Property(e => e.DebtorUdfKerakyatan)
                .HasMaxLength(50)
                .HasColumnName("DebtorUDF_Kerakyatan");
            entity.Property(e => e.DebtorUdfTarikhLahir)
                .HasColumnType("datetime")
                .HasColumnName("DebtorUDF_TarikhLahir");
            entity.Property(e => e.DebtorWebUrl)
                .HasMaxLength(80)
                .HasColumnName("DebtorWebURL");
            entity.Property(e => e.DeliverAddr1).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr2).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr3).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr4).HasMaxLength(40);
            entity.Property(e => e.DeliverContact).HasMaxLength(40);
            entity.Property(e => e.DeliverFax1).HasMaxLength(25);
            entity.Property(e => e.DeliverPhone1).HasMaxLength(25);
            entity.Property(e => e.Description).HasMaxLength(80);
            entity.Property(e => e.DisplayTerm).HasMaxLength(30);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.DocStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Fax1).HasMaxLength(25);
            entity.Property(e => e.FcgainAccount)
                .HasMaxLength(12)
                .HasColumnName("FCGainAccount");
            entity.Property(e => e.FclossAccount)
                .HasMaxLength(12)
                .HasColumnName("FCLossAccount");
            entity.Property(e => e.Footer1Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer1TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Footer2Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer2TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Footer3Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer3TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.GainLossJournalType).HasMaxLength(10);
            entity.Property(e => e.InclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.InvAddr1).HasMaxLength(40);
            entity.Property(e => e.InvAddr2).HasMaxLength(40);
            entity.Property(e => e.InvAddr3).HasMaxLength(40);
            entity.Property(e => e.InvAddr4).HasMaxLength(40);
            entity.Property(e => e.IsDebtorTaxRegistered)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.LastModifiedUserName).HasMaxLength(40);
            entity.Property(e => e.LocalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.NetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Phone1).HasMaxLength(25);
            entity.Property(e => e.Ref).HasMaxLength(40);
            entity.Property(e => e.RefDocNo).HasMaxLength(30);
            entity.Property(e => e.Remark1).HasMaxLength(40);
            entity.Property(e => e.Remark2).HasMaxLength(40);
            entity.Property(e => e.Remark3).HasMaxLength(40);
            entity.Property(e => e.Remark4).HasMaxLength(40);
            entity.Property(e => e.SalesAgent).HasMaxLength(12);
            entity.Property(e => e.SalesAgentDesc2).HasMaxLength(40);
            entity.Property(e => e.SalesAgentDescription).HasMaxLength(40);
            entity.Property(e => e.SalesExemptionExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.SalesExemptionNo).HasMaxLength(60);
            entity.Property(e => e.SalesLocation).HasMaxLength(8);
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyExTax).HasColumnType("decimal(38, 13)");
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxRegisterNo).HasMaxLength(30);
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ToTaxCurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.Total).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalWithTax).HasColumnType("decimal(20, 2)");
        });

        modelBuilder.Entity<VCancelSodetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vCancelSODetail");

            entity.Property(e => e.AddToCost)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AddToSubTotal)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BarCode).HasMaxLength(30);
            entity.Property(e => e.CalcByPercent).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.DeptDesc2).HasMaxLength(40);
            entity.Property(e => e.DeptDescription).HasMaxLength(40);
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Desc2).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.Discount).HasMaxLength(20);
            entity.Property(e => e.DiscountAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DocTaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.DtlType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Focqty)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("FOCQty");
            entity.Property(e => e.FontStyle).HasMaxLength(8);
            entity.Property(e => e.FromDocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.FullTransferOption)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.GovtTaxCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.ItemBaseUom)
                .HasMaxLength(8)
                .HasColumnName("ItemBaseUOM");
            entity.Property(e => e.ItemBrand).HasMaxLength(20);
            entity.Property(e => e.ItemBrandDescription).HasMaxLength(40);
            entity.Property(e => e.ItemCategory).HasMaxLength(20);
            entity.Property(e => e.ItemCategoryDescription).HasMaxLength(40);
            entity.Property(e => e.ItemClass).HasMaxLength(20);
            entity.Property(e => e.ItemClassDescription).HasMaxLength(40);
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.ItemDesc2).HasMaxLength(100);
            entity.Property(e => e.ItemDescription).HasMaxLength(100);
            entity.Property(e => e.ItemGroup).HasMaxLength(8);
            entity.Property(e => e.ItemGroupDescription).HasMaxLength(40);
            entity.Property(e => e.ItemType).HasMaxLength(12);
            entity.Property(e => e.ItemTypeDescription).HasMaxLength(40);
            entity.Property(e => e.ItemUdfWarDay).HasColumnName("ItemUDF_WarDay");
            entity.Property(e => e.LeadTime).HasMaxLength(40);
            entity.Property(e => e.LocalSubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalSubTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.LocationAddr1).HasMaxLength(40);
            entity.Property(e => e.LocationAddr2).HasMaxLength(40);
            entity.Property(e => e.LocationAddr3).HasMaxLength(40);
            entity.Property(e => e.LocationAddr4).HasMaxLength(40);
            entity.Property(e => e.LocationBalQty).HasColumnType("decimal(38, 8)");
            entity.Property(e => e.LocationContact).HasMaxLength(40);
            entity.Property(e => e.LocationDesc2).HasMaxLength(80);
            entity.Property(e => e.LocationDescription).HasMaxLength(80);
            entity.Property(e => e.LocationFax1).HasMaxLength(25);
            entity.Property(e => e.LocationFax2).HasMaxLength(25);
            entity.Property(e => e.LocationPhone1).HasMaxLength(25);
            entity.Property(e => e.LocationPhone2).HasMaxLength(25);
            entity.Property(e => e.LocationPostCode).HasMaxLength(10);
            entity.Property(e => e.MainItem)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Numbering).HasMaxLength(6);
            entity.Property(e => e.PrintOut)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.ProjectDesc2).HasMaxLength(40);
            entity.Property(e => e.ProjectDescription).HasMaxLength(40);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SalesExemptionNo).HasMaxLength(60);
            entity.Property(e => e.Shelf).HasMaxLength(20);
            entity.Property(e => e.SmallestQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SmallestUnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SubTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SubTotalWithTax).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxAccNo).HasMaxLength(12);
            entity.Property(e => e.TaxCode).HasMaxLength(14);
            entity.Property(e => e.TaxCodeDescription).HasMaxLength(120);
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.UnitPriceAfterDiscount).HasColumnType("decimal(38, 13)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
            entity.Property(e => e.UombalQty)
                .HasColumnType("decimal(38, 8)")
                .HasColumnName("UOMBalQty");
            entity.Property(e => e.Uomcost)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMCost");
            entity.Property(e => e.UomitemCode)
                .HasMaxLength(30)
                .HasColumnName("UOMItemCode");
            entity.Property(e => e.Uomprice)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMPrice");
            entity.Property(e => e.Uomprice2)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMPrice2");
            entity.Property(e => e.Uomrate)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMRate");
            entity.Property(e => e.UomrealCost)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMRealCost");
            entity.Property(e => e.UserUom)
                .HasMaxLength(8)
                .HasColumnName("UserUOM");
            entity.Property(e => e.Volume).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.VolumeUom)
                .HasMaxLength(8)
                .HasColumnName("VolumeUOM");
            entity.Property(e => e.Weight).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.WeightUom)
                .HasMaxLength(8)
                .HasColumnName("WeightUOM");
            entity.Property(e => e.YourPodate)
                .HasColumnType("datetime")
                .HasColumnName("YourPODate");
            entity.Property(e => e.YourPono)
                .HasMaxLength(25)
                .HasColumnName("YourPONo");
        });

        modelBuilder.Entity<VCancelSosubDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vCancelSOSubDetail");

            entity.Property(e => e.AddToCost)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Desc2).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.DocTaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.GovtTaxCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.LocalSubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.PrintOut)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SalesExemptionNo).HasMaxLength(60);
            entity.Property(e => e.SubQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxAccNo).HasMaxLength(12);
            entity.Property(e => e.TaxCode).HasMaxLength(14);
            entity.Property(e => e.TaxCodeDescription).HasMaxLength(120);
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<VCashBook>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vCashBook");

            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.CreatedUserName).HasMaxLength(40);
            entity.Property(e => e.CurrencyCode).HasMaxLength(5);
            entity.Property(e => e.CurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.CurrencySymbol).HasMaxLength(6);
            entity.Property(e => e.CurrencyWord).HasMaxLength(40);
            entity.Property(e => e.CurrencyWord2).HasMaxLength(40);
            entity.Property(e => e.DealWith).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(80);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.DocNo2).HasMaxLength(25);
            entity.Property(e => e.DocStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.EinvoiceAipsubmissionDateTime)
                .HasColumnType("datetime")
                .HasColumnName("EInvoiceAIPSubmissionDateTime");
            entity.Property(e => e.EinvoiceCancelDateTime)
                .HasColumnType("datetime")
                .HasColumnName("EInvoiceCancelDateTime");
            entity.Property(e => e.EinvoiceCancelReason)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceCancelReason");
            entity.Property(e => e.EinvoiceError)
                .IsUnicode(false)
                .HasColumnName("EInvoiceError");
            entity.Property(e => e.EinvoiceIssueDateTime)
                .HasColumnType("datetime")
                .HasColumnName("EInvoiceIssueDateTime");
            entity.Property(e => e.EinvoiceStatus)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceStatus");
            entity.Property(e => e.EinvoiceSubmissionDateTime)
                .HasColumnType("datetime")
                .HasColumnName("EInvoiceSubmissionDateTime");
            entity.Property(e => e.EinvoiceSubmissionUuid)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceSubmissionUuid");
            entity.Property(e => e.EinvoiceTraceId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceTraceId");
            entity.Property(e => e.EinvoiceUuid)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceUuid");
            entity.Property(e => e.EinvoiceValidatedDateTime)
                .HasColumnType("datetime")
                .HasColumnName("EInvoiceValidatedDateTime");
            entity.Property(e => e.EinvoiceValidationLink)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("EInvoiceValidationLink");
            entity.Property(e => e.ExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.FcgainAccount)
                .HasMaxLength(12)
                .HasColumnName("FCGainAccount");
            entity.Property(e => e.FclossAccount)
                .HasMaxLength(12)
                .HasColumnName("FCLossAccount");
            entity.Property(e => e.GainLossJournalType).HasMaxLength(10);
            entity.Property(e => e.InclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.LastModifiedUserName).HasMaxLength(40);
            entity.Property(e => e.LocalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.NetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.PostDetailDesc)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SourceType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.SubmitEinvoice)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SubmitEInvoice");
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxDate).HasColumnType("datetime");
            entity.Property(e => e.TaxEntityAddress).HasMaxLength(200);
            entity.Property(e => e.TaxEntityId).HasColumnName("TaxEntityID");
            entity.Property(e => e.TaxRegisterNo).HasMaxLength(30);
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ToTaxCurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.Total).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalPayment).HasColumnType("decimal(19, 2)");
        });

        modelBuilder.Entity<VCashBookDtl>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vCashBookDTL");

            entity.Property(e => e.AccCurrencyCode).HasMaxLength(5);
            entity.Property(e => e.AccDesc2).HasMaxLength(100);
            entity.Property(e => e.AccDescription).HasMaxLength(100);
            entity.Property(e => e.AccNo).HasMaxLength(12);
            entity.Property(e => e.AccType).HasMaxLength(2);
            entity.Property(e => e.AddToCost)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Amount).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.AmountExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.AmountWithTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DeptDesc2).HasMaxLength(40);
            entity.Property(e => e.DeptDescription).HasMaxLength(40);
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.DocTaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.GovtTaxCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.HasValueTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.InclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LocalAmount).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalAmountExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalAmountWithTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxAdjustment).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.ProjectDesc2).HasMaxLength(40);
            entity.Property(e => e.ProjectDescription).HasMaxLength(40);
            entity.Property(e => e.Rchqamount)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("RCHQAmount");
            entity.Property(e => e.SalesAgent).HasMaxLength(12);
            entity.Property(e => e.SalesAgentDesc2).HasMaxLength(40);
            entity.Property(e => e.SalesAgentDescription).HasMaxLength(40);
            entity.Property(e => e.SpecialAccType)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.TariffCode).HasMaxLength(12);
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxAccNo).HasMaxLength(12);
            entity.Property(e => e.TaxAdjustment).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxBillDate).HasColumnType("datetime");
            entity.Property(e => e.TaxBname)
                .HasMaxLength(100)
                .HasColumnName("TaxBName");
            entity.Property(e => e.TaxBrno)
                .HasMaxLength(30)
                .HasColumnName("TaxBRNo");
            entity.Property(e => e.TaxCode).HasMaxLength(14);
            entity.Property(e => e.TaxCodeDescription).HasMaxLength(120);
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxPermitNo).HasMaxLength(20);
            entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.TaxRefNo).HasMaxLength(30);
            entity.Property(e => e.TaxRegisterNo).HasMaxLength(30);
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ToAccountRate).HasColumnType("decimal(19, 12)");
        });

        modelBuilder.Entity<VCashBookImportedGoodsDtl>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vCashBookImportedGoodsDTL");

            entity.Property(e => e.AddToCost)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ApivcompanyName)
                .HasMaxLength(100)
                .HasColumnName("APIVCompanyName");
            entity.Property(e => e.ApivcurrencyCode)
                .HasMaxLength(5)
                .HasColumnName("APIVCurrencyCode");
            entity.Property(e => e.ApivcurrencyRate)
                .HasColumnType("decimal(19, 12)")
                .HasColumnName("APIVCurrencyRate");
            entity.Property(e => e.ApivdocDate)
                .HasColumnType("datetime")
                .HasColumnName("APIVDocDate");
            entity.Property(e => e.ApivdocNo)
                .HasMaxLength(30)
                .HasColumnName("APIVDocNo");
            entity.Property(e => e.ApivdtlAccNo)
                .HasMaxLength(12)
                .HasColumnName("APIVDtlAccNo");
            entity.Property(e => e.ApivdtlDescription)
                .HasMaxLength(100)
                .HasColumnName("APIVDtlDescription");
            entity.Property(e => e.ApivdtlLocalSubTotal)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("APIVDtlLocalSubTotal");
            entity.Property(e => e.ApivdtlSubTotal)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("APIVDtlSubTotal");
            entity.Property(e => e.ApivsupplierDocNo)
                .HasMaxLength(30)
                .HasColumnName("APIVSupplierDocNo");
            entity.Property(e => e.CurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.DocTaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.GovtTaxCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxAdjustment).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SourceDtlType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SourceType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxAccNo).HasMaxLength(12);
            entity.Property(e => e.TaxAdjustment).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCode).HasMaxLength(14);
            entity.Property(e => e.TaxCodeDescription).HasMaxLength(120);
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxPermitNo).HasMaxLength(20);
            entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
        });

        modelBuilder.Entity<VCashBookPaymentDtl>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vCashBookPaymentDTL");

            entity.Property(e => e.AcceptChequeNo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BankAccount).HasMaxLength(12);
            entity.Property(e => e.BankCharge).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.BankChargeAccount).HasMaxLength(12);
            entity.Property(e => e.BankChargePercent).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.BankChargeTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.BankChargeTaxCode).HasMaxLength(14);
            entity.Property(e => e.BankChargeTaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.BankChargeTaxRefNo).HasMaxLength(30);
            entity.Property(e => e.ChequeNo).HasMaxLength(30);
            entity.Property(e => e.IsActive)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.IsRchq)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IsRCHQ");
            entity.Property(e => e.JournalType).HasMaxLength(10);
            entity.Property(e => e.LocalPaymentAmt).HasColumnType("decimal(38, 13)");
            entity.Property(e => e.MergeBankChargeTrans)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Odlimit)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("ODLimit");
            entity.Property(e => e.PaymentAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.PaymentBy).HasMaxLength(20);
            entity.Property(e => e.PaymentFormatName).HasMaxLength(20);
            entity.Property(e => e.PaymentMethod).HasMaxLength(20);
            entity.Property(e => e.Rchqdate)
                .HasColumnType("datetime")
                .HasColumnName("RCHQDate");
            entity.Property(e => e.ReceiptFormatName).HasMaxLength(20);
            entity.Property(e => e.SpecialAccType)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.ToBankRate).HasColumnType("decimal(19, 12)");
        });

        modelBuilder.Entity<VCashPurchase>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vCashPurchase");

            entity.Property(e => e.Attention).HasMaxLength(40);
            entity.Property(e => e.BranchAccNo).HasMaxLength(12);
            entity.Property(e => e.BranchAddress1).HasMaxLength(40);
            entity.Property(e => e.BranchAddress2).HasMaxLength(40);
            entity.Property(e => e.BranchAddress3).HasMaxLength(40);
            entity.Property(e => e.BranchAddress4).HasMaxLength(40);
            entity.Property(e => e.BranchAreaCode).HasMaxLength(12);
            entity.Property(e => e.BranchCode).HasMaxLength(20);
            entity.Property(e => e.BranchContact).HasMaxLength(40);
            entity.Property(e => e.BranchEmailAddress).HasMaxLength(80);
            entity.Property(e => e.BranchFax1).HasMaxLength(25);
            entity.Property(e => e.BranchFax2).HasMaxLength(25);
            entity.Property(e => e.BranchIsActive)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BranchMobile).HasMaxLength(25);
            entity.Property(e => e.BranchName).HasMaxLength(100);
            entity.Property(e => e.BranchPhone1).HasMaxLength(25);
            entity.Property(e => e.BranchPhone2).HasMaxLength(25);
            entity.Property(e => e.BranchPostCode).HasMaxLength(10);
            entity.Property(e => e.BranchPurchaseAgent).HasMaxLength(12);
            entity.Property(e => e.BranchSalesAgent).HasMaxLength(12);
            entity.Property(e => e.CanSync)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CashPayment).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Change).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.CreatedUserName).HasMaxLength(40);
            entity.Property(e => e.CreditorAddress1).HasMaxLength(40);
            entity.Property(e => e.CreditorAddress2).HasMaxLength(40);
            entity.Property(e => e.CreditorAddress3).HasMaxLength(40);
            entity.Property(e => e.CreditorAddress4).HasMaxLength(40);
            entity.Property(e => e.CreditorAgingOn)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreditorAreaCode).HasMaxLength(12);
            entity.Property(e => e.CreditorAreaDesc2).HasMaxLength(40);
            entity.Property(e => e.CreditorAreaDescription).HasMaxLength(40);
            entity.Property(e => e.CreditorAttention).HasMaxLength(40);
            entity.Property(e => e.CreditorCode).HasMaxLength(12);
            entity.Property(e => e.CreditorCompanyName).HasMaxLength(100);
            entity.Property(e => e.CreditorCreatedTimestamp).HasColumnType("datetime");
            entity.Property(e => e.CreditorCreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreditorCreatedUserID");
            entity.Property(e => e.CreditorCreditLimit).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.CreditorCurrencyCode).HasMaxLength(5);
            entity.Property(e => e.CreditorDeliverAddress1).HasMaxLength(40);
            entity.Property(e => e.CreditorDeliverAddress2).HasMaxLength(40);
            entity.Property(e => e.CreditorDeliverAddress3).HasMaxLength(40);
            entity.Property(e => e.CreditorDeliverAddress4).HasMaxLength(40);
            entity.Property(e => e.CreditorDeliverPostCode).HasMaxLength(10);
            entity.Property(e => e.CreditorDesc2).HasMaxLength(100);
            entity.Property(e => e.CreditorDisplayTerm).HasMaxLength(30);
            entity.Property(e => e.CreditorEmailAddress).HasMaxLength(200);
            entity.Property(e => e.CreditorExemptExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.CreditorExemptNo).HasMaxLength(60);
            entity.Property(e => e.CreditorFax1).HasMaxLength(25);
            entity.Property(e => e.CreditorFax2).HasMaxLength(25);
            entity.Property(e => e.CreditorGstregisterNo)
                .HasMaxLength(20)
                .HasColumnName("CreditorGSTRegisterNo");
            entity.Property(e => e.CreditorGststatusVerifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("CreditorGSTStatusVerifiedDate");
            entity.Property(e => e.CreditorInclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreditorLastModified).HasColumnType("datetime");
            entity.Property(e => e.CreditorLastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreditorLastModifiedUserID");
            entity.Property(e => e.CreditorMobile).HasMaxLength(25);
            entity.Property(e => e.CreditorName).HasMaxLength(100);
            entity.Property(e => e.CreditorNatureOfBusiness).HasMaxLength(40);
            entity.Property(e => e.CreditorOverdueLimit).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.CreditorParentAccNo).HasMaxLength(12);
            entity.Property(e => e.CreditorPhone1).HasMaxLength(25);
            entity.Property(e => e.CreditorPhone2).HasMaxLength(25);
            entity.Property(e => e.CreditorPostCode).HasMaxLength(10);
            entity.Property(e => e.CreditorPriceCategory).HasMaxLength(12);
            entity.Property(e => e.CreditorPurchaseAgent).HasMaxLength(12);
            entity.Property(e => e.CreditorPurchaseAgentDesc2).HasMaxLength(40);
            entity.Property(e => e.CreditorPurchaseAgentDescription).HasMaxLength(40);
            entity.Property(e => e.CreditorRegisterNo).HasMaxLength(30);
            entity.Property(e => e.CreditorSelfBilledApprovalNo).HasMaxLength(30);
            entity.Property(e => e.CreditorSstregisterNo)
                .HasMaxLength(20)
                .HasColumnName("CreditorSSTRegisterNo");
            entity.Property(e => e.CreditorStatementType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreditorTaxCode).HasMaxLength(14);
            entity.Property(e => e.CreditorTaxRegisterNo).HasMaxLength(30);
            entity.Property(e => e.CreditorType).HasMaxLength(20);
            entity.Property(e => e.CreditorTypeDesc2).HasMaxLength(40);
            entity.Property(e => e.CreditorTypeDescription).HasMaxLength(40);
            entity.Property(e => e.CreditorWebUrl)
                .HasMaxLength(80)
                .HasColumnName("CreditorWebURL");
            entity.Property(e => e.CurrencyCode).HasMaxLength(5);
            entity.Property(e => e.CurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.CurrencySymbol).HasMaxLength(6);
            entity.Property(e => e.CurrencyWord).HasMaxLength(40);
            entity.Property(e => e.CurrencyWord2).HasMaxLength(40);
            entity.Property(e => e.Description).HasMaxLength(80);
            entity.Property(e => e.DisplayTerm).HasMaxLength(30);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocDate2).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.EinvoiceStatus)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceStatus");
            entity.Property(e => e.EinvoiceUuid)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceUuid");
            entity.Property(e => e.EinvoiceValidatedDateTime)
                .HasColumnType("datetime")
                .HasColumnName("EInvoiceValidatedDateTime");
            entity.Property(e => e.EinvoiceValidationLink)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("EInvoiceValidationLink");
            entity.Property(e => e.ExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Fax1).HasMaxLength(25);
            entity.Property(e => e.FcgainAccount)
                .HasMaxLength(12)
                .HasColumnName("FCGainAccount");
            entity.Property(e => e.FclossAccount)
                .HasMaxLength(12)
                .HasColumnName("FCLossAccount");
            entity.Property(e => e.FinalTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer1TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Footer2Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer2TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Footer3Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer3TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.ForeignCharges).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.GainLossJournalType).HasMaxLength(10);
            entity.Property(e => e.InclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.InvAddr1).HasMaxLength(40);
            entity.Property(e => e.InvAddr2).HasMaxLength(40);
            entity.Property(e => e.InvAddr3).HasMaxLength(40);
            entity.Property(e => e.InvAddr4).HasMaxLength(40);
            entity.Property(e => e.IsRoundAdj)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.LastModifiedUserName).HasMaxLength(40);
            entity.Property(e => e.LocalCharges).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalNetTotalAfterWht)
                .HasColumnType("decimal(21, 2)")
                .HasColumnName("LocalNetTotalAfterWHT");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTotalExTaxAndWht)
                .HasColumnType("decimal(22, 2)")
                .HasColumnName("LocalTotalExTaxAndWHT");
            entity.Property(e => e.LocalTotalWht)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("LocalTotalWHT");
            entity.Property(e => e.NetOutstanding).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.NetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.NetTotalAfterWht)
                .HasColumnType("decimal(21, 2)")
                .HasColumnName("NetTotalAfterWHT");
            entity.Property(e => e.Phone1).HasMaxLength(25);
            entity.Property(e => e.PostToGl)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PostToGL");
            entity.Property(e => e.PostToStock)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PurchaseAgent).HasMaxLength(12);
            entity.Property(e => e.PurchaseAgentDesc2).HasMaxLength(40);
            entity.Property(e => e.PurchaseAgentDescription).HasMaxLength(40);
            entity.Property(e => e.PurchaseLocation).HasMaxLength(8);
            entity.Property(e => e.Ref).HasMaxLength(40);
            entity.Property(e => e.RefDocNo).HasMaxLength(30);
            entity.Property(e => e.Remark1).HasMaxLength(40);
            entity.Property(e => e.Remark2).HasMaxLength(40);
            entity.Property(e => e.Remark3).HasMaxLength(40);
            entity.Property(e => e.Remark4).HasMaxLength(40);
            entity.Property(e => e.RoundAdj).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SelfBilledApprovalNo).HasMaxLength(30);
            entity.Property(e => e.ShipInfo).HasMaxLength(40);
            entity.Property(e => e.ShipVia).HasMaxLength(20);
            entity.Property(e => e.SupplierDono)
                .HasMaxLength(30)
                .HasColumnName("SupplierDONo");
            entity.Property(e => e.SupplierInvoiceNo).HasMaxLength(30);
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyExTax).HasColumnType("decimal(38, 13)");
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxDate).HasColumnType("datetime");
            entity.Property(e => e.TaxDocNo).HasMaxLength(20);
            entity.Property(e => e.TaxRegisterNo).HasMaxLength(30);
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ToTaxCurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.Total).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalExTaxAndWht)
                .HasColumnType("decimal(21, 2)")
                .HasColumnName("TotalExTaxAndWHT");
            entity.Property(e => e.TotalWht)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("TotalWHT");
            entity.Property(e => e.TotalWithTax).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.Transferable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VCashPurchaseDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vCashPurchaseDetail");

            entity.Property(e => e.AccNo).HasMaxLength(12);
            entity.Property(e => e.AddToCost)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AddToSubTotal)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BarCode).HasMaxLength(30);
            entity.Property(e => e.BatchBalQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.BatchDescription).HasMaxLength(40);
            entity.Property(e => e.BatchExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.BatchItemCode).HasMaxLength(30);
            entity.Property(e => e.BatchManufacturedDate).HasColumnType("datetime");
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.CalcByPercent).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Cnamt)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("CNAmt");
            entity.Property(e => e.DeliveryDate).HasColumnType("datetime");
            entity.Property(e => e.DeptDesc2).HasMaxLength(40);
            entity.Property(e => e.DeptDescription).HasMaxLength(40);
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Desc2).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.Discount).HasMaxLength(20);
            entity.Property(e => e.DiscountAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DocTaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.DtlType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Duty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.EstimatedDeliveryDate).HasMaxLength(20);
            entity.Property(e => e.Focqty)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("FOCQty");
            entity.Property(e => e.FoctransferedQty)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("FOCTransferedQty");
            entity.Property(e => e.FontStyle).HasMaxLength(8);
            entity.Property(e => e.ForeignCharges).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.FromDocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.FullTransferOption)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.GovtTaxCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.ItemBaseUom)
                .HasMaxLength(8)
                .HasColumnName("ItemBaseUOM");
            entity.Property(e => e.ItemBrand).HasMaxLength(20);
            entity.Property(e => e.ItemBrandDescription).HasMaxLength(40);
            entity.Property(e => e.ItemCategory).HasMaxLength(20);
            entity.Property(e => e.ItemCategoryDescription).HasMaxLength(40);
            entity.Property(e => e.ItemClass).HasMaxLength(20);
            entity.Property(e => e.ItemClassDescription).HasMaxLength(40);
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.ItemDesc2).HasMaxLength(100);
            entity.Property(e => e.ItemDescription).HasMaxLength(100);
            entity.Property(e => e.ItemGroup).HasMaxLength(8);
            entity.Property(e => e.ItemGroupDescription).HasMaxLength(40);
            entity.Property(e => e.ItemType).HasMaxLength(12);
            entity.Property(e => e.ItemTypeDescription).HasMaxLength(40);
            entity.Property(e => e.ItemUdfWarDay).HasColumnName("ItemUDF_WarDay");
            entity.Property(e => e.LeadTime).HasMaxLength(40);
            entity.Property(e => e.LocalCharges).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.LocalSubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalSubTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxAdjustment).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.LocationAddr1).HasMaxLength(40);
            entity.Property(e => e.LocationAddr2).HasMaxLength(40);
            entity.Property(e => e.LocationAddr3).HasMaxLength(40);
            entity.Property(e => e.LocationAddr4).HasMaxLength(40);
            entity.Property(e => e.LocationBalQty).HasColumnType("decimal(38, 8)");
            entity.Property(e => e.LocationContact).HasMaxLength(40);
            entity.Property(e => e.LocationDesc2).HasMaxLength(80);
            entity.Property(e => e.LocationDescription).HasMaxLength(80);
            entity.Property(e => e.LocationFax1).HasMaxLength(25);
            entity.Property(e => e.LocationFax2).HasMaxLength(25);
            entity.Property(e => e.LocationPhone1).HasMaxLength(25);
            entity.Property(e => e.LocationPhone2).HasMaxLength(25);
            entity.Property(e => e.LocationPostCode).HasMaxLength(10);
            entity.Property(e => e.MainItem)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Numbering).HasMaxLength(6);
            entity.Property(e => e.OurPodate)
                .HasColumnType("datetime")
                .HasColumnName("OurPODate");
            entity.Property(e => e.OurPono)
                .HasMaxLength(30)
                .HasColumnName("OurPONo");
            entity.Property(e => e.PrintOut)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.ProjectDesc2).HasMaxLength(40);
            entity.Property(e => e.ProjectDescription).HasMaxLength(40);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SalesExemptionNo).HasMaxLength(60);
            entity.Property(e => e.Shelf).HasMaxLength(20);
            entity.Property(e => e.SmallestQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SmallestUnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SubTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SubTotalWithTax).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.TariffCode).HasMaxLength(12);
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxAccNo).HasMaxLength(12);
            entity.Property(e => e.TaxAdjustment).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCode).HasMaxLength(14);
            entity.Property(e => e.TaxCodeDescription).HasMaxLength(120);
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxPermitNo).HasMaxLength(20);
            entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Transferable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TransferedQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.UnitPriceAfterDiscount).HasColumnType("decimal(38, 13)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
            entity.Property(e => e.UombalQty)
                .HasColumnType("decimal(38, 8)")
                .HasColumnName("UOMBalQty");
            entity.Property(e => e.Uomcost)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMCost");
            entity.Property(e => e.UomitemCode)
                .HasMaxLength(30)
                .HasColumnName("UOMItemCode");
            entity.Property(e => e.Uomprice)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMPrice");
            entity.Property(e => e.Uomprice2)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMPrice2");
            entity.Property(e => e.Uomrate)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMRate");
            entity.Property(e => e.UomrealCost)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMRealCost");
            entity.Property(e => e.UserUom)
                .HasMaxLength(8)
                .HasColumnName("UserUOM");
            entity.Property(e => e.Volume).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.VolumeUom)
                .HasMaxLength(8)
                .HasColumnName("VolumeUOM");
            entity.Property(e => e.Weight).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.WeightUom)
                .HasMaxLength(8)
                .HasColumnName("WeightUOM");
        });

        modelBuilder.Entity<VCashPurchaseSubDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vCashPurchaseSubDetail");

            entity.Property(e => e.AddToCost)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.Desc2).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.DocTaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Duty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.ForeignCharges).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.GovtTaxCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.LocalCharges).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.LocalSubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.PrintOut)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SalesExemptionNo).HasMaxLength(60);
            entity.Property(e => e.SubQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TariffCode).HasMaxLength(12);
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxAccNo).HasMaxLength(12);
            entity.Property(e => e.TaxCode).HasMaxLength(14);
            entity.Property(e => e.TaxCodeDescription).HasMaxLength(120);
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<VCashSale>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vCashSale");

            entity.Property(e => e.Attention).HasMaxLength(40);
            entity.Property(e => e.AuthorisationNumberForCertifiedExporter)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.BranchAccNo).HasMaxLength(12);
            entity.Property(e => e.BranchAddress1).HasMaxLength(40);
            entity.Property(e => e.BranchAddress2).HasMaxLength(40);
            entity.Property(e => e.BranchAddress3).HasMaxLength(40);
            entity.Property(e => e.BranchAddress4).HasMaxLength(40);
            entity.Property(e => e.BranchAreaCode).HasMaxLength(12);
            entity.Property(e => e.BranchCode).HasMaxLength(20);
            entity.Property(e => e.BranchContact).HasMaxLength(40);
            entity.Property(e => e.BranchEmailAddress).HasMaxLength(80);
            entity.Property(e => e.BranchFax1).HasMaxLength(25);
            entity.Property(e => e.BranchFax2).HasMaxLength(25);
            entity.Property(e => e.BranchIsActive)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BranchMobile).HasMaxLength(25);
            entity.Property(e => e.BranchName).HasMaxLength(100);
            entity.Property(e => e.BranchPhone1).HasMaxLength(25);
            entity.Property(e => e.BranchPhone2).HasMaxLength(25);
            entity.Property(e => e.BranchPostCode).HasMaxLength(10);
            entity.Property(e => e.BranchPurchaseAgent).HasMaxLength(12);
            entity.Property(e => e.BranchSalesAgent).HasMaxLength(12);
            entity.Property(e => e.CanSync)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CashPayment).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.CcapprovalCode)
                .HasMaxLength(10)
                .HasColumnName("CCApprovalCode");
            entity.Property(e => e.Change).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.CreatedUserName).HasMaxLength(40);
            entity.Property(e => e.CsudfDeliveredQty222)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("CSUDF_DeliveredQty222");
            entity.Property(e => e.CsudfSuperAppId)
                .HasMaxLength(32)
                .HasColumnName("CSUDF_SuperAppId");
            entity.Property(e => e.CurrencyCode).HasMaxLength(5);
            entity.Property(e => e.CurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.CurrencySymbol).HasMaxLength(6);
            entity.Property(e => e.CurrencyWord).HasMaxLength(40);
            entity.Property(e => e.CurrencyWord2).HasMaxLength(40);
            entity.Property(e => e.DebtorAddress1).HasMaxLength(40);
            entity.Property(e => e.DebtorAddress2).HasMaxLength(40);
            entity.Property(e => e.DebtorAddress3).HasMaxLength(40);
            entity.Property(e => e.DebtorAddress4).HasMaxLength(40);
            entity.Property(e => e.DebtorAgingOn)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DebtorAreaCode).HasMaxLength(12);
            entity.Property(e => e.DebtorAreaDesc2).HasMaxLength(40);
            entity.Property(e => e.DebtorAreaDescription).HasMaxLength(40);
            entity.Property(e => e.DebtorAttention).HasMaxLength(40);
            entity.Property(e => e.DebtorCode).HasMaxLength(12);
            entity.Property(e => e.DebtorCompanyName).HasMaxLength(100);
            entity.Property(e => e.DebtorCreatedTimestamp).HasColumnType("datetime");
            entity.Property(e => e.DebtorCreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("DebtorCreatedUserID");
            entity.Property(e => e.DebtorCreditLimit).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DebtorCurrencyCode).HasMaxLength(5);
            entity.Property(e => e.DebtorDeliverAddress1).HasMaxLength(40);
            entity.Property(e => e.DebtorDeliverAddress2).HasMaxLength(40);
            entity.Property(e => e.DebtorDeliverAddress3).HasMaxLength(40);
            entity.Property(e => e.DebtorDeliverAddress4).HasMaxLength(40);
            entity.Property(e => e.DebtorDeliverPostCode).HasMaxLength(10);
            entity.Property(e => e.DebtorDesc2).HasMaxLength(100);
            entity.Property(e => e.DebtorDisplayTerm).HasMaxLength(30);
            entity.Property(e => e.DebtorEmailAddress).HasMaxLength(200);
            entity.Property(e => e.DebtorExemptExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.DebtorExemptNo).HasMaxLength(60);
            entity.Property(e => e.DebtorFax1).HasMaxLength(25);
            entity.Property(e => e.DebtorFax2).HasMaxLength(25);
            entity.Property(e => e.DebtorGstregisterNo)
                .HasMaxLength(20)
                .HasColumnName("DebtorGSTRegisterNo");
            entity.Property(e => e.DebtorGststatusVerifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("DebtorGSTStatusVerifiedDate");
            entity.Property(e => e.DebtorInclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DebtorLastModified).HasColumnType("datetime");
            entity.Property(e => e.DebtorLastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("DebtorLastModifiedUserID");
            entity.Property(e => e.DebtorMobile).HasMaxLength(25);
            entity.Property(e => e.DebtorName).HasMaxLength(100);
            entity.Property(e => e.DebtorNatureOfBusiness).HasMaxLength(40);
            entity.Property(e => e.DebtorOverdueLimit).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DebtorParentAccNo).HasMaxLength(12);
            entity.Property(e => e.DebtorPhone1).HasMaxLength(25);
            entity.Property(e => e.DebtorPhone2).HasMaxLength(25);
            entity.Property(e => e.DebtorPostCode).HasMaxLength(10);
            entity.Property(e => e.DebtorPriceCategory).HasMaxLength(12);
            entity.Property(e => e.DebtorRegisterNo).HasMaxLength(30);
            entity.Property(e => e.DebtorSalesAgent).HasMaxLength(12);
            entity.Property(e => e.DebtorSalesAgentDesc2).HasMaxLength(40);
            entity.Property(e => e.DebtorSalesAgentDescription).HasMaxLength(40);
            entity.Property(e => e.DebtorSelfBilledApprovalNo).HasMaxLength(30);
            entity.Property(e => e.DebtorSstregisterNo)
                .HasMaxLength(20)
                .HasColumnName("DebtorSSTRegisterNo");
            entity.Property(e => e.DebtorStatementType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DebtorTaxCode).HasMaxLength(14);
            entity.Property(e => e.DebtorTaxRegisterNo).HasMaxLength(30);
            entity.Property(e => e.DebtorType).HasMaxLength(20);
            entity.Property(e => e.DebtorTypeDesc2).HasMaxLength(40);
            entity.Property(e => e.DebtorTypeDescription).HasMaxLength(40);
            entity.Property(e => e.DebtorUdfBangsa1)
                .HasMaxLength(50)
                .HasColumnName("DebtorUDF_Bangsa1");
            entity.Property(e => e.DebtorUdfBangsa2)
                .HasMaxLength(50)
                .HasColumnName("DebtorUDF_Bangsa2");
            entity.Property(e => e.DebtorUdfJantina)
                .HasMaxLength(20)
                .HasColumnName("DebtorUDF_Jantina");
            entity.Property(e => e.DebtorUdfKerakyatan)
                .HasMaxLength(50)
                .HasColumnName("DebtorUDF_Kerakyatan");
            entity.Property(e => e.DebtorUdfTarikhLahir)
                .HasColumnType("datetime")
                .HasColumnName("DebtorUDF_TarikhLahir");
            entity.Property(e => e.DebtorWebUrl)
                .HasMaxLength(80)
                .HasColumnName("DebtorWebURL");
            entity.Property(e => e.DeliverAddr1).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr2).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr3).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr4).HasMaxLength(40);
            entity.Property(e => e.DeliverContact).HasMaxLength(40);
            entity.Property(e => e.DeliverFax1).HasMaxLength(25);
            entity.Property(e => e.DeliverPhone1).HasMaxLength(25);
            entity.Property(e => e.DeliveryTaxEntityId).HasColumnName("DeliveryTaxEntityID");
            entity.Property(e => e.Description).HasMaxLength(80);
            entity.Property(e => e.DisplayTerm).HasMaxLength(30);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.EinvoiceAipsubmissionDateTime)
                .HasColumnType("datetime")
                .HasColumnName("EInvoiceAIPSubmissionDateTime");
            entity.Property(e => e.EinvoiceCancelDateTime)
                .HasColumnType("datetime")
                .HasColumnName("EInvoiceCancelDateTime");
            entity.Property(e => e.EinvoiceCancelReason)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceCancelReason");
            entity.Property(e => e.EinvoiceError)
                .IsUnicode(false)
                .HasColumnName("EInvoiceError");
            entity.Property(e => e.EinvoiceIssueDateTime)
                .HasColumnType("datetime")
                .HasColumnName("EInvoiceIssueDateTime");
            entity.Property(e => e.EinvoiceStatus)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceStatus");
            entity.Property(e => e.EinvoiceSubmissionDateTime)
                .HasColumnType("datetime")
                .HasColumnName("EInvoiceSubmissionDateTime");
            entity.Property(e => e.EinvoiceSubmissionUuid)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceSubmissionUuid");
            entity.Property(e => e.EinvoiceTraceId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceTraceId");
            entity.Property(e => e.EinvoiceUuid)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceUuid");
            entity.Property(e => e.EinvoiceValidatedDateTime)
                .HasColumnType("datetime")
                .HasColumnName("EInvoiceValidatedDateTime");
            entity.Property(e => e.EinvoiceValidationLink)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("EInvoiceValidationLink");
            entity.Property(e => e.ExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Fax1).HasMaxLength(25);
            entity.Property(e => e.FcgainAccount)
                .HasMaxLength(12)
                .HasColumnName("FCGainAccount");
            entity.Property(e => e.FclossAccount)
                .HasMaxLength(12)
                .HasColumnName("FCLossAccount");
            entity.Property(e => e.FinalTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer1TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Footer2Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer2TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Footer3Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer3TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.FreeTradeAgreementInformation)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.FreightAllowanceChargeAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.FreightAllowanceChargeReason)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.GainLossJournalType).HasMaxLength(10);
            entity.Property(e => e.InclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Incoterms)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.InvAddr1).HasMaxLength(40);
            entity.Property(e => e.InvAddr2).HasMaxLength(40);
            entity.Property(e => e.InvAddr3).HasMaxLength(40);
            entity.Property(e => e.InvAddr4).HasMaxLength(40);
            entity.Property(e => e.IsDebtorTaxRegistered)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.IsRoundAdj)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.LastModifiedUserName).HasMaxLength(40);
            entity.Property(e => e.LocalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalNetTotalAfterWht)
                .HasColumnType("decimal(21, 2)")
                .HasColumnName("LocalNetTotalAfterWHT");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTotalExTaxAndWht)
                .HasColumnType("decimal(22, 2)")
                .HasColumnName("LocalTotalExTaxAndWHT");
            entity.Property(e => e.LocalTotalWht)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("LocalTotalWHT");
            entity.Property(e => e.MemberAddress1).HasMaxLength(40);
            entity.Property(e => e.MemberAddress2).HasMaxLength(40);
            entity.Property(e => e.MemberAddress3).HasMaxLength(40);
            entity.Property(e => e.MemberAddress4).HasMaxLength(40);
            entity.Property(e => e.MemberDepartment).HasMaxLength(30);
            entity.Property(e => e.MemberDirectFax).HasMaxLength(25);
            entity.Property(e => e.MemberDirectPhone).HasMaxLength(25);
            entity.Property(e => e.MemberEmailAddress).HasMaxLength(200);
            entity.Property(e => e.MemberImaddress)
                .HasMaxLength(40)
                .HasColumnName("MemberIMAddress");
            entity.Property(e => e.MemberMobilePhone).HasMaxLength(25);
            entity.Property(e => e.MemberName).HasMaxLength(100);
            entity.Property(e => e.MemberNo).HasMaxLength(20);
            entity.Property(e => e.MemberTitle).HasMaxLength(40);
            entity.Property(e => e.MultiPrice).HasMaxLength(8);
            entity.Property(e => e.NetOutstanding).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.NetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.NetTotalAfterWht)
                .HasColumnType("decimal(21, 2)")
                .HasColumnName("NetTotalAfterWHT");
            entity.Property(e => e.Outstanding).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.PaymentAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Phone1).HasMaxLength(25);
            entity.Property(e => e.PostToGl)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PostToGL");
            entity.Property(e => e.PostToStock)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ReallocatePurchaseByProject)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ReallocatePurchaseByProjectJedocNo)
                .HasMaxLength(30)
                .HasColumnName("ReallocatePurchaseByProjectJEDocNo");
            entity.Property(e => e.Ref).HasMaxLength(40);
            entity.Property(e => e.RefDocNo).HasMaxLength(30);
            entity.Property(e => e.RefNo2).HasMaxLength(30);
            entity.Property(e => e.ReferenceNumberOfCustomsFormNo1And9)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.ReferenceNumberOfCustomsFormNo2)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.Remark1).HasMaxLength(40);
            entity.Property(e => e.Remark2).HasMaxLength(40);
            entity.Property(e => e.Remark3).HasMaxLength(40);
            entity.Property(e => e.Remark4).HasMaxLength(40);
            entity.Property(e => e.RoundAdj).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SalesAgent).HasMaxLength(12);
            entity.Property(e => e.SalesAgentDesc2).HasMaxLength(40);
            entity.Property(e => e.SalesAgentDescription).HasMaxLength(40);
            entity.Property(e => e.SalesExemptionExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.SalesExemptionNo).HasMaxLength(60);
            entity.Property(e => e.SalesLocation).HasMaxLength(8);
            entity.Property(e => e.ShipInfo).HasMaxLength(40);
            entity.Property(e => e.ShipVia).HasMaxLength(20);
            entity.Property(e => e.SubmitEinvoice)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SubmitEInvoice");
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyExTax).HasColumnType("decimal(38, 13)");
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxDate).HasColumnType("datetime");
            entity.Property(e => e.TaxDocNo).HasMaxLength(20);
            entity.Property(e => e.TaxEntityId).HasColumnName("TaxEntityID");
            entity.Property(e => e.TaxRegisterNo).HasMaxLength(30);
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ToTaxCurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.Total).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalBonusPoint).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalExTaxAndWht)
                .HasColumnType("decimal(21, 2)")
                .HasColumnName("TotalExTaxAndWHT");
            entity.Property(e => e.TotalWht)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("TotalWHT");
            entity.Property(e => e.TotalWithTax).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.Transferable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VCashSaleDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vCashSaleDetail");

            entity.Property(e => e.AccNo).HasMaxLength(12);
            entity.Property(e => e.AddToCost)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AddToSubTotal)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BarCode).HasMaxLength(30);
            entity.Property(e => e.BatchBalQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.BatchDescription).HasMaxLength(40);
            entity.Property(e => e.BatchExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.BatchItemCode).HasMaxLength(30);
            entity.Property(e => e.BatchManufacturedDate).HasColumnType("datetime");
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.BonusPoint).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.CalcByPercent).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Classification)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.CsdtludfDeliveryFocQty)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("CSDTLUDF_DeliveryFocQty");
            entity.Property(e => e.CsdtludfDeliveryQty)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("CSDTLUDF_DeliveryQty");
            entity.Property(e => e.DeliveryDate).HasColumnType("datetime");
            entity.Property(e => e.DeptDesc2).HasMaxLength(40);
            entity.Property(e => e.DeptDescription).HasMaxLength(40);
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Desc2).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.Discount).HasMaxLength(20);
            entity.Property(e => e.DiscountAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DocTaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.DtlType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EstimatedDeliveryDate).HasMaxLength(20);
            entity.Property(e => e.Focqty)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("FOCQty");
            entity.Property(e => e.FoctransferedQty)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("FOCTransferedQty");
            entity.Property(e => e.FontStyle).HasMaxLength(8);
            entity.Property(e => e.FromDocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.FullTransferOption)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.GovtTaxCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.ItemBaseUom)
                .HasMaxLength(8)
                .HasColumnName("ItemBaseUOM");
            entity.Property(e => e.ItemBrand).HasMaxLength(20);
            entity.Property(e => e.ItemBrandDescription).HasMaxLength(40);
            entity.Property(e => e.ItemCategory).HasMaxLength(20);
            entity.Property(e => e.ItemCategoryDescription).HasMaxLength(40);
            entity.Property(e => e.ItemClass).HasMaxLength(20);
            entity.Property(e => e.ItemClassDescription).HasMaxLength(40);
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.ItemDesc2).HasMaxLength(100);
            entity.Property(e => e.ItemDescription).HasMaxLength(100);
            entity.Property(e => e.ItemGroup).HasMaxLength(8);
            entity.Property(e => e.ItemGroupDescription).HasMaxLength(40);
            entity.Property(e => e.ItemType).HasMaxLength(12);
            entity.Property(e => e.ItemTypeDescription).HasMaxLength(40);
            entity.Property(e => e.ItemUdfWarDay).HasColumnName("ItemUDF_WarDay");
            entity.Property(e => e.LeadTime).HasMaxLength(40);
            entity.Property(e => e.LocalSubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalSubTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxAdjustment).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.LocationAddr1).HasMaxLength(40);
            entity.Property(e => e.LocationAddr2).HasMaxLength(40);
            entity.Property(e => e.LocationAddr3).HasMaxLength(40);
            entity.Property(e => e.LocationAddr4).HasMaxLength(40);
            entity.Property(e => e.LocationBalQty).HasColumnType("decimal(38, 8)");
            entity.Property(e => e.LocationContact).HasMaxLength(40);
            entity.Property(e => e.LocationDesc2).HasMaxLength(80);
            entity.Property(e => e.LocationDescription).HasMaxLength(80);
            entity.Property(e => e.LocationFax1).HasMaxLength(25);
            entity.Property(e => e.LocationFax2).HasMaxLength(25);
            entity.Property(e => e.LocationPhone1).HasMaxLength(25);
            entity.Property(e => e.LocationPhone2).HasMaxLength(25);
            entity.Property(e => e.LocationPostCode).HasMaxLength(10);
            entity.Property(e => e.MainItem)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Numbering).HasMaxLength(6);
            entity.Property(e => e.OriginCountryCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.OurDodate)
                .HasColumnType("datetime")
                .HasColumnName("OurDODate");
            entity.Property(e => e.OurDono)
                .HasMaxLength(30)
                .HasColumnName("OurDONo");
            entity.Property(e => e.PrintOut)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.ProjectDesc2).HasMaxLength(40);
            entity.Property(e => e.ProjectDescription).HasMaxLength(40);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SalesExemptionNo).HasMaxLength(60);
            entity.Property(e => e.Shelf).HasMaxLength(20);
            entity.Property(e => e.SmallestQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SmallestUnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SubTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SubTotalWithTax).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.TariffCode).HasMaxLength(12);
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxAccNo).HasMaxLength(12);
            entity.Property(e => e.TaxAdjustment).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCode).HasMaxLength(14);
            entity.Property(e => e.TaxCodeDescription).HasMaxLength(120);
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxPermitNo).HasMaxLength(20);
            entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Transferable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TransferedQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.UnitPriceAfterDiscount).HasColumnType("decimal(38, 13)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
            entity.Property(e => e.UombalQty)
                .HasColumnType("decimal(38, 8)")
                .HasColumnName("UOMBalQty");
            entity.Property(e => e.Uomcost)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMCost");
            entity.Property(e => e.UomitemCode)
                .HasMaxLength(30)
                .HasColumnName("UOMItemCode");
            entity.Property(e => e.Uomprice)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMPrice");
            entity.Property(e => e.Uomprice2)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMPrice2");
            entity.Property(e => e.Uomrate)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMRate");
            entity.Property(e => e.UomrealCost)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMRealCost");
            entity.Property(e => e.UserUom)
                .HasMaxLength(8)
                .HasColumnName("UserUOM");
            entity.Property(e => e.Volume).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.VolumeUom)
                .HasMaxLength(8)
                .HasColumnName("VolumeUOM");
            entity.Property(e => e.Weight).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.WeightUom)
                .HasMaxLength(8)
                .HasColumnName("WeightUOM");
            entity.Property(e => e.YourPodate)
                .HasColumnType("datetime")
                .HasColumnName("YourPODate");
            entity.Property(e => e.YourPono)
                .HasMaxLength(25)
                .HasColumnName("YourPONo");
        });

        modelBuilder.Entity<VCashSaleSubDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vCashSaleSubDetail");

            entity.Property(e => e.AddToCost)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.Classification)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.CsdtludfDeliveryFocQty)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("CSDTLUDF_DeliveryFocQty");
            entity.Property(e => e.CsdtludfDeliveryQty)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("CSDTLUDF_DeliveryQty");
            entity.Property(e => e.Desc2).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.DocTaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.GovtTaxCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.LocalSubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.OriginCountryCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.PrintOut)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SalesExemptionNo).HasMaxLength(60);
            entity.Property(e => e.SubQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TariffCode).HasMaxLength(12);
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxAccNo).HasMaxLength(12);
            entity.Property(e => e.TaxCode).HasMaxLength(14);
            entity.Property(e => e.TaxCodeDescription).HasMaxLength(120);
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<VCntype>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vCNType");

            entity.Property(e => e.Cntype)
                .HasMaxLength(12)
                .HasColumnName("CNType");
            entity.Property(e => e.CntypeDescription)
                .HasMaxLength(40)
                .HasColumnName("CNTypeDescription");
        });

        modelBuilder.Entity<VCompanyProfile>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vCompanyProfile");

            entity.Property(e => e.Address1).HasMaxLength(40);
            entity.Property(e => e.Address2).HasMaxLength(40);
            entity.Property(e => e.Address3).HasMaxLength(40);
            entity.Property(e => e.Address4).HasMaxLength(40);
            entity.Property(e => e.Attention).HasMaxLength(40);
            entity.Property(e => e.CompanyName).HasMaxLength(80);
            entity.Property(e => e.CompanyNameWithRegisterNo).HasMaxLength(113);
            entity.Property(e => e.CompanyNameWithRemark).HasMaxLength(95);
            entity.Property(e => e.Contact).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr1).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr2).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr3).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr4).HasMaxLength(40);
            entity.Property(e => e.DeliverContact).HasMaxLength(40);
            entity.Property(e => e.DeliverFax1).HasMaxLength(25);
            entity.Property(e => e.DeliverPhone1).HasMaxLength(25);
            entity.Property(e => e.DeliverPostCode).HasMaxLength(10);
            entity.Property(e => e.EmailAddress).HasMaxLength(80);
            entity.Property(e => e.Fax1).HasMaxLength(25);
            entity.Property(e => e.Fax2).HasMaxLength(25);
            entity.Property(e => e.NatureOfBusiness).HasMaxLength(40);
            entity.Property(e => e.Phone1).HasMaxLength(25);
            entity.Property(e => e.Phone2).HasMaxLength(25);
            entity.Property(e => e.PostCode).HasMaxLength(10);
            entity.Property(e => e.RegisterNo).HasMaxLength(30);
            entity.Property(e => e.Remark).HasMaxLength(12);
            entity.Property(e => e.SalesTaxRegisterNo).HasMaxLength(20);
            entity.Property(e => e.ServiceTaxRegisterNo).HasMaxLength(20);
            entity.Property(e => e.TaxEntityId).HasColumnName("TaxEntityID");
            entity.Property(e => e.TaxRegisterNo).HasMaxLength(30);
        });

        modelBuilder.Entity<VConsignment>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vConsignment");

            entity.Property(e => e.Attention).HasMaxLength(40);
            entity.Property(e => e.BranchAccNo).HasMaxLength(12);
            entity.Property(e => e.BranchAddress1).HasMaxLength(40);
            entity.Property(e => e.BranchAddress2).HasMaxLength(40);
            entity.Property(e => e.BranchAddress3).HasMaxLength(40);
            entity.Property(e => e.BranchAddress4).HasMaxLength(40);
            entity.Property(e => e.BranchAreaCode).HasMaxLength(12);
            entity.Property(e => e.BranchCode).HasMaxLength(20);
            entity.Property(e => e.BranchContact).HasMaxLength(40);
            entity.Property(e => e.BranchEmailAddress).HasMaxLength(80);
            entity.Property(e => e.BranchFax1).HasMaxLength(25);
            entity.Property(e => e.BranchFax2).HasMaxLength(25);
            entity.Property(e => e.BranchIsActive)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BranchMobile).HasMaxLength(25);
            entity.Property(e => e.BranchName).HasMaxLength(100);
            entity.Property(e => e.BranchPhone1).HasMaxLength(25);
            entity.Property(e => e.BranchPhone2).HasMaxLength(25);
            entity.Property(e => e.BranchPostCode).HasMaxLength(10);
            entity.Property(e => e.BranchPurchaseAgent).HasMaxLength(12);
            entity.Property(e => e.BranchSalesAgent).HasMaxLength(12);
            entity.Property(e => e.CanSync)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.CreatedUserName).HasMaxLength(40);
            entity.Property(e => e.CurrencyCode).HasMaxLength(5);
            entity.Property(e => e.CurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.CurrencySymbol).HasMaxLength(6);
            entity.Property(e => e.CurrencyWord).HasMaxLength(40);
            entity.Property(e => e.CurrencyWord2).HasMaxLength(40);
            entity.Property(e => e.DebtorAddress1).HasMaxLength(40);
            entity.Property(e => e.DebtorAddress2).HasMaxLength(40);
            entity.Property(e => e.DebtorAddress3).HasMaxLength(40);
            entity.Property(e => e.DebtorAddress4).HasMaxLength(40);
            entity.Property(e => e.DebtorAgingOn)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DebtorAreaCode).HasMaxLength(12);
            entity.Property(e => e.DebtorAreaDesc2).HasMaxLength(40);
            entity.Property(e => e.DebtorAreaDescription).HasMaxLength(40);
            entity.Property(e => e.DebtorAttention).HasMaxLength(40);
            entity.Property(e => e.DebtorCode).HasMaxLength(12);
            entity.Property(e => e.DebtorCompanyName).HasMaxLength(100);
            entity.Property(e => e.DebtorCreatedTimestamp).HasColumnType("datetime");
            entity.Property(e => e.DebtorCreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("DebtorCreatedUserID");
            entity.Property(e => e.DebtorCreditLimit).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DebtorCurrencyCode).HasMaxLength(5);
            entity.Property(e => e.DebtorDeliverAddress1).HasMaxLength(40);
            entity.Property(e => e.DebtorDeliverAddress2).HasMaxLength(40);
            entity.Property(e => e.DebtorDeliverAddress3).HasMaxLength(40);
            entity.Property(e => e.DebtorDeliverAddress4).HasMaxLength(40);
            entity.Property(e => e.DebtorDeliverPostCode).HasMaxLength(10);
            entity.Property(e => e.DebtorDesc2).HasMaxLength(100);
            entity.Property(e => e.DebtorDisplayTerm).HasMaxLength(30);
            entity.Property(e => e.DebtorEmailAddress).HasMaxLength(200);
            entity.Property(e => e.DebtorExemptExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.DebtorExemptNo).HasMaxLength(60);
            entity.Property(e => e.DebtorFax1).HasMaxLength(25);
            entity.Property(e => e.DebtorFax2).HasMaxLength(25);
            entity.Property(e => e.DebtorGstregisterNo)
                .HasMaxLength(20)
                .HasColumnName("DebtorGSTRegisterNo");
            entity.Property(e => e.DebtorGststatusVerifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("DebtorGSTStatusVerifiedDate");
            entity.Property(e => e.DebtorInclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DebtorLastModified).HasColumnType("datetime");
            entity.Property(e => e.DebtorLastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("DebtorLastModifiedUserID");
            entity.Property(e => e.DebtorMobile).HasMaxLength(25);
            entity.Property(e => e.DebtorName).HasMaxLength(100);
            entity.Property(e => e.DebtorNatureOfBusiness).HasMaxLength(40);
            entity.Property(e => e.DebtorOverdueLimit).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DebtorParentAccNo).HasMaxLength(12);
            entity.Property(e => e.DebtorPhone1).HasMaxLength(25);
            entity.Property(e => e.DebtorPhone2).HasMaxLength(25);
            entity.Property(e => e.DebtorPostCode).HasMaxLength(10);
            entity.Property(e => e.DebtorPriceCategory).HasMaxLength(12);
            entity.Property(e => e.DebtorRegisterNo).HasMaxLength(30);
            entity.Property(e => e.DebtorSalesAgent).HasMaxLength(12);
            entity.Property(e => e.DebtorSalesAgentDesc2).HasMaxLength(40);
            entity.Property(e => e.DebtorSalesAgentDescription).HasMaxLength(40);
            entity.Property(e => e.DebtorSelfBilledApprovalNo).HasMaxLength(30);
            entity.Property(e => e.DebtorSstregisterNo)
                .HasMaxLength(20)
                .HasColumnName("DebtorSSTRegisterNo");
            entity.Property(e => e.DebtorStatementType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DebtorTaxCode).HasMaxLength(14);
            entity.Property(e => e.DebtorTaxRegisterNo).HasMaxLength(30);
            entity.Property(e => e.DebtorType).HasMaxLength(20);
            entity.Property(e => e.DebtorTypeDesc2).HasMaxLength(40);
            entity.Property(e => e.DebtorTypeDescription).HasMaxLength(40);
            entity.Property(e => e.DebtorUdfBangsa1)
                .HasMaxLength(50)
                .HasColumnName("DebtorUDF_Bangsa1");
            entity.Property(e => e.DebtorUdfBangsa2)
                .HasMaxLength(50)
                .HasColumnName("DebtorUDF_Bangsa2");
            entity.Property(e => e.DebtorUdfJantina)
                .HasMaxLength(20)
                .HasColumnName("DebtorUDF_Jantina");
            entity.Property(e => e.DebtorUdfKerakyatan)
                .HasMaxLength(50)
                .HasColumnName("DebtorUDF_Kerakyatan");
            entity.Property(e => e.DebtorUdfTarikhLahir)
                .HasColumnType("datetime")
                .HasColumnName("DebtorUDF_TarikhLahir");
            entity.Property(e => e.DebtorWebUrl)
                .HasMaxLength(80)
                .HasColumnName("DebtorWebURL");
            entity.Property(e => e.DeliverAddr1).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr2).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr3).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr4).HasMaxLength(40);
            entity.Property(e => e.DeliverContact).HasMaxLength(40);
            entity.Property(e => e.DeliverFax1).HasMaxLength(25);
            entity.Property(e => e.DeliverPhone1).HasMaxLength(25);
            entity.Property(e => e.Description).HasMaxLength(80);
            entity.Property(e => e.DisplayTerm).HasMaxLength(30);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.DocStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Fax1).HasMaxLength(25);
            entity.Property(e => e.FcgainAccount)
                .HasMaxLength(12)
                .HasColumnName("FCGainAccount");
            entity.Property(e => e.FclossAccount)
                .HasMaxLength(12)
                .HasColumnName("FCLossAccount");
            entity.Property(e => e.GainLossJournalType).HasMaxLength(10);
            entity.Property(e => e.InclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.InvAddr1).HasMaxLength(40);
            entity.Property(e => e.InvAddr2).HasMaxLength(40);
            entity.Property(e => e.InvAddr3).HasMaxLength(40);
            entity.Property(e => e.InvAddr4).HasMaxLength(40);
            entity.Property(e => e.IsDebtorTaxRegistered)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.LastModifiedUserName).HasMaxLength(40);
            entity.Property(e => e.LocalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.MultiPrice).HasMaxLength(8);
            entity.Property(e => e.NetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Phone1).HasMaxLength(25);
            entity.Property(e => e.Ref).HasMaxLength(40);
            entity.Property(e => e.RefDocNo).HasMaxLength(30);
            entity.Property(e => e.Remark1).HasMaxLength(40);
            entity.Property(e => e.Remark2).HasMaxLength(40);
            entity.Property(e => e.Remark3).HasMaxLength(40);
            entity.Property(e => e.Remark4).HasMaxLength(40);
            entity.Property(e => e.SalesAgent).HasMaxLength(12);
            entity.Property(e => e.SalesAgentDesc2).HasMaxLength(40);
            entity.Property(e => e.SalesAgentDescription).HasMaxLength(40);
            entity.Property(e => e.SalesExemptionExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.SalesExemptionNo).HasMaxLength(60);
            entity.Property(e => e.SalesLocation).HasMaxLength(8);
            entity.Property(e => e.ShipInfo).HasMaxLength(40);
            entity.Property(e => e.ShipVia).HasMaxLength(20);
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyExTax).HasColumnType("decimal(38, 13)");
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ToDocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.ToTaxCurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.Total).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalWithTax).HasColumnType("decimal(20, 2)");
        });

        modelBuilder.Entity<VConsignmentDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vConsignmentDetail");

            entity.Property(e => e.AddToCost)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AddToSubTotal)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BarCode).HasMaxLength(30);
            entity.Property(e => e.BatchBalQty).HasColumnType("decimal(38, 8)");
            entity.Property(e => e.CalcByPercent).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.DeliveryDate).HasColumnType("datetime");
            entity.Property(e => e.DeptDesc2).HasMaxLength(40);
            entity.Property(e => e.DeptDescription).HasMaxLength(40);
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Desc2).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.Discount).HasMaxLength(20);
            entity.Property(e => e.DiscountAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DocTaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.DtlType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EstimatedDeliveryDate).HasMaxLength(20);
            entity.Property(e => e.FontStyle).HasMaxLength(8);
            entity.Property(e => e.FromDocNo).HasMaxLength(30);
            entity.Property(e => e.FromDocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.FullTransferOption)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.GovtTaxCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.ItemBaseUom)
                .HasMaxLength(8)
                .HasColumnName("ItemBaseUOM");
            entity.Property(e => e.ItemBrand).HasMaxLength(20);
            entity.Property(e => e.ItemBrandDescription).HasMaxLength(40);
            entity.Property(e => e.ItemCategory).HasMaxLength(20);
            entity.Property(e => e.ItemCategoryDescription).HasMaxLength(40);
            entity.Property(e => e.ItemClass).HasMaxLength(20);
            entity.Property(e => e.ItemClassDescription).HasMaxLength(40);
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.ItemDesc2).HasMaxLength(100);
            entity.Property(e => e.ItemDescription).HasMaxLength(100);
            entity.Property(e => e.ItemGroup).HasMaxLength(8);
            entity.Property(e => e.ItemGroupDescription).HasMaxLength(40);
            entity.Property(e => e.ItemType).HasMaxLength(12);
            entity.Property(e => e.ItemTypeDescription).HasMaxLength(40);
            entity.Property(e => e.ItemUdfWarDay).HasColumnName("ItemUDF_WarDay");
            entity.Property(e => e.LeadTime).HasMaxLength(40);
            entity.Property(e => e.LocalSubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalSubTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.LocationAddr1).HasMaxLength(40);
            entity.Property(e => e.LocationAddr2).HasMaxLength(40);
            entity.Property(e => e.LocationAddr3).HasMaxLength(40);
            entity.Property(e => e.LocationAddr4).HasMaxLength(40);
            entity.Property(e => e.LocationBalQty).HasColumnType("decimal(38, 8)");
            entity.Property(e => e.LocationContact).HasMaxLength(40);
            entity.Property(e => e.LocationDesc2).HasMaxLength(80);
            entity.Property(e => e.LocationDescription).HasMaxLength(80);
            entity.Property(e => e.LocationFax1).HasMaxLength(25);
            entity.Property(e => e.LocationFax2).HasMaxLength(25);
            entity.Property(e => e.LocationPhone1).HasMaxLength(25);
            entity.Property(e => e.LocationPhone2).HasMaxLength(25);
            entity.Property(e => e.LocationPostCode).HasMaxLength(10);
            entity.Property(e => e.MainItem)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Numbering).HasMaxLength(6);
            entity.Property(e => e.PrintOut)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.ProjectDesc2).HasMaxLength(40);
            entity.Property(e => e.ProjectDescription).HasMaxLength(40);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Remark).HasMaxLength(100);
            entity.Property(e => e.Shelf).HasMaxLength(20);
            entity.Property(e => e.SmallestQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SmallestUnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SubTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SubTotalWithTax).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxAccNo).HasMaxLength(12);
            entity.Property(e => e.TaxCode).HasMaxLength(14);
            entity.Property(e => e.TaxCodeDescription).HasMaxLength(120);
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TransferedQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.UnitPriceAfterDiscount).HasColumnType("decimal(38, 13)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
            entity.Property(e => e.UombalQty)
                .HasColumnType("decimal(38, 8)")
                .HasColumnName("UOMBalQty");
            entity.Property(e => e.Uomcost)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMCost");
            entity.Property(e => e.UomitemCode)
                .HasMaxLength(30)
                .HasColumnName("UOMItemCode");
            entity.Property(e => e.Uomprice)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMPrice");
            entity.Property(e => e.Uomprice2)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMPrice2");
            entity.Property(e => e.Uomrate)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMRate");
            entity.Property(e => e.UomrealCost)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMRealCost");
            entity.Property(e => e.UserUom)
                .HasMaxLength(8)
                .HasColumnName("UserUOM");
            entity.Property(e => e.Volume).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.VolumeUom)
                .HasMaxLength(8)
                .HasColumnName("VolumeUOM");
            entity.Property(e => e.Weight).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.WeightUom)
                .HasMaxLength(8)
                .HasColumnName("WeightUOM");
            entity.Property(e => e.YourPodate)
                .HasColumnType("datetime")
                .HasColumnName("YourPODate");
            entity.Property(e => e.YourPono)
                .HasMaxLength(25)
                .HasColumnName("YourPONo");
        });

        modelBuilder.Entity<VConsignmentReturn>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vConsignmentReturn");

            entity.Property(e => e.Attention).HasMaxLength(40);
            entity.Property(e => e.BranchAccNo).HasMaxLength(12);
            entity.Property(e => e.BranchAddress1).HasMaxLength(40);
            entity.Property(e => e.BranchAddress2).HasMaxLength(40);
            entity.Property(e => e.BranchAddress3).HasMaxLength(40);
            entity.Property(e => e.BranchAddress4).HasMaxLength(40);
            entity.Property(e => e.BranchAreaCode).HasMaxLength(12);
            entity.Property(e => e.BranchCode).HasMaxLength(20);
            entity.Property(e => e.BranchContact).HasMaxLength(40);
            entity.Property(e => e.BranchEmailAddress).HasMaxLength(80);
            entity.Property(e => e.BranchFax1).HasMaxLength(25);
            entity.Property(e => e.BranchFax2).HasMaxLength(25);
            entity.Property(e => e.BranchIsActive)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BranchMobile).HasMaxLength(25);
            entity.Property(e => e.BranchName).HasMaxLength(100);
            entity.Property(e => e.BranchPhone1).HasMaxLength(25);
            entity.Property(e => e.BranchPhone2).HasMaxLength(25);
            entity.Property(e => e.BranchPostCode).HasMaxLength(10);
            entity.Property(e => e.BranchPurchaseAgent).HasMaxLength(12);
            entity.Property(e => e.BranchSalesAgent).HasMaxLength(12);
            entity.Property(e => e.CanSync)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.CreatedUserName).HasMaxLength(40);
            entity.Property(e => e.CurrencyCode).HasMaxLength(5);
            entity.Property(e => e.CurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.CurrencySymbol).HasMaxLength(6);
            entity.Property(e => e.CurrencyWord).HasMaxLength(40);
            entity.Property(e => e.CurrencyWord2).HasMaxLength(40);
            entity.Property(e => e.DebtorAddress1).HasMaxLength(40);
            entity.Property(e => e.DebtorAddress2).HasMaxLength(40);
            entity.Property(e => e.DebtorAddress3).HasMaxLength(40);
            entity.Property(e => e.DebtorAddress4).HasMaxLength(40);
            entity.Property(e => e.DebtorAgingOn)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DebtorAreaCode).HasMaxLength(12);
            entity.Property(e => e.DebtorAreaDesc2).HasMaxLength(40);
            entity.Property(e => e.DebtorAreaDescription).HasMaxLength(40);
            entity.Property(e => e.DebtorAttention).HasMaxLength(40);
            entity.Property(e => e.DebtorCode).HasMaxLength(12);
            entity.Property(e => e.DebtorCompanyName).HasMaxLength(100);
            entity.Property(e => e.DebtorCreatedTimestamp).HasColumnType("datetime");
            entity.Property(e => e.DebtorCreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("DebtorCreatedUserID");
            entity.Property(e => e.DebtorCreditLimit).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DebtorCurrencyCode).HasMaxLength(5);
            entity.Property(e => e.DebtorDeliverAddress1).HasMaxLength(40);
            entity.Property(e => e.DebtorDeliverAddress2).HasMaxLength(40);
            entity.Property(e => e.DebtorDeliverAddress3).HasMaxLength(40);
            entity.Property(e => e.DebtorDeliverAddress4).HasMaxLength(40);
            entity.Property(e => e.DebtorDeliverPostCode).HasMaxLength(10);
            entity.Property(e => e.DebtorDesc2).HasMaxLength(100);
            entity.Property(e => e.DebtorDisplayTerm).HasMaxLength(30);
            entity.Property(e => e.DebtorEmailAddress).HasMaxLength(200);
            entity.Property(e => e.DebtorExemptExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.DebtorExemptNo).HasMaxLength(60);
            entity.Property(e => e.DebtorFax1).HasMaxLength(25);
            entity.Property(e => e.DebtorFax2).HasMaxLength(25);
            entity.Property(e => e.DebtorGstregisterNo)
                .HasMaxLength(20)
                .HasColumnName("DebtorGSTRegisterNo");
            entity.Property(e => e.DebtorGststatusVerifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("DebtorGSTStatusVerifiedDate");
            entity.Property(e => e.DebtorInclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DebtorLastModified).HasColumnType("datetime");
            entity.Property(e => e.DebtorLastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("DebtorLastModifiedUserID");
            entity.Property(e => e.DebtorMobile).HasMaxLength(25);
            entity.Property(e => e.DebtorName).HasMaxLength(100);
            entity.Property(e => e.DebtorNatureOfBusiness).HasMaxLength(40);
            entity.Property(e => e.DebtorOverdueLimit).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DebtorParentAccNo).HasMaxLength(12);
            entity.Property(e => e.DebtorPhone1).HasMaxLength(25);
            entity.Property(e => e.DebtorPhone2).HasMaxLength(25);
            entity.Property(e => e.DebtorPostCode).HasMaxLength(10);
            entity.Property(e => e.DebtorPriceCategory).HasMaxLength(12);
            entity.Property(e => e.DebtorRegisterNo).HasMaxLength(30);
            entity.Property(e => e.DebtorSalesAgent).HasMaxLength(12);
            entity.Property(e => e.DebtorSalesAgentDesc2).HasMaxLength(40);
            entity.Property(e => e.DebtorSalesAgentDescription).HasMaxLength(40);
            entity.Property(e => e.DebtorSelfBilledApprovalNo).HasMaxLength(30);
            entity.Property(e => e.DebtorSstregisterNo)
                .HasMaxLength(20)
                .HasColumnName("DebtorSSTRegisterNo");
            entity.Property(e => e.DebtorStatementType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DebtorTaxCode).HasMaxLength(14);
            entity.Property(e => e.DebtorTaxRegisterNo).HasMaxLength(30);
            entity.Property(e => e.DebtorType).HasMaxLength(20);
            entity.Property(e => e.DebtorTypeDesc2).HasMaxLength(40);
            entity.Property(e => e.DebtorTypeDescription).HasMaxLength(40);
            entity.Property(e => e.DebtorUdfBangsa1)
                .HasMaxLength(50)
                .HasColumnName("DebtorUDF_Bangsa1");
            entity.Property(e => e.DebtorUdfBangsa2)
                .HasMaxLength(50)
                .HasColumnName("DebtorUDF_Bangsa2");
            entity.Property(e => e.DebtorUdfJantina)
                .HasMaxLength(20)
                .HasColumnName("DebtorUDF_Jantina");
            entity.Property(e => e.DebtorUdfKerakyatan)
                .HasMaxLength(50)
                .HasColumnName("DebtorUDF_Kerakyatan");
            entity.Property(e => e.DebtorUdfTarikhLahir)
                .HasColumnType("datetime")
                .HasColumnName("DebtorUDF_TarikhLahir");
            entity.Property(e => e.DebtorWebUrl)
                .HasMaxLength(80)
                .HasColumnName("DebtorWebURL");
            entity.Property(e => e.DeliverAddr1).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr2).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr3).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr4).HasMaxLength(40);
            entity.Property(e => e.DeliverContact).HasMaxLength(40);
            entity.Property(e => e.DeliverFax1).HasMaxLength(25);
            entity.Property(e => e.DeliverPhone1).HasMaxLength(25);
            entity.Property(e => e.Description).HasMaxLength(80);
            entity.Property(e => e.DisplayTerm).HasMaxLength(30);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.DocStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Fax1).HasMaxLength(25);
            entity.Property(e => e.FcgainAccount)
                .HasMaxLength(12)
                .HasColumnName("FCGainAccount");
            entity.Property(e => e.FclossAccount)
                .HasMaxLength(12)
                .HasColumnName("FCLossAccount");
            entity.Property(e => e.GainLossJournalType).HasMaxLength(10);
            entity.Property(e => e.InclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.InvAddr1).HasMaxLength(40);
            entity.Property(e => e.InvAddr2).HasMaxLength(40);
            entity.Property(e => e.InvAddr3).HasMaxLength(40);
            entity.Property(e => e.InvAddr4).HasMaxLength(40);
            entity.Property(e => e.IsDebtorTaxRegistered)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.LastModifiedUserName).HasMaxLength(40);
            entity.Property(e => e.LocalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.NetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Phone1).HasMaxLength(25);
            entity.Property(e => e.Ref).HasMaxLength(40);
            entity.Property(e => e.RefDocNo).HasMaxLength(30);
            entity.Property(e => e.Remark1).HasMaxLength(40);
            entity.Property(e => e.Remark2).HasMaxLength(40);
            entity.Property(e => e.Remark3).HasMaxLength(40);
            entity.Property(e => e.Remark4).HasMaxLength(40);
            entity.Property(e => e.SalesAgent).HasMaxLength(12);
            entity.Property(e => e.SalesAgentDesc2).HasMaxLength(40);
            entity.Property(e => e.SalesAgentDescription).HasMaxLength(40);
            entity.Property(e => e.SalesExemptionExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.SalesExemptionNo).HasMaxLength(60);
            entity.Property(e => e.SalesLocation).HasMaxLength(8);
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyExTax).HasColumnType("decimal(38, 13)");
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ToTaxCurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.Total).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalWithTax).HasColumnType("decimal(20, 2)");
        });

        modelBuilder.Entity<VConsignmentReturnDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vConsignmentReturnDetail");

            entity.Property(e => e.AddToCost)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AddToSubTotal)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BarCode).HasMaxLength(30);
            entity.Property(e => e.CalcByPercent).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.DeptDesc2).HasMaxLength(40);
            entity.Property(e => e.DeptDescription).HasMaxLength(40);
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Desc2).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.Discount).HasMaxLength(20);
            entity.Property(e => e.DiscountAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DocTaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.DtlType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FontStyle).HasMaxLength(8);
            entity.Property(e => e.FromDocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.FullTransferOption)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.GovtTaxCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.ItemBaseUom)
                .HasMaxLength(8)
                .HasColumnName("ItemBaseUOM");
            entity.Property(e => e.ItemBrand).HasMaxLength(20);
            entity.Property(e => e.ItemBrandDescription).HasMaxLength(40);
            entity.Property(e => e.ItemCategory).HasMaxLength(20);
            entity.Property(e => e.ItemCategoryDescription).HasMaxLength(40);
            entity.Property(e => e.ItemClass).HasMaxLength(20);
            entity.Property(e => e.ItemClassDescription).HasMaxLength(40);
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.ItemDesc2).HasMaxLength(100);
            entity.Property(e => e.ItemDescription).HasMaxLength(100);
            entity.Property(e => e.ItemGroup).HasMaxLength(8);
            entity.Property(e => e.ItemGroupDescription).HasMaxLength(40);
            entity.Property(e => e.ItemType).HasMaxLength(12);
            entity.Property(e => e.ItemTypeDescription).HasMaxLength(40);
            entity.Property(e => e.ItemUdfWarDay).HasColumnName("ItemUDF_WarDay");
            entity.Property(e => e.LeadTime).HasMaxLength(40);
            entity.Property(e => e.LocalSubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalSubTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.LocationAddr1).HasMaxLength(40);
            entity.Property(e => e.LocationAddr2).HasMaxLength(40);
            entity.Property(e => e.LocationAddr3).HasMaxLength(40);
            entity.Property(e => e.LocationAddr4).HasMaxLength(40);
            entity.Property(e => e.LocationBalQty).HasColumnType("decimal(38, 8)");
            entity.Property(e => e.LocationContact).HasMaxLength(40);
            entity.Property(e => e.LocationDesc2).HasMaxLength(80);
            entity.Property(e => e.LocationDescription).HasMaxLength(80);
            entity.Property(e => e.LocationFax1).HasMaxLength(25);
            entity.Property(e => e.LocationFax2).HasMaxLength(25);
            entity.Property(e => e.LocationPhone1).HasMaxLength(25);
            entity.Property(e => e.LocationPhone2).HasMaxLength(25);
            entity.Property(e => e.LocationPostCode).HasMaxLength(10);
            entity.Property(e => e.MainItem)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Numbering).HasMaxLength(6);
            entity.Property(e => e.PrintOut)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.ProjectDesc2).HasMaxLength(40);
            entity.Property(e => e.ProjectDescription).HasMaxLength(40);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Remark).HasMaxLength(100);
            entity.Property(e => e.Shelf).HasMaxLength(20);
            entity.Property(e => e.SmallestQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SmallestUnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SubTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SubTotalWithTax).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxAccNo).HasMaxLength(12);
            entity.Property(e => e.TaxCode).HasMaxLength(14);
            entity.Property(e => e.TaxCodeDescription).HasMaxLength(120);
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.UnitPriceAfterDiscount).HasColumnType("decimal(38, 13)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
            entity.Property(e => e.UombalQty)
                .HasColumnType("decimal(38, 8)")
                .HasColumnName("UOMBalQty");
            entity.Property(e => e.Uomcost)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMCost");
            entity.Property(e => e.UomitemCode)
                .HasMaxLength(30)
                .HasColumnName("UOMItemCode");
            entity.Property(e => e.Uomprice)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMPrice");
            entity.Property(e => e.Uomprice2)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMPrice2");
            entity.Property(e => e.Uomrate)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMRate");
            entity.Property(e => e.UomrealCost)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMRealCost");
            entity.Property(e => e.UserUom)
                .HasMaxLength(8)
                .HasColumnName("UserUOM");
            entity.Property(e => e.Volume).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.VolumeUom)
                .HasMaxLength(8)
                .HasColumnName("VolumeUOM");
            entity.Property(e => e.Weight).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.WeightUom)
                .HasMaxLength(8)
                .HasColumnName("WeightUOM");
            entity.Property(e => e.YourPodate)
                .HasColumnType("datetime")
                .HasColumnName("YourPODate");
            entity.Property(e => e.YourPono)
                .HasMaxLength(25)
                .HasColumnName("YourPONo");
        });

        modelBuilder.Entity<VConsignmentReturnSubDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vConsignmentReturnSubDetail");

            entity.Property(e => e.AddToCost)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Desc2).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.DocTaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.GovtTaxCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.LocalSubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.PrintOut)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Remark).HasMaxLength(100);
            entity.Property(e => e.SubQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxAccNo).HasMaxLength(12);
            entity.Property(e => e.TaxCode).HasMaxLength(14);
            entity.Property(e => e.TaxCodeDescription).HasMaxLength(120);
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<VConsignmentSubDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vConsignmentSubDetail");

            entity.Property(e => e.AddToCost)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Desc2).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.DocTaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.GovtTaxCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.LocalSubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.PrintOut)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Remark).HasMaxLength(100);
            entity.Property(e => e.SubQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxAccNo).HasMaxLength(12);
            entity.Property(e => e.TaxCode).HasMaxLength(14);
            entity.Property(e => e.TaxCodeDescription).HasMaxLength(120);
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<VCreditNote>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vCreditNote");

            entity.Property(e => e.Attention).HasMaxLength(40);
            entity.Property(e => e.AuthorisationNumberForCertifiedExporter)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.BranchAccNo).HasMaxLength(12);
            entity.Property(e => e.BranchAddress1).HasMaxLength(40);
            entity.Property(e => e.BranchAddress2).HasMaxLength(40);
            entity.Property(e => e.BranchAddress3).HasMaxLength(40);
            entity.Property(e => e.BranchAddress4).HasMaxLength(40);
            entity.Property(e => e.BranchAreaCode).HasMaxLength(12);
            entity.Property(e => e.BranchCode).HasMaxLength(20);
            entity.Property(e => e.BranchContact).HasMaxLength(40);
            entity.Property(e => e.BranchEmailAddress).HasMaxLength(80);
            entity.Property(e => e.BranchFax1).HasMaxLength(25);
            entity.Property(e => e.BranchFax2).HasMaxLength(25);
            entity.Property(e => e.BranchIsActive)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BranchMobile).HasMaxLength(25);
            entity.Property(e => e.BranchName).HasMaxLength(100);
            entity.Property(e => e.BranchPhone1).HasMaxLength(25);
            entity.Property(e => e.BranchPhone2).HasMaxLength(25);
            entity.Property(e => e.BranchPostCode).HasMaxLength(10);
            entity.Property(e => e.BranchPurchaseAgent).HasMaxLength(12);
            entity.Property(e => e.BranchSalesAgent).HasMaxLength(12);
            entity.Property(e => e.CanSync)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Cntype)
                .HasMaxLength(12)
                .HasColumnName("CNType");
            entity.Property(e => e.CntypeDescription)
                .HasMaxLength(40)
                .HasColumnName("CNTypeDescription");
            entity.Property(e => e.CnudfSuperAppId)
                .HasMaxLength(32)
                .HasColumnName("CNUDF_SuperAppId");
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.CreatedUserName).HasMaxLength(40);
            entity.Property(e => e.CurrencyCode).HasMaxLength(5);
            entity.Property(e => e.CurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.CurrencySymbol).HasMaxLength(6);
            entity.Property(e => e.CurrencyWord).HasMaxLength(40);
            entity.Property(e => e.CurrencyWord2).HasMaxLength(40);
            entity.Property(e => e.DebtorAddress1).HasMaxLength(40);
            entity.Property(e => e.DebtorAddress2).HasMaxLength(40);
            entity.Property(e => e.DebtorAddress3).HasMaxLength(40);
            entity.Property(e => e.DebtorAddress4).HasMaxLength(40);
            entity.Property(e => e.DebtorAgingOn)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DebtorAreaCode).HasMaxLength(12);
            entity.Property(e => e.DebtorAreaDesc2).HasMaxLength(40);
            entity.Property(e => e.DebtorAreaDescription).HasMaxLength(40);
            entity.Property(e => e.DebtorAttention).HasMaxLength(40);
            entity.Property(e => e.DebtorCode).HasMaxLength(12);
            entity.Property(e => e.DebtorCompanyName).HasMaxLength(100);
            entity.Property(e => e.DebtorCreatedTimestamp).HasColumnType("datetime");
            entity.Property(e => e.DebtorCreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("DebtorCreatedUserID");
            entity.Property(e => e.DebtorCreditLimit).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DebtorCurrencyCode).HasMaxLength(5);
            entity.Property(e => e.DebtorDeliverAddress1).HasMaxLength(40);
            entity.Property(e => e.DebtorDeliverAddress2).HasMaxLength(40);
            entity.Property(e => e.DebtorDeliverAddress3).HasMaxLength(40);
            entity.Property(e => e.DebtorDeliverAddress4).HasMaxLength(40);
            entity.Property(e => e.DebtorDeliverPostCode).HasMaxLength(10);
            entity.Property(e => e.DebtorDesc2).HasMaxLength(100);
            entity.Property(e => e.DebtorDisplayTerm).HasMaxLength(30);
            entity.Property(e => e.DebtorEmailAddress).HasMaxLength(200);
            entity.Property(e => e.DebtorExemptExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.DebtorExemptNo).HasMaxLength(60);
            entity.Property(e => e.DebtorFax1).HasMaxLength(25);
            entity.Property(e => e.DebtorFax2).HasMaxLength(25);
            entity.Property(e => e.DebtorGstregisterNo)
                .HasMaxLength(20)
                .HasColumnName("DebtorGSTRegisterNo");
            entity.Property(e => e.DebtorGststatusVerifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("DebtorGSTStatusVerifiedDate");
            entity.Property(e => e.DebtorInclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DebtorLastModified).HasColumnType("datetime");
            entity.Property(e => e.DebtorLastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("DebtorLastModifiedUserID");
            entity.Property(e => e.DebtorMobile).HasMaxLength(25);
            entity.Property(e => e.DebtorName).HasMaxLength(100);
            entity.Property(e => e.DebtorNatureOfBusiness).HasMaxLength(40);
            entity.Property(e => e.DebtorOverdueLimit).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DebtorParentAccNo).HasMaxLength(12);
            entity.Property(e => e.DebtorPhone1).HasMaxLength(25);
            entity.Property(e => e.DebtorPhone2).HasMaxLength(25);
            entity.Property(e => e.DebtorPostCode).HasMaxLength(10);
            entity.Property(e => e.DebtorPriceCategory).HasMaxLength(12);
            entity.Property(e => e.DebtorRegisterNo).HasMaxLength(30);
            entity.Property(e => e.DebtorSalesAgent).HasMaxLength(12);
            entity.Property(e => e.DebtorSalesAgentDesc2).HasMaxLength(40);
            entity.Property(e => e.DebtorSalesAgentDescription).HasMaxLength(40);
            entity.Property(e => e.DebtorSelfBilledApprovalNo).HasMaxLength(30);
            entity.Property(e => e.DebtorSstregisterNo)
                .HasMaxLength(20)
                .HasColumnName("DebtorSSTRegisterNo");
            entity.Property(e => e.DebtorStatementType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DebtorTaxCode).HasMaxLength(14);
            entity.Property(e => e.DebtorTaxRegisterNo).HasMaxLength(30);
            entity.Property(e => e.DebtorType).HasMaxLength(20);
            entity.Property(e => e.DebtorTypeDesc2).HasMaxLength(40);
            entity.Property(e => e.DebtorTypeDescription).HasMaxLength(40);
            entity.Property(e => e.DebtorUdfBangsa1)
                .HasMaxLength(50)
                .HasColumnName("DebtorUDF_Bangsa1");
            entity.Property(e => e.DebtorUdfBangsa2)
                .HasMaxLength(50)
                .HasColumnName("DebtorUDF_Bangsa2");
            entity.Property(e => e.DebtorUdfJantina)
                .HasMaxLength(20)
                .HasColumnName("DebtorUDF_Jantina");
            entity.Property(e => e.DebtorUdfKerakyatan)
                .HasMaxLength(50)
                .HasColumnName("DebtorUDF_Kerakyatan");
            entity.Property(e => e.DebtorUdfTarikhLahir)
                .HasColumnType("datetime")
                .HasColumnName("DebtorUDF_TarikhLahir");
            entity.Property(e => e.DebtorWebUrl)
                .HasMaxLength(80)
                .HasColumnName("DebtorWebURL");
            entity.Property(e => e.DeliverAddr1).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr2).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr3).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr4).HasMaxLength(40);
            entity.Property(e => e.DeliverContact).HasMaxLength(40);
            entity.Property(e => e.DeliverFax1).HasMaxLength(25);
            entity.Property(e => e.DeliverPhone1).HasMaxLength(25);
            entity.Property(e => e.DeliveryTaxEntityId).HasColumnName("DeliveryTaxEntityID");
            entity.Property(e => e.Description).HasMaxLength(80);
            entity.Property(e => e.DisplayTerm).HasMaxLength(30);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.DocStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EinvoiceAipsubmissionDateTime)
                .HasColumnType("datetime")
                .HasColumnName("EInvoiceAIPSubmissionDateTime");
            entity.Property(e => e.EinvoiceCancelDateTime)
                .HasColumnType("datetime")
                .HasColumnName("EInvoiceCancelDateTime");
            entity.Property(e => e.EinvoiceCancelReason)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceCancelReason");
            entity.Property(e => e.EinvoiceError)
                .IsUnicode(false)
                .HasColumnName("EInvoiceError");
            entity.Property(e => e.EinvoiceIssueDateTime)
                .HasColumnType("datetime")
                .HasColumnName("EInvoiceIssueDateTime");
            entity.Property(e => e.EinvoiceStatus)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceStatus");
            entity.Property(e => e.EinvoiceSubmissionDateTime)
                .HasColumnType("datetime")
                .HasColumnName("EInvoiceSubmissionDateTime");
            entity.Property(e => e.EinvoiceSubmissionUuid)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceSubmissionUuid");
            entity.Property(e => e.EinvoiceTraceId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceTraceId");
            entity.Property(e => e.EinvoiceUuid)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceUuid");
            entity.Property(e => e.EinvoiceValidatedDateTime)
                .HasColumnType("datetime")
                .HasColumnName("EInvoiceValidatedDateTime");
            entity.Property(e => e.EinvoiceValidationLink)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("EInvoiceValidationLink");
            entity.Property(e => e.ExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Fax1).HasMaxLength(25);
            entity.Property(e => e.FcgainAccount)
                .HasMaxLength(12)
                .HasColumnName("FCGainAccount");
            entity.Property(e => e.FclossAccount)
                .HasMaxLength(12)
                .HasColumnName("FCLossAccount");
            entity.Property(e => e.FinalTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer1TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Footer2Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer2TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Footer3Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer3TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.FreeTradeAgreementInformation)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.FreightAllowanceChargeAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.FreightAllowanceChargeReason)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.GainLossJournalType).HasMaxLength(10);
            entity.Property(e => e.InclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Incoterms)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.InvAddr1).HasMaxLength(40);
            entity.Property(e => e.InvAddr2).HasMaxLength(40);
            entity.Property(e => e.InvAddr3).HasMaxLength(40);
            entity.Property(e => e.InvAddr4).HasMaxLength(40);
            entity.Property(e => e.IsDebtorTaxRegistered)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.IsRoundAdj)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.LastModifiedUserName).HasMaxLength(40);
            entity.Property(e => e.LocalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.MemberAddress1).HasMaxLength(40);
            entity.Property(e => e.MemberAddress2).HasMaxLength(40);
            entity.Property(e => e.MemberAddress3).HasMaxLength(40);
            entity.Property(e => e.MemberAddress4).HasMaxLength(40);
            entity.Property(e => e.MemberDepartment).HasMaxLength(30);
            entity.Property(e => e.MemberDirectFax).HasMaxLength(25);
            entity.Property(e => e.MemberDirectPhone).HasMaxLength(25);
            entity.Property(e => e.MemberEmailAddress).HasMaxLength(200);
            entity.Property(e => e.MemberImaddress)
                .HasMaxLength(40)
                .HasColumnName("MemberIMAddress");
            entity.Property(e => e.MemberMobilePhone).HasMaxLength(25);
            entity.Property(e => e.MemberName).HasMaxLength(100);
            entity.Property(e => e.MemberNo).HasMaxLength(20);
            entity.Property(e => e.MemberTitle).HasMaxLength(40);
            entity.Property(e => e.MultiPrice).HasMaxLength(8);
            entity.Property(e => e.NetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.OurInvoiceNo).HasMaxLength(100);
            entity.Property(e => e.Phone1).HasMaxLength(25);
            entity.Property(e => e.PostToGl)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PostToGL");
            entity.Property(e => e.PostToStock)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Reason).HasMaxLength(80);
            entity.Property(e => e.Ref).HasMaxLength(40);
            entity.Property(e => e.RefDocNo).HasMaxLength(30);
            entity.Property(e => e.ReferenceNumberOfCustomsFormNo1And9)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.ReferenceNumberOfCustomsFormNo2)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.Remark1).HasMaxLength(40);
            entity.Property(e => e.Remark2).HasMaxLength(40);
            entity.Property(e => e.Remark3).HasMaxLength(40);
            entity.Property(e => e.Remark4).HasMaxLength(40);
            entity.Property(e => e.RoundAdj).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SalesAgent).HasMaxLength(12);
            entity.Property(e => e.SalesAgentDesc2).HasMaxLength(40);
            entity.Property(e => e.SalesAgentDescription).HasMaxLength(40);
            entity.Property(e => e.SalesExemptionExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.SalesExemptionNo).HasMaxLength(60);
            entity.Property(e => e.SalesLocation).HasMaxLength(8);
            entity.Property(e => e.SubmitEinvoice)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SubmitEInvoice");
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyExTax).HasColumnType("decimal(38, 13)");
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxDate).HasColumnType("datetime");
            entity.Property(e => e.TaxDocNo).HasMaxLength(20);
            entity.Property(e => e.TaxEntityId).HasColumnName("TaxEntityID");
            entity.Property(e => e.TaxRegisterNo).HasMaxLength(30);
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ToTaxCurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.Total).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalBonusPoint).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalWithTax).HasColumnType("decimal(20, 2)");
        });

        modelBuilder.Entity<VCreditNoteDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vCreditNoteDetail");

            entity.Property(e => e.AccNo).HasMaxLength(12);
            entity.Property(e => e.AddToCost)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AddToSubTotal)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BarCode).HasMaxLength(30);
            entity.Property(e => e.BatchBalQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.BatchDescription).HasMaxLength(40);
            entity.Property(e => e.BatchExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.BatchItemCode).HasMaxLength(30);
            entity.Property(e => e.BatchManufacturedDate).HasColumnType("datetime");
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.BonusPoint).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.CalcByPercent).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Classification)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.DeptDesc2).HasMaxLength(40);
            entity.Property(e => e.DeptDescription).HasMaxLength(40);
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Desc2).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.Discount).HasMaxLength(20);
            entity.Property(e => e.DiscountAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DocTaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.DtlType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Focqty)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("FOCQty");
            entity.Property(e => e.FontStyle).HasMaxLength(8);
            entity.Property(e => e.FromDocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.FullTransferOption)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.GovtTaxCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.ItemBaseUom)
                .HasMaxLength(8)
                .HasColumnName("ItemBaseUOM");
            entity.Property(e => e.ItemBrand).HasMaxLength(20);
            entity.Property(e => e.ItemBrandDescription).HasMaxLength(40);
            entity.Property(e => e.ItemCategory).HasMaxLength(20);
            entity.Property(e => e.ItemCategoryDescription).HasMaxLength(40);
            entity.Property(e => e.ItemClass).HasMaxLength(20);
            entity.Property(e => e.ItemClassDescription).HasMaxLength(40);
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.ItemDesc2).HasMaxLength(100);
            entity.Property(e => e.ItemDescription).HasMaxLength(100);
            entity.Property(e => e.ItemGroup).HasMaxLength(8);
            entity.Property(e => e.ItemGroupDescription).HasMaxLength(40);
            entity.Property(e => e.ItemType).HasMaxLength(12);
            entity.Property(e => e.ItemTypeDescription).HasMaxLength(40);
            entity.Property(e => e.ItemUdfWarDay).HasColumnName("ItemUDF_WarDay");
            entity.Property(e => e.LeadTime).HasMaxLength(40);
            entity.Property(e => e.LocalSubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalSubTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxAdjustment).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.LocationAddr1).HasMaxLength(40);
            entity.Property(e => e.LocationAddr2).HasMaxLength(40);
            entity.Property(e => e.LocationAddr3).HasMaxLength(40);
            entity.Property(e => e.LocationAddr4).HasMaxLength(40);
            entity.Property(e => e.LocationBalQty).HasColumnType("decimal(38, 8)");
            entity.Property(e => e.LocationContact).HasMaxLength(40);
            entity.Property(e => e.LocationDesc2).HasMaxLength(80);
            entity.Property(e => e.LocationDescription).HasMaxLength(80);
            entity.Property(e => e.LocationFax1).HasMaxLength(25);
            entity.Property(e => e.LocationFax2).HasMaxLength(25);
            entity.Property(e => e.LocationPhone1).HasMaxLength(25);
            entity.Property(e => e.LocationPhone2).HasMaxLength(25);
            entity.Property(e => e.LocationPostCode).HasMaxLength(10);
            entity.Property(e => e.MainItem)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Numbering).HasMaxLength(6);
            entity.Property(e => e.OriginCountryCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.PrintOut)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.ProjectDesc2).HasMaxLength(40);
            entity.Property(e => e.ProjectDescription).HasMaxLength(40);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SalesExemptionNo).HasMaxLength(60);
            entity.Property(e => e.Shelf).HasMaxLength(20);
            entity.Property(e => e.SmallestQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SmallestUnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SubTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SubTotalWithTax).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.TariffCode).HasMaxLength(12);
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxAccNo).HasMaxLength(12);
            entity.Property(e => e.TaxAdjustment).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCode).HasMaxLength(14);
            entity.Property(e => e.TaxCodeDescription).HasMaxLength(120);
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxPermitNo).HasMaxLength(20);
            entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.UnitPriceAfterDiscount).HasColumnType("decimal(38, 13)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
            entity.Property(e => e.UombalQty)
                .HasColumnType("decimal(38, 8)")
                .HasColumnName("UOMBalQty");
            entity.Property(e => e.Uomcost)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMCost");
            entity.Property(e => e.UomitemCode)
                .HasMaxLength(30)
                .HasColumnName("UOMItemCode");
            entity.Property(e => e.Uomprice)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMPrice");
            entity.Property(e => e.Uomprice2)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMPrice2");
            entity.Property(e => e.Uomrate)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMRate");
            entity.Property(e => e.UomrealCost)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMRealCost");
            entity.Property(e => e.UserUom)
                .HasMaxLength(8)
                .HasColumnName("UserUOM");
            entity.Property(e => e.Volume).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.VolumeUom)
                .HasMaxLength(8)
                .HasColumnName("VolumeUOM");
            entity.Property(e => e.Weight).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.WeightUom)
                .HasMaxLength(8)
                .HasColumnName("WeightUOM");
            entity.Property(e => e.YourPodate)
                .HasColumnType("datetime")
                .HasColumnName("YourPODate");
            entity.Property(e => e.YourPono)
                .HasMaxLength(25)
                .HasColumnName("YourPONo");
        });

        modelBuilder.Entity<VCreditNoteSubDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vCreditNoteSubDetail");

            entity.Property(e => e.AddToCost)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.Classification)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.Desc2).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.DocTaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.GovtTaxCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.LocalSubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.OriginCountryCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.PrintOut)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SalesExemptionNo).HasMaxLength(60);
            entity.Property(e => e.SubQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TariffCode).HasMaxLength(12);
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxAccNo).HasMaxLength(12);
            entity.Property(e => e.TaxCode).HasMaxLength(14);
            entity.Property(e => e.TaxCodeDescription).HasMaxLength(120);
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<VCreditor>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vCreditor");

            entity.Property(e => e.CreditorAddress1).HasMaxLength(40);
            entity.Property(e => e.CreditorAddress2).HasMaxLength(40);
            entity.Property(e => e.CreditorAddress3).HasMaxLength(40);
            entity.Property(e => e.CreditorAddress4).HasMaxLength(40);
            entity.Property(e => e.CreditorAgingOn)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreditorAreaCode).HasMaxLength(12);
            entity.Property(e => e.CreditorAreaDesc2).HasMaxLength(40);
            entity.Property(e => e.CreditorAreaDescription).HasMaxLength(40);
            entity.Property(e => e.CreditorAttention).HasMaxLength(40);
            entity.Property(e => e.CreditorCode).HasMaxLength(12);
            entity.Property(e => e.CreditorCompanyName).HasMaxLength(100);
            entity.Property(e => e.CreditorCreatedTimestamp).HasColumnType("datetime");
            entity.Property(e => e.CreditorCreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreditorCreatedUserID");
            entity.Property(e => e.CreditorCreditLimit).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.CreditorCurrencyCode).HasMaxLength(5);
            entity.Property(e => e.CreditorDeliverAddress1).HasMaxLength(40);
            entity.Property(e => e.CreditorDeliverAddress2).HasMaxLength(40);
            entity.Property(e => e.CreditorDeliverAddress3).HasMaxLength(40);
            entity.Property(e => e.CreditorDeliverAddress4).HasMaxLength(40);
            entity.Property(e => e.CreditorDeliverPostCode).HasMaxLength(10);
            entity.Property(e => e.CreditorDesc2).HasMaxLength(100);
            entity.Property(e => e.CreditorDisplayTerm).HasMaxLength(30);
            entity.Property(e => e.CreditorEmailAddress).HasMaxLength(200);
            entity.Property(e => e.CreditorExemptExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.CreditorExemptNo).HasMaxLength(60);
            entity.Property(e => e.CreditorFax1).HasMaxLength(25);
            entity.Property(e => e.CreditorFax2).HasMaxLength(25);
            entity.Property(e => e.CreditorGstregisterNo)
                .HasMaxLength(20)
                .HasColumnName("CreditorGSTRegisterNo");
            entity.Property(e => e.CreditorGststatusVerifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("CreditorGSTStatusVerifiedDate");
            entity.Property(e => e.CreditorInclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreditorLastModified).HasColumnType("datetime");
            entity.Property(e => e.CreditorLastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreditorLastModifiedUserID");
            entity.Property(e => e.CreditorMobile).HasMaxLength(25);
            entity.Property(e => e.CreditorNatureOfBusiness).HasMaxLength(40);
            entity.Property(e => e.CreditorOverdueLimit).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.CreditorParentAccNo).HasMaxLength(12);
            entity.Property(e => e.CreditorPhone1).HasMaxLength(25);
            entity.Property(e => e.CreditorPhone2).HasMaxLength(25);
            entity.Property(e => e.CreditorPostCode).HasMaxLength(10);
            entity.Property(e => e.CreditorPriceCategory).HasMaxLength(12);
            entity.Property(e => e.CreditorPurchaseAgent).HasMaxLength(12);
            entity.Property(e => e.CreditorPurchaseAgentDesc2).HasMaxLength(40);
            entity.Property(e => e.CreditorPurchaseAgentDescription).HasMaxLength(40);
            entity.Property(e => e.CreditorRegisterNo).HasMaxLength(30);
            entity.Property(e => e.CreditorSelfBilledApprovalNo).HasMaxLength(30);
            entity.Property(e => e.CreditorSstregisterNo)
                .HasMaxLength(20)
                .HasColumnName("CreditorSSTRegisterNo");
            entity.Property(e => e.CreditorStatementType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreditorTaxCode).HasMaxLength(14);
            entity.Property(e => e.CreditorTaxRegisterNo).HasMaxLength(30);
            entity.Property(e => e.CreditorType).HasMaxLength(20);
            entity.Property(e => e.CreditorTypeDesc2).HasMaxLength(40);
            entity.Property(e => e.CreditorTypeDescription).HasMaxLength(40);
            entity.Property(e => e.CreditorWebUrl)
                .HasMaxLength(80)
                .HasColumnName("CreditorWebURL");
        });

        modelBuilder.Entity<VCreditorArea>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vCreditorArea");

            entity.Property(e => e.CreditorAreaCode).HasMaxLength(12);
            entity.Property(e => e.CreditorAreaDesc2).HasMaxLength(40);
            entity.Property(e => e.CreditorAreaDescription).HasMaxLength(40);
        });

        modelBuilder.Entity<VCreditorPurchaseAgent>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vCreditorPurchaseAgent");

            entity.Property(e => e.CreditorPurchaseAgent).HasMaxLength(12);
            entity.Property(e => e.CreditorPurchaseAgentDesc2).HasMaxLength(40);
            entity.Property(e => e.CreditorPurchaseAgentDescription).HasMaxLength(40);
        });

        modelBuilder.Entity<VCreditorType>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vCreditorType");

            entity.Property(e => e.CreditorType).HasMaxLength(20);
            entity.Property(e => e.CreditorTypeDesc2).HasMaxLength(40);
            entity.Property(e => e.CreditorTypeDescription).HasMaxLength(40);
        });

        modelBuilder.Entity<VCsgnitemBatchBalQty>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vCSGNItemBatchBalQty");

            entity.Property(e => e.BalQty).HasColumnType("decimal(38, 6)");
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.ItemCode).HasMaxLength(30);
        });

        modelBuilder.Entity<VCurrency>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vCurrency");

            entity.Property(e => e.CurrencyCode).HasMaxLength(5);
            entity.Property(e => e.CurrencySymbol).HasMaxLength(6);
            entity.Property(e => e.CurrencyWord).HasMaxLength(40);
            entity.Property(e => e.CurrencyWord2).HasMaxLength(40);
            entity.Property(e => e.FcgainAccount)
                .HasMaxLength(12)
                .HasColumnName("FCGainAccount");
            entity.Property(e => e.FclossAccount)
                .HasMaxLength(12)
                .HasColumnName("FCLossAccount");
            entity.Property(e => e.GainLossJournalType).HasMaxLength(10);
        });

        modelBuilder.Entity<VDebitNote>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vDebitNote");

            entity.Property(e => e.Attention).HasMaxLength(40);
            entity.Property(e => e.AuthorisationNumberForCertifiedExporter)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.BranchAccNo).HasMaxLength(12);
            entity.Property(e => e.BranchAddress1).HasMaxLength(40);
            entity.Property(e => e.BranchAddress2).HasMaxLength(40);
            entity.Property(e => e.BranchAddress3).HasMaxLength(40);
            entity.Property(e => e.BranchAddress4).HasMaxLength(40);
            entity.Property(e => e.BranchAreaCode).HasMaxLength(12);
            entity.Property(e => e.BranchCode).HasMaxLength(20);
            entity.Property(e => e.BranchContact).HasMaxLength(40);
            entity.Property(e => e.BranchEmailAddress).HasMaxLength(80);
            entity.Property(e => e.BranchFax1).HasMaxLength(25);
            entity.Property(e => e.BranchFax2).HasMaxLength(25);
            entity.Property(e => e.BranchIsActive)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BranchMobile).HasMaxLength(25);
            entity.Property(e => e.BranchName).HasMaxLength(100);
            entity.Property(e => e.BranchPhone1).HasMaxLength(25);
            entity.Property(e => e.BranchPhone2).HasMaxLength(25);
            entity.Property(e => e.BranchPostCode).HasMaxLength(10);
            entity.Property(e => e.BranchPurchaseAgent).HasMaxLength(12);
            entity.Property(e => e.BranchSalesAgent).HasMaxLength(12);
            entity.Property(e => e.CanSync)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.CreatedUserName).HasMaxLength(40);
            entity.Property(e => e.CurrencyCode).HasMaxLength(5);
            entity.Property(e => e.CurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.CurrencySymbol).HasMaxLength(6);
            entity.Property(e => e.CurrencyWord).HasMaxLength(40);
            entity.Property(e => e.CurrencyWord2).HasMaxLength(40);
            entity.Property(e => e.DebtorAddress1).HasMaxLength(40);
            entity.Property(e => e.DebtorAddress2).HasMaxLength(40);
            entity.Property(e => e.DebtorAddress3).HasMaxLength(40);
            entity.Property(e => e.DebtorAddress4).HasMaxLength(40);
            entity.Property(e => e.DebtorAgingOn)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DebtorAreaCode).HasMaxLength(12);
            entity.Property(e => e.DebtorAreaDesc2).HasMaxLength(40);
            entity.Property(e => e.DebtorAreaDescription).HasMaxLength(40);
            entity.Property(e => e.DebtorAttention).HasMaxLength(40);
            entity.Property(e => e.DebtorCode).HasMaxLength(12);
            entity.Property(e => e.DebtorCompanyName).HasMaxLength(100);
            entity.Property(e => e.DebtorCreatedTimestamp).HasColumnType("datetime");
            entity.Property(e => e.DebtorCreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("DebtorCreatedUserID");
            entity.Property(e => e.DebtorCreditLimit).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DebtorCurrencyCode).HasMaxLength(5);
            entity.Property(e => e.DebtorDeliverAddress1).HasMaxLength(40);
            entity.Property(e => e.DebtorDeliverAddress2).HasMaxLength(40);
            entity.Property(e => e.DebtorDeliverAddress3).HasMaxLength(40);
            entity.Property(e => e.DebtorDeliverAddress4).HasMaxLength(40);
            entity.Property(e => e.DebtorDeliverPostCode).HasMaxLength(10);
            entity.Property(e => e.DebtorDesc2).HasMaxLength(100);
            entity.Property(e => e.DebtorDisplayTerm).HasMaxLength(30);
            entity.Property(e => e.DebtorEmailAddress).HasMaxLength(200);
            entity.Property(e => e.DebtorExemptExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.DebtorExemptNo).HasMaxLength(60);
            entity.Property(e => e.DebtorFax1).HasMaxLength(25);
            entity.Property(e => e.DebtorFax2).HasMaxLength(25);
            entity.Property(e => e.DebtorGstregisterNo)
                .HasMaxLength(20)
                .HasColumnName("DebtorGSTRegisterNo");
            entity.Property(e => e.DebtorGststatusVerifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("DebtorGSTStatusVerifiedDate");
            entity.Property(e => e.DebtorInclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DebtorLastModified).HasColumnType("datetime");
            entity.Property(e => e.DebtorLastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("DebtorLastModifiedUserID");
            entity.Property(e => e.DebtorMobile).HasMaxLength(25);
            entity.Property(e => e.DebtorName).HasMaxLength(100);
            entity.Property(e => e.DebtorNatureOfBusiness).HasMaxLength(40);
            entity.Property(e => e.DebtorOverdueLimit).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DebtorParentAccNo).HasMaxLength(12);
            entity.Property(e => e.DebtorPhone1).HasMaxLength(25);
            entity.Property(e => e.DebtorPhone2).HasMaxLength(25);
            entity.Property(e => e.DebtorPostCode).HasMaxLength(10);
            entity.Property(e => e.DebtorPriceCategory).HasMaxLength(12);
            entity.Property(e => e.DebtorRegisterNo).HasMaxLength(30);
            entity.Property(e => e.DebtorSalesAgent).HasMaxLength(12);
            entity.Property(e => e.DebtorSalesAgentDesc2).HasMaxLength(40);
            entity.Property(e => e.DebtorSalesAgentDescription).HasMaxLength(40);
            entity.Property(e => e.DebtorSelfBilledApprovalNo).HasMaxLength(30);
            entity.Property(e => e.DebtorSstregisterNo)
                .HasMaxLength(20)
                .HasColumnName("DebtorSSTRegisterNo");
            entity.Property(e => e.DebtorStatementType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DebtorTaxCode).HasMaxLength(14);
            entity.Property(e => e.DebtorTaxRegisterNo).HasMaxLength(30);
            entity.Property(e => e.DebtorType).HasMaxLength(20);
            entity.Property(e => e.DebtorTypeDesc2).HasMaxLength(40);
            entity.Property(e => e.DebtorTypeDescription).HasMaxLength(40);
            entity.Property(e => e.DebtorUdfBangsa1)
                .HasMaxLength(50)
                .HasColumnName("DebtorUDF_Bangsa1");
            entity.Property(e => e.DebtorUdfBangsa2)
                .HasMaxLength(50)
                .HasColumnName("DebtorUDF_Bangsa2");
            entity.Property(e => e.DebtorUdfJantina)
                .HasMaxLength(20)
                .HasColumnName("DebtorUDF_Jantina");
            entity.Property(e => e.DebtorUdfKerakyatan)
                .HasMaxLength(50)
                .HasColumnName("DebtorUDF_Kerakyatan");
            entity.Property(e => e.DebtorUdfTarikhLahir)
                .HasColumnType("datetime")
                .HasColumnName("DebtorUDF_TarikhLahir");
            entity.Property(e => e.DebtorWebUrl)
                .HasMaxLength(80)
                .HasColumnName("DebtorWebURL");
            entity.Property(e => e.DeliverAddr1).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr2).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr3).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr4).HasMaxLength(40);
            entity.Property(e => e.DeliverContact).HasMaxLength(40);
            entity.Property(e => e.DeliverFax1).HasMaxLength(25);
            entity.Property(e => e.DeliverPhone1).HasMaxLength(25);
            entity.Property(e => e.DeliveryTaxEntityId).HasColumnName("DeliveryTaxEntityID");
            entity.Property(e => e.Description).HasMaxLength(80);
            entity.Property(e => e.DisplayTerm).HasMaxLength(30);
            entity.Property(e => e.Dntype)
                .HasMaxLength(12)
                .HasColumnName("DNType");
            entity.Property(e => e.DntypeDescription)
                .HasMaxLength(40)
                .HasColumnName("DNTypeDescription");
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.DocStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EinvoiceAipsubmissionDateTime)
                .HasColumnType("datetime")
                .HasColumnName("EInvoiceAIPSubmissionDateTime");
            entity.Property(e => e.EinvoiceCancelDateTime)
                .HasColumnType("datetime")
                .HasColumnName("EInvoiceCancelDateTime");
            entity.Property(e => e.EinvoiceCancelReason)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceCancelReason");
            entity.Property(e => e.EinvoiceError)
                .IsUnicode(false)
                .HasColumnName("EInvoiceError");
            entity.Property(e => e.EinvoiceIssueDateTime)
                .HasColumnType("datetime")
                .HasColumnName("EInvoiceIssueDateTime");
            entity.Property(e => e.EinvoiceStatus)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceStatus");
            entity.Property(e => e.EinvoiceSubmissionDateTime)
                .HasColumnType("datetime")
                .HasColumnName("EInvoiceSubmissionDateTime");
            entity.Property(e => e.EinvoiceSubmissionUuid)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceSubmissionUuid");
            entity.Property(e => e.EinvoiceTraceId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceTraceId");
            entity.Property(e => e.EinvoiceUuid)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceUuid");
            entity.Property(e => e.EinvoiceValidatedDateTime)
                .HasColumnType("datetime")
                .HasColumnName("EInvoiceValidatedDateTime");
            entity.Property(e => e.EinvoiceValidationLink)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("EInvoiceValidationLink");
            entity.Property(e => e.ExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Fax1).HasMaxLength(25);
            entity.Property(e => e.FcgainAccount)
                .HasMaxLength(12)
                .HasColumnName("FCGainAccount");
            entity.Property(e => e.FclossAccount)
                .HasMaxLength(12)
                .HasColumnName("FCLossAccount");
            entity.Property(e => e.Footer1Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer1TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Footer2Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer2TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Footer3Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer3TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.FreeTradeAgreementInformation)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.FreightAllowanceChargeAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.FreightAllowanceChargeReason)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.GainLossJournalType).HasMaxLength(10);
            entity.Property(e => e.InclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Incoterms)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.InvAddr1).HasMaxLength(40);
            entity.Property(e => e.InvAddr2).HasMaxLength(40);
            entity.Property(e => e.InvAddr3).HasMaxLength(40);
            entity.Property(e => e.InvAddr4).HasMaxLength(40);
            entity.Property(e => e.IsDebtorTaxRegistered)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.LastModifiedUserName).HasMaxLength(40);
            entity.Property(e => e.LocalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.MemberAddress1).HasMaxLength(40);
            entity.Property(e => e.MemberAddress2).HasMaxLength(40);
            entity.Property(e => e.MemberAddress3).HasMaxLength(40);
            entity.Property(e => e.MemberAddress4).HasMaxLength(40);
            entity.Property(e => e.MemberDepartment).HasMaxLength(30);
            entity.Property(e => e.MemberDirectFax).HasMaxLength(25);
            entity.Property(e => e.MemberDirectPhone).HasMaxLength(25);
            entity.Property(e => e.MemberEmailAddress).HasMaxLength(200);
            entity.Property(e => e.MemberImaddress)
                .HasMaxLength(40)
                .HasColumnName("MemberIMAddress");
            entity.Property(e => e.MemberMobilePhone).HasMaxLength(25);
            entity.Property(e => e.MemberName).HasMaxLength(100);
            entity.Property(e => e.MemberNo).HasMaxLength(20);
            entity.Property(e => e.MemberTitle).HasMaxLength(40);
            entity.Property(e => e.MultiPrice).HasMaxLength(8);
            entity.Property(e => e.NetOutstanding).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.NetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.OurInvoiceNo).HasMaxLength(100);
            entity.Property(e => e.Phone1).HasMaxLength(25);
            entity.Property(e => e.PostToGl)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PostToGL");
            entity.Property(e => e.PostToStock)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ReallocatePurchaseByProject)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ReallocatePurchaseByProjectJedocNo)
                .HasMaxLength(30)
                .HasColumnName("ReallocatePurchaseByProjectJEDocNo");
            entity.Property(e => e.Reason).HasMaxLength(80);
            entity.Property(e => e.Ref).HasMaxLength(40);
            entity.Property(e => e.RefDocNo).HasMaxLength(30);
            entity.Property(e => e.ReferenceNumberOfCustomsFormNo1And9)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.ReferenceNumberOfCustomsFormNo2)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.Remark1).HasMaxLength(40);
            entity.Property(e => e.Remark2).HasMaxLength(40);
            entity.Property(e => e.Remark3).HasMaxLength(40);
            entity.Property(e => e.Remark4).HasMaxLength(40);
            entity.Property(e => e.SalesAgent).HasMaxLength(12);
            entity.Property(e => e.SalesAgentDesc2).HasMaxLength(40);
            entity.Property(e => e.SalesAgentDescription).HasMaxLength(40);
            entity.Property(e => e.SalesExemptionExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.SalesExemptionNo).HasMaxLength(60);
            entity.Property(e => e.SalesLocation).HasMaxLength(8);
            entity.Property(e => e.SubmitEinvoice)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SubmitEInvoice");
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyExTax).HasColumnType("decimal(38, 13)");
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxDate).HasColumnType("datetime");
            entity.Property(e => e.TaxDocNo).HasMaxLength(20);
            entity.Property(e => e.TaxEntityId).HasColumnName("TaxEntityID");
            entity.Property(e => e.TaxRegisterNo).HasMaxLength(30);
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ToTaxCurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.Total).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalBonusPoint).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalWithTax).HasColumnType("decimal(20, 2)");
        });

        modelBuilder.Entity<VDebitNoteDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vDebitNoteDetail");

            entity.Property(e => e.AccNo).HasMaxLength(12);
            entity.Property(e => e.AddToCost)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AddToSubTotal)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BarCode).HasMaxLength(30);
            entity.Property(e => e.BatchBalQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.BatchDescription).HasMaxLength(40);
            entity.Property(e => e.BatchExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.BatchItemCode).HasMaxLength(30);
            entity.Property(e => e.BatchManufacturedDate).HasColumnType("datetime");
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.BonusPoint).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.CalcByPercent).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Classification)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.DeptDesc2).HasMaxLength(40);
            entity.Property(e => e.DeptDescription).HasMaxLength(40);
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Desc2).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.Discount).HasMaxLength(20);
            entity.Property(e => e.DiscountAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DocTaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.DtlType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Focqty)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("FOCQty");
            entity.Property(e => e.FontStyle).HasMaxLength(8);
            entity.Property(e => e.GovtTaxCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.ItemBaseUom)
                .HasMaxLength(8)
                .HasColumnName("ItemBaseUOM");
            entity.Property(e => e.ItemBrand).HasMaxLength(20);
            entity.Property(e => e.ItemBrandDescription).HasMaxLength(40);
            entity.Property(e => e.ItemCategory).HasMaxLength(20);
            entity.Property(e => e.ItemCategoryDescription).HasMaxLength(40);
            entity.Property(e => e.ItemClass).HasMaxLength(20);
            entity.Property(e => e.ItemClassDescription).HasMaxLength(40);
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.ItemDesc2).HasMaxLength(100);
            entity.Property(e => e.ItemDescription).HasMaxLength(100);
            entity.Property(e => e.ItemGroup).HasMaxLength(8);
            entity.Property(e => e.ItemGroupDescription).HasMaxLength(40);
            entity.Property(e => e.ItemType).HasMaxLength(12);
            entity.Property(e => e.ItemTypeDescription).HasMaxLength(40);
            entity.Property(e => e.ItemUdfWarDay).HasColumnName("ItemUDF_WarDay");
            entity.Property(e => e.LeadTime).HasMaxLength(40);
            entity.Property(e => e.LocalSubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalSubTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxAdjustment).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.LocationAddr1).HasMaxLength(40);
            entity.Property(e => e.LocationAddr2).HasMaxLength(40);
            entity.Property(e => e.LocationAddr3).HasMaxLength(40);
            entity.Property(e => e.LocationAddr4).HasMaxLength(40);
            entity.Property(e => e.LocationBalQty).HasColumnType("decimal(38, 8)");
            entity.Property(e => e.LocationContact).HasMaxLength(40);
            entity.Property(e => e.LocationDesc2).HasMaxLength(80);
            entity.Property(e => e.LocationDescription).HasMaxLength(80);
            entity.Property(e => e.LocationFax1).HasMaxLength(25);
            entity.Property(e => e.LocationFax2).HasMaxLength(25);
            entity.Property(e => e.LocationPhone1).HasMaxLength(25);
            entity.Property(e => e.LocationPhone2).HasMaxLength(25);
            entity.Property(e => e.LocationPostCode).HasMaxLength(10);
            entity.Property(e => e.MainItem)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Numbering).HasMaxLength(6);
            entity.Property(e => e.OriginCountryCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.PrintOut)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.ProjectDesc2).HasMaxLength(40);
            entity.Property(e => e.ProjectDescription).HasMaxLength(40);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SalesExemptionNo).HasMaxLength(60);
            entity.Property(e => e.Shelf).HasMaxLength(20);
            entity.Property(e => e.SmallestQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SmallestUnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SubTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SubTotalWithTax).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.TariffCode).HasMaxLength(12);
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxAccNo).HasMaxLength(12);
            entity.Property(e => e.TaxAdjustment).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCode).HasMaxLength(14);
            entity.Property(e => e.TaxCodeDescription).HasMaxLength(120);
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxPermitNo).HasMaxLength(20);
            entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.UnitPriceAfterDiscount).HasColumnType("decimal(38, 13)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
            entity.Property(e => e.UombalQty)
                .HasColumnType("decimal(38, 8)")
                .HasColumnName("UOMBalQty");
            entity.Property(e => e.Uomcost)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMCost");
            entity.Property(e => e.UomitemCode)
                .HasMaxLength(30)
                .HasColumnName("UOMItemCode");
            entity.Property(e => e.Uomprice)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMPrice");
            entity.Property(e => e.Uomprice2)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMPrice2");
            entity.Property(e => e.Uomrate)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMRate");
            entity.Property(e => e.UomrealCost)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMRealCost");
            entity.Property(e => e.UserUom)
                .HasMaxLength(8)
                .HasColumnName("UserUOM");
            entity.Property(e => e.Volume).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.VolumeUom)
                .HasMaxLength(8)
                .HasColumnName("VolumeUOM");
            entity.Property(e => e.Weight).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.WeightUom)
                .HasMaxLength(8)
                .HasColumnName("WeightUOM");
            entity.Property(e => e.YourPodate)
                .HasColumnType("datetime")
                .HasColumnName("YourPODate");
            entity.Property(e => e.YourPono)
                .HasMaxLength(25)
                .HasColumnName("YourPONo");
        });

        modelBuilder.Entity<VDebitNoteSubDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vDebitNoteSubDetail");

            entity.Property(e => e.AddToCost)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.Classification)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.Desc2).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.DocTaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.GovtTaxCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.LocalSubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.OriginCountryCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.PrintOut)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SalesExemptionNo).HasMaxLength(60);
            entity.Property(e => e.SubQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TariffCode).HasMaxLength(12);
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxAccNo).HasMaxLength(12);
            entity.Property(e => e.TaxCode).HasMaxLength(14);
            entity.Property(e => e.TaxCodeDescription).HasMaxLength(120);
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<VDebtor>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vDebtor");

            entity.Property(e => e.DebtorAddress1).HasMaxLength(40);
            entity.Property(e => e.DebtorAddress2).HasMaxLength(40);
            entity.Property(e => e.DebtorAddress3).HasMaxLength(40);
            entity.Property(e => e.DebtorAddress4).HasMaxLength(40);
            entity.Property(e => e.DebtorAgingOn)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DebtorAreaCode).HasMaxLength(12);
            entity.Property(e => e.DebtorAreaDesc2).HasMaxLength(40);
            entity.Property(e => e.DebtorAreaDescription).HasMaxLength(40);
            entity.Property(e => e.DebtorAttention).HasMaxLength(40);
            entity.Property(e => e.DebtorCode).HasMaxLength(12);
            entity.Property(e => e.DebtorCompanyName).HasMaxLength(100);
            entity.Property(e => e.DebtorCreatedTimestamp).HasColumnType("datetime");
            entity.Property(e => e.DebtorCreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("DebtorCreatedUserID");
            entity.Property(e => e.DebtorCreditLimit).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DebtorCurrencyCode).HasMaxLength(5);
            entity.Property(e => e.DebtorDeliverAddress1).HasMaxLength(40);
            entity.Property(e => e.DebtorDeliverAddress2).HasMaxLength(40);
            entity.Property(e => e.DebtorDeliverAddress3).HasMaxLength(40);
            entity.Property(e => e.DebtorDeliverAddress4).HasMaxLength(40);
            entity.Property(e => e.DebtorDeliverPostCode).HasMaxLength(10);
            entity.Property(e => e.DebtorDesc2).HasMaxLength(100);
            entity.Property(e => e.DebtorDisplayTerm).HasMaxLength(30);
            entity.Property(e => e.DebtorEmailAddress).HasMaxLength(200);
            entity.Property(e => e.DebtorExemptExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.DebtorExemptNo).HasMaxLength(60);
            entity.Property(e => e.DebtorFax1).HasMaxLength(25);
            entity.Property(e => e.DebtorFax2).HasMaxLength(25);
            entity.Property(e => e.DebtorGstregisterNo)
                .HasMaxLength(20)
                .HasColumnName("DebtorGSTRegisterNo");
            entity.Property(e => e.DebtorGststatusVerifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("DebtorGSTStatusVerifiedDate");
            entity.Property(e => e.DebtorInclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DebtorLastModified).HasColumnType("datetime");
            entity.Property(e => e.DebtorLastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("DebtorLastModifiedUserID");
            entity.Property(e => e.DebtorMobile).HasMaxLength(25);
            entity.Property(e => e.DebtorNatureOfBusiness).HasMaxLength(40);
            entity.Property(e => e.DebtorOverdueLimit).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DebtorParentAccNo).HasMaxLength(12);
            entity.Property(e => e.DebtorPhone1).HasMaxLength(25);
            entity.Property(e => e.DebtorPhone2).HasMaxLength(25);
            entity.Property(e => e.DebtorPostCode).HasMaxLength(10);
            entity.Property(e => e.DebtorPriceCategory).HasMaxLength(12);
            entity.Property(e => e.DebtorRegisterNo).HasMaxLength(30);
            entity.Property(e => e.DebtorSalesAgent).HasMaxLength(12);
            entity.Property(e => e.DebtorSalesAgentDesc2).HasMaxLength(40);
            entity.Property(e => e.DebtorSalesAgentDescription).HasMaxLength(40);
            entity.Property(e => e.DebtorSelfBilledApprovalNo).HasMaxLength(30);
            entity.Property(e => e.DebtorSstregisterNo)
                .HasMaxLength(20)
                .HasColumnName("DebtorSSTRegisterNo");
            entity.Property(e => e.DebtorStatementType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DebtorTaxCode).HasMaxLength(14);
            entity.Property(e => e.DebtorTaxRegisterNo).HasMaxLength(30);
            entity.Property(e => e.DebtorType).HasMaxLength(20);
            entity.Property(e => e.DebtorTypeDesc2).HasMaxLength(40);
            entity.Property(e => e.DebtorTypeDescription).HasMaxLength(40);
            entity.Property(e => e.DebtorUdfBangsa1)
                .HasMaxLength(50)
                .HasColumnName("DebtorUDF_Bangsa1");
            entity.Property(e => e.DebtorUdfBangsa2)
                .HasMaxLength(50)
                .HasColumnName("DebtorUDF_Bangsa2");
            entity.Property(e => e.DebtorUdfJantina)
                .HasMaxLength(20)
                .HasColumnName("DebtorUDF_Jantina");
            entity.Property(e => e.DebtorUdfKerakyatan)
                .HasMaxLength(50)
                .HasColumnName("DebtorUDF_Kerakyatan");
            entity.Property(e => e.DebtorUdfTarikhLahir)
                .HasColumnType("datetime")
                .HasColumnName("DebtorUDF_TarikhLahir");
            entity.Property(e => e.DebtorWebUrl)
                .HasMaxLength(80)
                .HasColumnName("DebtorWebURL");
            entity.Property(e => e.IsDebtorTaxRegistered)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VDebtorArea>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vDebtorArea");

            entity.Property(e => e.DebtorAreaCode).HasMaxLength(12);
            entity.Property(e => e.DebtorAreaDesc2).HasMaxLength(40);
            entity.Property(e => e.DebtorAreaDescription).HasMaxLength(40);
        });

        modelBuilder.Entity<VDebtorSalesAgent>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vDebtorSalesAgent");

            entity.Property(e => e.DebtorSalesAgent).HasMaxLength(12);
            entity.Property(e => e.DebtorSalesAgentDesc2).HasMaxLength(40);
            entity.Property(e => e.DebtorSalesAgentDescription).HasMaxLength(40);
        });

        modelBuilder.Entity<VDebtorType>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vDebtorType");

            entity.Property(e => e.DebtorType).HasMaxLength(20);
            entity.Property(e => e.DebtorTypeDesc2).HasMaxLength(40);
            entity.Property(e => e.DebtorTypeDescription).HasMaxLength(40);
        });

        modelBuilder.Entity<VDeliveryOrder>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vDeliveryOrder");

            entity.Property(e => e.Attention).HasMaxLength(40);
            entity.Property(e => e.BranchAccNo).HasMaxLength(12);
            entity.Property(e => e.BranchAddress1).HasMaxLength(40);
            entity.Property(e => e.BranchAddress2).HasMaxLength(40);
            entity.Property(e => e.BranchAddress3).HasMaxLength(40);
            entity.Property(e => e.BranchAddress4).HasMaxLength(40);
            entity.Property(e => e.BranchAreaCode).HasMaxLength(12);
            entity.Property(e => e.BranchCode).HasMaxLength(20);
            entity.Property(e => e.BranchContact).HasMaxLength(40);
            entity.Property(e => e.BranchEmailAddress).HasMaxLength(80);
            entity.Property(e => e.BranchFax1).HasMaxLength(25);
            entity.Property(e => e.BranchFax2).HasMaxLength(25);
            entity.Property(e => e.BranchIsActive)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BranchMobile).HasMaxLength(25);
            entity.Property(e => e.BranchName).HasMaxLength(100);
            entity.Property(e => e.BranchPhone1).HasMaxLength(25);
            entity.Property(e => e.BranchPhone2).HasMaxLength(25);
            entity.Property(e => e.BranchPostCode).HasMaxLength(10);
            entity.Property(e => e.BranchPurchaseAgent).HasMaxLength(12);
            entity.Property(e => e.BranchSalesAgent).HasMaxLength(12);
            entity.Property(e => e.CanSync)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.CreatedUserName).HasMaxLength(40);
            entity.Property(e => e.CurrencyCode).HasMaxLength(5);
            entity.Property(e => e.CurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.CurrencySymbol).HasMaxLength(6);
            entity.Property(e => e.CurrencyWord).HasMaxLength(40);
            entity.Property(e => e.CurrencyWord2).HasMaxLength(40);
            entity.Property(e => e.DebtorAddress1).HasMaxLength(40);
            entity.Property(e => e.DebtorAddress2).HasMaxLength(40);
            entity.Property(e => e.DebtorAddress3).HasMaxLength(40);
            entity.Property(e => e.DebtorAddress4).HasMaxLength(40);
            entity.Property(e => e.DebtorAgingOn)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DebtorAreaCode).HasMaxLength(12);
            entity.Property(e => e.DebtorAreaDesc2).HasMaxLength(40);
            entity.Property(e => e.DebtorAreaDescription).HasMaxLength(40);
            entity.Property(e => e.DebtorAttention).HasMaxLength(40);
            entity.Property(e => e.DebtorCode).HasMaxLength(12);
            entity.Property(e => e.DebtorCompanyName).HasMaxLength(100);
            entity.Property(e => e.DebtorCreatedTimestamp).HasColumnType("datetime");
            entity.Property(e => e.DebtorCreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("DebtorCreatedUserID");
            entity.Property(e => e.DebtorCreditLimit).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DebtorCurrencyCode).HasMaxLength(5);
            entity.Property(e => e.DebtorDeliverAddress1).HasMaxLength(40);
            entity.Property(e => e.DebtorDeliverAddress2).HasMaxLength(40);
            entity.Property(e => e.DebtorDeliverAddress3).HasMaxLength(40);
            entity.Property(e => e.DebtorDeliverAddress4).HasMaxLength(40);
            entity.Property(e => e.DebtorDeliverPostCode).HasMaxLength(10);
            entity.Property(e => e.DebtorDesc2).HasMaxLength(100);
            entity.Property(e => e.DebtorDisplayTerm).HasMaxLength(30);
            entity.Property(e => e.DebtorEmailAddress).HasMaxLength(200);
            entity.Property(e => e.DebtorExemptExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.DebtorExemptNo).HasMaxLength(60);
            entity.Property(e => e.DebtorFax1).HasMaxLength(25);
            entity.Property(e => e.DebtorFax2).HasMaxLength(25);
            entity.Property(e => e.DebtorGstregisterNo)
                .HasMaxLength(20)
                .HasColumnName("DebtorGSTRegisterNo");
            entity.Property(e => e.DebtorGststatusVerifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("DebtorGSTStatusVerifiedDate");
            entity.Property(e => e.DebtorInclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DebtorLastModified).HasColumnType("datetime");
            entity.Property(e => e.DebtorLastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("DebtorLastModifiedUserID");
            entity.Property(e => e.DebtorMobile).HasMaxLength(25);
            entity.Property(e => e.DebtorName).HasMaxLength(100);
            entity.Property(e => e.DebtorNatureOfBusiness).HasMaxLength(40);
            entity.Property(e => e.DebtorOverdueLimit).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DebtorParentAccNo).HasMaxLength(12);
            entity.Property(e => e.DebtorPhone1).HasMaxLength(25);
            entity.Property(e => e.DebtorPhone2).HasMaxLength(25);
            entity.Property(e => e.DebtorPostCode).HasMaxLength(10);
            entity.Property(e => e.DebtorPriceCategory).HasMaxLength(12);
            entity.Property(e => e.DebtorRegisterNo).HasMaxLength(30);
            entity.Property(e => e.DebtorSalesAgent).HasMaxLength(12);
            entity.Property(e => e.DebtorSalesAgentDesc2).HasMaxLength(40);
            entity.Property(e => e.DebtorSalesAgentDescription).HasMaxLength(40);
            entity.Property(e => e.DebtorSelfBilledApprovalNo).HasMaxLength(30);
            entity.Property(e => e.DebtorSstregisterNo)
                .HasMaxLength(20)
                .HasColumnName("DebtorSSTRegisterNo");
            entity.Property(e => e.DebtorStatementType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DebtorTaxCode).HasMaxLength(14);
            entity.Property(e => e.DebtorTaxRegisterNo).HasMaxLength(30);
            entity.Property(e => e.DebtorType).HasMaxLength(20);
            entity.Property(e => e.DebtorTypeDesc2).HasMaxLength(40);
            entity.Property(e => e.DebtorTypeDescription).HasMaxLength(40);
            entity.Property(e => e.DebtorUdfBangsa1)
                .HasMaxLength(50)
                .HasColumnName("DebtorUDF_Bangsa1");
            entity.Property(e => e.DebtorUdfBangsa2)
                .HasMaxLength(50)
                .HasColumnName("DebtorUDF_Bangsa2");
            entity.Property(e => e.DebtorUdfJantina)
                .HasMaxLength(20)
                .HasColumnName("DebtorUDF_Jantina");
            entity.Property(e => e.DebtorUdfKerakyatan)
                .HasMaxLength(50)
                .HasColumnName("DebtorUDF_Kerakyatan");
            entity.Property(e => e.DebtorUdfTarikhLahir)
                .HasColumnType("datetime")
                .HasColumnName("DebtorUDF_TarikhLahir");
            entity.Property(e => e.DebtorWebUrl)
                .HasMaxLength(80)
                .HasColumnName("DebtorWebURL");
            entity.Property(e => e.DeliverAddr1).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr2).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr3).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr4).HasMaxLength(40);
            entity.Property(e => e.DeliverContact).HasMaxLength(40);
            entity.Property(e => e.DeliverFax1).HasMaxLength(25);
            entity.Property(e => e.DeliverPhone1).HasMaxLength(25);
            entity.Property(e => e.Description).HasMaxLength(80);
            entity.Property(e => e.DisplayTerm).HasMaxLength(30);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.DocStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DoudfSuperAppId)
                .HasMaxLength(32)
                .HasColumnName("DOUDF_SuperAppId");
            entity.Property(e => e.ExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Fax1).HasMaxLength(25);
            entity.Property(e => e.FcgainAccount)
                .HasMaxLength(12)
                .HasColumnName("FCGainAccount");
            entity.Property(e => e.FclossAccount)
                .HasMaxLength(12)
                .HasColumnName("FCLossAccount");
            entity.Property(e => e.Footer1Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer1TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Footer2Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer2TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Footer3Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer3TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.GainLossJournalType).HasMaxLength(10);
            entity.Property(e => e.InclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.InvAddr1).HasMaxLength(40);
            entity.Property(e => e.InvAddr2).HasMaxLength(40);
            entity.Property(e => e.InvAddr3).HasMaxLength(40);
            entity.Property(e => e.InvAddr4).HasMaxLength(40);
            entity.Property(e => e.IsDebtorTaxRegistered)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.LastModifiedUserName).HasMaxLength(40);
            entity.Property(e => e.LocalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.MultiPrice).HasMaxLength(8);
            entity.Property(e => e.NetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Phone1).HasMaxLength(25);
            entity.Property(e => e.PostToStock)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Ref).HasMaxLength(40);
            entity.Property(e => e.RefDocNo).HasMaxLength(30);
            entity.Property(e => e.Remark1).HasMaxLength(40);
            entity.Property(e => e.Remark2).HasMaxLength(40);
            entity.Property(e => e.Remark3).HasMaxLength(40);
            entity.Property(e => e.Remark4).HasMaxLength(40);
            entity.Property(e => e.SalesAgent).HasMaxLength(12);
            entity.Property(e => e.SalesAgentDesc2).HasMaxLength(40);
            entity.Property(e => e.SalesAgentDescription).HasMaxLength(40);
            entity.Property(e => e.SalesExemptionExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.SalesExemptionNo).HasMaxLength(60);
            entity.Property(e => e.SalesLocation).HasMaxLength(8);
            entity.Property(e => e.ShipInfo).HasMaxLength(40);
            entity.Property(e => e.ShipVia).HasMaxLength(20);
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyExTax).HasColumnType("decimal(38, 13)");
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxRegisterNo).HasMaxLength(30);
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ToDocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.ToTaxCurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.Total).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalWithTax).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.Transferable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VDeliveryOrderDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vDeliveryOrderDetail");

            entity.Property(e => e.AccNo).HasMaxLength(12);
            entity.Property(e => e.AddToCost)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AddToSubTotal)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BarCode).HasMaxLength(30);
            entity.Property(e => e.BatchBalQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.BatchDescription).HasMaxLength(40);
            entity.Property(e => e.BatchExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.BatchItemCode).HasMaxLength(30);
            entity.Property(e => e.BatchManufacturedDate).HasColumnType("datetime");
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.CalcByPercent).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.DeliveryDate).HasColumnType("datetime");
            entity.Property(e => e.DeptDesc2).HasMaxLength(40);
            entity.Property(e => e.DeptDescription).HasMaxLength(40);
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Desc2).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.Discount).HasMaxLength(20);
            entity.Property(e => e.DiscountAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DocTaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.DodtludfDeliveryFocQty)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("DODTLUDF_DeliveryFocQty");
            entity.Property(e => e.DodtludfDeliveryQty)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("DODTLUDF_DeliveryQty");
            entity.Property(e => e.DtlType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EstimatedDeliveryDate).HasMaxLength(20);
            entity.Property(e => e.Focqty)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("FOCQty");
            entity.Property(e => e.FoctransferedQty)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("FOCTransferedQty");
            entity.Property(e => e.FontStyle).HasMaxLength(8);
            entity.Property(e => e.FromDocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.FullTransferOption)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.GovtTaxCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.ItemBaseUom)
                .HasMaxLength(8)
                .HasColumnName("ItemBaseUOM");
            entity.Property(e => e.ItemBrand).HasMaxLength(20);
            entity.Property(e => e.ItemBrandDescription).HasMaxLength(40);
            entity.Property(e => e.ItemCategory).HasMaxLength(20);
            entity.Property(e => e.ItemCategoryDescription).HasMaxLength(40);
            entity.Property(e => e.ItemClass).HasMaxLength(20);
            entity.Property(e => e.ItemClassDescription).HasMaxLength(40);
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.ItemDesc2).HasMaxLength(100);
            entity.Property(e => e.ItemDescription).HasMaxLength(100);
            entity.Property(e => e.ItemGroup).HasMaxLength(8);
            entity.Property(e => e.ItemGroupDescription).HasMaxLength(40);
            entity.Property(e => e.ItemType).HasMaxLength(12);
            entity.Property(e => e.ItemTypeDescription).HasMaxLength(40);
            entity.Property(e => e.ItemUdfWarDay).HasColumnName("ItemUDF_WarDay");
            entity.Property(e => e.LeadTime).HasMaxLength(40);
            entity.Property(e => e.LocalSubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalSubTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.LocationAddr1).HasMaxLength(40);
            entity.Property(e => e.LocationAddr2).HasMaxLength(40);
            entity.Property(e => e.LocationAddr3).HasMaxLength(40);
            entity.Property(e => e.LocationAddr4).HasMaxLength(40);
            entity.Property(e => e.LocationBalQty).HasColumnType("decimal(38, 8)");
            entity.Property(e => e.LocationContact).HasMaxLength(40);
            entity.Property(e => e.LocationDesc2).HasMaxLength(80);
            entity.Property(e => e.LocationDescription).HasMaxLength(80);
            entity.Property(e => e.LocationFax1).HasMaxLength(25);
            entity.Property(e => e.LocationFax2).HasMaxLength(25);
            entity.Property(e => e.LocationPhone1).HasMaxLength(25);
            entity.Property(e => e.LocationPhone2).HasMaxLength(25);
            entity.Property(e => e.LocationPostCode).HasMaxLength(10);
            entity.Property(e => e.MainItem)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Numbering).HasMaxLength(6);
            entity.Property(e => e.PrintOut)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.ProjectDesc2).HasMaxLength(40);
            entity.Property(e => e.ProjectDescription).HasMaxLength(40);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SalesExemptionNo).HasMaxLength(60);
            entity.Property(e => e.Shelf).HasMaxLength(20);
            entity.Property(e => e.SmallestQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SmallestUnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SubTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SubTotalWithTax).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxAccNo).HasMaxLength(12);
            entity.Property(e => e.TaxCode).HasMaxLength(14);
            entity.Property(e => e.TaxCodeDescription).HasMaxLength(120);
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Transferable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TransferedQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.UnitPriceAfterDiscount).HasColumnType("decimal(38, 13)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
            entity.Property(e => e.UombalQty)
                .HasColumnType("decimal(38, 8)")
                .HasColumnName("UOMBalQty");
            entity.Property(e => e.Uomcost)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMCost");
            entity.Property(e => e.UomitemCode)
                .HasMaxLength(30)
                .HasColumnName("UOMItemCode");
            entity.Property(e => e.Uomprice)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMPrice");
            entity.Property(e => e.Uomprice2)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMPrice2");
            entity.Property(e => e.Uomrate)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMRate");
            entity.Property(e => e.UomrealCost)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMRealCost");
            entity.Property(e => e.UserUom)
                .HasMaxLength(8)
                .HasColumnName("UserUOM");
            entity.Property(e => e.Volume).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.VolumeUom)
                .HasMaxLength(8)
                .HasColumnName("VolumeUOM");
            entity.Property(e => e.Weight).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.WeightUom)
                .HasMaxLength(8)
                .HasColumnName("WeightUOM");
            entity.Property(e => e.YourPodate)
                .HasColumnType("datetime")
                .HasColumnName("YourPODate");
            entity.Property(e => e.YourPono)
                .HasMaxLength(25)
                .HasColumnName("YourPONo");
        });

        modelBuilder.Entity<VDeliveryOrderSubDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vDeliveryOrderSubDetail");

            entity.Property(e => e.AccNo).HasMaxLength(12);
            entity.Property(e => e.AddToCost)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.Desc2).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.DocTaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.DodtludfDeliveryFocQty)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("DODTLUDF_DeliveryFocQty");
            entity.Property(e => e.DodtludfDeliveryQty)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("DODTLUDF_DeliveryQty");
            entity.Property(e => e.GovtTaxCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.LocalSubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.PrintOut)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SalesExemptionNo).HasMaxLength(60);
            entity.Property(e => e.SubQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxAccNo).HasMaxLength(12);
            entity.Property(e => e.TaxCode).HasMaxLength(14);
            entity.Property(e => e.TaxCodeDescription).HasMaxLength(120);
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<VDeliveryReturn>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vDeliveryReturn");

            entity.Property(e => e.Attention).HasMaxLength(40);
            entity.Property(e => e.BranchAccNo).HasMaxLength(12);
            entity.Property(e => e.BranchAddress1).HasMaxLength(40);
            entity.Property(e => e.BranchAddress2).HasMaxLength(40);
            entity.Property(e => e.BranchAddress3).HasMaxLength(40);
            entity.Property(e => e.BranchAddress4).HasMaxLength(40);
            entity.Property(e => e.BranchAreaCode).HasMaxLength(12);
            entity.Property(e => e.BranchCode).HasMaxLength(20);
            entity.Property(e => e.BranchContact).HasMaxLength(40);
            entity.Property(e => e.BranchEmailAddress).HasMaxLength(80);
            entity.Property(e => e.BranchFax1).HasMaxLength(25);
            entity.Property(e => e.BranchFax2).HasMaxLength(25);
            entity.Property(e => e.BranchIsActive)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BranchMobile).HasMaxLength(25);
            entity.Property(e => e.BranchName).HasMaxLength(100);
            entity.Property(e => e.BranchPhone1).HasMaxLength(25);
            entity.Property(e => e.BranchPhone2).HasMaxLength(25);
            entity.Property(e => e.BranchPostCode).HasMaxLength(10);
            entity.Property(e => e.BranchPurchaseAgent).HasMaxLength(12);
            entity.Property(e => e.BranchSalesAgent).HasMaxLength(12);
            entity.Property(e => e.CanSync)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.CreatedUserName).HasMaxLength(40);
            entity.Property(e => e.CurrencyCode).HasMaxLength(5);
            entity.Property(e => e.CurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.CurrencySymbol).HasMaxLength(6);
            entity.Property(e => e.CurrencyWord).HasMaxLength(40);
            entity.Property(e => e.CurrencyWord2).HasMaxLength(40);
            entity.Property(e => e.DebtorAddress1).HasMaxLength(40);
            entity.Property(e => e.DebtorAddress2).HasMaxLength(40);
            entity.Property(e => e.DebtorAddress3).HasMaxLength(40);
            entity.Property(e => e.DebtorAddress4).HasMaxLength(40);
            entity.Property(e => e.DebtorAgingOn)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DebtorAreaCode).HasMaxLength(12);
            entity.Property(e => e.DebtorAreaDesc2).HasMaxLength(40);
            entity.Property(e => e.DebtorAreaDescription).HasMaxLength(40);
            entity.Property(e => e.DebtorAttention).HasMaxLength(40);
            entity.Property(e => e.DebtorCode).HasMaxLength(12);
            entity.Property(e => e.DebtorCompanyName).HasMaxLength(100);
            entity.Property(e => e.DebtorCreatedTimestamp).HasColumnType("datetime");
            entity.Property(e => e.DebtorCreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("DebtorCreatedUserID");
            entity.Property(e => e.DebtorCreditLimit).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DebtorCurrencyCode).HasMaxLength(5);
            entity.Property(e => e.DebtorDeliverAddress1).HasMaxLength(40);
            entity.Property(e => e.DebtorDeliverAddress2).HasMaxLength(40);
            entity.Property(e => e.DebtorDeliverAddress3).HasMaxLength(40);
            entity.Property(e => e.DebtorDeliverAddress4).HasMaxLength(40);
            entity.Property(e => e.DebtorDeliverPostCode).HasMaxLength(10);
            entity.Property(e => e.DebtorDesc2).HasMaxLength(100);
            entity.Property(e => e.DebtorDisplayTerm).HasMaxLength(30);
            entity.Property(e => e.DebtorEmailAddress).HasMaxLength(200);
            entity.Property(e => e.DebtorExemptExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.DebtorExemptNo).HasMaxLength(60);
            entity.Property(e => e.DebtorFax1).HasMaxLength(25);
            entity.Property(e => e.DebtorFax2).HasMaxLength(25);
            entity.Property(e => e.DebtorGstregisterNo)
                .HasMaxLength(20)
                .HasColumnName("DebtorGSTRegisterNo");
            entity.Property(e => e.DebtorGststatusVerifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("DebtorGSTStatusVerifiedDate");
            entity.Property(e => e.DebtorInclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DebtorLastModified).HasColumnType("datetime");
            entity.Property(e => e.DebtorLastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("DebtorLastModifiedUserID");
            entity.Property(e => e.DebtorMobile).HasMaxLength(25);
            entity.Property(e => e.DebtorName).HasMaxLength(100);
            entity.Property(e => e.DebtorNatureOfBusiness).HasMaxLength(40);
            entity.Property(e => e.DebtorOverdueLimit).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DebtorParentAccNo).HasMaxLength(12);
            entity.Property(e => e.DebtorPhone1).HasMaxLength(25);
            entity.Property(e => e.DebtorPhone2).HasMaxLength(25);
            entity.Property(e => e.DebtorPostCode).HasMaxLength(10);
            entity.Property(e => e.DebtorPriceCategory).HasMaxLength(12);
            entity.Property(e => e.DebtorRegisterNo).HasMaxLength(30);
            entity.Property(e => e.DebtorSalesAgent).HasMaxLength(12);
            entity.Property(e => e.DebtorSalesAgentDesc2).HasMaxLength(40);
            entity.Property(e => e.DebtorSalesAgentDescription).HasMaxLength(40);
            entity.Property(e => e.DebtorSelfBilledApprovalNo).HasMaxLength(30);
            entity.Property(e => e.DebtorSstregisterNo)
                .HasMaxLength(20)
                .HasColumnName("DebtorSSTRegisterNo");
            entity.Property(e => e.DebtorStatementType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DebtorTaxCode).HasMaxLength(14);
            entity.Property(e => e.DebtorTaxRegisterNo).HasMaxLength(30);
            entity.Property(e => e.DebtorType).HasMaxLength(20);
            entity.Property(e => e.DebtorTypeDesc2).HasMaxLength(40);
            entity.Property(e => e.DebtorTypeDescription).HasMaxLength(40);
            entity.Property(e => e.DebtorUdfBangsa1)
                .HasMaxLength(50)
                .HasColumnName("DebtorUDF_Bangsa1");
            entity.Property(e => e.DebtorUdfBangsa2)
                .HasMaxLength(50)
                .HasColumnName("DebtorUDF_Bangsa2");
            entity.Property(e => e.DebtorUdfJantina)
                .HasMaxLength(20)
                .HasColumnName("DebtorUDF_Jantina");
            entity.Property(e => e.DebtorUdfKerakyatan)
                .HasMaxLength(50)
                .HasColumnName("DebtorUDF_Kerakyatan");
            entity.Property(e => e.DebtorUdfTarikhLahir)
                .HasColumnType("datetime")
                .HasColumnName("DebtorUDF_TarikhLahir");
            entity.Property(e => e.DebtorWebUrl)
                .HasMaxLength(80)
                .HasColumnName("DebtorWebURL");
            entity.Property(e => e.DeliverAddr1).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr2).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr3).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr4).HasMaxLength(40);
            entity.Property(e => e.DeliverContact).HasMaxLength(40);
            entity.Property(e => e.DeliverFax1).HasMaxLength(25);
            entity.Property(e => e.DeliverPhone1).HasMaxLength(25);
            entity.Property(e => e.Description).HasMaxLength(80);
            entity.Property(e => e.DisplayTerm).HasMaxLength(30);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.DocStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Fax1).HasMaxLength(25);
            entity.Property(e => e.FcgainAccount)
                .HasMaxLength(12)
                .HasColumnName("FCGainAccount");
            entity.Property(e => e.FclossAccount)
                .HasMaxLength(12)
                .HasColumnName("FCLossAccount");
            entity.Property(e => e.Footer1Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer1TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Footer2Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer2TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Footer3Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer3TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.GainLossJournalType).HasMaxLength(10);
            entity.Property(e => e.InclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.InvAddr1).HasMaxLength(40);
            entity.Property(e => e.InvAddr2).HasMaxLength(40);
            entity.Property(e => e.InvAddr3).HasMaxLength(40);
            entity.Property(e => e.InvAddr4).HasMaxLength(40);
            entity.Property(e => e.IsDebtorTaxRegistered)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.LastModifiedUserName).HasMaxLength(40);
            entity.Property(e => e.LocalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.NetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Phone1).HasMaxLength(25);
            entity.Property(e => e.PostToStock)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Ref).HasMaxLength(40);
            entity.Property(e => e.RefDocNo).HasMaxLength(30);
            entity.Property(e => e.Remark1).HasMaxLength(40);
            entity.Property(e => e.Remark2).HasMaxLength(40);
            entity.Property(e => e.Remark3).HasMaxLength(40);
            entity.Property(e => e.Remark4).HasMaxLength(40);
            entity.Property(e => e.SalesAgent).HasMaxLength(12);
            entity.Property(e => e.SalesAgentDesc2).HasMaxLength(40);
            entity.Property(e => e.SalesAgentDescription).HasMaxLength(40);
            entity.Property(e => e.SalesExemptionExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.SalesExemptionNo).HasMaxLength(60);
            entity.Property(e => e.SalesLocation).HasMaxLength(8);
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyExTax).HasColumnType("decimal(38, 13)");
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxRegisterNo).HasMaxLength(30);
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ToTaxCurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.Total).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalWithTax).HasColumnType("decimal(20, 2)");
        });

        modelBuilder.Entity<VDeliveryReturnDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vDeliveryReturnDetail");

            entity.Property(e => e.AddToCost)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AddToSubTotal)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BarCode).HasMaxLength(30);
            entity.Property(e => e.BatchBalQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.BatchDescription).HasMaxLength(40);
            entity.Property(e => e.BatchExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.BatchItemCode).HasMaxLength(30);
            entity.Property(e => e.BatchManufacturedDate).HasColumnType("datetime");
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.CalcByPercent).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.DeliveryDate).HasColumnType("datetime");
            entity.Property(e => e.DeptDesc2).HasMaxLength(40);
            entity.Property(e => e.DeptDescription).HasMaxLength(40);
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Desc2).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.Discount).HasMaxLength(20);
            entity.Property(e => e.DiscountAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DocTaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.DtlType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EstimatedDeliveryDate).HasMaxLength(20);
            entity.Property(e => e.Focqty)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("FOCQty");
            entity.Property(e => e.FontStyle).HasMaxLength(8);
            entity.Property(e => e.FromDocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.FullTransferOption)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.GovtTaxCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.ItemBaseUom)
                .HasMaxLength(8)
                .HasColumnName("ItemBaseUOM");
            entity.Property(e => e.ItemBrand).HasMaxLength(20);
            entity.Property(e => e.ItemBrandDescription).HasMaxLength(40);
            entity.Property(e => e.ItemCategory).HasMaxLength(20);
            entity.Property(e => e.ItemCategoryDescription).HasMaxLength(40);
            entity.Property(e => e.ItemClass).HasMaxLength(20);
            entity.Property(e => e.ItemClassDescription).HasMaxLength(40);
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.ItemDesc2).HasMaxLength(100);
            entity.Property(e => e.ItemDescription).HasMaxLength(100);
            entity.Property(e => e.ItemGroup).HasMaxLength(8);
            entity.Property(e => e.ItemGroupDescription).HasMaxLength(40);
            entity.Property(e => e.ItemType).HasMaxLength(12);
            entity.Property(e => e.ItemTypeDescription).HasMaxLength(40);
            entity.Property(e => e.ItemUdfWarDay).HasColumnName("ItemUDF_WarDay");
            entity.Property(e => e.LeadTime).HasMaxLength(40);
            entity.Property(e => e.LocalSubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalSubTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.LocationAddr1).HasMaxLength(40);
            entity.Property(e => e.LocationAddr2).HasMaxLength(40);
            entity.Property(e => e.LocationAddr3).HasMaxLength(40);
            entity.Property(e => e.LocationAddr4).HasMaxLength(40);
            entity.Property(e => e.LocationBalQty).HasColumnType("decimal(38, 8)");
            entity.Property(e => e.LocationContact).HasMaxLength(40);
            entity.Property(e => e.LocationDesc2).HasMaxLength(80);
            entity.Property(e => e.LocationDescription).HasMaxLength(80);
            entity.Property(e => e.LocationFax1).HasMaxLength(25);
            entity.Property(e => e.LocationFax2).HasMaxLength(25);
            entity.Property(e => e.LocationPhone1).HasMaxLength(25);
            entity.Property(e => e.LocationPhone2).HasMaxLength(25);
            entity.Property(e => e.LocationPostCode).HasMaxLength(10);
            entity.Property(e => e.MainItem)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Numbering).HasMaxLength(6);
            entity.Property(e => e.PrintOut)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.ProjectDesc2).HasMaxLength(40);
            entity.Property(e => e.ProjectDescription).HasMaxLength(40);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SalesExemptionNo).HasMaxLength(60);
            entity.Property(e => e.Shelf).HasMaxLength(20);
            entity.Property(e => e.SmallestQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SmallestUnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SubTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SubTotalWithTax).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxAccNo).HasMaxLength(12);
            entity.Property(e => e.TaxCode).HasMaxLength(14);
            entity.Property(e => e.TaxCodeDescription).HasMaxLength(120);
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.UnitPriceAfterDiscount).HasColumnType("decimal(38, 13)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
            entity.Property(e => e.UombalQty)
                .HasColumnType("decimal(38, 8)")
                .HasColumnName("UOMBalQty");
            entity.Property(e => e.Uomcost)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMCost");
            entity.Property(e => e.UomitemCode)
                .HasMaxLength(30)
                .HasColumnName("UOMItemCode");
            entity.Property(e => e.Uomprice)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMPrice");
            entity.Property(e => e.Uomprice2)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMPrice2");
            entity.Property(e => e.Uomrate)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMRate");
            entity.Property(e => e.UomrealCost)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMRealCost");
            entity.Property(e => e.UserUom)
                .HasMaxLength(8)
                .HasColumnName("UserUOM");
            entity.Property(e => e.Volume).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.VolumeUom)
                .HasMaxLength(8)
                .HasColumnName("VolumeUOM");
            entity.Property(e => e.Weight).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.WeightUom)
                .HasMaxLength(8)
                .HasColumnName("WeightUOM");
            entity.Property(e => e.YourPodate)
                .HasColumnType("datetime")
                .HasColumnName("YourPODate");
            entity.Property(e => e.YourPono)
                .HasMaxLength(25)
                .HasColumnName("YourPONo");
        });

        modelBuilder.Entity<VDeliveryReturnSubDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vDeliveryReturnSubDetail");

            entity.Property(e => e.AddToCost)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.Desc2).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.DocTaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.GovtTaxCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.LocalSubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.PrintOut)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SalesExemptionNo).HasMaxLength(60);
            entity.Property(e => e.SubQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxAccNo).HasMaxLength(12);
            entity.Property(e => e.TaxCode).HasMaxLength(14);
            entity.Property(e => e.TaxCodeDescription).HasMaxLength(120);
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<VDept>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vDept");

            entity.Property(e => e.DeptDesc2).HasMaxLength(40);
            entity.Property(e => e.DeptDescription).HasMaxLength(40);
            entity.Property(e => e.DeptNo).HasMaxLength(10);
        });

        modelBuilder.Entity<VDntype>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vDNType");

            entity.Property(e => e.Dntype)
                .HasMaxLength(12)
                .HasColumnName("DNType");
            entity.Property(e => e.DntypeDescription)
                .HasMaxLength(40)
                .HasColumnName("DNTypeDescription");
        });

        modelBuilder.Entity<VGoodsReceivedNote>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vGoodsReceivedNote");

            entity.Property(e => e.Attention).HasMaxLength(40);
            entity.Property(e => e.BranchAccNo).HasMaxLength(12);
            entity.Property(e => e.BranchAddress1).HasMaxLength(40);
            entity.Property(e => e.BranchAddress2).HasMaxLength(40);
            entity.Property(e => e.BranchAddress3).HasMaxLength(40);
            entity.Property(e => e.BranchAddress4).HasMaxLength(40);
            entity.Property(e => e.BranchAreaCode).HasMaxLength(12);
            entity.Property(e => e.BranchCode).HasMaxLength(20);
            entity.Property(e => e.BranchContact).HasMaxLength(40);
            entity.Property(e => e.BranchEmailAddress).HasMaxLength(80);
            entity.Property(e => e.BranchFax1).HasMaxLength(25);
            entity.Property(e => e.BranchFax2).HasMaxLength(25);
            entity.Property(e => e.BranchIsActive)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BranchMobile).HasMaxLength(25);
            entity.Property(e => e.BranchName).HasMaxLength(100);
            entity.Property(e => e.BranchPhone1).HasMaxLength(25);
            entity.Property(e => e.BranchPhone2).HasMaxLength(25);
            entity.Property(e => e.BranchPostCode).HasMaxLength(10);
            entity.Property(e => e.BranchPurchaseAgent).HasMaxLength(12);
            entity.Property(e => e.BranchSalesAgent).HasMaxLength(12);
            entity.Property(e => e.CanSync)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.CreatedUserName).HasMaxLength(40);
            entity.Property(e => e.CreditorAddress1).HasMaxLength(40);
            entity.Property(e => e.CreditorAddress2).HasMaxLength(40);
            entity.Property(e => e.CreditorAddress3).HasMaxLength(40);
            entity.Property(e => e.CreditorAddress4).HasMaxLength(40);
            entity.Property(e => e.CreditorAgingOn)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreditorAreaCode).HasMaxLength(12);
            entity.Property(e => e.CreditorAreaDesc2).HasMaxLength(40);
            entity.Property(e => e.CreditorAreaDescription).HasMaxLength(40);
            entity.Property(e => e.CreditorAttention).HasMaxLength(40);
            entity.Property(e => e.CreditorCode).HasMaxLength(12);
            entity.Property(e => e.CreditorCompanyName).HasMaxLength(100);
            entity.Property(e => e.CreditorCreatedTimestamp).HasColumnType("datetime");
            entity.Property(e => e.CreditorCreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreditorCreatedUserID");
            entity.Property(e => e.CreditorCreditLimit).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.CreditorCurrencyCode).HasMaxLength(5);
            entity.Property(e => e.CreditorDeliverAddress1).HasMaxLength(40);
            entity.Property(e => e.CreditorDeliverAddress2).HasMaxLength(40);
            entity.Property(e => e.CreditorDeliverAddress3).HasMaxLength(40);
            entity.Property(e => e.CreditorDeliverAddress4).HasMaxLength(40);
            entity.Property(e => e.CreditorDeliverPostCode).HasMaxLength(10);
            entity.Property(e => e.CreditorDesc2).HasMaxLength(100);
            entity.Property(e => e.CreditorDisplayTerm).HasMaxLength(30);
            entity.Property(e => e.CreditorEmailAddress).HasMaxLength(200);
            entity.Property(e => e.CreditorExemptExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.CreditorExemptNo).HasMaxLength(60);
            entity.Property(e => e.CreditorFax1).HasMaxLength(25);
            entity.Property(e => e.CreditorFax2).HasMaxLength(25);
            entity.Property(e => e.CreditorGstregisterNo)
                .HasMaxLength(20)
                .HasColumnName("CreditorGSTRegisterNo");
            entity.Property(e => e.CreditorGststatusVerifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("CreditorGSTStatusVerifiedDate");
            entity.Property(e => e.CreditorInclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreditorLastModified).HasColumnType("datetime");
            entity.Property(e => e.CreditorLastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreditorLastModifiedUserID");
            entity.Property(e => e.CreditorMobile).HasMaxLength(25);
            entity.Property(e => e.CreditorName).HasMaxLength(100);
            entity.Property(e => e.CreditorNatureOfBusiness).HasMaxLength(40);
            entity.Property(e => e.CreditorOverdueLimit).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.CreditorParentAccNo).HasMaxLength(12);
            entity.Property(e => e.CreditorPhone1).HasMaxLength(25);
            entity.Property(e => e.CreditorPhone2).HasMaxLength(25);
            entity.Property(e => e.CreditorPostCode).HasMaxLength(10);
            entity.Property(e => e.CreditorPriceCategory).HasMaxLength(12);
            entity.Property(e => e.CreditorPurchaseAgent).HasMaxLength(12);
            entity.Property(e => e.CreditorPurchaseAgentDesc2).HasMaxLength(40);
            entity.Property(e => e.CreditorPurchaseAgentDescription).HasMaxLength(40);
            entity.Property(e => e.CreditorRegisterNo).HasMaxLength(30);
            entity.Property(e => e.CreditorSelfBilledApprovalNo).HasMaxLength(30);
            entity.Property(e => e.CreditorSstregisterNo)
                .HasMaxLength(20)
                .HasColumnName("CreditorSSTRegisterNo");
            entity.Property(e => e.CreditorStatementType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreditorTaxCode).HasMaxLength(14);
            entity.Property(e => e.CreditorTaxRegisterNo).HasMaxLength(30);
            entity.Property(e => e.CreditorType).HasMaxLength(20);
            entity.Property(e => e.CreditorTypeDesc2).HasMaxLength(40);
            entity.Property(e => e.CreditorTypeDescription).HasMaxLength(40);
            entity.Property(e => e.CreditorWebUrl)
                .HasMaxLength(80)
                .HasColumnName("CreditorWebURL");
            entity.Property(e => e.CurrencyCode).HasMaxLength(5);
            entity.Property(e => e.CurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.CurrencySymbol).HasMaxLength(6);
            entity.Property(e => e.CurrencyWord).HasMaxLength(40);
            entity.Property(e => e.CurrencyWord2).HasMaxLength(40);
            entity.Property(e => e.Description).HasMaxLength(80);
            entity.Property(e => e.DisplayTerm).HasMaxLength(30);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.DocStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Fax1).HasMaxLength(25);
            entity.Property(e => e.FcgainAccount)
                .HasMaxLength(12)
                .HasColumnName("FCGainAccount");
            entity.Property(e => e.FclossAccount)
                .HasMaxLength(12)
                .HasColumnName("FCLossAccount");
            entity.Property(e => e.Footer1Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer1TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Footer2Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer2TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Footer3Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer3TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.ForeignCharges).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.GainLossJournalType).HasMaxLength(10);
            entity.Property(e => e.GrudfSuperAppId)
                .HasMaxLength(32)
                .HasColumnName("GRUDF_SuperAppId");
            entity.Property(e => e.InclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.InvAddr1).HasMaxLength(40);
            entity.Property(e => e.InvAddr2).HasMaxLength(40);
            entity.Property(e => e.InvAddr3).HasMaxLength(40);
            entity.Property(e => e.InvAddr4).HasMaxLength(40);
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.LastModifiedUserName).HasMaxLength(40);
            entity.Property(e => e.LocalCharges).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.NetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Phone1).HasMaxLength(25);
            entity.Property(e => e.PostToStock)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PurchaseAgent).HasMaxLength(12);
            entity.Property(e => e.PurchaseAgentDesc2).HasMaxLength(40);
            entity.Property(e => e.PurchaseAgentDescription).HasMaxLength(40);
            entity.Property(e => e.PurchaseLocation).HasMaxLength(8);
            entity.Property(e => e.Ref).HasMaxLength(40);
            entity.Property(e => e.RefDocNo).HasMaxLength(30);
            entity.Property(e => e.Remark1).HasMaxLength(40);
            entity.Property(e => e.Remark2).HasMaxLength(40);
            entity.Property(e => e.Remark3).HasMaxLength(40);
            entity.Property(e => e.Remark4).HasMaxLength(40);
            entity.Property(e => e.ShipInfo).HasMaxLength(40);
            entity.Property(e => e.ShipVia).HasMaxLength(20);
            entity.Property(e => e.SupplierDono)
                .HasMaxLength(30)
                .HasColumnName("SupplierDONo");
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyExTax).HasColumnType("decimal(38, 13)");
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxRegisterNo).HasMaxLength(30);
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ToDocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.ToTaxCurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.Total).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalWithTax).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.Transferable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VGoodsReceivedNoteDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vGoodsReceivedNoteDetail");

            entity.Property(e => e.AddToCost)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AddToSubTotal)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BarCode).HasMaxLength(30);
            entity.Property(e => e.BatchBalQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.BatchDescription).HasMaxLength(40);
            entity.Property(e => e.BatchExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.BatchItemCode).HasMaxLength(30);
            entity.Property(e => e.BatchManufacturedDate).HasColumnType("datetime");
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.CalcByPercent).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Cnamt)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("CNAmt");
            entity.Property(e => e.DeliveryDate).HasColumnType("datetime");
            entity.Property(e => e.DeptDesc2).HasMaxLength(40);
            entity.Property(e => e.DeptDescription).HasMaxLength(40);
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Desc2).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.Discount).HasMaxLength(20);
            entity.Property(e => e.DiscountAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DocTaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.DtlType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Duty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.EstimatedDeliveryDate).HasMaxLength(20);
            entity.Property(e => e.Focqty)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("FOCQty");
            entity.Property(e => e.FoctransferedQty)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("FOCTransferedQty");
            entity.Property(e => e.FontStyle).HasMaxLength(8);
            entity.Property(e => e.ForeignCharges).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.FromDocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.FullTransferOption)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.GovtTaxCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.ItemBaseUom)
                .HasMaxLength(8)
                .HasColumnName("ItemBaseUOM");
            entity.Property(e => e.ItemBrand).HasMaxLength(20);
            entity.Property(e => e.ItemBrandDescription).HasMaxLength(40);
            entity.Property(e => e.ItemCategory).HasMaxLength(20);
            entity.Property(e => e.ItemCategoryDescription).HasMaxLength(40);
            entity.Property(e => e.ItemClass).HasMaxLength(20);
            entity.Property(e => e.ItemClassDescription).HasMaxLength(40);
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.ItemDesc2).HasMaxLength(100);
            entity.Property(e => e.ItemDescription).HasMaxLength(100);
            entity.Property(e => e.ItemGroup).HasMaxLength(8);
            entity.Property(e => e.ItemGroupDescription).HasMaxLength(40);
            entity.Property(e => e.ItemType).HasMaxLength(12);
            entity.Property(e => e.ItemTypeDescription).HasMaxLength(40);
            entity.Property(e => e.ItemUdfWarDay).HasColumnName("ItemUDF_WarDay");
            entity.Property(e => e.LeadTime).HasMaxLength(40);
            entity.Property(e => e.LocalCharges).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.LocalSubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalSubTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.LocationAddr1).HasMaxLength(40);
            entity.Property(e => e.LocationAddr2).HasMaxLength(40);
            entity.Property(e => e.LocationAddr3).HasMaxLength(40);
            entity.Property(e => e.LocationAddr4).HasMaxLength(40);
            entity.Property(e => e.LocationBalQty).HasColumnType("decimal(38, 8)");
            entity.Property(e => e.LocationContact).HasMaxLength(40);
            entity.Property(e => e.LocationDesc2).HasMaxLength(80);
            entity.Property(e => e.LocationDescription).HasMaxLength(80);
            entity.Property(e => e.LocationFax1).HasMaxLength(25);
            entity.Property(e => e.LocationFax2).HasMaxLength(25);
            entity.Property(e => e.LocationPhone1).HasMaxLength(25);
            entity.Property(e => e.LocationPhone2).HasMaxLength(25);
            entity.Property(e => e.LocationPostCode).HasMaxLength(10);
            entity.Property(e => e.MainItem)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Numbering).HasMaxLength(6);
            entity.Property(e => e.OurPodate)
                .HasColumnType("datetime")
                .HasColumnName("OurPODate");
            entity.Property(e => e.OurPono)
                .HasMaxLength(30)
                .HasColumnName("OurPONo");
            entity.Property(e => e.PrintOut)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.ProjectDesc2).HasMaxLength(40);
            entity.Property(e => e.ProjectDescription).HasMaxLength(40);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SalesExemptionNo).HasMaxLength(60);
            entity.Property(e => e.Shelf).HasMaxLength(20);
            entity.Property(e => e.SmallestQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SmallestUnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SubTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SubTotalWithTax).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxAccNo).HasMaxLength(12);
            entity.Property(e => e.TaxCode).HasMaxLength(14);
            entity.Property(e => e.TaxCodeDescription).HasMaxLength(120);
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Transferable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TransferedQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.UnitPriceAfterDiscount).HasColumnType("decimal(38, 13)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
            entity.Property(e => e.UombalQty)
                .HasColumnType("decimal(38, 8)")
                .HasColumnName("UOMBalQty");
            entity.Property(e => e.Uomcost)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMCost");
            entity.Property(e => e.UomitemCode)
                .HasMaxLength(30)
                .HasColumnName("UOMItemCode");
            entity.Property(e => e.Uomprice)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMPrice");
            entity.Property(e => e.Uomprice2)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMPrice2");
            entity.Property(e => e.Uomrate)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMRate");
            entity.Property(e => e.UomrealCost)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMRealCost");
            entity.Property(e => e.UserUom)
                .HasMaxLength(8)
                .HasColumnName("UserUOM");
            entity.Property(e => e.Volume).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.VolumeUom)
                .HasMaxLength(8)
                .HasColumnName("VolumeUOM");
            entity.Property(e => e.Weight).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.WeightUom)
                .HasMaxLength(8)
                .HasColumnName("WeightUOM");
        });

        modelBuilder.Entity<VGoodsReceivedNoteSubDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vGoodsReceivedNoteSubDetail");

            entity.Property(e => e.AddToCost)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.Desc2).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.DocTaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Duty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.ForeignCharges).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.GovtTaxCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.LocalCharges).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.LocalSubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.PrintOut)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SalesExemptionNo).HasMaxLength(60);
            entity.Property(e => e.SubQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxAccNo).HasMaxLength(12);
            entity.Property(e => e.TaxCode).HasMaxLength(14);
            entity.Property(e => e.TaxCodeDescription).HasMaxLength(120);
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<VGoodsReturn>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vGoodsReturn");

            entity.Property(e => e.Attention).HasMaxLength(40);
            entity.Property(e => e.BranchAccNo).HasMaxLength(12);
            entity.Property(e => e.BranchAddress1).HasMaxLength(40);
            entity.Property(e => e.BranchAddress2).HasMaxLength(40);
            entity.Property(e => e.BranchAddress3).HasMaxLength(40);
            entity.Property(e => e.BranchAddress4).HasMaxLength(40);
            entity.Property(e => e.BranchAreaCode).HasMaxLength(12);
            entity.Property(e => e.BranchCode).HasMaxLength(20);
            entity.Property(e => e.BranchContact).HasMaxLength(40);
            entity.Property(e => e.BranchEmailAddress).HasMaxLength(80);
            entity.Property(e => e.BranchFax1).HasMaxLength(25);
            entity.Property(e => e.BranchFax2).HasMaxLength(25);
            entity.Property(e => e.BranchIsActive)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BranchMobile).HasMaxLength(25);
            entity.Property(e => e.BranchName).HasMaxLength(100);
            entity.Property(e => e.BranchPhone1).HasMaxLength(25);
            entity.Property(e => e.BranchPhone2).HasMaxLength(25);
            entity.Property(e => e.BranchPostCode).HasMaxLength(10);
            entity.Property(e => e.BranchPurchaseAgent).HasMaxLength(12);
            entity.Property(e => e.BranchSalesAgent).HasMaxLength(12);
            entity.Property(e => e.CanSync)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.CreatedUserName).HasMaxLength(40);
            entity.Property(e => e.CreditorAddress1).HasMaxLength(40);
            entity.Property(e => e.CreditorAddress2).HasMaxLength(40);
            entity.Property(e => e.CreditorAddress3).HasMaxLength(40);
            entity.Property(e => e.CreditorAddress4).HasMaxLength(40);
            entity.Property(e => e.CreditorAgingOn)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreditorAreaCode).HasMaxLength(12);
            entity.Property(e => e.CreditorAreaDesc2).HasMaxLength(40);
            entity.Property(e => e.CreditorAreaDescription).HasMaxLength(40);
            entity.Property(e => e.CreditorAttention).HasMaxLength(40);
            entity.Property(e => e.CreditorCode).HasMaxLength(12);
            entity.Property(e => e.CreditorCompanyName).HasMaxLength(100);
            entity.Property(e => e.CreditorCreatedTimestamp).HasColumnType("datetime");
            entity.Property(e => e.CreditorCreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreditorCreatedUserID");
            entity.Property(e => e.CreditorCreditLimit).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.CreditorCurrencyCode).HasMaxLength(5);
            entity.Property(e => e.CreditorDeliverAddress1).HasMaxLength(40);
            entity.Property(e => e.CreditorDeliverAddress2).HasMaxLength(40);
            entity.Property(e => e.CreditorDeliverAddress3).HasMaxLength(40);
            entity.Property(e => e.CreditorDeliverAddress4).HasMaxLength(40);
            entity.Property(e => e.CreditorDeliverPostCode).HasMaxLength(10);
            entity.Property(e => e.CreditorDesc2).HasMaxLength(100);
            entity.Property(e => e.CreditorDisplayTerm).HasMaxLength(30);
            entity.Property(e => e.CreditorEmailAddress).HasMaxLength(200);
            entity.Property(e => e.CreditorExemptExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.CreditorExemptNo).HasMaxLength(60);
            entity.Property(e => e.CreditorFax1).HasMaxLength(25);
            entity.Property(e => e.CreditorFax2).HasMaxLength(25);
            entity.Property(e => e.CreditorGstregisterNo)
                .HasMaxLength(20)
                .HasColumnName("CreditorGSTRegisterNo");
            entity.Property(e => e.CreditorGststatusVerifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("CreditorGSTStatusVerifiedDate");
            entity.Property(e => e.CreditorInclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreditorLastModified).HasColumnType("datetime");
            entity.Property(e => e.CreditorLastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreditorLastModifiedUserID");
            entity.Property(e => e.CreditorMobile).HasMaxLength(25);
            entity.Property(e => e.CreditorName).HasMaxLength(100);
            entity.Property(e => e.CreditorNatureOfBusiness).HasMaxLength(40);
            entity.Property(e => e.CreditorOverdueLimit).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.CreditorParentAccNo).HasMaxLength(12);
            entity.Property(e => e.CreditorPhone1).HasMaxLength(25);
            entity.Property(e => e.CreditorPhone2).HasMaxLength(25);
            entity.Property(e => e.CreditorPostCode).HasMaxLength(10);
            entity.Property(e => e.CreditorPriceCategory).HasMaxLength(12);
            entity.Property(e => e.CreditorPurchaseAgent).HasMaxLength(12);
            entity.Property(e => e.CreditorPurchaseAgentDesc2).HasMaxLength(40);
            entity.Property(e => e.CreditorPurchaseAgentDescription).HasMaxLength(40);
            entity.Property(e => e.CreditorRegisterNo).HasMaxLength(30);
            entity.Property(e => e.CreditorSelfBilledApprovalNo).HasMaxLength(30);
            entity.Property(e => e.CreditorSstregisterNo)
                .HasMaxLength(20)
                .HasColumnName("CreditorSSTRegisterNo");
            entity.Property(e => e.CreditorStatementType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreditorTaxCode).HasMaxLength(14);
            entity.Property(e => e.CreditorTaxRegisterNo).HasMaxLength(30);
            entity.Property(e => e.CreditorType).HasMaxLength(20);
            entity.Property(e => e.CreditorTypeDesc2).HasMaxLength(40);
            entity.Property(e => e.CreditorTypeDescription).HasMaxLength(40);
            entity.Property(e => e.CreditorWebUrl)
                .HasMaxLength(80)
                .HasColumnName("CreditorWebURL");
            entity.Property(e => e.CurrencyCode).HasMaxLength(5);
            entity.Property(e => e.CurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.CurrencySymbol).HasMaxLength(6);
            entity.Property(e => e.CurrencyWord).HasMaxLength(40);
            entity.Property(e => e.CurrencyWord2).HasMaxLength(40);
            entity.Property(e => e.Description).HasMaxLength(80);
            entity.Property(e => e.DisplayTerm).HasMaxLength(30);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.DocStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Fax1).HasMaxLength(25);
            entity.Property(e => e.FcgainAccount)
                .HasMaxLength(12)
                .HasColumnName("FCGainAccount");
            entity.Property(e => e.FclossAccount)
                .HasMaxLength(12)
                .HasColumnName("FCLossAccount");
            entity.Property(e => e.Footer1Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer1TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Footer2Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer2TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Footer3Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer3TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.GainLossJournalType).HasMaxLength(10);
            entity.Property(e => e.InclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.InvAddr1).HasMaxLength(40);
            entity.Property(e => e.InvAddr2).HasMaxLength(40);
            entity.Property(e => e.InvAddr3).HasMaxLength(40);
            entity.Property(e => e.InvAddr4).HasMaxLength(40);
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.LastModifiedUserName).HasMaxLength(40);
            entity.Property(e => e.LocalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.NetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Phone1).HasMaxLength(25);
            entity.Property(e => e.PostToStock)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PurchaseAgent).HasMaxLength(12);
            entity.Property(e => e.PurchaseAgentDesc2).HasMaxLength(40);
            entity.Property(e => e.PurchaseAgentDescription).HasMaxLength(40);
            entity.Property(e => e.PurchaseLocation).HasMaxLength(8);
            entity.Property(e => e.Ref).HasMaxLength(40);
            entity.Property(e => e.RefDocNo).HasMaxLength(30);
            entity.Property(e => e.Remark1).HasMaxLength(40);
            entity.Property(e => e.Remark2).HasMaxLength(40);
            entity.Property(e => e.Remark3).HasMaxLength(40);
            entity.Property(e => e.Remark4).HasMaxLength(40);
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyExTax).HasColumnType("decimal(38, 13)");
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxRegisterNo).HasMaxLength(30);
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ToTaxCurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.Total).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalWithTax).HasColumnType("decimal(20, 2)");
        });

        modelBuilder.Entity<VGoodsReturnDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vGoodsReturnDetail");

            entity.Property(e => e.AddToCost)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AddToSubTotal)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BarCode).HasMaxLength(30);
            entity.Property(e => e.BatchBalQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.BatchDescription).HasMaxLength(40);
            entity.Property(e => e.BatchExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.BatchItemCode).HasMaxLength(30);
            entity.Property(e => e.BatchManufacturedDate).HasColumnType("datetime");
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.CalcByPercent).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.DeliveryDate).HasColumnType("datetime");
            entity.Property(e => e.DeptDesc2).HasMaxLength(40);
            entity.Property(e => e.DeptDescription).HasMaxLength(40);
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Desc2).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.Discount).HasMaxLength(20);
            entity.Property(e => e.DiscountAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DocTaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.DtlType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EstimatedDeliveryDate).HasMaxLength(20);
            entity.Property(e => e.Focqty)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("FOCQty");
            entity.Property(e => e.FontStyle).HasMaxLength(8);
            entity.Property(e => e.FromDocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.FullTransferOption)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.GovtTaxCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.ItemBaseUom)
                .HasMaxLength(8)
                .HasColumnName("ItemBaseUOM");
            entity.Property(e => e.ItemBrand).HasMaxLength(20);
            entity.Property(e => e.ItemBrandDescription).HasMaxLength(40);
            entity.Property(e => e.ItemCategory).HasMaxLength(20);
            entity.Property(e => e.ItemCategoryDescription).HasMaxLength(40);
            entity.Property(e => e.ItemClass).HasMaxLength(20);
            entity.Property(e => e.ItemClassDescription).HasMaxLength(40);
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.ItemDesc2).HasMaxLength(100);
            entity.Property(e => e.ItemDescription).HasMaxLength(100);
            entity.Property(e => e.ItemGroup).HasMaxLength(8);
            entity.Property(e => e.ItemGroupDescription).HasMaxLength(40);
            entity.Property(e => e.ItemType).HasMaxLength(12);
            entity.Property(e => e.ItemTypeDescription).HasMaxLength(40);
            entity.Property(e => e.ItemUdfWarDay).HasColumnName("ItemUDF_WarDay");
            entity.Property(e => e.LeadTime).HasMaxLength(40);
            entity.Property(e => e.LocalSubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalSubTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.LocationAddr1).HasMaxLength(40);
            entity.Property(e => e.LocationAddr2).HasMaxLength(40);
            entity.Property(e => e.LocationAddr3).HasMaxLength(40);
            entity.Property(e => e.LocationAddr4).HasMaxLength(40);
            entity.Property(e => e.LocationBalQty).HasColumnType("decimal(38, 8)");
            entity.Property(e => e.LocationContact).HasMaxLength(40);
            entity.Property(e => e.LocationDesc2).HasMaxLength(80);
            entity.Property(e => e.LocationDescription).HasMaxLength(80);
            entity.Property(e => e.LocationFax1).HasMaxLength(25);
            entity.Property(e => e.LocationFax2).HasMaxLength(25);
            entity.Property(e => e.LocationPhone1).HasMaxLength(25);
            entity.Property(e => e.LocationPhone2).HasMaxLength(25);
            entity.Property(e => e.LocationPostCode).HasMaxLength(10);
            entity.Property(e => e.MainItem)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Numbering).HasMaxLength(6);
            entity.Property(e => e.PrintOut)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.ProjectDesc2).HasMaxLength(40);
            entity.Property(e => e.ProjectDescription).HasMaxLength(40);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SalesExemptionNo).HasMaxLength(60);
            entity.Property(e => e.Shelf).HasMaxLength(20);
            entity.Property(e => e.SmallestQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SmallestUnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SubTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SubTotalWithTax).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxAccNo).HasMaxLength(12);
            entity.Property(e => e.TaxCode).HasMaxLength(14);
            entity.Property(e => e.TaxCodeDescription).HasMaxLength(120);
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.UnitPriceAfterDiscount).HasColumnType("decimal(38, 13)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
            entity.Property(e => e.UombalQty)
                .HasColumnType("decimal(38, 8)")
                .HasColumnName("UOMBalQty");
            entity.Property(e => e.Uomcost)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMCost");
            entity.Property(e => e.UomitemCode)
                .HasMaxLength(30)
                .HasColumnName("UOMItemCode");
            entity.Property(e => e.Uomprice)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMPrice");
            entity.Property(e => e.Uomprice2)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMPrice2");
            entity.Property(e => e.Uomrate)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMRate");
            entity.Property(e => e.UomrealCost)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMRealCost");
            entity.Property(e => e.UserUom)
                .HasMaxLength(8)
                .HasColumnName("UserUOM");
            entity.Property(e => e.Volume).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.VolumeUom)
                .HasMaxLength(8)
                .HasColumnName("VolumeUOM");
            entity.Property(e => e.Weight).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.WeightUom)
                .HasMaxLength(8)
                .HasColumnName("WeightUOM");
        });

        modelBuilder.Entity<VGoodsReturnSubDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vGoodsReturnSubDetail");

            entity.Property(e => e.AddToCost)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.Desc2).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.DocTaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.GovtTaxCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.LocalSubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.PrintOut)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SalesExemptionNo).HasMaxLength(60);
            entity.Property(e => e.SubQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxAccNo).HasMaxLength(12);
            entity.Property(e => e.TaxCode).HasMaxLength(14);
            entity.Property(e => e.TaxCodeDescription).HasMaxLength(120);
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<VInvoice>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vInvoice");

            entity.Property(e => e.Attention).HasMaxLength(40);
            entity.Property(e => e.AuthorisationNumberForCertifiedExporter)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.BranchAccNo).HasMaxLength(12);
            entity.Property(e => e.BranchAddress1).HasMaxLength(40);
            entity.Property(e => e.BranchAddress2).HasMaxLength(40);
            entity.Property(e => e.BranchAddress3).HasMaxLength(40);
            entity.Property(e => e.BranchAddress4).HasMaxLength(40);
            entity.Property(e => e.BranchAreaCode).HasMaxLength(12);
            entity.Property(e => e.BranchCode).HasMaxLength(20);
            entity.Property(e => e.BranchContact).HasMaxLength(40);
            entity.Property(e => e.BranchEmailAddress).HasMaxLength(80);
            entity.Property(e => e.BranchFax1).HasMaxLength(25);
            entity.Property(e => e.BranchFax2).HasMaxLength(25);
            entity.Property(e => e.BranchIsActive)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BranchMobile).HasMaxLength(25);
            entity.Property(e => e.BranchName).HasMaxLength(100);
            entity.Property(e => e.BranchPhone1).HasMaxLength(25);
            entity.Property(e => e.BranchPhone2).HasMaxLength(25);
            entity.Property(e => e.BranchPostCode).HasMaxLength(10);
            entity.Property(e => e.BranchPurchaseAgent).HasMaxLength(12);
            entity.Property(e => e.BranchSalesAgent).HasMaxLength(12);
            entity.Property(e => e.CanSync)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.CreatedUserName).HasMaxLength(40);
            entity.Property(e => e.CurrencyCode).HasMaxLength(5);
            entity.Property(e => e.CurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.CurrencySymbol).HasMaxLength(6);
            entity.Property(e => e.CurrencyWord).HasMaxLength(40);
            entity.Property(e => e.CurrencyWord2).HasMaxLength(40);
            entity.Property(e => e.DebtorAddress1).HasMaxLength(40);
            entity.Property(e => e.DebtorAddress2).HasMaxLength(40);
            entity.Property(e => e.DebtorAddress3).HasMaxLength(40);
            entity.Property(e => e.DebtorAddress4).HasMaxLength(40);
            entity.Property(e => e.DebtorAgingOn)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DebtorAreaCode).HasMaxLength(12);
            entity.Property(e => e.DebtorAreaDesc2).HasMaxLength(40);
            entity.Property(e => e.DebtorAreaDescription).HasMaxLength(40);
            entity.Property(e => e.DebtorAttention).HasMaxLength(40);
            entity.Property(e => e.DebtorCode).HasMaxLength(12);
            entity.Property(e => e.DebtorCompanyName).HasMaxLength(100);
            entity.Property(e => e.DebtorCreatedTimestamp).HasColumnType("datetime");
            entity.Property(e => e.DebtorCreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("DebtorCreatedUserID");
            entity.Property(e => e.DebtorCreditLimit).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DebtorCurrencyCode).HasMaxLength(5);
            entity.Property(e => e.DebtorDeliverAddress1).HasMaxLength(40);
            entity.Property(e => e.DebtorDeliverAddress2).HasMaxLength(40);
            entity.Property(e => e.DebtorDeliverAddress3).HasMaxLength(40);
            entity.Property(e => e.DebtorDeliverAddress4).HasMaxLength(40);
            entity.Property(e => e.DebtorDeliverPostCode).HasMaxLength(10);
            entity.Property(e => e.DebtorDesc2).HasMaxLength(100);
            entity.Property(e => e.DebtorDisplayTerm).HasMaxLength(30);
            entity.Property(e => e.DebtorEmailAddress).HasMaxLength(200);
            entity.Property(e => e.DebtorExemptExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.DebtorExemptNo).HasMaxLength(60);
            entity.Property(e => e.DebtorFax1).HasMaxLength(25);
            entity.Property(e => e.DebtorFax2).HasMaxLength(25);
            entity.Property(e => e.DebtorGstregisterNo)
                .HasMaxLength(20)
                .HasColumnName("DebtorGSTRegisterNo");
            entity.Property(e => e.DebtorGststatusVerifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("DebtorGSTStatusVerifiedDate");
            entity.Property(e => e.DebtorInclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DebtorLastModified).HasColumnType("datetime");
            entity.Property(e => e.DebtorLastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("DebtorLastModifiedUserID");
            entity.Property(e => e.DebtorMobile).HasMaxLength(25);
            entity.Property(e => e.DebtorName).HasMaxLength(100);
            entity.Property(e => e.DebtorNatureOfBusiness).HasMaxLength(40);
            entity.Property(e => e.DebtorOverdueLimit).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DebtorParentAccNo).HasMaxLength(12);
            entity.Property(e => e.DebtorPhone1).HasMaxLength(25);
            entity.Property(e => e.DebtorPhone2).HasMaxLength(25);
            entity.Property(e => e.DebtorPostCode).HasMaxLength(10);
            entity.Property(e => e.DebtorPriceCategory).HasMaxLength(12);
            entity.Property(e => e.DebtorRegisterNo).HasMaxLength(30);
            entity.Property(e => e.DebtorSalesAgent).HasMaxLength(12);
            entity.Property(e => e.DebtorSalesAgentDesc2).HasMaxLength(40);
            entity.Property(e => e.DebtorSalesAgentDescription).HasMaxLength(40);
            entity.Property(e => e.DebtorSelfBilledApprovalNo).HasMaxLength(30);
            entity.Property(e => e.DebtorSstregisterNo)
                .HasMaxLength(20)
                .HasColumnName("DebtorSSTRegisterNo");
            entity.Property(e => e.DebtorStatementType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DebtorTaxCode).HasMaxLength(14);
            entity.Property(e => e.DebtorTaxRegisterNo).HasMaxLength(30);
            entity.Property(e => e.DebtorType).HasMaxLength(20);
            entity.Property(e => e.DebtorTypeDesc2).HasMaxLength(40);
            entity.Property(e => e.DebtorTypeDescription).HasMaxLength(40);
            entity.Property(e => e.DebtorUdfBangsa1)
                .HasMaxLength(50)
                .HasColumnName("DebtorUDF_Bangsa1");
            entity.Property(e => e.DebtorUdfBangsa2)
                .HasMaxLength(50)
                .HasColumnName("DebtorUDF_Bangsa2");
            entity.Property(e => e.DebtorUdfJantina)
                .HasMaxLength(20)
                .HasColumnName("DebtorUDF_Jantina");
            entity.Property(e => e.DebtorUdfKerakyatan)
                .HasMaxLength(50)
                .HasColumnName("DebtorUDF_Kerakyatan");
            entity.Property(e => e.DebtorUdfTarikhLahir)
                .HasColumnType("datetime")
                .HasColumnName("DebtorUDF_TarikhLahir");
            entity.Property(e => e.DebtorWebUrl)
                .HasMaxLength(80)
                .HasColumnName("DebtorWebURL");
            entity.Property(e => e.DeliverAddr1).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr2).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr3).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr4).HasMaxLength(40);
            entity.Property(e => e.DeliverContact).HasMaxLength(40);
            entity.Property(e => e.DeliverFax1).HasMaxLength(25);
            entity.Property(e => e.DeliverPhone1).HasMaxLength(25);
            entity.Property(e => e.DeliveryTaxEntityId).HasColumnName("DeliveryTaxEntityID");
            entity.Property(e => e.Description).HasMaxLength(80);
            entity.Property(e => e.DisplayTerm).HasMaxLength(30);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.DocStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EinvoiceAipsubmissionDateTime)
                .HasColumnType("datetime")
                .HasColumnName("EInvoiceAIPSubmissionDateTime");
            entity.Property(e => e.EinvoiceCancelDateTime)
                .HasColumnType("datetime")
                .HasColumnName("EInvoiceCancelDateTime");
            entity.Property(e => e.EinvoiceCancelReason)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceCancelReason");
            entity.Property(e => e.EinvoiceError)
                .IsUnicode(false)
                .HasColumnName("EInvoiceError");
            entity.Property(e => e.EinvoiceIssueDateTime)
                .HasColumnType("datetime")
                .HasColumnName("EInvoiceIssueDateTime");
            entity.Property(e => e.EinvoiceStatus)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceStatus");
            entity.Property(e => e.EinvoiceSubmissionDateTime)
                .HasColumnType("datetime")
                .HasColumnName("EInvoiceSubmissionDateTime");
            entity.Property(e => e.EinvoiceSubmissionUuid)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceSubmissionUuid");
            entity.Property(e => e.EinvoiceTraceId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceTraceId");
            entity.Property(e => e.EinvoiceUuid)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceUuid");
            entity.Property(e => e.EinvoiceValidatedDateTime)
                .HasColumnType("datetime")
                .HasColumnName("EInvoiceValidatedDateTime");
            entity.Property(e => e.EinvoiceValidationLink)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("EInvoiceValidationLink");
            entity.Property(e => e.ExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Fax1).HasMaxLength(25);
            entity.Property(e => e.FcgainAccount)
                .HasMaxLength(12)
                .HasColumnName("FCGainAccount");
            entity.Property(e => e.FclossAccount)
                .HasMaxLength(12)
                .HasColumnName("FCLossAccount");
            entity.Property(e => e.FinalTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer1TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Footer2Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer2TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Footer3Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer3TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.FreeTradeAgreementInformation)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.FreightAllowanceChargeAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.FreightAllowanceChargeReason)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.GainLossJournalType).HasMaxLength(10);
            entity.Property(e => e.InclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Incoterms)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.InvAddr1).HasMaxLength(40);
            entity.Property(e => e.InvAddr2).HasMaxLength(40);
            entity.Property(e => e.InvAddr3).HasMaxLength(40);
            entity.Property(e => e.InvAddr4).HasMaxLength(40);
            entity.Property(e => e.IsDebtorTaxRegistered)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.IsRoundAdj)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.IvudfSuperAppId)
                .HasMaxLength(32)
                .HasColumnName("IVUDF_SuperAppId");
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.LastModifiedUserName).HasMaxLength(40);
            entity.Property(e => e.LocalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalNetTotalAfterWht)
                .HasColumnType("decimal(21, 2)")
                .HasColumnName("LocalNetTotalAfterWHT");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTotalExTaxAndWht)
                .HasColumnType("decimal(22, 2)")
                .HasColumnName("LocalTotalExTaxAndWHT");
            entity.Property(e => e.LocalTotalWht)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("LocalTotalWHT");
            entity.Property(e => e.MemberAddress1).HasMaxLength(40);
            entity.Property(e => e.MemberAddress2).HasMaxLength(40);
            entity.Property(e => e.MemberAddress3).HasMaxLength(40);
            entity.Property(e => e.MemberAddress4).HasMaxLength(40);
            entity.Property(e => e.MemberDepartment).HasMaxLength(30);
            entity.Property(e => e.MemberDirectFax).HasMaxLength(25);
            entity.Property(e => e.MemberDirectPhone).HasMaxLength(25);
            entity.Property(e => e.MemberEmailAddress).HasMaxLength(200);
            entity.Property(e => e.MemberImaddress)
                .HasMaxLength(40)
                .HasColumnName("MemberIMAddress");
            entity.Property(e => e.MemberMobilePhone).HasMaxLength(25);
            entity.Property(e => e.MemberName).HasMaxLength(100);
            entity.Property(e => e.MemberNo).HasMaxLength(20);
            entity.Property(e => e.MemberTitle).HasMaxLength(40);
            entity.Property(e => e.MultiPrice).HasMaxLength(8);
            entity.Property(e => e.NetOutstanding).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.NetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.NetTotalAfterWht)
                .HasColumnType("decimal(21, 2)")
                .HasColumnName("NetTotalAfterWHT");
            entity.Property(e => e.Outstanding).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.PaymentAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Phone1).HasMaxLength(25);
            entity.Property(e => e.PostToGl)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PostToGL");
            entity.Property(e => e.PostToStock)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ReallocatePurchaseByProject)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ReallocatePurchaseByProjectJedocNo)
                .HasMaxLength(30)
                .HasColumnName("ReallocatePurchaseByProjectJEDocNo");
            entity.Property(e => e.Ref).HasMaxLength(40);
            entity.Property(e => e.RefDocNo).HasMaxLength(30);
            entity.Property(e => e.ReferenceNumberOfCustomsFormNo1And9)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.ReferenceNumberOfCustomsFormNo2)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.Remark1).HasMaxLength(40);
            entity.Property(e => e.Remark2).HasMaxLength(40);
            entity.Property(e => e.Remark3).HasMaxLength(40);
            entity.Property(e => e.Remark4).HasMaxLength(40);
            entity.Property(e => e.RoundAdj).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SalesAgent).HasMaxLength(12);
            entity.Property(e => e.SalesAgentDesc2).HasMaxLength(40);
            entity.Property(e => e.SalesAgentDescription).HasMaxLength(40);
            entity.Property(e => e.SalesExemptionExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.SalesExemptionNo).HasMaxLength(60);
            entity.Property(e => e.SalesLocation).HasMaxLength(8);
            entity.Property(e => e.ShipInfo).HasMaxLength(40);
            entity.Property(e => e.ShipVia).HasMaxLength(20);
            entity.Property(e => e.SubmitEinvoice)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SubmitEInvoice");
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyExTax).HasColumnType("decimal(38, 13)");
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxDate).HasColumnType("datetime");
            entity.Property(e => e.TaxDocNo).HasMaxLength(20);
            entity.Property(e => e.TaxEntityId).HasColumnName("TaxEntityID");
            entity.Property(e => e.TaxRegisterNo).HasMaxLength(30);
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ToDocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.ToTaxCurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.Total).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalBonusPoint).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalExTaxAndWht)
                .HasColumnType("decimal(21, 2)")
                .HasColumnName("TotalExTaxAndWHT");
            entity.Property(e => e.TotalWht)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("TotalWHT");
            entity.Property(e => e.TotalWithTax).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.Transferable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VInvoiceDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vInvoiceDetail");

            entity.Property(e => e.AccNo).HasMaxLength(12);
            entity.Property(e => e.AddToCost)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AddToSubTotal)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BarCode).HasMaxLength(30);
            entity.Property(e => e.BatchBalQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.BatchDescription).HasMaxLength(40);
            entity.Property(e => e.BatchExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.BatchItemCode).HasMaxLength(30);
            entity.Property(e => e.BatchManufacturedDate).HasColumnType("datetime");
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.BonusPoint).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.CalcByPercent).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Classification)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.DeliveryDate).HasColumnType("datetime");
            entity.Property(e => e.DeptDesc2).HasMaxLength(40);
            entity.Property(e => e.DeptDescription).HasMaxLength(40);
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Desc2).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.Discount).HasMaxLength(20);
            entity.Property(e => e.DiscountAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DocTaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.DtlType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EstimatedDeliveryDate).HasMaxLength(20);
            entity.Property(e => e.Focqty)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("FOCQty");
            entity.Property(e => e.FoctransferedQty)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("FOCTransferedQty");
            entity.Property(e => e.FontStyle).HasMaxLength(8);
            entity.Property(e => e.FromDocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.FullTransferOption)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.GovtTaxCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.ItemBaseUom)
                .HasMaxLength(8)
                .HasColumnName("ItemBaseUOM");
            entity.Property(e => e.ItemBrand).HasMaxLength(20);
            entity.Property(e => e.ItemBrandDescription).HasMaxLength(40);
            entity.Property(e => e.ItemCategory).HasMaxLength(20);
            entity.Property(e => e.ItemCategoryDescription).HasMaxLength(40);
            entity.Property(e => e.ItemClass).HasMaxLength(20);
            entity.Property(e => e.ItemClassDescription).HasMaxLength(40);
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.ItemDesc2).HasMaxLength(100);
            entity.Property(e => e.ItemDescription).HasMaxLength(100);
            entity.Property(e => e.ItemGroup).HasMaxLength(8);
            entity.Property(e => e.ItemGroupDescription).HasMaxLength(40);
            entity.Property(e => e.ItemType).HasMaxLength(12);
            entity.Property(e => e.ItemTypeDescription).HasMaxLength(40);
            entity.Property(e => e.ItemUdfWarDay).HasColumnName("ItemUDF_WarDay");
            entity.Property(e => e.IvdtludfDeliveryFocQty)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("IVDTLUDF_DeliveryFocQty");
            entity.Property(e => e.IvdtludfDeliveryQty)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("IVDTLUDF_DeliveryQty");
            entity.Property(e => e.LeadTime).HasMaxLength(40);
            entity.Property(e => e.LocalSubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalSubTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxAdjustment).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.LocationAddr1).HasMaxLength(40);
            entity.Property(e => e.LocationAddr2).HasMaxLength(40);
            entity.Property(e => e.LocationAddr3).HasMaxLength(40);
            entity.Property(e => e.LocationAddr4).HasMaxLength(40);
            entity.Property(e => e.LocationBalQty).HasColumnType("decimal(38, 8)");
            entity.Property(e => e.LocationContact).HasMaxLength(40);
            entity.Property(e => e.LocationDesc2).HasMaxLength(80);
            entity.Property(e => e.LocationDescription).HasMaxLength(80);
            entity.Property(e => e.LocationFax1).HasMaxLength(25);
            entity.Property(e => e.LocationFax2).HasMaxLength(25);
            entity.Property(e => e.LocationPhone1).HasMaxLength(25);
            entity.Property(e => e.LocationPhone2).HasMaxLength(25);
            entity.Property(e => e.LocationPostCode).HasMaxLength(10);
            entity.Property(e => e.MainItem)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Numbering).HasMaxLength(6);
            entity.Property(e => e.OriginCountryCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.OurDodate)
                .HasColumnType("datetime")
                .HasColumnName("OurDODate");
            entity.Property(e => e.OurDono)
                .HasMaxLength(30)
                .HasColumnName("OurDONo");
            entity.Property(e => e.PrintOut)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.ProjectDesc2).HasMaxLength(40);
            entity.Property(e => e.ProjectDescription).HasMaxLength(40);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SalesExemptionNo).HasMaxLength(60);
            entity.Property(e => e.Shelf).HasMaxLength(20);
            entity.Property(e => e.SmallestQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SmallestUnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SubTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SubTotalWithTax).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.TariffCode).HasMaxLength(12);
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxAccNo).HasMaxLength(12);
            entity.Property(e => e.TaxAdjustment).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCode).HasMaxLength(14);
            entity.Property(e => e.TaxCodeDescription).HasMaxLength(120);
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxPermitNo).HasMaxLength(20);
            entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Transferable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TransferedQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.UnitPriceAfterDiscount).HasColumnType("decimal(38, 13)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
            entity.Property(e => e.UombalQty)
                .HasColumnType("decimal(38, 8)")
                .HasColumnName("UOMBalQty");
            entity.Property(e => e.Uomcost)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMCost");
            entity.Property(e => e.UomitemCode)
                .HasMaxLength(30)
                .HasColumnName("UOMItemCode");
            entity.Property(e => e.Uomprice)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMPrice");
            entity.Property(e => e.Uomprice2)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMPrice2");
            entity.Property(e => e.Uomrate)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMRate");
            entity.Property(e => e.UomrealCost)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMRealCost");
            entity.Property(e => e.UserUom)
                .HasMaxLength(8)
                .HasColumnName("UserUOM");
            entity.Property(e => e.ValueXferSodocKey).HasColumnName("ValueXferSODocKey");
            entity.Property(e => e.Volume).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.VolumeUom)
                .HasMaxLength(8)
                .HasColumnName("VolumeUOM");
            entity.Property(e => e.Weight).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.WeightUom)
                .HasMaxLength(8)
                .HasColumnName("WeightUOM");
            entity.Property(e => e.YourPodate)
                .HasColumnType("datetime")
                .HasColumnName("YourPODate");
            entity.Property(e => e.YourPono)
                .HasMaxLength(25)
                .HasColumnName("YourPONo");
        });

        modelBuilder.Entity<VInvoiceSubDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vInvoiceSubDetail");

            entity.Property(e => e.AddToCost)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.Classification)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.Desc2).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.DocTaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.GovtTaxCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.IvdtludfDeliveryFocQty)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("IVDTLUDF_DeliveryFocQty");
            entity.Property(e => e.IvdtludfDeliveryQty)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("IVDTLUDF_DeliveryQty");
            entity.Property(e => e.LocalSubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.OriginCountryCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.PrintOut)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SalesExemptionNo).HasMaxLength(60);
            entity.Property(e => e.SubQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TariffCode).HasMaxLength(12);
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxAccNo).HasMaxLength(12);
            entity.Property(e => e.TaxCode).HasMaxLength(14);
            entity.Property(e => e.TaxCodeDescription).HasMaxLength(120);
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<VItem>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vItem");

            entity.Property(e => e.ItemBaseUom)
                .HasMaxLength(8)
                .HasColumnName("ItemBaseUOM");
            entity.Property(e => e.ItemBrand).HasMaxLength(20);
            entity.Property(e => e.ItemBrandDescription).HasMaxLength(40);
            entity.Property(e => e.ItemCategory).HasMaxLength(20);
            entity.Property(e => e.ItemCategoryDescription).HasMaxLength(40);
            entity.Property(e => e.ItemClass).HasMaxLength(20);
            entity.Property(e => e.ItemClassDescription).HasMaxLength(40);
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.ItemDesc2).HasMaxLength(100);
            entity.Property(e => e.ItemDescription).HasMaxLength(100);
            entity.Property(e => e.ItemGroup).HasMaxLength(8);
            entity.Property(e => e.ItemGroupDescription).HasMaxLength(40);
            entity.Property(e => e.ItemType).HasMaxLength(12);
            entity.Property(e => e.ItemTypeDescription).HasMaxLength(40);
            entity.Property(e => e.ItemUdfWarDay).HasColumnName("ItemUDF_WarDay");
            entity.Property(e => e.LeadTime).HasMaxLength(40);
        });

        modelBuilder.Entity<VItemBalQty>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vItemBalQty");

            entity.Property(e => e.BalQty).HasColumnType("decimal(38, 8)");
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<VItemBatch>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vItemBatch");

            entity.Property(e => e.BatchDescription).HasMaxLength(40);
            entity.Property(e => e.BatchExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.BatchItemCode).HasMaxLength(30);
            entity.Property(e => e.BatchManufacturedDate).HasColumnType("datetime");
            entity.Property(e => e.BatchNo).HasMaxLength(20);
        });

        modelBuilder.Entity<VItemBatchBalQty>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vItemBatchBalQty");

            entity.Property(e => e.BalQty).HasColumnType("decimal(38, 6)");
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.ItemCode).HasMaxLength(30);
        });

        modelBuilder.Entity<VItemBrand>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vItemBrand");

            entity.Property(e => e.ItemBrand).HasMaxLength(20);
            entity.Property(e => e.ItemBrandDesc2).HasMaxLength(40);
            entity.Property(e => e.ItemBrandDescription).HasMaxLength(40);
        });

        modelBuilder.Entity<VItemCategory>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vItemCategory");

            entity.Property(e => e.ItemCategory).HasMaxLength(20);
            entity.Property(e => e.ItemCategoryDesc2).HasMaxLength(40);
            entity.Property(e => e.ItemCategoryDescription).HasMaxLength(40);
        });

        modelBuilder.Entity<VItemClass>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vItemClass");

            entity.Property(e => e.ItemClass).HasMaxLength(20);
            entity.Property(e => e.ItemClassDesc2).HasMaxLength(40);
            entity.Property(e => e.ItemClassDescription).HasMaxLength(40);
        });

        modelBuilder.Entity<VItemGroup>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vItemGroup");

            entity.Property(e => e.ItemGroup).HasMaxLength(8);
            entity.Property(e => e.ItemGroupDesc2).HasMaxLength(40);
            entity.Property(e => e.ItemGroupDescription).HasMaxLength(40);
        });

        modelBuilder.Entity<VItemType>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vItemType");

            entity.Property(e => e.ItemType).HasMaxLength(12);
            entity.Property(e => e.ItemTypeDesc2).HasMaxLength(40);
            entity.Property(e => e.ItemTypeDescription).HasMaxLength(40);
        });

        modelBuilder.Entity<VItemUom>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vItemUOM");

            entity.Property(e => e.BarCode).HasMaxLength(30);
            entity.Property(e => e.Shelf).HasMaxLength(20);
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
            entity.Property(e => e.UombalQty)
                .HasColumnType("decimal(38, 8)")
                .HasColumnName("UOMBalQty");
            entity.Property(e => e.Uomcost)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMCost");
            entity.Property(e => e.UomitemCode)
                .HasMaxLength(30)
                .HasColumnName("UOMItemCode");
            entity.Property(e => e.Uomprice)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMPrice");
            entity.Property(e => e.Uomprice2)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMPrice2");
            entity.Property(e => e.Uomrate)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMRate");
            entity.Property(e => e.UomrealCost)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMRealCost");
            entity.Property(e => e.Volume).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.VolumeUom)
                .HasMaxLength(8)
                .HasColumnName("VolumeUOM");
            entity.Property(e => e.Weight).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.WeightUom)
                .HasMaxLength(8)
                .HasColumnName("WeightUOM");
        });

        modelBuilder.Entity<VItemUombalQty>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vItemUOMBalQty");

            entity.Property(e => e.BalQty).HasColumnType("decimal(38, 8)");
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<VJournalEntry>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vJournalEntry");

            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.CreatedUserName).HasMaxLength(40);
            entity.Property(e => e.CurrencyCode).HasMaxLength(5);
            entity.Property(e => e.CurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.CurrencySymbol).HasMaxLength(6);
            entity.Property(e => e.CurrencyWord).HasMaxLength(40);
            entity.Property(e => e.CurrencyWord2).HasMaxLength(40);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.DocNo2).HasMaxLength(25);
            entity.Property(e => e.DocStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ExTaxCr)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("ExTaxCR");
            entity.Property(e => e.ExTaxDr)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("ExTaxDR");
            entity.Property(e => e.FcgainAccount)
                .HasMaxLength(12)
                .HasColumnName("FCGainAccount");
            entity.Property(e => e.FclossAccount)
                .HasMaxLength(12)
                .HasColumnName("FCLossAccount");
            entity.Property(e => e.GainLossJournalType).HasMaxLength(10);
            entity.Property(e => e.InclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.JournalType).HasMaxLength(10);
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.LastModifiedUserName).HasMaxLength(40);
            entity.Property(e => e.LocalExTaxCr)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("LocalExTaxCR");
            entity.Property(e => e.LocalExTaxDr)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("LocalExTaxDR");
            entity.Property(e => e.LocalNetTotalCr)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("LocalNetTotalCR");
            entity.Property(e => e.LocalNetTotalDr)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("LocalNetTotalDR");
            entity.Property(e => e.LocalTaxCr)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("LocalTaxCR");
            entity.Property(e => e.LocalTaxDr)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("LocalTaxDR");
            entity.Property(e => e.LocalTaxableCr)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("LocalTaxableCR");
            entity.Property(e => e.LocalTaxableDr)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("LocalTaxableDR");
            entity.Property(e => e.LocalTotalCr)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("LocalTotalCR");
            entity.Property(e => e.LocalTotalCrexTax)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("LocalTotalCRExTax");
            entity.Property(e => e.LocalTotalDr)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("LocalTotalDR");
            entity.Property(e => e.LocalTotalDrexTax)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("LocalTotalDRExTax");
            entity.Property(e => e.NetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.NetTotalCr)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("NetTotalCR");
            entity.Property(e => e.NetTotalDr)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("NetTotalDR");
            entity.Property(e => e.PostDetailDesc)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SourceType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.TaxCr)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("TaxCR");
            entity.Property(e => e.TaxCurrencyTaxCr)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("TaxCurrencyTaxCR");
            entity.Property(e => e.TaxCurrencyTaxDr)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("TaxCurrencyTaxDR");
            entity.Property(e => e.TaxCurrencyTaxableCr)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("TaxCurrencyTaxableCR");
            entity.Property(e => e.TaxCurrencyTaxableDr)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("TaxCurrencyTaxableDR");
            entity.Property(e => e.TaxDate).HasColumnType("datetime");
            entity.Property(e => e.TaxDr)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("TaxDR");
            entity.Property(e => e.TaxableCr)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("TaxableCR");
            entity.Property(e => e.TaxableDr)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("TaxableDR");
            entity.Property(e => e.ToTaxCurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.TotalCr)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("TotalCR");
            entity.Property(e => e.TotalCrexTax)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("TotalCRExTax");
            entity.Property(e => e.TotalDr)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("TotalDR");
            entity.Property(e => e.TotalDrexTax)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("TotalDRExTax");
        });

        modelBuilder.Entity<VJournalEntryDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vJournalEntryDetail");

            entity.Property(e => e.AccCurrencyCode).HasMaxLength(5);
            entity.Property(e => e.AccDesc2).HasMaxLength(100);
            entity.Property(e => e.AccDescription).HasMaxLength(100);
            entity.Property(e => e.AccNo).HasMaxLength(12);
            entity.Property(e => e.AccType).HasMaxLength(2);
            entity.Property(e => e.AddToCost)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Cr)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("CR");
            entity.Property(e => e.DeptDesc2).HasMaxLength(40);
            entity.Property(e => e.DeptDescription).HasMaxLength(40);
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.DetailTaxDate).HasColumnType("datetime");
            entity.Property(e => e.DocTaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Dr)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("DR");
            entity.Property(e => e.GovtTaxCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.HomeCr)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("HomeCR");
            entity.Property(e => e.HomeDr)
                .HasColumnType("decimal(38, 13)")
                .HasColumnName("HomeDR");
            entity.Property(e => e.InclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LocalTaxAdjustment).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxCr)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("LocalTaxCR");
            entity.Property(e => e.LocalTaxDr)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("LocalTaxDR");
            entity.Property(e => e.LocalTaxableCr)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("LocalTaxableCR");
            entity.Property(e => e.LocalTaxableDr)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("LocalTaxableDR");
            entity.Property(e => e.PostingDate).HasColumnType("datetime");
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.ProjectDesc2).HasMaxLength(40);
            entity.Property(e => e.ProjectDescription).HasMaxLength(40);
            entity.Property(e => e.RefNo2).HasMaxLength(30);
            entity.Property(e => e.SalesAgent).HasMaxLength(12);
            entity.Property(e => e.SalesAgentDesc2).HasMaxLength(40);
            entity.Property(e => e.SalesAgentDescription).HasMaxLength(40);
            entity.Property(e => e.SpecialAccType)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.SupplyPurchase)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TariffCode).HasMaxLength(12);
            entity.Property(e => e.TaxAccNo).HasMaxLength(12);
            entity.Property(e => e.TaxAdjustment).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxBillDate).HasColumnType("datetime");
            entity.Property(e => e.TaxBname)
                .HasMaxLength(100)
                .HasColumnName("TaxBName");
            entity.Property(e => e.TaxBrno)
                .HasMaxLength(30)
                .HasColumnName("TaxBRNo");
            entity.Property(e => e.TaxCode).HasMaxLength(14);
            entity.Property(e => e.TaxCodeDescription).HasMaxLength(120);
            entity.Property(e => e.TaxCr)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("TaxCR");
            entity.Property(e => e.TaxCurrencyTaxCr)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("TaxCurrencyTaxCR");
            entity.Property(e => e.TaxCurrencyTaxDr)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("TaxCurrencyTaxDR");
            entity.Property(e => e.TaxCurrencyTaxableCr)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("TaxCurrencyTaxableCR");
            entity.Property(e => e.TaxCurrencyTaxableDr)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("TaxCurrencyTaxableDR");
            entity.Property(e => e.TaxDr)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("TaxDR");
            entity.Property(e => e.TaxPermitNo).HasMaxLength(20);
            entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.TaxRefNo).HasMaxLength(30);
            entity.Property(e => e.TaxRegisterNo).HasMaxLength(30);
            entity.Property(e => e.TaxableCr)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("TaxableCR");
            entity.Property(e => e.TaxableDr)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("TaxableDR");
            entity.Property(e => e.ToAccountRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.TotalCr)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("TotalCR");
            entity.Property(e => e.TotalDr)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("TotalDR");
        });

        modelBuilder.Entity<VJournalOfTransaction>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vJournalOfTransaction");

            entity.Property(e => e.AccDesc2).HasMaxLength(100);
            entity.Property(e => e.AccDescription).HasMaxLength(100);
            entity.Property(e => e.AccNo).HasMaxLength(12);
            entity.Property(e => e.Cr)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("CR");
            entity.Property(e => e.CurrencyCode).HasMaxLength(5);
            entity.Property(e => e.CurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.DeaccDesc2)
                .HasMaxLength(100)
                .HasColumnName("DEAccDesc2");
            entity.Property(e => e.DeaccDescription)
                .HasMaxLength(100)
                .HasColumnName("DEAccDescription");
            entity.Property(e => e.DeaccNo)
                .HasMaxLength(12)
                .HasColumnName("DEAccNo");
            entity.Property(e => e.Dr)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("DR");
            entity.Property(e => e.HomeCr)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("HomeCR");
            entity.Property(e => e.HomeDr)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("HomeDR");
            entity.Property(e => e.JournalType).HasMaxLength(10);
            entity.Property(e => e.OrgCr)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("OrgCR");
            entity.Property(e => e.OrgDr)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("OrgDR");
            entity.Property(e => e.RefNo1).HasMaxLength(30);
            entity.Property(e => e.RefNo2).HasMaxLength(30);
            entity.Property(e => e.SourceType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.ToHomeRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.TransDate).HasColumnType("datetime");
            entity.Property(e => e.UserId)
                .HasMaxLength(10)
                .HasColumnName("UserID");
        });

        modelBuilder.Entity<VLocation>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vLocation");

            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.LocationAddr1).HasMaxLength(40);
            entity.Property(e => e.LocationAddr2).HasMaxLength(40);
            entity.Property(e => e.LocationAddr3).HasMaxLength(40);
            entity.Property(e => e.LocationAddr4).HasMaxLength(40);
            entity.Property(e => e.LocationContact).HasMaxLength(40);
            entity.Property(e => e.LocationDesc2).HasMaxLength(80);
            entity.Property(e => e.LocationDescription).HasMaxLength(80);
            entity.Property(e => e.LocationFax1).HasMaxLength(25);
            entity.Property(e => e.LocationFax2).HasMaxLength(25);
            entity.Property(e => e.LocationPhone1).HasMaxLength(25);
            entity.Property(e => e.LocationPhone2).HasMaxLength(25);
            entity.Property(e => e.LocationPostCode).HasMaxLength(10);
        });

        modelBuilder.Entity<VMember>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vMember");

            entity.Property(e => e.MemberAddress1).HasMaxLength(40);
            entity.Property(e => e.MemberAddress2).HasMaxLength(40);
            entity.Property(e => e.MemberAddress3).HasMaxLength(40);
            entity.Property(e => e.MemberAddress4).HasMaxLength(40);
            entity.Property(e => e.MemberDepartment).HasMaxLength(30);
            entity.Property(e => e.MemberDirectFax).HasMaxLength(25);
            entity.Property(e => e.MemberDirectPhone).HasMaxLength(25);
            entity.Property(e => e.MemberEmailAddress).HasMaxLength(200);
            entity.Property(e => e.MemberImaddress)
                .HasMaxLength(40)
                .HasColumnName("MemberIMAddress");
            entity.Property(e => e.MemberMobilePhone).HasMaxLength(25);
            entity.Property(e => e.MemberName).HasMaxLength(100);
            entity.Property(e => e.MemberNo).HasMaxLength(20);
            entity.Property(e => e.MemberTitle).HasMaxLength(40);
        });

        modelBuilder.Entity<VPaymentMethod>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vPaymentMethod");

            entity.Property(e => e.AcceptChequeNo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BankAccount).HasMaxLength(12);
            entity.Property(e => e.BankChargeAccount).HasMaxLength(12);
            entity.Property(e => e.BankChargePercent).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.IsActive)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.JournalType).HasMaxLength(10);
            entity.Property(e => e.MergeBankChargeTrans)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Odlimit)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("ODLimit");
            entity.Property(e => e.PaymentFormatName).HasMaxLength(20);
            entity.Property(e => e.PaymentMethod).HasMaxLength(20);
            entity.Property(e => e.ReceiptFormatName).HasMaxLength(20);
            entity.Property(e => e.SpecialAccType)
                .HasMaxLength(3)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VProject>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vProject");

            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.ProjectDesc2).HasMaxLength(40);
            entity.Property(e => e.ProjectDescription).HasMaxLength(40);
        });

        modelBuilder.Entity<VPurchaseAgent>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vPurchaseAgent");

            entity.Property(e => e.PurchaseAgent).HasMaxLength(12);
            entity.Property(e => e.PurchaseAgentDesc2).HasMaxLength(40);
            entity.Property(e => e.PurchaseAgentDescription).HasMaxLength(40);
        });

        modelBuilder.Entity<VPurchaseConsignment>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vPurchaseConsignment");

            entity.Property(e => e.Attention).HasMaxLength(40);
            entity.Property(e => e.BranchAccNo).HasMaxLength(12);
            entity.Property(e => e.BranchAddress1).HasMaxLength(40);
            entity.Property(e => e.BranchAddress2).HasMaxLength(40);
            entity.Property(e => e.BranchAddress3).HasMaxLength(40);
            entity.Property(e => e.BranchAddress4).HasMaxLength(40);
            entity.Property(e => e.BranchAreaCode).HasMaxLength(12);
            entity.Property(e => e.BranchCode).HasMaxLength(20);
            entity.Property(e => e.BranchContact).HasMaxLength(40);
            entity.Property(e => e.BranchEmailAddress).HasMaxLength(80);
            entity.Property(e => e.BranchFax1).HasMaxLength(25);
            entity.Property(e => e.BranchFax2).HasMaxLength(25);
            entity.Property(e => e.BranchIsActive)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BranchMobile).HasMaxLength(25);
            entity.Property(e => e.BranchName).HasMaxLength(100);
            entity.Property(e => e.BranchPhone1).HasMaxLength(25);
            entity.Property(e => e.BranchPhone2).HasMaxLength(25);
            entity.Property(e => e.BranchPostCode).HasMaxLength(10);
            entity.Property(e => e.BranchPurchaseAgent).HasMaxLength(12);
            entity.Property(e => e.BranchSalesAgent).HasMaxLength(12);
            entity.Property(e => e.CanSync)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.CreatedUserName).HasMaxLength(40);
            entity.Property(e => e.CreditorAddress1).HasMaxLength(40);
            entity.Property(e => e.CreditorAddress2).HasMaxLength(40);
            entity.Property(e => e.CreditorAddress3).HasMaxLength(40);
            entity.Property(e => e.CreditorAddress4).HasMaxLength(40);
            entity.Property(e => e.CreditorAgingOn)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreditorAreaCode).HasMaxLength(12);
            entity.Property(e => e.CreditorAreaDesc2).HasMaxLength(40);
            entity.Property(e => e.CreditorAreaDescription).HasMaxLength(40);
            entity.Property(e => e.CreditorAttention).HasMaxLength(40);
            entity.Property(e => e.CreditorCode).HasMaxLength(12);
            entity.Property(e => e.CreditorCompanyName).HasMaxLength(100);
            entity.Property(e => e.CreditorCreatedTimestamp).HasColumnType("datetime");
            entity.Property(e => e.CreditorCreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreditorCreatedUserID");
            entity.Property(e => e.CreditorCreditLimit).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.CreditorCurrencyCode).HasMaxLength(5);
            entity.Property(e => e.CreditorDeliverAddress1).HasMaxLength(40);
            entity.Property(e => e.CreditorDeliverAddress2).HasMaxLength(40);
            entity.Property(e => e.CreditorDeliverAddress3).HasMaxLength(40);
            entity.Property(e => e.CreditorDeliverAddress4).HasMaxLength(40);
            entity.Property(e => e.CreditorDeliverPostCode).HasMaxLength(10);
            entity.Property(e => e.CreditorDesc2).HasMaxLength(100);
            entity.Property(e => e.CreditorDisplayTerm).HasMaxLength(30);
            entity.Property(e => e.CreditorEmailAddress).HasMaxLength(200);
            entity.Property(e => e.CreditorExemptExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.CreditorExemptNo).HasMaxLength(60);
            entity.Property(e => e.CreditorFax1).HasMaxLength(25);
            entity.Property(e => e.CreditorFax2).HasMaxLength(25);
            entity.Property(e => e.CreditorGstregisterNo)
                .HasMaxLength(20)
                .HasColumnName("CreditorGSTRegisterNo");
            entity.Property(e => e.CreditorGststatusVerifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("CreditorGSTStatusVerifiedDate");
            entity.Property(e => e.CreditorInclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreditorLastModified).HasColumnType("datetime");
            entity.Property(e => e.CreditorLastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreditorLastModifiedUserID");
            entity.Property(e => e.CreditorMobile).HasMaxLength(25);
            entity.Property(e => e.CreditorName).HasMaxLength(100);
            entity.Property(e => e.CreditorNatureOfBusiness).HasMaxLength(40);
            entity.Property(e => e.CreditorOverdueLimit).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.CreditorParentAccNo).HasMaxLength(12);
            entity.Property(e => e.CreditorPhone1).HasMaxLength(25);
            entity.Property(e => e.CreditorPhone2).HasMaxLength(25);
            entity.Property(e => e.CreditorPostCode).HasMaxLength(10);
            entity.Property(e => e.CreditorPriceCategory).HasMaxLength(12);
            entity.Property(e => e.CreditorPurchaseAgent).HasMaxLength(12);
            entity.Property(e => e.CreditorPurchaseAgentDesc2).HasMaxLength(40);
            entity.Property(e => e.CreditorPurchaseAgentDescription).HasMaxLength(40);
            entity.Property(e => e.CreditorRegisterNo).HasMaxLength(30);
            entity.Property(e => e.CreditorSelfBilledApprovalNo).HasMaxLength(30);
            entity.Property(e => e.CreditorSstregisterNo)
                .HasMaxLength(20)
                .HasColumnName("CreditorSSTRegisterNo");
            entity.Property(e => e.CreditorStatementType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreditorTaxCode).HasMaxLength(14);
            entity.Property(e => e.CreditorTaxRegisterNo).HasMaxLength(30);
            entity.Property(e => e.CreditorType).HasMaxLength(20);
            entity.Property(e => e.CreditorTypeDesc2).HasMaxLength(40);
            entity.Property(e => e.CreditorTypeDescription).HasMaxLength(40);
            entity.Property(e => e.CreditorWebUrl)
                .HasMaxLength(80)
                .HasColumnName("CreditorWebURL");
            entity.Property(e => e.CurrencyCode).HasMaxLength(5);
            entity.Property(e => e.CurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.CurrencySymbol).HasMaxLength(6);
            entity.Property(e => e.CurrencyWord).HasMaxLength(40);
            entity.Property(e => e.CurrencyWord2).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr1).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr2).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr3).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr4).HasMaxLength(40);
            entity.Property(e => e.DeliverContact).HasMaxLength(40);
            entity.Property(e => e.DeliverFax1).HasMaxLength(25);
            entity.Property(e => e.DeliverPhone1).HasMaxLength(25);
            entity.Property(e => e.Description).HasMaxLength(80);
            entity.Property(e => e.DisplayTerm).HasMaxLength(30);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.DocStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Fax1).HasMaxLength(25);
            entity.Property(e => e.FcgainAccount)
                .HasMaxLength(12)
                .HasColumnName("FCGainAccount");
            entity.Property(e => e.FclossAccount)
                .HasMaxLength(12)
                .HasColumnName("FCLossAccount");
            entity.Property(e => e.GainLossJournalType).HasMaxLength(10);
            entity.Property(e => e.InclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.InvAddr1).HasMaxLength(40);
            entity.Property(e => e.InvAddr2).HasMaxLength(40);
            entity.Property(e => e.InvAddr3).HasMaxLength(40);
            entity.Property(e => e.InvAddr4).HasMaxLength(40);
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.LastModifiedUserName).HasMaxLength(40);
            entity.Property(e => e.LocalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.NetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Phone1).HasMaxLength(25);
            entity.Property(e => e.PurchaseAgent).HasMaxLength(12);
            entity.Property(e => e.PurchaseAgentDesc2).HasMaxLength(40);
            entity.Property(e => e.PurchaseAgentDescription).HasMaxLength(40);
            entity.Property(e => e.PurchaseLocation).HasMaxLength(8);
            entity.Property(e => e.Ref).HasMaxLength(40);
            entity.Property(e => e.RefDocNo).HasMaxLength(30);
            entity.Property(e => e.Remark1).HasMaxLength(40);
            entity.Property(e => e.Remark2).HasMaxLength(40);
            entity.Property(e => e.Remark3).HasMaxLength(40);
            entity.Property(e => e.Remark4).HasMaxLength(40);
            entity.Property(e => e.ShipInfo).HasMaxLength(40);
            entity.Property(e => e.ShipVia).HasMaxLength(20);
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyExTax).HasColumnType("decimal(38, 13)");
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ToDocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.ToTaxCurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.Total).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalWithTax).HasColumnType("decimal(20, 2)");
        });

        modelBuilder.Entity<VPurchaseConsignmentDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vPurchaseConsignmentDetail");

            entity.Property(e => e.AddToCost)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AddToSubTotal)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BarCode).HasMaxLength(30);
            entity.Property(e => e.BatchBalQty).HasColumnType("decimal(38, 8)");
            entity.Property(e => e.CalcByPercent).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.DeliveryDate).HasColumnType("datetime");
            entity.Property(e => e.DeptDesc2).HasMaxLength(40);
            entity.Property(e => e.DeptDescription).HasMaxLength(40);
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Desc2).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.Discount).HasMaxLength(20);
            entity.Property(e => e.DiscountAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DocTaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.DtlType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EstimatedDeliveryDate).HasMaxLength(20);
            entity.Property(e => e.FontStyle).HasMaxLength(8);
            entity.Property(e => e.FromDocNo).HasMaxLength(30);
            entity.Property(e => e.FromDocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.FullTransferOption)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.GovtTaxCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.ItemBaseUom)
                .HasMaxLength(8)
                .HasColumnName("ItemBaseUOM");
            entity.Property(e => e.ItemBrand).HasMaxLength(20);
            entity.Property(e => e.ItemBrandDescription).HasMaxLength(40);
            entity.Property(e => e.ItemCategory).HasMaxLength(20);
            entity.Property(e => e.ItemCategoryDescription).HasMaxLength(40);
            entity.Property(e => e.ItemClass).HasMaxLength(20);
            entity.Property(e => e.ItemClassDescription).HasMaxLength(40);
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.ItemDesc2).HasMaxLength(100);
            entity.Property(e => e.ItemDescription).HasMaxLength(100);
            entity.Property(e => e.ItemGroup).HasMaxLength(8);
            entity.Property(e => e.ItemGroupDescription).HasMaxLength(40);
            entity.Property(e => e.ItemType).HasMaxLength(12);
            entity.Property(e => e.ItemTypeDescription).HasMaxLength(40);
            entity.Property(e => e.ItemUdfWarDay).HasColumnName("ItemUDF_WarDay");
            entity.Property(e => e.LeadTime).HasMaxLength(40);
            entity.Property(e => e.LocalSubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalSubTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.LocationAddr1).HasMaxLength(40);
            entity.Property(e => e.LocationAddr2).HasMaxLength(40);
            entity.Property(e => e.LocationAddr3).HasMaxLength(40);
            entity.Property(e => e.LocationAddr4).HasMaxLength(40);
            entity.Property(e => e.LocationBalQty).HasColumnType("decimal(38, 8)");
            entity.Property(e => e.LocationContact).HasMaxLength(40);
            entity.Property(e => e.LocationDesc2).HasMaxLength(80);
            entity.Property(e => e.LocationDescription).HasMaxLength(80);
            entity.Property(e => e.LocationFax1).HasMaxLength(25);
            entity.Property(e => e.LocationFax2).HasMaxLength(25);
            entity.Property(e => e.LocationPhone1).HasMaxLength(25);
            entity.Property(e => e.LocationPhone2).HasMaxLength(25);
            entity.Property(e => e.LocationPostCode).HasMaxLength(10);
            entity.Property(e => e.MainItem)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Numbering).HasMaxLength(6);
            entity.Property(e => e.PrintOut)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.ProjectDesc2).HasMaxLength(40);
            entity.Property(e => e.ProjectDescription).HasMaxLength(40);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Remark).HasMaxLength(100);
            entity.Property(e => e.Shelf).HasMaxLength(20);
            entity.Property(e => e.SmallestQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SmallestUnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SubTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SubTotalWithTax).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxAccNo).HasMaxLength(12);
            entity.Property(e => e.TaxCode).HasMaxLength(14);
            entity.Property(e => e.TaxCodeDescription).HasMaxLength(120);
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TransferedQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.UnitPriceAfterDiscount).HasColumnType("decimal(38, 13)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
            entity.Property(e => e.UombalQty)
                .HasColumnType("decimal(38, 8)")
                .HasColumnName("UOMBalQty");
            entity.Property(e => e.Uomcost)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMCost");
            entity.Property(e => e.UomitemCode)
                .HasMaxLength(30)
                .HasColumnName("UOMItemCode");
            entity.Property(e => e.Uomprice)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMPrice");
            entity.Property(e => e.Uomprice2)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMPrice2");
            entity.Property(e => e.Uomrate)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMRate");
            entity.Property(e => e.UomrealCost)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMRealCost");
            entity.Property(e => e.UserUom)
                .HasMaxLength(8)
                .HasColumnName("UserUOM");
            entity.Property(e => e.Volume).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.VolumeUom)
                .HasMaxLength(8)
                .HasColumnName("VolumeUOM");
            entity.Property(e => e.Weight).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.WeightUom)
                .HasMaxLength(8)
                .HasColumnName("WeightUOM");
        });

        modelBuilder.Entity<VPurchaseConsignmentReturn>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vPurchaseConsignmentReturn");

            entity.Property(e => e.Attention).HasMaxLength(40);
            entity.Property(e => e.BranchAccNo).HasMaxLength(12);
            entity.Property(e => e.BranchAddress1).HasMaxLength(40);
            entity.Property(e => e.BranchAddress2).HasMaxLength(40);
            entity.Property(e => e.BranchAddress3).HasMaxLength(40);
            entity.Property(e => e.BranchAddress4).HasMaxLength(40);
            entity.Property(e => e.BranchAreaCode).HasMaxLength(12);
            entity.Property(e => e.BranchCode).HasMaxLength(20);
            entity.Property(e => e.BranchContact).HasMaxLength(40);
            entity.Property(e => e.BranchEmailAddress).HasMaxLength(80);
            entity.Property(e => e.BranchFax1).HasMaxLength(25);
            entity.Property(e => e.BranchFax2).HasMaxLength(25);
            entity.Property(e => e.BranchIsActive)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BranchMobile).HasMaxLength(25);
            entity.Property(e => e.BranchName).HasMaxLength(100);
            entity.Property(e => e.BranchPhone1).HasMaxLength(25);
            entity.Property(e => e.BranchPhone2).HasMaxLength(25);
            entity.Property(e => e.BranchPostCode).HasMaxLength(10);
            entity.Property(e => e.BranchPurchaseAgent).HasMaxLength(12);
            entity.Property(e => e.BranchSalesAgent).HasMaxLength(12);
            entity.Property(e => e.CanSync)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.CreatedUserName).HasMaxLength(40);
            entity.Property(e => e.CreditorAddress1).HasMaxLength(40);
            entity.Property(e => e.CreditorAddress2).HasMaxLength(40);
            entity.Property(e => e.CreditorAddress3).HasMaxLength(40);
            entity.Property(e => e.CreditorAddress4).HasMaxLength(40);
            entity.Property(e => e.CreditorAgingOn)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreditorAreaCode).HasMaxLength(12);
            entity.Property(e => e.CreditorAreaDesc2).HasMaxLength(40);
            entity.Property(e => e.CreditorAreaDescription).HasMaxLength(40);
            entity.Property(e => e.CreditorAttention).HasMaxLength(40);
            entity.Property(e => e.CreditorCode).HasMaxLength(12);
            entity.Property(e => e.CreditorCompanyName).HasMaxLength(100);
            entity.Property(e => e.CreditorCreatedTimestamp).HasColumnType("datetime");
            entity.Property(e => e.CreditorCreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreditorCreatedUserID");
            entity.Property(e => e.CreditorCreditLimit).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.CreditorCurrencyCode).HasMaxLength(5);
            entity.Property(e => e.CreditorDeliverAddress1).HasMaxLength(40);
            entity.Property(e => e.CreditorDeliverAddress2).HasMaxLength(40);
            entity.Property(e => e.CreditorDeliverAddress3).HasMaxLength(40);
            entity.Property(e => e.CreditorDeliverAddress4).HasMaxLength(40);
            entity.Property(e => e.CreditorDeliverPostCode).HasMaxLength(10);
            entity.Property(e => e.CreditorDesc2).HasMaxLength(100);
            entity.Property(e => e.CreditorDisplayTerm).HasMaxLength(30);
            entity.Property(e => e.CreditorEmailAddress).HasMaxLength(200);
            entity.Property(e => e.CreditorExemptExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.CreditorExemptNo).HasMaxLength(60);
            entity.Property(e => e.CreditorFax1).HasMaxLength(25);
            entity.Property(e => e.CreditorFax2).HasMaxLength(25);
            entity.Property(e => e.CreditorGstregisterNo)
                .HasMaxLength(20)
                .HasColumnName("CreditorGSTRegisterNo");
            entity.Property(e => e.CreditorGststatusVerifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("CreditorGSTStatusVerifiedDate");
            entity.Property(e => e.CreditorInclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreditorLastModified).HasColumnType("datetime");
            entity.Property(e => e.CreditorLastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreditorLastModifiedUserID");
            entity.Property(e => e.CreditorMobile).HasMaxLength(25);
            entity.Property(e => e.CreditorName).HasMaxLength(100);
            entity.Property(e => e.CreditorNatureOfBusiness).HasMaxLength(40);
            entity.Property(e => e.CreditorOverdueLimit).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.CreditorParentAccNo).HasMaxLength(12);
            entity.Property(e => e.CreditorPhone1).HasMaxLength(25);
            entity.Property(e => e.CreditorPhone2).HasMaxLength(25);
            entity.Property(e => e.CreditorPostCode).HasMaxLength(10);
            entity.Property(e => e.CreditorPriceCategory).HasMaxLength(12);
            entity.Property(e => e.CreditorPurchaseAgent).HasMaxLength(12);
            entity.Property(e => e.CreditorPurchaseAgentDesc2).HasMaxLength(40);
            entity.Property(e => e.CreditorPurchaseAgentDescription).HasMaxLength(40);
            entity.Property(e => e.CreditorRegisterNo).HasMaxLength(30);
            entity.Property(e => e.CreditorSelfBilledApprovalNo).HasMaxLength(30);
            entity.Property(e => e.CreditorSstregisterNo)
                .HasMaxLength(20)
                .HasColumnName("CreditorSSTRegisterNo");
            entity.Property(e => e.CreditorStatementType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreditorTaxCode).HasMaxLength(14);
            entity.Property(e => e.CreditorTaxRegisterNo).HasMaxLength(30);
            entity.Property(e => e.CreditorType).HasMaxLength(20);
            entity.Property(e => e.CreditorTypeDesc2).HasMaxLength(40);
            entity.Property(e => e.CreditorTypeDescription).HasMaxLength(40);
            entity.Property(e => e.CreditorWebUrl)
                .HasMaxLength(80)
                .HasColumnName("CreditorWebURL");
            entity.Property(e => e.CurrencyCode).HasMaxLength(5);
            entity.Property(e => e.CurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.CurrencySymbol).HasMaxLength(6);
            entity.Property(e => e.CurrencyWord).HasMaxLength(40);
            entity.Property(e => e.CurrencyWord2).HasMaxLength(40);
            entity.Property(e => e.Description).HasMaxLength(80);
            entity.Property(e => e.DisplayTerm).HasMaxLength(30);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.DocStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Fax1).HasMaxLength(25);
            entity.Property(e => e.FcgainAccount)
                .HasMaxLength(12)
                .HasColumnName("FCGainAccount");
            entity.Property(e => e.FclossAccount)
                .HasMaxLength(12)
                .HasColumnName("FCLossAccount");
            entity.Property(e => e.GainLossJournalType).HasMaxLength(10);
            entity.Property(e => e.InclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.InvAddr1).HasMaxLength(40);
            entity.Property(e => e.InvAddr2).HasMaxLength(40);
            entity.Property(e => e.InvAddr3).HasMaxLength(40);
            entity.Property(e => e.InvAddr4).HasMaxLength(40);
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.LastModifiedUserName).HasMaxLength(40);
            entity.Property(e => e.LocalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.NetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Phone1).HasMaxLength(25);
            entity.Property(e => e.PurchaseAgent).HasMaxLength(12);
            entity.Property(e => e.PurchaseAgentDesc2).HasMaxLength(40);
            entity.Property(e => e.PurchaseAgentDescription).HasMaxLength(40);
            entity.Property(e => e.PurchaseLocation).HasMaxLength(8);
            entity.Property(e => e.Ref).HasMaxLength(40);
            entity.Property(e => e.RefDocNo).HasMaxLength(30);
            entity.Property(e => e.Remark1).HasMaxLength(40);
            entity.Property(e => e.Remark2).HasMaxLength(40);
            entity.Property(e => e.Remark3).HasMaxLength(40);
            entity.Property(e => e.Remark4).HasMaxLength(40);
            entity.Property(e => e.ShipInfo).HasMaxLength(40);
            entity.Property(e => e.ShipVia).HasMaxLength(20);
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyExTax).HasColumnType("decimal(38, 13)");
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ToTaxCurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.Total).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalWithTax).HasColumnType("decimal(20, 2)");
        });

        modelBuilder.Entity<VPurchaseConsignmentReturnDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vPurchaseConsignmentReturnDetail");

            entity.Property(e => e.AddToCost)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AddToSubTotal)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BarCode).HasMaxLength(30);
            entity.Property(e => e.CalcByPercent).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.DeliveryDate).HasColumnType("datetime");
            entity.Property(e => e.DeptDesc2).HasMaxLength(40);
            entity.Property(e => e.DeptDescription).HasMaxLength(40);
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Desc2).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.Discount).HasMaxLength(20);
            entity.Property(e => e.DiscountAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DocTaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.DtlType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EstimatedDeliveryDate).HasMaxLength(20);
            entity.Property(e => e.FontStyle).HasMaxLength(8);
            entity.Property(e => e.FromDocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.FullTransferOption)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.GovtTaxCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.ItemBaseUom)
                .HasMaxLength(8)
                .HasColumnName("ItemBaseUOM");
            entity.Property(e => e.ItemBrand).HasMaxLength(20);
            entity.Property(e => e.ItemBrandDescription).HasMaxLength(40);
            entity.Property(e => e.ItemCategory).HasMaxLength(20);
            entity.Property(e => e.ItemCategoryDescription).HasMaxLength(40);
            entity.Property(e => e.ItemClass).HasMaxLength(20);
            entity.Property(e => e.ItemClassDescription).HasMaxLength(40);
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.ItemDesc2).HasMaxLength(100);
            entity.Property(e => e.ItemDescription).HasMaxLength(100);
            entity.Property(e => e.ItemGroup).HasMaxLength(8);
            entity.Property(e => e.ItemGroupDescription).HasMaxLength(40);
            entity.Property(e => e.ItemType).HasMaxLength(12);
            entity.Property(e => e.ItemTypeDescription).HasMaxLength(40);
            entity.Property(e => e.ItemUdfWarDay).HasColumnName("ItemUDF_WarDay");
            entity.Property(e => e.LeadTime).HasMaxLength(40);
            entity.Property(e => e.LocalSubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalSubTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.LocationAddr1).HasMaxLength(40);
            entity.Property(e => e.LocationAddr2).HasMaxLength(40);
            entity.Property(e => e.LocationAddr3).HasMaxLength(40);
            entity.Property(e => e.LocationAddr4).HasMaxLength(40);
            entity.Property(e => e.LocationBalQty).HasColumnType("decimal(38, 8)");
            entity.Property(e => e.LocationContact).HasMaxLength(40);
            entity.Property(e => e.LocationDesc2).HasMaxLength(80);
            entity.Property(e => e.LocationDescription).HasMaxLength(80);
            entity.Property(e => e.LocationFax1).HasMaxLength(25);
            entity.Property(e => e.LocationFax2).HasMaxLength(25);
            entity.Property(e => e.LocationPhone1).HasMaxLength(25);
            entity.Property(e => e.LocationPhone2).HasMaxLength(25);
            entity.Property(e => e.LocationPostCode).HasMaxLength(10);
            entity.Property(e => e.MainItem)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Numbering).HasMaxLength(6);
            entity.Property(e => e.PrintOut)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.ProjectDesc2).HasMaxLength(40);
            entity.Property(e => e.ProjectDescription).HasMaxLength(40);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Remark).HasMaxLength(100);
            entity.Property(e => e.Shelf).HasMaxLength(20);
            entity.Property(e => e.SmallestQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SmallestUnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SubTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SubTotalWithTax).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxAccNo).HasMaxLength(12);
            entity.Property(e => e.TaxCode).HasMaxLength(14);
            entity.Property(e => e.TaxCodeDescription).HasMaxLength(120);
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.UnitPriceAfterDiscount).HasColumnType("decimal(38, 13)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
            entity.Property(e => e.UombalQty)
                .HasColumnType("decimal(38, 8)")
                .HasColumnName("UOMBalQty");
            entity.Property(e => e.Uomcost)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMCost");
            entity.Property(e => e.UomitemCode)
                .HasMaxLength(30)
                .HasColumnName("UOMItemCode");
            entity.Property(e => e.Uomprice)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMPrice");
            entity.Property(e => e.Uomprice2)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMPrice2");
            entity.Property(e => e.Uomrate)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMRate");
            entity.Property(e => e.UomrealCost)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMRealCost");
            entity.Property(e => e.UserUom)
                .HasMaxLength(8)
                .HasColumnName("UserUOM");
            entity.Property(e => e.Volume).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.VolumeUom)
                .HasMaxLength(8)
                .HasColumnName("VolumeUOM");
            entity.Property(e => e.Weight).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.WeightUom)
                .HasMaxLength(8)
                .HasColumnName("WeightUOM");
        });

        modelBuilder.Entity<VPurchaseConsignmentReturnSubDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vPurchaseConsignmentReturnSubDetail");

            entity.Property(e => e.AddToCost)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Desc2).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.DocTaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.GovtTaxCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.LocalSubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.PrintOut)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Remark).HasMaxLength(100);
            entity.Property(e => e.SubQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxAccNo).HasMaxLength(12);
            entity.Property(e => e.TaxCode).HasMaxLength(14);
            entity.Property(e => e.TaxCodeDescription).HasMaxLength(120);
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<VPurchaseConsignmentSubDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vPurchaseConsignmentSubDetail");

            entity.Property(e => e.AddToCost)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Desc2).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.DocTaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.GovtTaxCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.LocalSubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.PrintOut)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Remark).HasMaxLength(100);
            entity.Property(e => e.SubQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxAccNo).HasMaxLength(12);
            entity.Property(e => e.TaxCode).HasMaxLength(14);
            entity.Property(e => e.TaxCodeDescription).HasMaxLength(120);
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<VPurchaseInvoice>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vPurchaseInvoice");

            entity.Property(e => e.Attention).HasMaxLength(40);
            entity.Property(e => e.BranchAccNo).HasMaxLength(12);
            entity.Property(e => e.BranchAddress1).HasMaxLength(40);
            entity.Property(e => e.BranchAddress2).HasMaxLength(40);
            entity.Property(e => e.BranchAddress3).HasMaxLength(40);
            entity.Property(e => e.BranchAddress4).HasMaxLength(40);
            entity.Property(e => e.BranchAreaCode).HasMaxLength(12);
            entity.Property(e => e.BranchCode).HasMaxLength(20);
            entity.Property(e => e.BranchContact).HasMaxLength(40);
            entity.Property(e => e.BranchEmailAddress).HasMaxLength(80);
            entity.Property(e => e.BranchFax1).HasMaxLength(25);
            entity.Property(e => e.BranchFax2).HasMaxLength(25);
            entity.Property(e => e.BranchIsActive)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BranchMobile).HasMaxLength(25);
            entity.Property(e => e.BranchName).HasMaxLength(100);
            entity.Property(e => e.BranchPhone1).HasMaxLength(25);
            entity.Property(e => e.BranchPhone2).HasMaxLength(25);
            entity.Property(e => e.BranchPostCode).HasMaxLength(10);
            entity.Property(e => e.BranchPurchaseAgent).HasMaxLength(12);
            entity.Property(e => e.BranchSalesAgent).HasMaxLength(12);
            entity.Property(e => e.CanSync)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.CreatedUserName).HasMaxLength(40);
            entity.Property(e => e.CreditorAddress1).HasMaxLength(40);
            entity.Property(e => e.CreditorAddress2).HasMaxLength(40);
            entity.Property(e => e.CreditorAddress3).HasMaxLength(40);
            entity.Property(e => e.CreditorAddress4).HasMaxLength(40);
            entity.Property(e => e.CreditorAgingOn)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreditorAreaCode).HasMaxLength(12);
            entity.Property(e => e.CreditorAreaDesc2).HasMaxLength(40);
            entity.Property(e => e.CreditorAreaDescription).HasMaxLength(40);
            entity.Property(e => e.CreditorAttention).HasMaxLength(40);
            entity.Property(e => e.CreditorCode).HasMaxLength(12);
            entity.Property(e => e.CreditorCompanyName).HasMaxLength(100);
            entity.Property(e => e.CreditorCreatedTimestamp).HasColumnType("datetime");
            entity.Property(e => e.CreditorCreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreditorCreatedUserID");
            entity.Property(e => e.CreditorCreditLimit).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.CreditorCurrencyCode).HasMaxLength(5);
            entity.Property(e => e.CreditorDeliverAddress1).HasMaxLength(40);
            entity.Property(e => e.CreditorDeliverAddress2).HasMaxLength(40);
            entity.Property(e => e.CreditorDeliverAddress3).HasMaxLength(40);
            entity.Property(e => e.CreditorDeliverAddress4).HasMaxLength(40);
            entity.Property(e => e.CreditorDeliverPostCode).HasMaxLength(10);
            entity.Property(e => e.CreditorDesc2).HasMaxLength(100);
            entity.Property(e => e.CreditorDisplayTerm).HasMaxLength(30);
            entity.Property(e => e.CreditorEmailAddress).HasMaxLength(200);
            entity.Property(e => e.CreditorExemptExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.CreditorExemptNo).HasMaxLength(60);
            entity.Property(e => e.CreditorFax1).HasMaxLength(25);
            entity.Property(e => e.CreditorFax2).HasMaxLength(25);
            entity.Property(e => e.CreditorGstregisterNo)
                .HasMaxLength(20)
                .HasColumnName("CreditorGSTRegisterNo");
            entity.Property(e => e.CreditorGststatusVerifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("CreditorGSTStatusVerifiedDate");
            entity.Property(e => e.CreditorInclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreditorLastModified).HasColumnType("datetime");
            entity.Property(e => e.CreditorLastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreditorLastModifiedUserID");
            entity.Property(e => e.CreditorMobile).HasMaxLength(25);
            entity.Property(e => e.CreditorName).HasMaxLength(100);
            entity.Property(e => e.CreditorNatureOfBusiness).HasMaxLength(40);
            entity.Property(e => e.CreditorOverdueLimit).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.CreditorParentAccNo).HasMaxLength(12);
            entity.Property(e => e.CreditorPhone1).HasMaxLength(25);
            entity.Property(e => e.CreditorPhone2).HasMaxLength(25);
            entity.Property(e => e.CreditorPostCode).HasMaxLength(10);
            entity.Property(e => e.CreditorPriceCategory).HasMaxLength(12);
            entity.Property(e => e.CreditorPurchaseAgent).HasMaxLength(12);
            entity.Property(e => e.CreditorPurchaseAgentDesc2).HasMaxLength(40);
            entity.Property(e => e.CreditorPurchaseAgentDescription).HasMaxLength(40);
            entity.Property(e => e.CreditorRegisterNo).HasMaxLength(30);
            entity.Property(e => e.CreditorSelfBilledApprovalNo).HasMaxLength(30);
            entity.Property(e => e.CreditorSstregisterNo)
                .HasMaxLength(20)
                .HasColumnName("CreditorSSTRegisterNo");
            entity.Property(e => e.CreditorStatementType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreditorTaxCode).HasMaxLength(14);
            entity.Property(e => e.CreditorTaxRegisterNo).HasMaxLength(30);
            entity.Property(e => e.CreditorType).HasMaxLength(20);
            entity.Property(e => e.CreditorTypeDesc2).HasMaxLength(40);
            entity.Property(e => e.CreditorTypeDescription).HasMaxLength(40);
            entity.Property(e => e.CreditorWebUrl)
                .HasMaxLength(80)
                .HasColumnName("CreditorWebURL");
            entity.Property(e => e.CurrencyCode).HasMaxLength(5);
            entity.Property(e => e.CurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.CurrencySymbol).HasMaxLength(6);
            entity.Property(e => e.CurrencyWord).HasMaxLength(40);
            entity.Property(e => e.CurrencyWord2).HasMaxLength(40);
            entity.Property(e => e.Description).HasMaxLength(80);
            entity.Property(e => e.DisplayTerm).HasMaxLength(30);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocDate2).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.DocStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EinvoiceStatus)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceStatus");
            entity.Property(e => e.EinvoiceUuid)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceUuid");
            entity.Property(e => e.EinvoiceValidatedDateTime)
                .HasColumnType("datetime")
                .HasColumnName("EInvoiceValidatedDateTime");
            entity.Property(e => e.EinvoiceValidationLink)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("EInvoiceValidationLink");
            entity.Property(e => e.ExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Fax1).HasMaxLength(25);
            entity.Property(e => e.FcgainAccount)
                .HasMaxLength(12)
                .HasColumnName("FCGainAccount");
            entity.Property(e => e.FclossAccount)
                .HasMaxLength(12)
                .HasColumnName("FCLossAccount");
            entity.Property(e => e.FinalTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer1TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Footer2Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer2TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Footer3Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer3TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.ForeignCharges).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.GainLossJournalType).HasMaxLength(10);
            entity.Property(e => e.InclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.InvAddr1).HasMaxLength(40);
            entity.Property(e => e.InvAddr2).HasMaxLength(40);
            entity.Property(e => e.InvAddr3).HasMaxLength(40);
            entity.Property(e => e.InvAddr4).HasMaxLength(40);
            entity.Property(e => e.IsRoundAdj)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.LastModifiedUserName).HasMaxLength(40);
            entity.Property(e => e.LocalCharges).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalNetTotalAfterWht)
                .HasColumnType("decimal(21, 2)")
                .HasColumnName("LocalNetTotalAfterWHT");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTotalExTaxAndWht)
                .HasColumnType("decimal(22, 2)")
                .HasColumnName("LocalTotalExTaxAndWHT");
            entity.Property(e => e.LocalTotalWht)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("LocalTotalWHT");
            entity.Property(e => e.NetOutstanding).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.NetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.NetTotalAfterWht)
                .HasColumnType("decimal(21, 2)")
                .HasColumnName("NetTotalAfterWHT");
            entity.Property(e => e.Phone1).HasMaxLength(25);
            entity.Property(e => e.PiudfSuperAppId)
                .HasMaxLength(32)
                .HasColumnName("PIUDF_SuperAppId");
            entity.Property(e => e.PostToGl)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PostToGL");
            entity.Property(e => e.PostToStock)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PurchaseAgent).HasMaxLength(12);
            entity.Property(e => e.PurchaseAgentDesc2).HasMaxLength(40);
            entity.Property(e => e.PurchaseAgentDescription).HasMaxLength(40);
            entity.Property(e => e.PurchaseLocation).HasMaxLength(8);
            entity.Property(e => e.Ref).HasMaxLength(40);
            entity.Property(e => e.RefDocNo).HasMaxLength(30);
            entity.Property(e => e.Remark1).HasMaxLength(40);
            entity.Property(e => e.Remark2).HasMaxLength(40);
            entity.Property(e => e.Remark3).HasMaxLength(40);
            entity.Property(e => e.Remark4).HasMaxLength(40);
            entity.Property(e => e.RoundAdj).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SelfBilledApprovalNo).HasMaxLength(30);
            entity.Property(e => e.ShipInfo).HasMaxLength(40);
            entity.Property(e => e.ShipVia).HasMaxLength(20);
            entity.Property(e => e.SupplierDono)
                .HasMaxLength(30)
                .HasColumnName("SupplierDONo");
            entity.Property(e => e.SupplierInvoiceNo).HasMaxLength(30);
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyExTax).HasColumnType("decimal(38, 13)");
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxDate).HasColumnType("datetime");
            entity.Property(e => e.TaxDocNo).HasMaxLength(20);
            entity.Property(e => e.TaxRegisterNo).HasMaxLength(30);
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ToTaxCurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.Total).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalExTaxAndWht)
                .HasColumnType("decimal(21, 2)")
                .HasColumnName("TotalExTaxAndWHT");
            entity.Property(e => e.TotalWht)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("TotalWHT");
            entity.Property(e => e.TotalWithTax).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.Transferable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VPurchaseInvoiceDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vPurchaseInvoiceDetail");

            entity.Property(e => e.AccNo).HasMaxLength(12);
            entity.Property(e => e.AddToCost)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AddToSubTotal)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BarCode).HasMaxLength(30);
            entity.Property(e => e.BatchBalQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.BatchDescription).HasMaxLength(40);
            entity.Property(e => e.BatchExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.BatchItemCode).HasMaxLength(30);
            entity.Property(e => e.BatchManufacturedDate).HasColumnType("datetime");
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.CalcByPercent).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Cnamt)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("CNAmt");
            entity.Property(e => e.DeliveryDate).HasColumnType("datetime");
            entity.Property(e => e.DeptDesc2).HasMaxLength(40);
            entity.Property(e => e.DeptDescription).HasMaxLength(40);
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Desc2).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.Discount).HasMaxLength(20);
            entity.Property(e => e.DiscountAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DocTaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.DtlType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Duty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.EstimatedDeliveryDate).HasMaxLength(20);
            entity.Property(e => e.Focqty)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("FOCQty");
            entity.Property(e => e.FoctransferedQty)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("FOCTransferedQty");
            entity.Property(e => e.FontStyle).HasMaxLength(8);
            entity.Property(e => e.ForeignCharges).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.FromDocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.FullTransferOption)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.GovtTaxCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.ItemBaseUom)
                .HasMaxLength(8)
                .HasColumnName("ItemBaseUOM");
            entity.Property(e => e.ItemBrand).HasMaxLength(20);
            entity.Property(e => e.ItemBrandDescription).HasMaxLength(40);
            entity.Property(e => e.ItemCategory).HasMaxLength(20);
            entity.Property(e => e.ItemCategoryDescription).HasMaxLength(40);
            entity.Property(e => e.ItemClass).HasMaxLength(20);
            entity.Property(e => e.ItemClassDescription).HasMaxLength(40);
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.ItemDesc2).HasMaxLength(100);
            entity.Property(e => e.ItemDescription).HasMaxLength(100);
            entity.Property(e => e.ItemGroup).HasMaxLength(8);
            entity.Property(e => e.ItemGroupDescription).HasMaxLength(40);
            entity.Property(e => e.ItemType).HasMaxLength(12);
            entity.Property(e => e.ItemTypeDescription).HasMaxLength(40);
            entity.Property(e => e.ItemUdfWarDay).HasColumnName("ItemUDF_WarDay");
            entity.Property(e => e.LeadTime).HasMaxLength(40);
            entity.Property(e => e.LocalCharges).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.LocalSubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalSubTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxAdjustment).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.LocationAddr1).HasMaxLength(40);
            entity.Property(e => e.LocationAddr2).HasMaxLength(40);
            entity.Property(e => e.LocationAddr3).HasMaxLength(40);
            entity.Property(e => e.LocationAddr4).HasMaxLength(40);
            entity.Property(e => e.LocationBalQty).HasColumnType("decimal(38, 8)");
            entity.Property(e => e.LocationContact).HasMaxLength(40);
            entity.Property(e => e.LocationDesc2).HasMaxLength(80);
            entity.Property(e => e.LocationDescription).HasMaxLength(80);
            entity.Property(e => e.LocationFax1).HasMaxLength(25);
            entity.Property(e => e.LocationFax2).HasMaxLength(25);
            entity.Property(e => e.LocationPhone1).HasMaxLength(25);
            entity.Property(e => e.LocationPhone2).HasMaxLength(25);
            entity.Property(e => e.LocationPostCode).HasMaxLength(10);
            entity.Property(e => e.MainItem)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Numbering).HasMaxLength(6);
            entity.Property(e => e.OurPodate)
                .HasColumnType("datetime")
                .HasColumnName("OurPODate");
            entity.Property(e => e.OurPono)
                .HasMaxLength(30)
                .HasColumnName("OurPONo");
            entity.Property(e => e.PrintOut)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.ProjectDesc2).HasMaxLength(40);
            entity.Property(e => e.ProjectDescription).HasMaxLength(40);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SalesExemptionNo).HasMaxLength(60);
            entity.Property(e => e.Shelf).HasMaxLength(20);
            entity.Property(e => e.SmallestQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SmallestUnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SubTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SubTotalWithTax).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.TariffCode).HasMaxLength(12);
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxAccNo).HasMaxLength(12);
            entity.Property(e => e.TaxAdjustment).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCode).HasMaxLength(14);
            entity.Property(e => e.TaxCodeDescription).HasMaxLength(120);
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxPermitNo).HasMaxLength(20);
            entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Transferable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TransferedQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.UnitPriceAfterDiscount).HasColumnType("decimal(38, 13)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
            entity.Property(e => e.UombalQty)
                .HasColumnType("decimal(38, 8)")
                .HasColumnName("UOMBalQty");
            entity.Property(e => e.Uomcost)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMCost");
            entity.Property(e => e.UomitemCode)
                .HasMaxLength(30)
                .HasColumnName("UOMItemCode");
            entity.Property(e => e.Uomprice)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMPrice");
            entity.Property(e => e.Uomprice2)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMPrice2");
            entity.Property(e => e.Uomrate)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMRate");
            entity.Property(e => e.UomrealCost)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMRealCost");
            entity.Property(e => e.UserUom)
                .HasMaxLength(8)
                .HasColumnName("UserUOM");
            entity.Property(e => e.Volume).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.VolumeUom)
                .HasMaxLength(8)
                .HasColumnName("VolumeUOM");
            entity.Property(e => e.Weight).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.WeightUom)
                .HasMaxLength(8)
                .HasColumnName("WeightUOM");
        });

        modelBuilder.Entity<VPurchaseInvoiceSubDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vPurchaseInvoiceSubDetail");

            entity.Property(e => e.AddToCost)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.Desc2).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.DocTaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Duty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.ForeignCharges).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.GovtTaxCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.LocalCharges).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.LocalSubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.PrintOut)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SalesExemptionNo).HasMaxLength(60);
            entity.Property(e => e.SubQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TariffCode).HasMaxLength(12);
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxAccNo).HasMaxLength(12);
            entity.Property(e => e.TaxCode).HasMaxLength(14);
            entity.Property(e => e.TaxCodeDescription).HasMaxLength(120);
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<VPurchaseOrder>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vPurchaseOrder");

            entity.Property(e => e.Attention).HasMaxLength(40);
            entity.Property(e => e.BranchAccNo).HasMaxLength(12);
            entity.Property(e => e.BranchAddress1).HasMaxLength(40);
            entity.Property(e => e.BranchAddress2).HasMaxLength(40);
            entity.Property(e => e.BranchAddress3).HasMaxLength(40);
            entity.Property(e => e.BranchAddress4).HasMaxLength(40);
            entity.Property(e => e.BranchAreaCode).HasMaxLength(12);
            entity.Property(e => e.BranchCode).HasMaxLength(20);
            entity.Property(e => e.BranchContact).HasMaxLength(40);
            entity.Property(e => e.BranchEmailAddress).HasMaxLength(80);
            entity.Property(e => e.BranchFax1).HasMaxLength(25);
            entity.Property(e => e.BranchFax2).HasMaxLength(25);
            entity.Property(e => e.BranchIsActive)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BranchMobile).HasMaxLength(25);
            entity.Property(e => e.BranchName).HasMaxLength(100);
            entity.Property(e => e.BranchPhone1).HasMaxLength(25);
            entity.Property(e => e.BranchPhone2).HasMaxLength(25);
            entity.Property(e => e.BranchPostCode).HasMaxLength(10);
            entity.Property(e => e.BranchPurchaseAgent).HasMaxLength(12);
            entity.Property(e => e.BranchSalesAgent).HasMaxLength(12);
            entity.Property(e => e.CanSync)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.CreatedUserName).HasMaxLength(40);
            entity.Property(e => e.CreditorAddress1).HasMaxLength(40);
            entity.Property(e => e.CreditorAddress2).HasMaxLength(40);
            entity.Property(e => e.CreditorAddress3).HasMaxLength(40);
            entity.Property(e => e.CreditorAddress4).HasMaxLength(40);
            entity.Property(e => e.CreditorAgingOn)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreditorAreaCode).HasMaxLength(12);
            entity.Property(e => e.CreditorAreaDesc2).HasMaxLength(40);
            entity.Property(e => e.CreditorAreaDescription).HasMaxLength(40);
            entity.Property(e => e.CreditorAttention).HasMaxLength(40);
            entity.Property(e => e.CreditorCode).HasMaxLength(12);
            entity.Property(e => e.CreditorCompanyName).HasMaxLength(100);
            entity.Property(e => e.CreditorCreatedTimestamp).HasColumnType("datetime");
            entity.Property(e => e.CreditorCreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreditorCreatedUserID");
            entity.Property(e => e.CreditorCreditLimit).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.CreditorCurrencyCode).HasMaxLength(5);
            entity.Property(e => e.CreditorDeliverAddress1).HasMaxLength(40);
            entity.Property(e => e.CreditorDeliverAddress2).HasMaxLength(40);
            entity.Property(e => e.CreditorDeliverAddress3).HasMaxLength(40);
            entity.Property(e => e.CreditorDeliverAddress4).HasMaxLength(40);
            entity.Property(e => e.CreditorDeliverPostCode).HasMaxLength(10);
            entity.Property(e => e.CreditorDesc2).HasMaxLength(100);
            entity.Property(e => e.CreditorDisplayTerm).HasMaxLength(30);
            entity.Property(e => e.CreditorEmailAddress).HasMaxLength(200);
            entity.Property(e => e.CreditorExemptExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.CreditorExemptNo).HasMaxLength(60);
            entity.Property(e => e.CreditorFax1).HasMaxLength(25);
            entity.Property(e => e.CreditorFax2).HasMaxLength(25);
            entity.Property(e => e.CreditorGstregisterNo)
                .HasMaxLength(20)
                .HasColumnName("CreditorGSTRegisterNo");
            entity.Property(e => e.CreditorGststatusVerifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("CreditorGSTStatusVerifiedDate");
            entity.Property(e => e.CreditorInclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreditorLastModified).HasColumnType("datetime");
            entity.Property(e => e.CreditorLastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreditorLastModifiedUserID");
            entity.Property(e => e.CreditorMobile).HasMaxLength(25);
            entity.Property(e => e.CreditorName).HasMaxLength(100);
            entity.Property(e => e.CreditorNatureOfBusiness).HasMaxLength(40);
            entity.Property(e => e.CreditorOverdueLimit).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.CreditorParentAccNo).HasMaxLength(12);
            entity.Property(e => e.CreditorPhone1).HasMaxLength(25);
            entity.Property(e => e.CreditorPhone2).HasMaxLength(25);
            entity.Property(e => e.CreditorPostCode).HasMaxLength(10);
            entity.Property(e => e.CreditorPriceCategory).HasMaxLength(12);
            entity.Property(e => e.CreditorPurchaseAgent).HasMaxLength(12);
            entity.Property(e => e.CreditorPurchaseAgentDesc2).HasMaxLength(40);
            entity.Property(e => e.CreditorPurchaseAgentDescription).HasMaxLength(40);
            entity.Property(e => e.CreditorRegisterNo).HasMaxLength(30);
            entity.Property(e => e.CreditorSelfBilledApprovalNo).HasMaxLength(30);
            entity.Property(e => e.CreditorSstregisterNo)
                .HasMaxLength(20)
                .HasColumnName("CreditorSSTRegisterNo");
            entity.Property(e => e.CreditorStatementType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreditorTaxCode).HasMaxLength(14);
            entity.Property(e => e.CreditorTaxRegisterNo).HasMaxLength(30);
            entity.Property(e => e.CreditorType).HasMaxLength(20);
            entity.Property(e => e.CreditorTypeDesc2).HasMaxLength(40);
            entity.Property(e => e.CreditorTypeDescription).HasMaxLength(40);
            entity.Property(e => e.CreditorWebUrl)
                .HasMaxLength(80)
                .HasColumnName("CreditorWebURL");
            entity.Property(e => e.CurrencyCode).HasMaxLength(5);
            entity.Property(e => e.CurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.CurrencySymbol).HasMaxLength(6);
            entity.Property(e => e.CurrencyWord).HasMaxLength(40);
            entity.Property(e => e.CurrencyWord2).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr1).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr2).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr3).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr4).HasMaxLength(40);
            entity.Property(e => e.DeliverContact).HasMaxLength(40);
            entity.Property(e => e.DeliverFax1).HasMaxLength(25);
            entity.Property(e => e.DeliverPhone1).HasMaxLength(25);
            entity.Property(e => e.Description).HasMaxLength(80);
            entity.Property(e => e.DisplayTerm).HasMaxLength(30);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.DocStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Fax1).HasMaxLength(25);
            entity.Property(e => e.FcgainAccount)
                .HasMaxLength(12)
                .HasColumnName("FCGainAccount");
            entity.Property(e => e.FclossAccount)
                .HasMaxLength(12)
                .HasColumnName("FCLossAccount");
            entity.Property(e => e.FinalTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer1TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Footer2Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer2TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Footer3Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer3TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.GainLossJournalType).HasMaxLength(10);
            entity.Property(e => e.InclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.InvAddr1).HasMaxLength(40);
            entity.Property(e => e.InvAddr2).HasMaxLength(40);
            entity.Property(e => e.InvAddr3).HasMaxLength(40);
            entity.Property(e => e.InvAddr4).HasMaxLength(40);
            entity.Property(e => e.IsRoundAdj)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.LastModifiedUserName).HasMaxLength(40);
            entity.Property(e => e.LocalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.NetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Phone1).HasMaxLength(25);
            entity.Property(e => e.PoudfSuperAppId)
                .HasMaxLength(32)
                .HasColumnName("POUDF_SuperAppId");
            entity.Property(e => e.PurchaseAgent).HasMaxLength(12);
            entity.Property(e => e.PurchaseAgentDesc2).HasMaxLength(40);
            entity.Property(e => e.PurchaseAgentDescription).HasMaxLength(40);
            entity.Property(e => e.PurchaseLocation).HasMaxLength(8);
            entity.Property(e => e.Ref).HasMaxLength(40);
            entity.Property(e => e.RefDocNo).HasMaxLength(30);
            entity.Property(e => e.Remark1).HasMaxLength(40);
            entity.Property(e => e.Remark2).HasMaxLength(40);
            entity.Property(e => e.Remark3).HasMaxLength(40);
            entity.Property(e => e.Remark4).HasMaxLength(40);
            entity.Property(e => e.RoundAdj).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ShipInfo).HasMaxLength(40);
            entity.Property(e => e.ShipVia).HasMaxLength(20);
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyExTax).HasColumnType("decimal(38, 13)");
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxRegisterNo).HasMaxLength(30);
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ToDocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.ToTaxCurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.Total).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalWithTax).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.Transferable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VPurchaseOrderDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vPurchaseOrderDetail");

            entity.Property(e => e.AddToCost)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AddToSubTotal)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BarCode).HasMaxLength(30);
            entity.Property(e => e.BatchBalQty).HasColumnType("decimal(38, 8)");
            entity.Property(e => e.CalcByPercent).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.DeliveryDate).HasColumnType("datetime");
            entity.Property(e => e.DeptDesc2).HasMaxLength(40);
            entity.Property(e => e.DeptDescription).HasMaxLength(40);
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Desc2).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.Discount).HasMaxLength(20);
            entity.Property(e => e.DiscountAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DocTaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.DtlType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EstimatedDeliveryDate).HasMaxLength(20);
            entity.Property(e => e.Focqty)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("FOCQty");
            entity.Property(e => e.FoctransferedQty)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("FOCTransferedQty");
            entity.Property(e => e.FontStyle).HasMaxLength(8);
            entity.Property(e => e.FromAodtlKey).HasColumnName("FromAODtlKey");
            entity.Property(e => e.FromDocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.FromSodocList).HasColumnName("FromSODocList");
            entity.Property(e => e.FromSodtlKey).HasColumnName("FromSODtlKey");
            entity.Property(e => e.FullTransferOption)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.GovtTaxCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.ItemBaseUom)
                .HasMaxLength(8)
                .HasColumnName("ItemBaseUOM");
            entity.Property(e => e.ItemBrand).HasMaxLength(20);
            entity.Property(e => e.ItemBrandDescription).HasMaxLength(40);
            entity.Property(e => e.ItemCategory).HasMaxLength(20);
            entity.Property(e => e.ItemCategoryDescription).HasMaxLength(40);
            entity.Property(e => e.ItemClass).HasMaxLength(20);
            entity.Property(e => e.ItemClassDescription).HasMaxLength(40);
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.ItemDesc2).HasMaxLength(100);
            entity.Property(e => e.ItemDescription).HasMaxLength(100);
            entity.Property(e => e.ItemGroup).HasMaxLength(8);
            entity.Property(e => e.ItemGroupDescription).HasMaxLength(40);
            entity.Property(e => e.ItemType).HasMaxLength(12);
            entity.Property(e => e.ItemTypeDescription).HasMaxLength(40);
            entity.Property(e => e.ItemUdfWarDay).HasColumnName("ItemUDF_WarDay");
            entity.Property(e => e.LeadTime).HasMaxLength(40);
            entity.Property(e => e.LocalSubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalSubTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.LocationAddr1).HasMaxLength(40);
            entity.Property(e => e.LocationAddr2).HasMaxLength(40);
            entity.Property(e => e.LocationAddr3).HasMaxLength(40);
            entity.Property(e => e.LocationAddr4).HasMaxLength(40);
            entity.Property(e => e.LocationBalQty).HasColumnType("decimal(38, 8)");
            entity.Property(e => e.LocationContact).HasMaxLength(40);
            entity.Property(e => e.LocationDesc2).HasMaxLength(80);
            entity.Property(e => e.LocationDescription).HasMaxLength(80);
            entity.Property(e => e.LocationFax1).HasMaxLength(25);
            entity.Property(e => e.LocationFax2).HasMaxLength(25);
            entity.Property(e => e.LocationPhone1).HasMaxLength(25);
            entity.Property(e => e.LocationPhone2).HasMaxLength(25);
            entity.Property(e => e.LocationPostCode).HasMaxLength(10);
            entity.Property(e => e.MainItem)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Numbering).HasMaxLength(6);
            entity.Property(e => e.PrintOut)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.ProjectDesc2).HasMaxLength(40);
            entity.Property(e => e.ProjectDescription).HasMaxLength(40);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SalesExemptionNo).HasMaxLength(60);
            entity.Property(e => e.Shelf).HasMaxLength(20);
            entity.Property(e => e.SmallestQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SmallestUnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SubTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SubTotalWithTax).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxAccNo).HasMaxLength(12);
            entity.Property(e => e.TaxCode).HasMaxLength(14);
            entity.Property(e => e.TaxCodeDescription).HasMaxLength(120);
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Transferable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TransferedQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.UnitPriceAfterDiscount).HasColumnType("decimal(38, 13)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
            entity.Property(e => e.UombalQty)
                .HasColumnType("decimal(38, 8)")
                .HasColumnName("UOMBalQty");
            entity.Property(e => e.Uomcost)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMCost");
            entity.Property(e => e.UomitemCode)
                .HasMaxLength(30)
                .HasColumnName("UOMItemCode");
            entity.Property(e => e.Uomprice)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMPrice");
            entity.Property(e => e.Uomprice2)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMPrice2");
            entity.Property(e => e.Uomrate)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMRate");
            entity.Property(e => e.UomrealCost)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMRealCost");
            entity.Property(e => e.UserUom)
                .HasMaxLength(8)
                .HasColumnName("UserUOM");
            entity.Property(e => e.Volume).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.VolumeUom)
                .HasMaxLength(8)
                .HasColumnName("VolumeUOM");
            entity.Property(e => e.Weight).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.WeightUom)
                .HasMaxLength(8)
                .HasColumnName("WeightUOM");
        });

        modelBuilder.Entity<VPurchaseOrderSubDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vPurchaseOrderSubDetail");

            entity.Property(e => e.AddToCost)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Desc2).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.DocTaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.GovtTaxCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.LocalSubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.PrintOut)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SalesExemptionNo).HasMaxLength(60);
            entity.Property(e => e.SubQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxAccNo).HasMaxLength(12);
            entity.Property(e => e.TaxCode).HasMaxLength(14);
            entity.Property(e => e.TaxCodeDescription).HasMaxLength(120);
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<VPurchaseReturn>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vPurchaseReturn");

            entity.Property(e => e.Attention).HasMaxLength(40);
            entity.Property(e => e.BranchAccNo).HasMaxLength(12);
            entity.Property(e => e.BranchAddress1).HasMaxLength(40);
            entity.Property(e => e.BranchAddress2).HasMaxLength(40);
            entity.Property(e => e.BranchAddress3).HasMaxLength(40);
            entity.Property(e => e.BranchAddress4).HasMaxLength(40);
            entity.Property(e => e.BranchAreaCode).HasMaxLength(12);
            entity.Property(e => e.BranchCode).HasMaxLength(20);
            entity.Property(e => e.BranchContact).HasMaxLength(40);
            entity.Property(e => e.BranchEmailAddress).HasMaxLength(80);
            entity.Property(e => e.BranchFax1).HasMaxLength(25);
            entity.Property(e => e.BranchFax2).HasMaxLength(25);
            entity.Property(e => e.BranchIsActive)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BranchMobile).HasMaxLength(25);
            entity.Property(e => e.BranchName).HasMaxLength(100);
            entity.Property(e => e.BranchPhone1).HasMaxLength(25);
            entity.Property(e => e.BranchPhone2).HasMaxLength(25);
            entity.Property(e => e.BranchPostCode).HasMaxLength(10);
            entity.Property(e => e.BranchPurchaseAgent).HasMaxLength(12);
            entity.Property(e => e.BranchSalesAgent).HasMaxLength(12);
            entity.Property(e => e.CanSync)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.CreatedUserName).HasMaxLength(40);
            entity.Property(e => e.CreditorAddress1).HasMaxLength(40);
            entity.Property(e => e.CreditorAddress2).HasMaxLength(40);
            entity.Property(e => e.CreditorAddress3).HasMaxLength(40);
            entity.Property(e => e.CreditorAddress4).HasMaxLength(40);
            entity.Property(e => e.CreditorAgingOn)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreditorAreaCode).HasMaxLength(12);
            entity.Property(e => e.CreditorAreaDesc2).HasMaxLength(40);
            entity.Property(e => e.CreditorAreaDescription).HasMaxLength(40);
            entity.Property(e => e.CreditorAttention).HasMaxLength(40);
            entity.Property(e => e.CreditorCode).HasMaxLength(12);
            entity.Property(e => e.CreditorCompanyName).HasMaxLength(100);
            entity.Property(e => e.CreditorCreatedTimestamp).HasColumnType("datetime");
            entity.Property(e => e.CreditorCreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreditorCreatedUserID");
            entity.Property(e => e.CreditorCreditLimit).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.CreditorCurrencyCode).HasMaxLength(5);
            entity.Property(e => e.CreditorDeliverAddress1).HasMaxLength(40);
            entity.Property(e => e.CreditorDeliverAddress2).HasMaxLength(40);
            entity.Property(e => e.CreditorDeliverAddress3).HasMaxLength(40);
            entity.Property(e => e.CreditorDeliverAddress4).HasMaxLength(40);
            entity.Property(e => e.CreditorDeliverPostCode).HasMaxLength(10);
            entity.Property(e => e.CreditorDesc2).HasMaxLength(100);
            entity.Property(e => e.CreditorDisplayTerm).HasMaxLength(30);
            entity.Property(e => e.CreditorEmailAddress).HasMaxLength(200);
            entity.Property(e => e.CreditorExemptExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.CreditorExemptNo).HasMaxLength(60);
            entity.Property(e => e.CreditorFax1).HasMaxLength(25);
            entity.Property(e => e.CreditorFax2).HasMaxLength(25);
            entity.Property(e => e.CreditorGstregisterNo)
                .HasMaxLength(20)
                .HasColumnName("CreditorGSTRegisterNo");
            entity.Property(e => e.CreditorGststatusVerifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("CreditorGSTStatusVerifiedDate");
            entity.Property(e => e.CreditorInclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreditorLastModified).HasColumnType("datetime");
            entity.Property(e => e.CreditorLastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreditorLastModifiedUserID");
            entity.Property(e => e.CreditorMobile).HasMaxLength(25);
            entity.Property(e => e.CreditorName).HasMaxLength(100);
            entity.Property(e => e.CreditorNatureOfBusiness).HasMaxLength(40);
            entity.Property(e => e.CreditorOverdueLimit).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.CreditorParentAccNo).HasMaxLength(12);
            entity.Property(e => e.CreditorPhone1).HasMaxLength(25);
            entity.Property(e => e.CreditorPhone2).HasMaxLength(25);
            entity.Property(e => e.CreditorPostCode).HasMaxLength(10);
            entity.Property(e => e.CreditorPriceCategory).HasMaxLength(12);
            entity.Property(e => e.CreditorPurchaseAgent).HasMaxLength(12);
            entity.Property(e => e.CreditorPurchaseAgentDesc2).HasMaxLength(40);
            entity.Property(e => e.CreditorPurchaseAgentDescription).HasMaxLength(40);
            entity.Property(e => e.CreditorRegisterNo).HasMaxLength(30);
            entity.Property(e => e.CreditorSelfBilledApprovalNo).HasMaxLength(30);
            entity.Property(e => e.CreditorSstregisterNo)
                .HasMaxLength(20)
                .HasColumnName("CreditorSSTRegisterNo");
            entity.Property(e => e.CreditorStatementType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreditorTaxCode).HasMaxLength(14);
            entity.Property(e => e.CreditorTaxRegisterNo).HasMaxLength(30);
            entity.Property(e => e.CreditorType).HasMaxLength(20);
            entity.Property(e => e.CreditorTypeDesc2).HasMaxLength(40);
            entity.Property(e => e.CreditorTypeDescription).HasMaxLength(40);
            entity.Property(e => e.CreditorWebUrl)
                .HasMaxLength(80)
                .HasColumnName("CreditorWebURL");
            entity.Property(e => e.CurrencyCode).HasMaxLength(5);
            entity.Property(e => e.CurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.CurrencySymbol).HasMaxLength(6);
            entity.Property(e => e.CurrencyWord).HasMaxLength(40);
            entity.Property(e => e.CurrencyWord2).HasMaxLength(40);
            entity.Property(e => e.Description).HasMaxLength(80);
            entity.Property(e => e.DisplayTerm).HasMaxLength(30);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocDate2).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.DocStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EinvoiceStatus)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceStatus");
            entity.Property(e => e.EinvoiceUuid)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EInvoiceUuid");
            entity.Property(e => e.EinvoiceValidatedDateTime)
                .HasColumnType("datetime")
                .HasColumnName("EInvoiceValidatedDateTime");
            entity.Property(e => e.EinvoiceValidationLink)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("EInvoiceValidationLink");
            entity.Property(e => e.ExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Fax1).HasMaxLength(25);
            entity.Property(e => e.FcgainAccount)
                .HasMaxLength(12)
                .HasColumnName("FCGainAccount");
            entity.Property(e => e.FclossAccount)
                .HasMaxLength(12)
                .HasColumnName("FCLossAccount");
            entity.Property(e => e.FinalTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer1TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Footer2Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer2TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Footer3Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer3TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.GainLossJournalType).HasMaxLength(10);
            entity.Property(e => e.InclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.InvAddr1).HasMaxLength(40);
            entity.Property(e => e.InvAddr2).HasMaxLength(40);
            entity.Property(e => e.InvAddr3).HasMaxLength(40);
            entity.Property(e => e.InvAddr4).HasMaxLength(40);
            entity.Property(e => e.IsRoundAdj)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.LastModifiedUserName).HasMaxLength(40);
            entity.Property(e => e.LocalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.NetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Phone1).HasMaxLength(25);
            entity.Property(e => e.PostToGl)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PostToGL");
            entity.Property(e => e.PostToStock)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PrudfSuperAppId)
                .HasMaxLength(32)
                .HasColumnName("PRUDF_SuperAppId");
            entity.Property(e => e.PurchaseAgent).HasMaxLength(12);
            entity.Property(e => e.PurchaseAgentDesc2).HasMaxLength(40);
            entity.Property(e => e.PurchaseAgentDescription).HasMaxLength(40);
            entity.Property(e => e.PurchaseLocation).HasMaxLength(8);
            entity.Property(e => e.Reason).HasMaxLength(80);
            entity.Property(e => e.Ref).HasMaxLength(40);
            entity.Property(e => e.RefDocNo).HasMaxLength(30);
            entity.Property(e => e.Remark1).HasMaxLength(40);
            entity.Property(e => e.Remark2).HasMaxLength(40);
            entity.Property(e => e.Remark3).HasMaxLength(40);
            entity.Property(e => e.Remark4).HasMaxLength(40);
            entity.Property(e => e.RoundAdj).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SupplierCnno)
                .HasMaxLength(30)
                .HasColumnName("SupplierCNNo");
            entity.Property(e => e.SupplierInvoiceNo).HasMaxLength(100);
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyExTax).HasColumnType("decimal(38, 13)");
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxDate).HasColumnType("datetime");
            entity.Property(e => e.TaxDocNo).HasMaxLength(20);
            entity.Property(e => e.TaxRegisterNo).HasMaxLength(30);
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ToTaxCurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.Total).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalWithTax).HasColumnType("decimal(20, 2)");
        });

        modelBuilder.Entity<VPurchaseReturnDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vPurchaseReturnDetail");

            entity.Property(e => e.AccNo).HasMaxLength(12);
            entity.Property(e => e.AddToCost)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AddToSubTotal)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BarCode).HasMaxLength(30);
            entity.Property(e => e.BatchBalQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.BatchDescription).HasMaxLength(40);
            entity.Property(e => e.BatchExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.BatchItemCode).HasMaxLength(30);
            entity.Property(e => e.BatchManufacturedDate).HasColumnType("datetime");
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.CalcByPercent).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.DeptDesc2).HasMaxLength(40);
            entity.Property(e => e.DeptDescription).HasMaxLength(40);
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Desc2).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.Discount).HasMaxLength(20);
            entity.Property(e => e.DiscountAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DocTaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.DtlType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Focqty)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("FOCQty");
            entity.Property(e => e.FontStyle).HasMaxLength(8);
            entity.Property(e => e.FromDocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.FullTransferOption)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.GovtTaxCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.ItemBaseUom)
                .HasMaxLength(8)
                .HasColumnName("ItemBaseUOM");
            entity.Property(e => e.ItemBrand).HasMaxLength(20);
            entity.Property(e => e.ItemBrandDescription).HasMaxLength(40);
            entity.Property(e => e.ItemCategory).HasMaxLength(20);
            entity.Property(e => e.ItemCategoryDescription).HasMaxLength(40);
            entity.Property(e => e.ItemClass).HasMaxLength(20);
            entity.Property(e => e.ItemClassDescription).HasMaxLength(40);
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.ItemDesc2).HasMaxLength(100);
            entity.Property(e => e.ItemDescription).HasMaxLength(100);
            entity.Property(e => e.ItemGroup).HasMaxLength(8);
            entity.Property(e => e.ItemGroupDescription).HasMaxLength(40);
            entity.Property(e => e.ItemType).HasMaxLength(12);
            entity.Property(e => e.ItemTypeDescription).HasMaxLength(40);
            entity.Property(e => e.ItemUdfWarDay).HasColumnName("ItemUDF_WarDay");
            entity.Property(e => e.LeadTime).HasMaxLength(40);
            entity.Property(e => e.LocalSubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalSubTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxAdjustment).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.LocationAddr1).HasMaxLength(40);
            entity.Property(e => e.LocationAddr2).HasMaxLength(40);
            entity.Property(e => e.LocationAddr3).HasMaxLength(40);
            entity.Property(e => e.LocationAddr4).HasMaxLength(40);
            entity.Property(e => e.LocationBalQty).HasColumnType("decimal(38, 8)");
            entity.Property(e => e.LocationContact).HasMaxLength(40);
            entity.Property(e => e.LocationDesc2).HasMaxLength(80);
            entity.Property(e => e.LocationDescription).HasMaxLength(80);
            entity.Property(e => e.LocationFax1).HasMaxLength(25);
            entity.Property(e => e.LocationFax2).HasMaxLength(25);
            entity.Property(e => e.LocationPhone1).HasMaxLength(25);
            entity.Property(e => e.LocationPhone2).HasMaxLength(25);
            entity.Property(e => e.LocationPostCode).HasMaxLength(10);
            entity.Property(e => e.MainItem)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Numbering).HasMaxLength(6);
            entity.Property(e => e.OurPodate)
                .HasColumnType("datetime")
                .HasColumnName("OurPODate");
            entity.Property(e => e.OurPono)
                .HasMaxLength(30)
                .HasColumnName("OurPONo");
            entity.Property(e => e.PrintOut)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.ProjectDesc2).HasMaxLength(40);
            entity.Property(e => e.ProjectDescription).HasMaxLength(40);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SalesExemptionNo).HasMaxLength(60);
            entity.Property(e => e.Shelf).HasMaxLength(20);
            entity.Property(e => e.SmallestQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SmallestUnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SubTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SubTotalWithTax).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.TariffCode).HasMaxLength(12);
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxAccNo).HasMaxLength(12);
            entity.Property(e => e.TaxAdjustment).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCode).HasMaxLength(14);
            entity.Property(e => e.TaxCodeDescription).HasMaxLength(120);
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxPermitNo).HasMaxLength(20);
            entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.UnitPriceAfterDiscount).HasColumnType("decimal(38, 13)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
            entity.Property(e => e.UombalQty)
                .HasColumnType("decimal(38, 8)")
                .HasColumnName("UOMBalQty");
            entity.Property(e => e.Uomcost)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMCost");
            entity.Property(e => e.UomitemCode)
                .HasMaxLength(30)
                .HasColumnName("UOMItemCode");
            entity.Property(e => e.Uomprice)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMPrice");
            entity.Property(e => e.Uomprice2)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMPrice2");
            entity.Property(e => e.Uomrate)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMRate");
            entity.Property(e => e.UomrealCost)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMRealCost");
            entity.Property(e => e.UserUom)
                .HasMaxLength(8)
                .HasColumnName("UserUOM");
            entity.Property(e => e.Volume).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.VolumeUom)
                .HasMaxLength(8)
                .HasColumnName("VolumeUOM");
            entity.Property(e => e.Weight).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.WeightUom)
                .HasMaxLength(8)
                .HasColumnName("WeightUOM");
            entity.Property(e => e.YourDodate)
                .HasColumnType("datetime")
                .HasColumnName("YourDODate");
            entity.Property(e => e.YourDono)
                .HasMaxLength(30)
                .HasColumnName("YourDONo");
        });

        modelBuilder.Entity<VPurchaseReturnSubDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vPurchaseReturnSubDetail");

            entity.Property(e => e.AddToCost)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.Desc2).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.DocTaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.GovtTaxCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.LocalSubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.PrintOut)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SalesExemptionNo).HasMaxLength(60);
            entity.Property(e => e.SubQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TariffCode).HasMaxLength(12);
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxAccNo).HasMaxLength(12);
            entity.Property(e => e.TaxCode).HasMaxLength(14);
            entity.Property(e => e.TaxCodeDescription).HasMaxLength(120);
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<VQuotation>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vQuotation");

            entity.Property(e => e.ApprovalUserId)
                .HasMaxLength(10)
                .HasColumnName("ApprovalUserID");
            entity.Property(e => e.ApprovalUserName).HasMaxLength(40);
            entity.Property(e => e.Attention).HasMaxLength(40);
            entity.Property(e => e.BranchAccNo).HasMaxLength(12);
            entity.Property(e => e.BranchAddress1).HasMaxLength(40);
            entity.Property(e => e.BranchAddress2).HasMaxLength(40);
            entity.Property(e => e.BranchAddress3).HasMaxLength(40);
            entity.Property(e => e.BranchAddress4).HasMaxLength(40);
            entity.Property(e => e.BranchAreaCode).HasMaxLength(12);
            entity.Property(e => e.BranchCode).HasMaxLength(20);
            entity.Property(e => e.BranchContact).HasMaxLength(40);
            entity.Property(e => e.BranchEmailAddress).HasMaxLength(80);
            entity.Property(e => e.BranchFax1).HasMaxLength(25);
            entity.Property(e => e.BranchFax2).HasMaxLength(25);
            entity.Property(e => e.BranchIsActive)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BranchMobile).HasMaxLength(25);
            entity.Property(e => e.BranchName).HasMaxLength(100);
            entity.Property(e => e.BranchPhone1).HasMaxLength(25);
            entity.Property(e => e.BranchPhone2).HasMaxLength(25);
            entity.Property(e => e.BranchPostCode).HasMaxLength(10);
            entity.Property(e => e.BranchPurchaseAgent).HasMaxLength(12);
            entity.Property(e => e.BranchSalesAgent).HasMaxLength(12);
            entity.Property(e => e.CanSync)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Cc)
                .HasMaxLength(20)
                .HasColumnName("CC");
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.CreatedUserName).HasMaxLength(40);
            entity.Property(e => e.CurrencyCode).HasMaxLength(5);
            entity.Property(e => e.CurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.CurrencySymbol).HasMaxLength(6);
            entity.Property(e => e.CurrencyWord).HasMaxLength(40);
            entity.Property(e => e.CurrencyWord2).HasMaxLength(40);
            entity.Property(e => e.DebtorAddress1).HasMaxLength(40);
            entity.Property(e => e.DebtorAddress2).HasMaxLength(40);
            entity.Property(e => e.DebtorAddress3).HasMaxLength(40);
            entity.Property(e => e.DebtorAddress4).HasMaxLength(40);
            entity.Property(e => e.DebtorAgingOn)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DebtorAreaCode).HasMaxLength(12);
            entity.Property(e => e.DebtorAreaDesc2).HasMaxLength(40);
            entity.Property(e => e.DebtorAreaDescription).HasMaxLength(40);
            entity.Property(e => e.DebtorAttention).HasMaxLength(40);
            entity.Property(e => e.DebtorCode).HasMaxLength(12);
            entity.Property(e => e.DebtorCompanyName).HasMaxLength(100);
            entity.Property(e => e.DebtorCreatedTimestamp).HasColumnType("datetime");
            entity.Property(e => e.DebtorCreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("DebtorCreatedUserID");
            entity.Property(e => e.DebtorCreditLimit).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DebtorCurrencyCode).HasMaxLength(5);
            entity.Property(e => e.DebtorDeliverAddress1).HasMaxLength(40);
            entity.Property(e => e.DebtorDeliverAddress2).HasMaxLength(40);
            entity.Property(e => e.DebtorDeliverAddress3).HasMaxLength(40);
            entity.Property(e => e.DebtorDeliverAddress4).HasMaxLength(40);
            entity.Property(e => e.DebtorDeliverPostCode).HasMaxLength(10);
            entity.Property(e => e.DebtorDesc2).HasMaxLength(100);
            entity.Property(e => e.DebtorDisplayTerm).HasMaxLength(30);
            entity.Property(e => e.DebtorEmailAddress).HasMaxLength(200);
            entity.Property(e => e.DebtorExemptExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.DebtorExemptNo).HasMaxLength(60);
            entity.Property(e => e.DebtorFax1).HasMaxLength(25);
            entity.Property(e => e.DebtorFax2).HasMaxLength(25);
            entity.Property(e => e.DebtorGstregisterNo)
                .HasMaxLength(20)
                .HasColumnName("DebtorGSTRegisterNo");
            entity.Property(e => e.DebtorGststatusVerifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("DebtorGSTStatusVerifiedDate");
            entity.Property(e => e.DebtorInclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DebtorLastModified).HasColumnType("datetime");
            entity.Property(e => e.DebtorLastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("DebtorLastModifiedUserID");
            entity.Property(e => e.DebtorMobile).HasMaxLength(25);
            entity.Property(e => e.DebtorName).HasMaxLength(100);
            entity.Property(e => e.DebtorNatureOfBusiness).HasMaxLength(40);
            entity.Property(e => e.DebtorOverdueLimit).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DebtorParentAccNo).HasMaxLength(12);
            entity.Property(e => e.DebtorPhone1).HasMaxLength(25);
            entity.Property(e => e.DebtorPhone2).HasMaxLength(25);
            entity.Property(e => e.DebtorPostCode).HasMaxLength(10);
            entity.Property(e => e.DebtorPriceCategory).HasMaxLength(12);
            entity.Property(e => e.DebtorRegisterNo).HasMaxLength(30);
            entity.Property(e => e.DebtorSalesAgent).HasMaxLength(12);
            entity.Property(e => e.DebtorSalesAgentDesc2).HasMaxLength(40);
            entity.Property(e => e.DebtorSalesAgentDescription).HasMaxLength(40);
            entity.Property(e => e.DebtorSelfBilledApprovalNo).HasMaxLength(30);
            entity.Property(e => e.DebtorSstregisterNo)
                .HasMaxLength(20)
                .HasColumnName("DebtorSSTRegisterNo");
            entity.Property(e => e.DebtorStatementType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DebtorTaxCode).HasMaxLength(14);
            entity.Property(e => e.DebtorTaxRegisterNo).HasMaxLength(30);
            entity.Property(e => e.DebtorType).HasMaxLength(20);
            entity.Property(e => e.DebtorTypeDesc2).HasMaxLength(40);
            entity.Property(e => e.DebtorTypeDescription).HasMaxLength(40);
            entity.Property(e => e.DebtorUdfBangsa1)
                .HasMaxLength(50)
                .HasColumnName("DebtorUDF_Bangsa1");
            entity.Property(e => e.DebtorUdfBangsa2)
                .HasMaxLength(50)
                .HasColumnName("DebtorUDF_Bangsa2");
            entity.Property(e => e.DebtorUdfJantina)
                .HasMaxLength(20)
                .HasColumnName("DebtorUDF_Jantina");
            entity.Property(e => e.DebtorUdfKerakyatan)
                .HasMaxLength(50)
                .HasColumnName("DebtorUDF_Kerakyatan");
            entity.Property(e => e.DebtorUdfTarikhLahir)
                .HasColumnType("datetime")
                .HasColumnName("DebtorUDF_TarikhLahir");
            entity.Property(e => e.DebtorWebUrl)
                .HasMaxLength(80)
                .HasColumnName("DebtorWebURL");
            entity.Property(e => e.DeliverAddr1).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr2).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr3).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr4).HasMaxLength(40);
            entity.Property(e => e.DeliverContact).HasMaxLength(40);
            entity.Property(e => e.DeliverFax1).HasMaxLength(25);
            entity.Property(e => e.DeliverPhone1).HasMaxLength(25);
            entity.Property(e => e.DeliveryTerm).HasMaxLength(40);
            entity.Property(e => e.Description).HasMaxLength(80);
            entity.Property(e => e.DisplayTerm).HasMaxLength(30);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.DocStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Fax1).HasMaxLength(25);
            entity.Property(e => e.FcgainAccount)
                .HasMaxLength(12)
                .HasColumnName("FCGainAccount");
            entity.Property(e => e.FclossAccount)
                .HasMaxLength(12)
                .HasColumnName("FCLossAccount");
            entity.Property(e => e.FinalTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer1TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Footer2Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer2TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Footer3Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer3TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.GainLossJournalType).HasMaxLength(10);
            entity.Property(e => e.InclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.InvAddr1).HasMaxLength(40);
            entity.Property(e => e.InvAddr2).HasMaxLength(40);
            entity.Property(e => e.InvAddr3).HasMaxLength(40);
            entity.Property(e => e.InvAddr4).HasMaxLength(40);
            entity.Property(e => e.IsDebtorTaxRegistered)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.IsRoundAdj)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.LastModifiedUserName).HasMaxLength(40);
            entity.Property(e => e.LocalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.MultiPrice).HasMaxLength(8);
            entity.Property(e => e.NetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.PaymentTerm).HasMaxLength(40);
            entity.Property(e => e.Phone1).HasMaxLength(25);
            entity.Property(e => e.QtudfSuperAppId)
                .HasMaxLength(32)
                .HasColumnName("QTUDF_SuperAppId");
            entity.Property(e => e.Ref).HasMaxLength(40);
            entity.Property(e => e.RefDocNo).HasMaxLength(30);
            entity.Property(e => e.Remark1).HasMaxLength(40);
            entity.Property(e => e.Remark2).HasMaxLength(40);
            entity.Property(e => e.Remark3).HasMaxLength(40);
            entity.Property(e => e.Remark4).HasMaxLength(40);
            entity.Property(e => e.RoundAdj).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SalesAgent).HasMaxLength(12);
            entity.Property(e => e.SalesAgentDesc2).HasMaxLength(40);
            entity.Property(e => e.SalesAgentDescription).HasMaxLength(40);
            entity.Property(e => e.SalesExemptionExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.SalesExemptionNo).HasMaxLength(60);
            entity.Property(e => e.SalesLocation).HasMaxLength(8);
            entity.Property(e => e.ShipInfo).HasMaxLength(40);
            entity.Property(e => e.ShipVia).HasMaxLength(20);
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyExTax).HasColumnType("decimal(38, 13)");
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxRegisterNo).HasMaxLength(30);
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ToDocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.ToTaxCurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.Total).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalWithTax).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.Transferable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Validity).HasMaxLength(40);
            entity.Property(e => e.YourRef).HasMaxLength(30);
        });

        modelBuilder.Entity<VQuotationDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vQuotationDetail");

            entity.Property(e => e.AddToCost)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AddToSubTotal)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BarCode).HasMaxLength(30);
            entity.Property(e => e.BatchBalQty).HasColumnType("decimal(38, 8)");
            entity.Property(e => e.CalcByPercent).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.DeliveryDate).HasColumnType("datetime");
            entity.Property(e => e.DeptDesc2).HasMaxLength(40);
            entity.Property(e => e.DeptDescription).HasMaxLength(40);
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Desc2).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.Discount).HasMaxLength(20);
            entity.Property(e => e.DiscountAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DocTaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.DtlType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EstimatedDeliveryDate).HasMaxLength(20);
            entity.Property(e => e.FontStyle).HasMaxLength(8);
            entity.Property(e => e.GovtTaxCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.ItemBaseUom)
                .HasMaxLength(8)
                .HasColumnName("ItemBaseUOM");
            entity.Property(e => e.ItemBrand).HasMaxLength(20);
            entity.Property(e => e.ItemBrandDescription).HasMaxLength(40);
            entity.Property(e => e.ItemCategory).HasMaxLength(20);
            entity.Property(e => e.ItemCategoryDescription).HasMaxLength(40);
            entity.Property(e => e.ItemClass).HasMaxLength(20);
            entity.Property(e => e.ItemClassDescription).HasMaxLength(40);
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.ItemDesc2).HasMaxLength(100);
            entity.Property(e => e.ItemDescription).HasMaxLength(100);
            entity.Property(e => e.ItemGroup).HasMaxLength(8);
            entity.Property(e => e.ItemGroupDescription).HasMaxLength(40);
            entity.Property(e => e.ItemType).HasMaxLength(12);
            entity.Property(e => e.ItemTypeDescription).HasMaxLength(40);
            entity.Property(e => e.ItemUdfWarDay).HasColumnName("ItemUDF_WarDay");
            entity.Property(e => e.LeadTime).HasMaxLength(40);
            entity.Property(e => e.LocalSubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalSubTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.LocationAddr1).HasMaxLength(40);
            entity.Property(e => e.LocationAddr2).HasMaxLength(40);
            entity.Property(e => e.LocationAddr3).HasMaxLength(40);
            entity.Property(e => e.LocationAddr4).HasMaxLength(40);
            entity.Property(e => e.LocationBalQty).HasColumnType("decimal(38, 8)");
            entity.Property(e => e.LocationContact).HasMaxLength(40);
            entity.Property(e => e.LocationDesc2).HasMaxLength(80);
            entity.Property(e => e.LocationDescription).HasMaxLength(80);
            entity.Property(e => e.LocationFax1).HasMaxLength(25);
            entity.Property(e => e.LocationFax2).HasMaxLength(25);
            entity.Property(e => e.LocationPhone1).HasMaxLength(25);
            entity.Property(e => e.LocationPhone2).HasMaxLength(25);
            entity.Property(e => e.LocationPostCode).HasMaxLength(10);
            entity.Property(e => e.MainItem)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Numbering).HasMaxLength(6);
            entity.Property(e => e.PrintOut)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.ProjectDesc2).HasMaxLength(40);
            entity.Property(e => e.ProjectDescription).HasMaxLength(40);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SalesExemptionNo).HasMaxLength(60);
            entity.Property(e => e.Shelf).HasMaxLength(20);
            entity.Property(e => e.SmallestQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SmallestUnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SubTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SubTotalWithTax).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxAccNo).HasMaxLength(12);
            entity.Property(e => e.TaxCode).HasMaxLength(14);
            entity.Property(e => e.TaxCodeDescription).HasMaxLength(120);
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Transferable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TransferedQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.UnitPriceAfterDiscount).HasColumnType("decimal(38, 13)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
            entity.Property(e => e.UombalQty)
                .HasColumnType("decimal(38, 8)")
                .HasColumnName("UOMBalQty");
            entity.Property(e => e.Uomcost)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMCost");
            entity.Property(e => e.UomitemCode)
                .HasMaxLength(30)
                .HasColumnName("UOMItemCode");
            entity.Property(e => e.Uomprice)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMPrice");
            entity.Property(e => e.Uomprice2)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMPrice2");
            entity.Property(e => e.Uomrate)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMRate");
            entity.Property(e => e.UomrealCost)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMRealCost");
            entity.Property(e => e.UserUom)
                .HasMaxLength(8)
                .HasColumnName("UserUOM");
            entity.Property(e => e.Volume).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.VolumeUom)
                .HasMaxLength(8)
                .HasColumnName("VolumeUOM");
            entity.Property(e => e.Weight).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.WeightUom)
                .HasMaxLength(8)
                .HasColumnName("WeightUOM");
        });

        modelBuilder.Entity<VQuotationSubDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vQuotationSubDetail");

            entity.Property(e => e.AddToCost)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Desc2).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.DocTaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.GovtTaxCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.LocalSubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.PrintOut)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SalesExemptionNo).HasMaxLength(60);
            entity.Property(e => e.SubQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxAccNo).HasMaxLength(12);
            entity.Property(e => e.TaxCode).HasMaxLength(14);
            entity.Property(e => e.TaxCodeDescription).HasMaxLength(120);
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<VRequestForQuotation>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vRequestForQuotation");

            entity.Property(e => e.Attention).HasMaxLength(40);
            entity.Property(e => e.BranchAccNo).HasMaxLength(12);
            entity.Property(e => e.BranchAddress1).HasMaxLength(40);
            entity.Property(e => e.BranchAddress2).HasMaxLength(40);
            entity.Property(e => e.BranchAddress3).HasMaxLength(40);
            entity.Property(e => e.BranchAddress4).HasMaxLength(40);
            entity.Property(e => e.BranchAreaCode).HasMaxLength(12);
            entity.Property(e => e.BranchCode).HasMaxLength(20);
            entity.Property(e => e.BranchContact).HasMaxLength(40);
            entity.Property(e => e.BranchEmailAddress).HasMaxLength(80);
            entity.Property(e => e.BranchFax1).HasMaxLength(25);
            entity.Property(e => e.BranchFax2).HasMaxLength(25);
            entity.Property(e => e.BranchIsActive)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BranchMobile).HasMaxLength(25);
            entity.Property(e => e.BranchName).HasMaxLength(100);
            entity.Property(e => e.BranchPhone1).HasMaxLength(25);
            entity.Property(e => e.BranchPhone2).HasMaxLength(25);
            entity.Property(e => e.BranchPostCode).HasMaxLength(10);
            entity.Property(e => e.BranchPurchaseAgent).HasMaxLength(12);
            entity.Property(e => e.BranchSalesAgent).HasMaxLength(12);
            entity.Property(e => e.CanSync)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.CreatedUserName).HasMaxLength(40);
            entity.Property(e => e.CreditorAddress1).HasMaxLength(40);
            entity.Property(e => e.CreditorAddress2).HasMaxLength(40);
            entity.Property(e => e.CreditorAddress3).HasMaxLength(40);
            entity.Property(e => e.CreditorAddress4).HasMaxLength(40);
            entity.Property(e => e.CreditorAgingOn)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreditorAreaCode).HasMaxLength(12);
            entity.Property(e => e.CreditorAreaDesc2).HasMaxLength(40);
            entity.Property(e => e.CreditorAreaDescription).HasMaxLength(40);
            entity.Property(e => e.CreditorAttention).HasMaxLength(40);
            entity.Property(e => e.CreditorCode).HasMaxLength(12);
            entity.Property(e => e.CreditorCompanyName).HasMaxLength(100);
            entity.Property(e => e.CreditorCreatedTimestamp).HasColumnType("datetime");
            entity.Property(e => e.CreditorCreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreditorCreatedUserID");
            entity.Property(e => e.CreditorCreditLimit).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.CreditorCurrencyCode).HasMaxLength(5);
            entity.Property(e => e.CreditorDeliverAddress1).HasMaxLength(40);
            entity.Property(e => e.CreditorDeliverAddress2).HasMaxLength(40);
            entity.Property(e => e.CreditorDeliverAddress3).HasMaxLength(40);
            entity.Property(e => e.CreditorDeliverAddress4).HasMaxLength(40);
            entity.Property(e => e.CreditorDeliverPostCode).HasMaxLength(10);
            entity.Property(e => e.CreditorDesc2).HasMaxLength(100);
            entity.Property(e => e.CreditorDisplayTerm).HasMaxLength(30);
            entity.Property(e => e.CreditorEmailAddress).HasMaxLength(200);
            entity.Property(e => e.CreditorExemptExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.CreditorExemptNo).HasMaxLength(60);
            entity.Property(e => e.CreditorFax1).HasMaxLength(25);
            entity.Property(e => e.CreditorFax2).HasMaxLength(25);
            entity.Property(e => e.CreditorGstregisterNo)
                .HasMaxLength(20)
                .HasColumnName("CreditorGSTRegisterNo");
            entity.Property(e => e.CreditorGststatusVerifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("CreditorGSTStatusVerifiedDate");
            entity.Property(e => e.CreditorInclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreditorLastModified).HasColumnType("datetime");
            entity.Property(e => e.CreditorLastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreditorLastModifiedUserID");
            entity.Property(e => e.CreditorMobile).HasMaxLength(25);
            entity.Property(e => e.CreditorName).HasMaxLength(100);
            entity.Property(e => e.CreditorNatureOfBusiness).HasMaxLength(40);
            entity.Property(e => e.CreditorOverdueLimit).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.CreditorParentAccNo).HasMaxLength(12);
            entity.Property(e => e.CreditorPhone1).HasMaxLength(25);
            entity.Property(e => e.CreditorPhone2).HasMaxLength(25);
            entity.Property(e => e.CreditorPostCode).HasMaxLength(10);
            entity.Property(e => e.CreditorPriceCategory).HasMaxLength(12);
            entity.Property(e => e.CreditorPurchaseAgent).HasMaxLength(12);
            entity.Property(e => e.CreditorPurchaseAgentDesc2).HasMaxLength(40);
            entity.Property(e => e.CreditorPurchaseAgentDescription).HasMaxLength(40);
            entity.Property(e => e.CreditorRegisterNo).HasMaxLength(30);
            entity.Property(e => e.CreditorSelfBilledApprovalNo).HasMaxLength(30);
            entity.Property(e => e.CreditorSstregisterNo)
                .HasMaxLength(20)
                .HasColumnName("CreditorSSTRegisterNo");
            entity.Property(e => e.CreditorStatementType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreditorTaxCode).HasMaxLength(14);
            entity.Property(e => e.CreditorTaxRegisterNo).HasMaxLength(30);
            entity.Property(e => e.CreditorType).HasMaxLength(20);
            entity.Property(e => e.CreditorTypeDesc2).HasMaxLength(40);
            entity.Property(e => e.CreditorTypeDescription).HasMaxLength(40);
            entity.Property(e => e.CreditorWebUrl)
                .HasMaxLength(80)
                .HasColumnName("CreditorWebURL");
            entity.Property(e => e.CurrencyCode).HasMaxLength(5);
            entity.Property(e => e.CurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.CurrencySymbol).HasMaxLength(6);
            entity.Property(e => e.CurrencyWord).HasMaxLength(40);
            entity.Property(e => e.CurrencyWord2).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr1).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr2).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr3).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr4).HasMaxLength(40);
            entity.Property(e => e.DeliverContact).HasMaxLength(40);
            entity.Property(e => e.DeliverFax1).HasMaxLength(25);
            entity.Property(e => e.DeliverPhone1).HasMaxLength(25);
            entity.Property(e => e.Description).HasMaxLength(80);
            entity.Property(e => e.DisplayTerm).HasMaxLength(30);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.DocStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Fax1).HasMaxLength(25);
            entity.Property(e => e.FcgainAccount)
                .HasMaxLength(12)
                .HasColumnName("FCGainAccount");
            entity.Property(e => e.FclossAccount)
                .HasMaxLength(12)
                .HasColumnName("FCLossAccount");
            entity.Property(e => e.Footer1Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer1TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Footer2Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer2TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Footer3Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer3TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.GainLossJournalType).HasMaxLength(10);
            entity.Property(e => e.InclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.InvAddr1).HasMaxLength(40);
            entity.Property(e => e.InvAddr2).HasMaxLength(40);
            entity.Property(e => e.InvAddr3).HasMaxLength(40);
            entity.Property(e => e.InvAddr4).HasMaxLength(40);
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.LastModifiedUserName).HasMaxLength(40);
            entity.Property(e => e.LocalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.NetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Phone1).HasMaxLength(25);
            entity.Property(e => e.PurchaseAgent).HasMaxLength(12);
            entity.Property(e => e.PurchaseAgentDesc2).HasMaxLength(40);
            entity.Property(e => e.PurchaseAgentDescription).HasMaxLength(40);
            entity.Property(e => e.PurchaseLocation).HasMaxLength(8);
            entity.Property(e => e.Ref).HasMaxLength(40);
            entity.Property(e => e.RefDocNo).HasMaxLength(30);
            entity.Property(e => e.Remark1).HasMaxLength(40);
            entity.Property(e => e.Remark2).HasMaxLength(40);
            entity.Property(e => e.Remark3).HasMaxLength(40);
            entity.Property(e => e.Remark4).HasMaxLength(40);
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyExTax).HasColumnType("decimal(38, 13)");
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxRegisterNo).HasMaxLength(30);
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ToDocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.ToTaxCurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.Total).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalWithTax).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.Transferable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VRequestForQuotationDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vRequestForQuotationDetail");

            entity.Property(e => e.AddToCost)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AddToSubTotal)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BarCode).HasMaxLength(30);
            entity.Property(e => e.BatchBalQty).HasColumnType("decimal(38, 8)");
            entity.Property(e => e.CalcByPercent).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.DeliveryDate).HasColumnType("datetime");
            entity.Property(e => e.DeptDesc2).HasMaxLength(40);
            entity.Property(e => e.DeptDescription).HasMaxLength(40);
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Desc2).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.Discount).HasMaxLength(20);
            entity.Property(e => e.DiscountAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DocTaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.DtlType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EstimatedDeliveryDate).HasMaxLength(20);
            entity.Property(e => e.FontStyle).HasMaxLength(8);
            entity.Property(e => e.GovtTaxCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.ItemBaseUom)
                .HasMaxLength(8)
                .HasColumnName("ItemBaseUOM");
            entity.Property(e => e.ItemBrand).HasMaxLength(20);
            entity.Property(e => e.ItemBrandDescription).HasMaxLength(40);
            entity.Property(e => e.ItemCategory).HasMaxLength(20);
            entity.Property(e => e.ItemCategoryDescription).HasMaxLength(40);
            entity.Property(e => e.ItemClass).HasMaxLength(20);
            entity.Property(e => e.ItemClassDescription).HasMaxLength(40);
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.ItemDesc2).HasMaxLength(100);
            entity.Property(e => e.ItemDescription).HasMaxLength(100);
            entity.Property(e => e.ItemGroup).HasMaxLength(8);
            entity.Property(e => e.ItemGroupDescription).HasMaxLength(40);
            entity.Property(e => e.ItemType).HasMaxLength(12);
            entity.Property(e => e.ItemTypeDescription).HasMaxLength(40);
            entity.Property(e => e.ItemUdfWarDay).HasColumnName("ItemUDF_WarDay");
            entity.Property(e => e.LeadTime).HasMaxLength(40);
            entity.Property(e => e.LocalSubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalSubTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.LocationAddr1).HasMaxLength(40);
            entity.Property(e => e.LocationAddr2).HasMaxLength(40);
            entity.Property(e => e.LocationAddr3).HasMaxLength(40);
            entity.Property(e => e.LocationAddr4).HasMaxLength(40);
            entity.Property(e => e.LocationBalQty).HasColumnType("decimal(38, 8)");
            entity.Property(e => e.LocationContact).HasMaxLength(40);
            entity.Property(e => e.LocationDesc2).HasMaxLength(80);
            entity.Property(e => e.LocationDescription).HasMaxLength(80);
            entity.Property(e => e.LocationFax1).HasMaxLength(25);
            entity.Property(e => e.LocationFax2).HasMaxLength(25);
            entity.Property(e => e.LocationPhone1).HasMaxLength(25);
            entity.Property(e => e.LocationPhone2).HasMaxLength(25);
            entity.Property(e => e.LocationPostCode).HasMaxLength(10);
            entity.Property(e => e.MainItem)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Numbering).HasMaxLength(6);
            entity.Property(e => e.PrintOut)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.ProjectDesc2).HasMaxLength(40);
            entity.Property(e => e.ProjectDescription).HasMaxLength(40);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SalesExemptionNo).HasMaxLength(60);
            entity.Property(e => e.Shelf).HasMaxLength(20);
            entity.Property(e => e.SmallestQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SmallestUnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SubTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SubTotalWithTax).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxAccNo).HasMaxLength(12);
            entity.Property(e => e.TaxCode).HasMaxLength(14);
            entity.Property(e => e.TaxCodeDescription).HasMaxLength(120);
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Transferable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TransferedQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.UnitPriceAfterDiscount).HasColumnType("decimal(38, 13)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
            entity.Property(e => e.UombalQty)
                .HasColumnType("decimal(38, 8)")
                .HasColumnName("UOMBalQty");
            entity.Property(e => e.Uomcost)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMCost");
            entity.Property(e => e.UomitemCode)
                .HasMaxLength(30)
                .HasColumnName("UOMItemCode");
            entity.Property(e => e.Uomprice)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMPrice");
            entity.Property(e => e.Uomprice2)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMPrice2");
            entity.Property(e => e.Uomrate)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMRate");
            entity.Property(e => e.UomrealCost)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMRealCost");
            entity.Property(e => e.UserUom)
                .HasMaxLength(8)
                .HasColumnName("UserUOM");
            entity.Property(e => e.Volume).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.VolumeUom)
                .HasMaxLength(8)
                .HasColumnName("VolumeUOM");
            entity.Property(e => e.Weight).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.WeightUom)
                .HasMaxLength(8)
                .HasColumnName("WeightUOM");
        });

        modelBuilder.Entity<VRequestForQuotationSubDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vRequestForQuotationSubDetail");

            entity.Property(e => e.AddToCost)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Desc2).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.DocTaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.GovtTaxCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.LocalSubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.PrintOut)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SalesExemptionNo).HasMaxLength(60);
            entity.Property(e => e.SubQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxAccNo).HasMaxLength(12);
            entity.Property(e => e.TaxCode).HasMaxLength(14);
            entity.Property(e => e.TaxCodeDescription).HasMaxLength(120);
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<VSalesAgent>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vSalesAgent");

            entity.Property(e => e.SalesAgent).HasMaxLength(12);
            entity.Property(e => e.SalesAgentDesc2).HasMaxLength(40);
            entity.Property(e => e.SalesAgentDescription).HasMaxLength(40);
        });

        modelBuilder.Entity<VSalesOrder>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vSalesOrder");

            entity.Property(e => e.Attention).HasMaxLength(40);
            entity.Property(e => e.BranchAccNo).HasMaxLength(12);
            entity.Property(e => e.BranchAddress1).HasMaxLength(40);
            entity.Property(e => e.BranchAddress2).HasMaxLength(40);
            entity.Property(e => e.BranchAddress3).HasMaxLength(40);
            entity.Property(e => e.BranchAddress4).HasMaxLength(40);
            entity.Property(e => e.BranchAreaCode).HasMaxLength(12);
            entity.Property(e => e.BranchCode).HasMaxLength(20);
            entity.Property(e => e.BranchContact).HasMaxLength(40);
            entity.Property(e => e.BranchEmailAddress).HasMaxLength(80);
            entity.Property(e => e.BranchFax1).HasMaxLength(25);
            entity.Property(e => e.BranchFax2).HasMaxLength(25);
            entity.Property(e => e.BranchIsActive)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BranchMobile).HasMaxLength(25);
            entity.Property(e => e.BranchName).HasMaxLength(100);
            entity.Property(e => e.BranchPhone1).HasMaxLength(25);
            entity.Property(e => e.BranchPhone2).HasMaxLength(25);
            entity.Property(e => e.BranchPostCode).HasMaxLength(10);
            entity.Property(e => e.BranchPurchaseAgent).HasMaxLength(12);
            entity.Property(e => e.BranchSalesAgent).HasMaxLength(12);
            entity.Property(e => e.CanSync)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.CreatedUserName).HasMaxLength(40);
            entity.Property(e => e.CurrencyCode).HasMaxLength(5);
            entity.Property(e => e.CurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.CurrencySymbol).HasMaxLength(6);
            entity.Property(e => e.CurrencyWord).HasMaxLength(40);
            entity.Property(e => e.CurrencyWord2).HasMaxLength(40);
            entity.Property(e => e.DebtorAddress1).HasMaxLength(40);
            entity.Property(e => e.DebtorAddress2).HasMaxLength(40);
            entity.Property(e => e.DebtorAddress3).HasMaxLength(40);
            entity.Property(e => e.DebtorAddress4).HasMaxLength(40);
            entity.Property(e => e.DebtorAgingOn)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DebtorAreaCode).HasMaxLength(12);
            entity.Property(e => e.DebtorAreaDesc2).HasMaxLength(40);
            entity.Property(e => e.DebtorAreaDescription).HasMaxLength(40);
            entity.Property(e => e.DebtorAttention).HasMaxLength(40);
            entity.Property(e => e.DebtorCode).HasMaxLength(12);
            entity.Property(e => e.DebtorCompanyName).HasMaxLength(100);
            entity.Property(e => e.DebtorCreatedTimestamp).HasColumnType("datetime");
            entity.Property(e => e.DebtorCreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("DebtorCreatedUserID");
            entity.Property(e => e.DebtorCreditLimit).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DebtorCurrencyCode).HasMaxLength(5);
            entity.Property(e => e.DebtorDeliverAddress1).HasMaxLength(40);
            entity.Property(e => e.DebtorDeliverAddress2).HasMaxLength(40);
            entity.Property(e => e.DebtorDeliverAddress3).HasMaxLength(40);
            entity.Property(e => e.DebtorDeliverAddress4).HasMaxLength(40);
            entity.Property(e => e.DebtorDeliverPostCode).HasMaxLength(10);
            entity.Property(e => e.DebtorDesc2).HasMaxLength(100);
            entity.Property(e => e.DebtorDisplayTerm).HasMaxLength(30);
            entity.Property(e => e.DebtorEmailAddress).HasMaxLength(200);
            entity.Property(e => e.DebtorExemptExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.DebtorExemptNo).HasMaxLength(60);
            entity.Property(e => e.DebtorFax1).HasMaxLength(25);
            entity.Property(e => e.DebtorFax2).HasMaxLength(25);
            entity.Property(e => e.DebtorGstregisterNo)
                .HasMaxLength(20)
                .HasColumnName("DebtorGSTRegisterNo");
            entity.Property(e => e.DebtorGststatusVerifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("DebtorGSTStatusVerifiedDate");
            entity.Property(e => e.DebtorInclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DebtorLastModified).HasColumnType("datetime");
            entity.Property(e => e.DebtorLastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("DebtorLastModifiedUserID");
            entity.Property(e => e.DebtorMobile).HasMaxLength(25);
            entity.Property(e => e.DebtorName).HasMaxLength(100);
            entity.Property(e => e.DebtorNatureOfBusiness).HasMaxLength(40);
            entity.Property(e => e.DebtorOverdueLimit).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DebtorParentAccNo).HasMaxLength(12);
            entity.Property(e => e.DebtorPhone1).HasMaxLength(25);
            entity.Property(e => e.DebtorPhone2).HasMaxLength(25);
            entity.Property(e => e.DebtorPostCode).HasMaxLength(10);
            entity.Property(e => e.DebtorPriceCategory).HasMaxLength(12);
            entity.Property(e => e.DebtorRegisterNo).HasMaxLength(30);
            entity.Property(e => e.DebtorSalesAgent).HasMaxLength(12);
            entity.Property(e => e.DebtorSalesAgentDesc2).HasMaxLength(40);
            entity.Property(e => e.DebtorSalesAgentDescription).HasMaxLength(40);
            entity.Property(e => e.DebtorSelfBilledApprovalNo).HasMaxLength(30);
            entity.Property(e => e.DebtorSstregisterNo)
                .HasMaxLength(20)
                .HasColumnName("DebtorSSTRegisterNo");
            entity.Property(e => e.DebtorStatementType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DebtorTaxCode).HasMaxLength(14);
            entity.Property(e => e.DebtorTaxRegisterNo).HasMaxLength(30);
            entity.Property(e => e.DebtorType).HasMaxLength(20);
            entity.Property(e => e.DebtorTypeDesc2).HasMaxLength(40);
            entity.Property(e => e.DebtorTypeDescription).HasMaxLength(40);
            entity.Property(e => e.DebtorUdfBangsa1)
                .HasMaxLength(50)
                .HasColumnName("DebtorUDF_Bangsa1");
            entity.Property(e => e.DebtorUdfBangsa2)
                .HasMaxLength(50)
                .HasColumnName("DebtorUDF_Bangsa2");
            entity.Property(e => e.DebtorUdfJantina)
                .HasMaxLength(20)
                .HasColumnName("DebtorUDF_Jantina");
            entity.Property(e => e.DebtorUdfKerakyatan)
                .HasMaxLength(50)
                .HasColumnName("DebtorUDF_Kerakyatan");
            entity.Property(e => e.DebtorUdfTarikhLahir)
                .HasColumnType("datetime")
                .HasColumnName("DebtorUDF_TarikhLahir");
            entity.Property(e => e.DebtorWebUrl)
                .HasMaxLength(80)
                .HasColumnName("DebtorWebURL");
            entity.Property(e => e.DeliverAddr1).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr2).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr3).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr4).HasMaxLength(40);
            entity.Property(e => e.DeliverContact).HasMaxLength(40);
            entity.Property(e => e.DeliverFax1).HasMaxLength(25);
            entity.Property(e => e.DeliverPhone1).HasMaxLength(25);
            entity.Property(e => e.Description).HasMaxLength(80);
            entity.Property(e => e.DisplayTerm).HasMaxLength(30);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.DocStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Fax1).HasMaxLength(25);
            entity.Property(e => e.FcgainAccount)
                .HasMaxLength(12)
                .HasColumnName("FCGainAccount");
            entity.Property(e => e.FclossAccount)
                .HasMaxLength(12)
                .HasColumnName("FCLossAccount");
            entity.Property(e => e.FinalTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer1TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Footer2Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer2TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Footer3Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer3TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.GainLossJournalType).HasMaxLength(10);
            entity.Property(e => e.InclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.InvAddr1).HasMaxLength(40);
            entity.Property(e => e.InvAddr2).HasMaxLength(40);
            entity.Property(e => e.InvAddr3).HasMaxLength(40);
            entity.Property(e => e.InvAddr4).HasMaxLength(40);
            entity.Property(e => e.IsDebtorTaxRegistered)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.IsRoundAdj)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.LastModifiedUserName).HasMaxLength(40);
            entity.Property(e => e.LocalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.MultiPrice).HasMaxLength(8);
            entity.Property(e => e.NetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Phone1).HasMaxLength(25);
            entity.Property(e => e.Ref).HasMaxLength(40);
            entity.Property(e => e.RefDocNo).HasMaxLength(30);
            entity.Property(e => e.Remark1).HasMaxLength(40);
            entity.Property(e => e.Remark2).HasMaxLength(40);
            entity.Property(e => e.Remark3).HasMaxLength(40);
            entity.Property(e => e.Remark4).HasMaxLength(40);
            entity.Property(e => e.RoundAdj).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SalesAgent).HasMaxLength(12);
            entity.Property(e => e.SalesAgentDesc2).HasMaxLength(40);
            entity.Property(e => e.SalesAgentDescription).HasMaxLength(40);
            entity.Property(e => e.SalesExemptionExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.SalesExemptionNo).HasMaxLength(60);
            entity.Property(e => e.SalesLocation).HasMaxLength(8);
            entity.Property(e => e.ShipInfo).HasMaxLength(40);
            entity.Property(e => e.ShipVia).HasMaxLength(20);
            entity.Property(e => e.SoudfSuperAppId)
                .HasMaxLength(32)
                .HasColumnName("SOUDF_SuperAppId");
            entity.Property(e => e.SoudfTags)
                .HasMaxLength(100)
                .HasColumnName("SOUDF_Tags");
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyExTax).HasColumnType("decimal(38, 13)");
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxRegisterNo).HasMaxLength(30);
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ToDocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.ToTaxCurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.Total).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalWithTax).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.Transferable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VSalesOrderDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vSalesOrderDetail");

            entity.Property(e => e.AddToCost)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AddToSubTotal)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BarCode).HasMaxLength(30);
            entity.Property(e => e.BatchBalQty).HasColumnType("decimal(38, 8)");
            entity.Property(e => e.CalcByPercent).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.DeliveryDate).HasColumnType("datetime");
            entity.Property(e => e.DeptDesc2).HasMaxLength(40);
            entity.Property(e => e.DeptDescription).HasMaxLength(40);
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Desc2).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.Discount).HasMaxLength(20);
            entity.Property(e => e.DiscountAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DocTaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.DtlType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EstimatedDeliveryDate).HasMaxLength(20);
            entity.Property(e => e.Focqty)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("FOCQty");
            entity.Property(e => e.FoctransferedQty)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("FOCTransferedQty");
            entity.Property(e => e.FontStyle).HasMaxLength(8);
            entity.Property(e => e.FromDocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.FullTransferOption)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.GovtTaxCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.ItemBaseUom)
                .HasMaxLength(8)
                .HasColumnName("ItemBaseUOM");
            entity.Property(e => e.ItemBrand).HasMaxLength(20);
            entity.Property(e => e.ItemBrandDescription).HasMaxLength(40);
            entity.Property(e => e.ItemCategory).HasMaxLength(20);
            entity.Property(e => e.ItemCategoryDescription).HasMaxLength(40);
            entity.Property(e => e.ItemClass).HasMaxLength(20);
            entity.Property(e => e.ItemClassDescription).HasMaxLength(40);
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.ItemDesc2).HasMaxLength(100);
            entity.Property(e => e.ItemDescription).HasMaxLength(100);
            entity.Property(e => e.ItemGroup).HasMaxLength(8);
            entity.Property(e => e.ItemGroupDescription).HasMaxLength(40);
            entity.Property(e => e.ItemType).HasMaxLength(12);
            entity.Property(e => e.ItemTypeDescription).HasMaxLength(40);
            entity.Property(e => e.ItemUdfWarDay).HasColumnName("ItemUDF_WarDay");
            entity.Property(e => e.LeadTime).HasMaxLength(40);
            entity.Property(e => e.LocalSubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalSubTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.LocationAddr1).HasMaxLength(40);
            entity.Property(e => e.LocationAddr2).HasMaxLength(40);
            entity.Property(e => e.LocationAddr3).HasMaxLength(40);
            entity.Property(e => e.LocationAddr4).HasMaxLength(40);
            entity.Property(e => e.LocationBalQty).HasColumnType("decimal(38, 8)");
            entity.Property(e => e.LocationContact).HasMaxLength(40);
            entity.Property(e => e.LocationDesc2).HasMaxLength(80);
            entity.Property(e => e.LocationDescription).HasMaxLength(80);
            entity.Property(e => e.LocationFax1).HasMaxLength(25);
            entity.Property(e => e.LocationFax2).HasMaxLength(25);
            entity.Property(e => e.LocationPhone1).HasMaxLength(25);
            entity.Property(e => e.LocationPhone2).HasMaxLength(25);
            entity.Property(e => e.LocationPostCode).HasMaxLength(10);
            entity.Property(e => e.MainItem)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Numbering).HasMaxLength(6);
            entity.Property(e => e.PrintOut)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.ProjectDesc2).HasMaxLength(40);
            entity.Property(e => e.ProjectDescription).HasMaxLength(40);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SalesExemptionNo).HasMaxLength(60);
            entity.Property(e => e.Shelf).HasMaxLength(20);
            entity.Property(e => e.SmallestQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SmallestUnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SubTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SubTotalWithTax).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxAccNo).HasMaxLength(12);
            entity.Property(e => e.TaxCode).HasMaxLength(14);
            entity.Property(e => e.TaxCodeDescription).HasMaxLength(120);
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Transferable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TransferedQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.UnitPriceAfterDiscount).HasColumnType("decimal(38, 13)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
            entity.Property(e => e.UombalQty)
                .HasColumnType("decimal(38, 8)")
                .HasColumnName("UOMBalQty");
            entity.Property(e => e.Uomcost)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMCost");
            entity.Property(e => e.UomitemCode)
                .HasMaxLength(30)
                .HasColumnName("UOMItemCode");
            entity.Property(e => e.Uomprice)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMPrice");
            entity.Property(e => e.Uomprice2)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMPrice2");
            entity.Property(e => e.Uomrate)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMRate");
            entity.Property(e => e.UomrealCost)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMRealCost");
            entity.Property(e => e.UserUom)
                .HasMaxLength(8)
                .HasColumnName("UserUOM");
            entity.Property(e => e.Volume).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.VolumeUom)
                .HasMaxLength(8)
                .HasColumnName("VolumeUOM");
            entity.Property(e => e.Weight).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.WeightUom)
                .HasMaxLength(8)
                .HasColumnName("WeightUOM");
            entity.Property(e => e.YourPodate)
                .HasColumnType("datetime")
                .HasColumnName("YourPODate");
            entity.Property(e => e.YourPono)
                .HasMaxLength(25)
                .HasColumnName("YourPONo");
        });

        modelBuilder.Entity<VSalesOrderSubDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vSalesOrderSubDetail");

            entity.Property(e => e.AddToCost)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Desc2).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.DocTaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.GovtTaxCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.LocalSubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.PrintOut)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SalesExemptionNo).HasMaxLength(60);
            entity.Property(e => e.SubQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxAccNo).HasMaxLength(12);
            entity.Property(e => e.TaxCode).HasMaxLength(14);
            entity.Property(e => e.TaxCodeDescription).HasMaxLength(120);
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<VStockAdjustment>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vStockAdjustment");

            entity.Property(e => e.AdjudfSuperAppId)
                .HasMaxLength(32)
                .HasColumnName("ADJUDF_SuperAppId");
            entity.Property(e => e.CanSync)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.CreatedUserName).HasMaxLength(40);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.LastModifiedUserName).HasMaxLength(40);
            entity.Property(e => e.RefDocNo).HasMaxLength(30);
            entity.Property(e => e.Remark1).HasMaxLength(40);
            entity.Property(e => e.Remark2).HasMaxLength(40);
            entity.Property(e => e.Remark3).HasMaxLength(40);
            entity.Property(e => e.Remark4).HasMaxLength(40);
            entity.Property(e => e.Total).HasColumnType("decimal(19, 2)");
        });

        modelBuilder.Entity<VStockAdjustmentDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vStockAdjustmentDetail");

            entity.Property(e => e.BarCode).HasMaxLength(30);
            entity.Property(e => e.BatchBalQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.BatchDescription).HasMaxLength(40);
            entity.Property(e => e.BatchExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.BatchItemCode).HasMaxLength(30);
            entity.Property(e => e.BatchManufacturedDate).HasColumnType("datetime");
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.DeptDesc2).HasMaxLength(40);
            entity.Property(e => e.DeptDescription).HasMaxLength(40);
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Desc2).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.ItemBaseUom)
                .HasMaxLength(8)
                .HasColumnName("ItemBaseUOM");
            entity.Property(e => e.ItemBrand).HasMaxLength(20);
            entity.Property(e => e.ItemBrandDescription).HasMaxLength(40);
            entity.Property(e => e.ItemCategory).HasMaxLength(20);
            entity.Property(e => e.ItemCategoryDescription).HasMaxLength(40);
            entity.Property(e => e.ItemClass).HasMaxLength(20);
            entity.Property(e => e.ItemClassDescription).HasMaxLength(40);
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.ItemDesc2).HasMaxLength(100);
            entity.Property(e => e.ItemDescription).HasMaxLength(100);
            entity.Property(e => e.ItemGroup).HasMaxLength(8);
            entity.Property(e => e.ItemGroupDescription).HasMaxLength(40);
            entity.Property(e => e.ItemType).HasMaxLength(12);
            entity.Property(e => e.ItemTypeDescription).HasMaxLength(40);
            entity.Property(e => e.ItemUdfWarDay).HasColumnName("ItemUDF_WarDay");
            entity.Property(e => e.LeadTime).HasMaxLength(40);
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.LocationAddr1).HasMaxLength(40);
            entity.Property(e => e.LocationAddr2).HasMaxLength(40);
            entity.Property(e => e.LocationAddr3).HasMaxLength(40);
            entity.Property(e => e.LocationAddr4).HasMaxLength(40);
            entity.Property(e => e.LocationBalQty).HasColumnType("decimal(38, 8)");
            entity.Property(e => e.LocationContact).HasMaxLength(40);
            entity.Property(e => e.LocationDesc2).HasMaxLength(80);
            entity.Property(e => e.LocationDescription).HasMaxLength(80);
            entity.Property(e => e.LocationFax1).HasMaxLength(25);
            entity.Property(e => e.LocationFax2).HasMaxLength(25);
            entity.Property(e => e.LocationPhone1).HasMaxLength(25);
            entity.Property(e => e.LocationPhone2).HasMaxLength(25);
            entity.Property(e => e.LocationPostCode).HasMaxLength(10);
            entity.Property(e => e.Numbering).HasMaxLength(6);
            entity.Property(e => e.PrintOut)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.ProjectDesc2).HasMaxLength(40);
            entity.Property(e => e.ProjectDescription).HasMaxLength(40);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Shelf).HasMaxLength(20);
            entity.Property(e => e.SubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.UnitCost).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
            entity.Property(e => e.UombalQty)
                .HasColumnType("decimal(38, 8)")
                .HasColumnName("UOMBalQty");
            entity.Property(e => e.Uomcost)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMCost");
            entity.Property(e => e.UomitemCode)
                .HasMaxLength(30)
                .HasColumnName("UOMItemCode");
            entity.Property(e => e.Uomprice)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMPrice");
            entity.Property(e => e.Uomprice2)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMPrice2");
            entity.Property(e => e.Uomrate)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMRate");
            entity.Property(e => e.UomrealCost)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMRealCost");
            entity.Property(e => e.Volume).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.VolumeUom)
                .HasMaxLength(8)
                .HasColumnName("VolumeUOM");
            entity.Property(e => e.Weight).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.WeightUom)
                .HasMaxLength(8)
                .HasColumnName("WeightUOM");
        });

        modelBuilder.Entity<VStockAssembly>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vStockAssembly");

            entity.Property(e => e.AsmserialNoList).HasColumnName("ASMSerialNoList");
            entity.Property(e => e.AsmudfSuperAppId)
                .HasMaxLength(32)
                .HasColumnName("ASMUDF_SuperAppId");
            entity.Property(e => e.AssemblyCost).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.CanSync)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.CreatedUserName).HasMaxLength(40);
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.IsMultiLevel)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ItemBaseUom)
                .HasMaxLength(8)
                .HasColumnName("ItemBaseUOM");
            entity.Property(e => e.ItemBrand).HasMaxLength(20);
            entity.Property(e => e.ItemBrandDescription).HasMaxLength(40);
            entity.Property(e => e.ItemCategory).HasMaxLength(20);
            entity.Property(e => e.ItemCategoryDescription).HasMaxLength(40);
            entity.Property(e => e.ItemClass).HasMaxLength(20);
            entity.Property(e => e.ItemClassDescription).HasMaxLength(40);
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.ItemDesc2).HasMaxLength(100);
            entity.Property(e => e.ItemDescription).HasMaxLength(100);
            entity.Property(e => e.ItemGroup).HasMaxLength(8);
            entity.Property(e => e.ItemGroupDescription).HasMaxLength(40);
            entity.Property(e => e.ItemType).HasMaxLength(12);
            entity.Property(e => e.ItemTypeDescription).HasMaxLength(40);
            entity.Property(e => e.ItemUdfWarDay).HasColumnName("ItemUDF_WarDay");
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.LastModifiedUserName).HasMaxLength(40);
            entity.Property(e => e.LeadTime).HasMaxLength(40);
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.NetTotal).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.RefDocNo).HasMaxLength(30);
            entity.Property(e => e.Remark1).HasMaxLength(40);
            entity.Property(e => e.Remark2).HasMaxLength(40);
            entity.Property(e => e.Remark3).HasMaxLength(40);
            entity.Property(e => e.Remark4).HasMaxLength(40);
            entity.Property(e => e.Total).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.TransferFrom).HasMaxLength(30);
        });

        modelBuilder.Entity<VStockAssemblyDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vStockAssemblyDetail");

            entity.Property(e => e.BarCode).HasMaxLength(30);
            entity.Property(e => e.BatchBalQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.BatchDescription).HasMaxLength(40);
            entity.Property(e => e.BatchExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.BatchItemCode).HasMaxLength(30);
            entity.Property(e => e.BatchManufacturedDate).HasColumnType("datetime");
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.DeptDesc2).HasMaxLength(40);
            entity.Property(e => e.DeptDescription).HasMaxLength(40);
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Desc2).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.IsBomitem)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IsBOMItem");
            entity.Property(e => e.ItemBaseUom)
                .HasMaxLength(8)
                .HasColumnName("ItemBaseUOM");
            entity.Property(e => e.ItemBrand).HasMaxLength(20);
            entity.Property(e => e.ItemBrandDescription).HasMaxLength(40);
            entity.Property(e => e.ItemCategory).HasMaxLength(20);
            entity.Property(e => e.ItemCategoryDescription).HasMaxLength(40);
            entity.Property(e => e.ItemClass).HasMaxLength(20);
            entity.Property(e => e.ItemClassDescription).HasMaxLength(40);
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.ItemCost).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.ItemDesc2).HasMaxLength(100);
            entity.Property(e => e.ItemDescription).HasMaxLength(100);
            entity.Property(e => e.ItemGroup).HasMaxLength(8);
            entity.Property(e => e.ItemGroupDescription).HasMaxLength(40);
            entity.Property(e => e.ItemType).HasMaxLength(12);
            entity.Property(e => e.ItemTypeDescription).HasMaxLength(40);
            entity.Property(e => e.ItemUdfWarDay).HasColumnName("ItemUDF_WarDay");
            entity.Property(e => e.LeadTime).HasMaxLength(40);
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.LocationAddr1).HasMaxLength(40);
            entity.Property(e => e.LocationAddr2).HasMaxLength(40);
            entity.Property(e => e.LocationAddr3).HasMaxLength(40);
            entity.Property(e => e.LocationAddr4).HasMaxLength(40);
            entity.Property(e => e.LocationBalQty).HasColumnType("decimal(38, 8)");
            entity.Property(e => e.LocationContact).HasMaxLength(40);
            entity.Property(e => e.LocationDesc2).HasMaxLength(80);
            entity.Property(e => e.LocationDescription).HasMaxLength(80);
            entity.Property(e => e.LocationFax1).HasMaxLength(25);
            entity.Property(e => e.LocationFax2).HasMaxLength(25);
            entity.Property(e => e.LocationPhone1).HasMaxLength(25);
            entity.Property(e => e.LocationPhone2).HasMaxLength(25);
            entity.Property(e => e.LocationPostCode).HasMaxLength(10);
            entity.Property(e => e.Numbering).HasMaxLength(6);
            entity.Property(e => e.OrderQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.OverheadCost).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.PrintOut)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.ProjectDesc2).HasMaxLength(40);
            entity.Property(e => e.ProjectDescription).HasMaxLength(40);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Remark).HasMaxLength(40);
            entity.Property(e => e.Shelf).HasMaxLength(20);
            entity.Property(e => e.SubTotalCost).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
            entity.Property(e => e.UombalQty)
                .HasColumnType("decimal(38, 8)")
                .HasColumnName("UOMBalQty");
            entity.Property(e => e.Uomcost)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMCost");
            entity.Property(e => e.UomitemCode)
                .HasMaxLength(30)
                .HasColumnName("UOMItemCode");
            entity.Property(e => e.Uomprice)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMPrice");
            entity.Property(e => e.Uomprice2)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMPrice2");
            entity.Property(e => e.Uomrate)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMRate");
            entity.Property(e => e.UomrealCost)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMRealCost");
            entity.Property(e => e.Volume).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.VolumeUom)
                .HasMaxLength(8)
                .HasColumnName("VolumeUOM");
            entity.Property(e => e.Weight).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.WeightUom)
                .HasMaxLength(8)
                .HasColumnName("WeightUOM");
        });

        modelBuilder.Entity<VStockAssemblyOrder>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vStockAssemblyOrder");

            entity.Property(e => e.AsmorderUdfSuperAppId)
                .HasMaxLength(32)
                .HasColumnName("ASMOrderUDF_SuperAppId");
            entity.Property(e => e.AssemblyCost).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.BatchDescription).HasMaxLength(40);
            entity.Property(e => e.BatchExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.BatchItemCode).HasMaxLength(30);
            entity.Property(e => e.BatchManufacturedDate).HasColumnType("datetime");
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.CanSync)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.CreatedUserName).HasMaxLength(40);
            entity.Property(e => e.DeptDesc2).HasMaxLength(40);
            entity.Property(e => e.DeptDescription).HasMaxLength(40);
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.ExpectedCompletedDate).HasMaxLength(20);
            entity.Property(e => e.IsMultiLevel)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ItemBaseUom)
                .HasMaxLength(8)
                .HasColumnName("ItemBaseUOM");
            entity.Property(e => e.ItemBrand).HasMaxLength(20);
            entity.Property(e => e.ItemBrandDescription).HasMaxLength(40);
            entity.Property(e => e.ItemCategory).HasMaxLength(20);
            entity.Property(e => e.ItemCategoryDescription).HasMaxLength(40);
            entity.Property(e => e.ItemClass).HasMaxLength(20);
            entity.Property(e => e.ItemClassDescription).HasMaxLength(40);
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.ItemDesc2).HasMaxLength(100);
            entity.Property(e => e.ItemDescription).HasMaxLength(100);
            entity.Property(e => e.ItemGroup).HasMaxLength(8);
            entity.Property(e => e.ItemGroupDescription).HasMaxLength(40);
            entity.Property(e => e.ItemType).HasMaxLength(12);
            entity.Property(e => e.ItemTypeDescription).HasMaxLength(40);
            entity.Property(e => e.ItemUdfWarDay).HasColumnName("ItemUDF_WarDay");
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.LastModifiedUserName).HasMaxLength(40);
            entity.Property(e => e.LeadTime).HasMaxLength(40);
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.LocationAddr1).HasMaxLength(40);
            entity.Property(e => e.LocationAddr2).HasMaxLength(40);
            entity.Property(e => e.LocationAddr3).HasMaxLength(40);
            entity.Property(e => e.LocationAddr4).HasMaxLength(40);
            entity.Property(e => e.LocationContact).HasMaxLength(40);
            entity.Property(e => e.LocationDesc2).HasMaxLength(80);
            entity.Property(e => e.LocationDescription).HasMaxLength(80);
            entity.Property(e => e.LocationFax1).HasMaxLength(25);
            entity.Property(e => e.LocationFax2).HasMaxLength(25);
            entity.Property(e => e.LocationPhone1).HasMaxLength(25);
            entity.Property(e => e.LocationPhone2).HasMaxLength(25);
            entity.Property(e => e.LocationPostCode).HasMaxLength(10);
            entity.Property(e => e.NetTotal).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.OutstandingQty).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.ProjectDesc2).HasMaxLength(40);
            entity.Property(e => e.ProjectDescription).HasMaxLength(40);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.RefDocNo).HasMaxLength(30);
            entity.Property(e => e.Remark1).HasMaxLength(40);
            entity.Property(e => e.Remark2).HasMaxLength(40);
            entity.Property(e => e.Remark3).HasMaxLength(40);
            entity.Property(e => e.Remark4).HasMaxLength(40);
            entity.Property(e => e.Total).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.TransferFrom).HasMaxLength(30);
            entity.Property(e => e.TransferedQty).HasColumnType("decimal(25, 8)");
        });

        modelBuilder.Entity<VStockAssemblyOrderDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vStockAssemblyOrderDetail");

            entity.Property(e => e.BarCode).HasMaxLength(30);
            entity.Property(e => e.BatchBalQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.BatchDescription).HasMaxLength(40);
            entity.Property(e => e.BatchExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.BatchItemCode).HasMaxLength(30);
            entity.Property(e => e.BatchManufacturedDate).HasColumnType("datetime");
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.DeptDesc2).HasMaxLength(40);
            entity.Property(e => e.DeptDescription).HasMaxLength(40);
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Desc2).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.IsBomitem)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IsBOMItem");
            entity.Property(e => e.ItemBaseUom)
                .HasMaxLength(8)
                .HasColumnName("ItemBaseUOM");
            entity.Property(e => e.ItemBrand).HasMaxLength(20);
            entity.Property(e => e.ItemBrandDescription).HasMaxLength(40);
            entity.Property(e => e.ItemCategory).HasMaxLength(20);
            entity.Property(e => e.ItemCategoryDescription).HasMaxLength(40);
            entity.Property(e => e.ItemClass).HasMaxLength(20);
            entity.Property(e => e.ItemClassDescription).HasMaxLength(40);
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.ItemCost).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.ItemDesc2).HasMaxLength(100);
            entity.Property(e => e.ItemDescription).HasMaxLength(100);
            entity.Property(e => e.ItemGroup).HasMaxLength(8);
            entity.Property(e => e.ItemGroupDescription).HasMaxLength(40);
            entity.Property(e => e.ItemType).HasMaxLength(12);
            entity.Property(e => e.ItemTypeDescription).HasMaxLength(40);
            entity.Property(e => e.ItemUdfWarDay).HasColumnName("ItemUDF_WarDay");
            entity.Property(e => e.LeadTime).HasMaxLength(40);
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.LocationAddr1).HasMaxLength(40);
            entity.Property(e => e.LocationAddr2).HasMaxLength(40);
            entity.Property(e => e.LocationAddr3).HasMaxLength(40);
            entity.Property(e => e.LocationAddr4).HasMaxLength(40);
            entity.Property(e => e.LocationBalQty).HasColumnType("decimal(38, 8)");
            entity.Property(e => e.LocationContact).HasMaxLength(40);
            entity.Property(e => e.LocationDesc2).HasMaxLength(80);
            entity.Property(e => e.LocationDescription).HasMaxLength(80);
            entity.Property(e => e.LocationFax1).HasMaxLength(25);
            entity.Property(e => e.LocationFax2).HasMaxLength(25);
            entity.Property(e => e.LocationPhone1).HasMaxLength(25);
            entity.Property(e => e.LocationPhone2).HasMaxLength(25);
            entity.Property(e => e.LocationPostCode).HasMaxLength(10);
            entity.Property(e => e.Numbering).HasMaxLength(6);
            entity.Property(e => e.OutstandingQty).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.OverheadCost).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.PrintOut)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.ProjectDesc2).HasMaxLength(40);
            entity.Property(e => e.ProjectDescription).HasMaxLength(40);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Remark).HasMaxLength(40);
            entity.Property(e => e.Shelf).HasMaxLength(20);
            entity.Property(e => e.SubTotalCost).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.TransferedQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
            entity.Property(e => e.UombalQty)
                .HasColumnType("decimal(38, 8)")
                .HasColumnName("UOMBalQty");
            entity.Property(e => e.Uomcost)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMCost");
            entity.Property(e => e.UomitemCode)
                .HasMaxLength(30)
                .HasColumnName("UOMItemCode");
            entity.Property(e => e.Uomprice)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMPrice");
            entity.Property(e => e.Uomprice2)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMPrice2");
            entity.Property(e => e.Uomrate)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMRate");
            entity.Property(e => e.UomrealCost)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMRealCost");
            entity.Property(e => e.Volume).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.VolumeUom)
                .HasMaxLength(8)
                .HasColumnName("VolumeUOM");
            entity.Property(e => e.Weight).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.WeightUom)
                .HasMaxLength(8)
                .HasColumnName("WeightUOM");
        });

        modelBuilder.Entity<VStockGroup>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vStockGroup");

            entity.Property(e => e.CashPurchaseCode).HasMaxLength(12);
            entity.Property(e => e.CashSalesCode).HasMaxLength(12);
            entity.Property(e => e.ItemGroup).HasMaxLength(8);
            entity.Property(e => e.ItemGroupDesc2).HasMaxLength(40);
            entity.Property(e => e.ItemGroupDescription).HasMaxLength(40);
            entity.Property(e => e.PurchaseCode).HasMaxLength(12);
            entity.Property(e => e.PurchaseDiscountCode).HasMaxLength(12);
            entity.Property(e => e.PurchaseReturnCode).HasMaxLength(12);
            entity.Property(e => e.SalesCode).HasMaxLength(12);
            entity.Property(e => e.SalesDiscountCode).HasMaxLength(12);
            entity.Property(e => e.SalesReturnCode).HasMaxLength(12);
        });

        modelBuilder.Entity<VStockIssue>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vStockIssue");

            entity.Property(e => e.CanSync)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.CreatedUserName).HasMaxLength(40);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.IssudfSuperAppId)
                .HasMaxLength(32)
                .HasColumnName("ISSUDF_SuperAppId");
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.LastModifiedUserName).HasMaxLength(40);
            entity.Property(e => e.ReallocatePurchaseByProjectJedocNo)
                .HasMaxLength(30)
                .HasColumnName("ReallocatePurchaseByProjectJEDocNo");
            entity.Property(e => e.RefDocNo).HasMaxLength(30);
            entity.Property(e => e.Remark1).HasMaxLength(40);
            entity.Property(e => e.Remark2).HasMaxLength(40);
            entity.Property(e => e.Remark3).HasMaxLength(40);
            entity.Property(e => e.Remark4).HasMaxLength(40);
            entity.Property(e => e.Total).HasColumnType("decimal(19, 2)");
        });

        modelBuilder.Entity<VStockIssueDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vStockIssueDetail");

            entity.Property(e => e.BarCode).HasMaxLength(30);
            entity.Property(e => e.BatchBalQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.BatchDescription).HasMaxLength(40);
            entity.Property(e => e.BatchExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.BatchItemCode).HasMaxLength(30);
            entity.Property(e => e.BatchManufacturedDate).HasColumnType("datetime");
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.DeptDesc2).HasMaxLength(40);
            entity.Property(e => e.DeptDescription).HasMaxLength(40);
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Desc2).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.ItemBaseUom)
                .HasMaxLength(8)
                .HasColumnName("ItemBaseUOM");
            entity.Property(e => e.ItemBrand).HasMaxLength(20);
            entity.Property(e => e.ItemBrandDescription).HasMaxLength(40);
            entity.Property(e => e.ItemCategory).HasMaxLength(20);
            entity.Property(e => e.ItemCategoryDescription).HasMaxLength(40);
            entity.Property(e => e.ItemClass).HasMaxLength(20);
            entity.Property(e => e.ItemClassDescription).HasMaxLength(40);
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.ItemDesc2).HasMaxLength(100);
            entity.Property(e => e.ItemDescription).HasMaxLength(100);
            entity.Property(e => e.ItemGroup).HasMaxLength(8);
            entity.Property(e => e.ItemGroupDescription).HasMaxLength(40);
            entity.Property(e => e.ItemType).HasMaxLength(12);
            entity.Property(e => e.ItemTypeDescription).HasMaxLength(40);
            entity.Property(e => e.ItemUdfWarDay).HasColumnName("ItemUDF_WarDay");
            entity.Property(e => e.LeadTime).HasMaxLength(40);
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.LocationAddr1).HasMaxLength(40);
            entity.Property(e => e.LocationAddr2).HasMaxLength(40);
            entity.Property(e => e.LocationAddr3).HasMaxLength(40);
            entity.Property(e => e.LocationAddr4).HasMaxLength(40);
            entity.Property(e => e.LocationBalQty).HasColumnType("decimal(38, 8)");
            entity.Property(e => e.LocationContact).HasMaxLength(40);
            entity.Property(e => e.LocationDesc2).HasMaxLength(80);
            entity.Property(e => e.LocationDescription).HasMaxLength(80);
            entity.Property(e => e.LocationFax1).HasMaxLength(25);
            entity.Property(e => e.LocationFax2).HasMaxLength(25);
            entity.Property(e => e.LocationPhone1).HasMaxLength(25);
            entity.Property(e => e.LocationPhone2).HasMaxLength(25);
            entity.Property(e => e.LocationPostCode).HasMaxLength(10);
            entity.Property(e => e.Numbering).HasMaxLength(6);
            entity.Property(e => e.PrintOut)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.ProjectDesc2).HasMaxLength(40);
            entity.Property(e => e.ProjectDescription).HasMaxLength(40);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Shelf).HasMaxLength(20);
            entity.Property(e => e.SubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.UnitCost).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
            entity.Property(e => e.UombalQty)
                .HasColumnType("decimal(38, 8)")
                .HasColumnName("UOMBalQty");
            entity.Property(e => e.Uomcost)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMCost");
            entity.Property(e => e.UomitemCode)
                .HasMaxLength(30)
                .HasColumnName("UOMItemCode");
            entity.Property(e => e.Uomprice)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMPrice");
            entity.Property(e => e.Uomprice2)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMPrice2");
            entity.Property(e => e.Uomrate)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMRate");
            entity.Property(e => e.UomrealCost)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMRealCost");
            entity.Property(e => e.Volume).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.VolumeUom)
                .HasMaxLength(8)
                .HasColumnName("VolumeUOM");
            entity.Property(e => e.Weight).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.WeightUom)
                .HasMaxLength(8)
                .HasColumnName("WeightUOM");
        });

        modelBuilder.Entity<VStockItemBrand>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vStockItemBrand");

            entity.Property(e => e.ItemBrand).HasMaxLength(20);
            entity.Property(e => e.ItemBrandDesc2).HasMaxLength(40);
            entity.Property(e => e.ItemBrandDescription).HasMaxLength(40);
        });

        modelBuilder.Entity<VStockItemCategory>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vStockItemCategory");

            entity.Property(e => e.ItemCategory).HasMaxLength(20);
            entity.Property(e => e.ItemCategoryDesc2).HasMaxLength(40);
            entity.Property(e => e.ItemCategoryDescription).HasMaxLength(40);
        });

        modelBuilder.Entity<VStockItemClass>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vStockItemClass");

            entity.Property(e => e.ItemClass).HasMaxLength(20);
            entity.Property(e => e.ItemClassDesc2).HasMaxLength(40);
            entity.Property(e => e.ItemClassDescription).HasMaxLength(40);
        });

        modelBuilder.Entity<VStockItemType>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vStockItemType");

            entity.Property(e => e.ItemType).HasMaxLength(12);
            entity.Property(e => e.ItemTypeDesc2).HasMaxLength(40);
            entity.Property(e => e.ItemTypeDescription).HasMaxLength(40);
        });

        modelBuilder.Entity<VStockReceive>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vStockReceive");

            entity.Property(e => e.CanSync)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.CreatedUserName).HasMaxLength(40);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.LastModifiedUserName).HasMaxLength(40);
            entity.Property(e => e.RcvudfSuperAppId)
                .HasMaxLength(32)
                .HasColumnName("RCVUDF_SuperAppId");
            entity.Property(e => e.RefDocNo).HasMaxLength(30);
            entity.Property(e => e.Remark1).HasMaxLength(40);
            entity.Property(e => e.Remark2).HasMaxLength(40);
            entity.Property(e => e.Remark3).HasMaxLength(40);
            entity.Property(e => e.Remark4).HasMaxLength(40);
            entity.Property(e => e.Total).HasColumnType("decimal(19, 2)");
        });

        modelBuilder.Entity<VStockReceiveDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vStockReceiveDetail");

            entity.Property(e => e.BarCode).HasMaxLength(30);
            entity.Property(e => e.BatchBalQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.BatchDescription).HasMaxLength(40);
            entity.Property(e => e.BatchExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.BatchItemCode).HasMaxLength(30);
            entity.Property(e => e.BatchManufacturedDate).HasColumnType("datetime");
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.DeptDesc2).HasMaxLength(40);
            entity.Property(e => e.DeptDescription).HasMaxLength(40);
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Desc2).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.ItemBaseUom)
                .HasMaxLength(8)
                .HasColumnName("ItemBaseUOM");
            entity.Property(e => e.ItemBrand).HasMaxLength(20);
            entity.Property(e => e.ItemBrandDescription).HasMaxLength(40);
            entity.Property(e => e.ItemCategory).HasMaxLength(20);
            entity.Property(e => e.ItemCategoryDescription).HasMaxLength(40);
            entity.Property(e => e.ItemClass).HasMaxLength(20);
            entity.Property(e => e.ItemClassDescription).HasMaxLength(40);
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.ItemDesc2).HasMaxLength(100);
            entity.Property(e => e.ItemDescription).HasMaxLength(100);
            entity.Property(e => e.ItemGroup).HasMaxLength(8);
            entity.Property(e => e.ItemGroupDescription).HasMaxLength(40);
            entity.Property(e => e.ItemType).HasMaxLength(12);
            entity.Property(e => e.ItemTypeDescription).HasMaxLength(40);
            entity.Property(e => e.ItemUdfWarDay).HasColumnName("ItemUDF_WarDay");
            entity.Property(e => e.LeadTime).HasMaxLength(40);
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.LocationAddr1).HasMaxLength(40);
            entity.Property(e => e.LocationAddr2).HasMaxLength(40);
            entity.Property(e => e.LocationAddr3).HasMaxLength(40);
            entity.Property(e => e.LocationAddr4).HasMaxLength(40);
            entity.Property(e => e.LocationBalQty).HasColumnType("decimal(38, 8)");
            entity.Property(e => e.LocationContact).HasMaxLength(40);
            entity.Property(e => e.LocationDesc2).HasMaxLength(80);
            entity.Property(e => e.LocationDescription).HasMaxLength(80);
            entity.Property(e => e.LocationFax1).HasMaxLength(25);
            entity.Property(e => e.LocationFax2).HasMaxLength(25);
            entity.Property(e => e.LocationPhone1).HasMaxLength(25);
            entity.Property(e => e.LocationPhone2).HasMaxLength(25);
            entity.Property(e => e.LocationPostCode).HasMaxLength(10);
            entity.Property(e => e.Numbering).HasMaxLength(6);
            entity.Property(e => e.PrintOut)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.ProjectDesc2).HasMaxLength(40);
            entity.Property(e => e.ProjectDescription).HasMaxLength(40);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Shelf).HasMaxLength(20);
            entity.Property(e => e.SubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.UnitCost).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
            entity.Property(e => e.UombalQty)
                .HasColumnType("decimal(38, 8)")
                .HasColumnName("UOMBalQty");
            entity.Property(e => e.Uomcost)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMCost");
            entity.Property(e => e.UomitemCode)
                .HasMaxLength(30)
                .HasColumnName("UOMItemCode");
            entity.Property(e => e.Uomprice)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMPrice");
            entity.Property(e => e.Uomprice2)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMPrice2");
            entity.Property(e => e.Uomrate)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMRate");
            entity.Property(e => e.UomrealCost)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMRealCost");
            entity.Property(e => e.Volume).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.VolumeUom)
                .HasMaxLength(8)
                .HasColumnName("VolumeUOM");
            entity.Property(e => e.Weight).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.WeightUom)
                .HasMaxLength(8)
                .HasColumnName("WeightUOM");
        });

        modelBuilder.Entity<VStockTransfer>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vStockTransfer");

            entity.Property(e => e.AuthorisedBy).HasMaxLength(30);
            entity.Property(e => e.CanSync)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.CreatedUserName).HasMaxLength(40);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.FromLocation).HasMaxLength(8);
            entity.Property(e => e.FromLocationAddr1).HasMaxLength(40);
            entity.Property(e => e.FromLocationAddr2).HasMaxLength(40);
            entity.Property(e => e.FromLocationAddr3).HasMaxLength(40);
            entity.Property(e => e.FromLocationAddr4).HasMaxLength(40);
            entity.Property(e => e.FromLocationContact).HasMaxLength(40);
            entity.Property(e => e.FromLocationDesc2).HasMaxLength(80);
            entity.Property(e => e.FromLocationDescription).HasMaxLength(80);
            entity.Property(e => e.FromLocationFax1).HasMaxLength(25);
            entity.Property(e => e.FromLocationFax2).HasMaxLength(25);
            entity.Property(e => e.FromLocationPhone1).HasMaxLength(25);
            entity.Property(e => e.FromLocationPhone2).HasMaxLength(25);
            entity.Property(e => e.FromLocationPostCode).HasMaxLength(10);
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.LastModifiedUserName).HasMaxLength(40);
            entity.Property(e => e.Reason).HasMaxLength(80);
            entity.Property(e => e.Ref).HasMaxLength(40);
            entity.Property(e => e.RefDocNo).HasMaxLength(30);
            entity.Property(e => e.Remark1).HasMaxLength(40);
            entity.Property(e => e.Remark2).HasMaxLength(40);
            entity.Property(e => e.Remark3).HasMaxLength(40);
            entity.Property(e => e.Remark4).HasMaxLength(40);
            entity.Property(e => e.ToLocation).HasMaxLength(8);
            entity.Property(e => e.ToLocationAddr1).HasMaxLength(40);
            entity.Property(e => e.ToLocationAddr2).HasMaxLength(40);
            entity.Property(e => e.ToLocationAddr3).HasMaxLength(40);
            entity.Property(e => e.ToLocationAddr4).HasMaxLength(40);
            entity.Property(e => e.ToLocationContact).HasMaxLength(40);
            entity.Property(e => e.ToLocationDesc2).HasMaxLength(80);
            entity.Property(e => e.ToLocationDescription).HasMaxLength(80);
            entity.Property(e => e.ToLocationFax1).HasMaxLength(25);
            entity.Property(e => e.ToLocationFax2).HasMaxLength(25);
            entity.Property(e => e.ToLocationPhone1).HasMaxLength(25);
            entity.Property(e => e.ToLocationPhone2).HasMaxLength(25);
            entity.Property(e => e.ToLocationPostCode).HasMaxLength(10);
            entity.Property(e => e.Total).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.XferudfSuperAppId)
                .HasMaxLength(32)
                .HasColumnName("XFERUDF_SuperAppId");
        });

        modelBuilder.Entity<VStockTransferDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vStockTransferDetail");

            entity.Property(e => e.BarCode).HasMaxLength(30);
            entity.Property(e => e.BatchDescription).HasMaxLength(40);
            entity.Property(e => e.BatchExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.BatchItemCode).HasMaxLength(30);
            entity.Property(e => e.BatchManufacturedDate).HasColumnType("datetime");
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.DeptDesc2).HasMaxLength(40);
            entity.Property(e => e.DeptDescription).HasMaxLength(40);
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Desc2).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.ItemBaseUom)
                .HasMaxLength(8)
                .HasColumnName("ItemBaseUOM");
            entity.Property(e => e.ItemBrand).HasMaxLength(20);
            entity.Property(e => e.ItemBrandDescription).HasMaxLength(40);
            entity.Property(e => e.ItemCategory).HasMaxLength(20);
            entity.Property(e => e.ItemCategoryDescription).HasMaxLength(40);
            entity.Property(e => e.ItemClass).HasMaxLength(20);
            entity.Property(e => e.ItemClassDescription).HasMaxLength(40);
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.ItemDesc2).HasMaxLength(100);
            entity.Property(e => e.ItemDescription).HasMaxLength(100);
            entity.Property(e => e.ItemGroup).HasMaxLength(8);
            entity.Property(e => e.ItemGroupDescription).HasMaxLength(40);
            entity.Property(e => e.ItemType).HasMaxLength(12);
            entity.Property(e => e.ItemTypeDescription).HasMaxLength(40);
            entity.Property(e => e.ItemUdfWarDay).HasColumnName("ItemUDF_WarDay");
            entity.Property(e => e.LeadTime).HasMaxLength(40);
            entity.Property(e => e.Numbering).HasMaxLength(6);
            entity.Property(e => e.PrintOut)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.ProjectDesc2).HasMaxLength(40);
            entity.Property(e => e.ProjectDescription).HasMaxLength(40);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Shelf).HasMaxLength(20);
            entity.Property(e => e.SubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.UnitCost).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
            entity.Property(e => e.UombalQty)
                .HasColumnType("decimal(38, 8)")
                .HasColumnName("UOMBalQty");
            entity.Property(e => e.Uomcost)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMCost");
            entity.Property(e => e.UomitemCode)
                .HasMaxLength(30)
                .HasColumnName("UOMItemCode");
            entity.Property(e => e.Uomprice)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMPrice");
            entity.Property(e => e.Uomprice2)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMPrice2");
            entity.Property(e => e.Uomrate)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMRate");
            entity.Property(e => e.UomrealCost)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMRealCost");
            entity.Property(e => e.Volume).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.VolumeUom)
                .HasMaxLength(8)
                .HasColumnName("VolumeUOM");
            entity.Property(e => e.Weight).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.WeightUom)
                .HasMaxLength(8)
                .HasColumnName("WeightUOM");
        });

        modelBuilder.Entity<VStockUomconversion>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vStockUOMConversion");

            entity.Property(e => e.CanSync)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.CreatedUserName).HasMaxLength(40);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.FromDocNo).HasMaxLength(30);
            entity.Property(e => e.FromDocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.LastModifiedUserName).HasMaxLength(40);
        });

        modelBuilder.Entity<VStockUomconversionDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vStockUOMConversionDetail");

            entity.Property(e => e.BatchDescription).HasMaxLength(40);
            entity.Property(e => e.BatchExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.BatchItemCode).HasMaxLength(30);
            entity.Property(e => e.BatchManufacturedDate).HasColumnType("datetime");
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.DeptDesc2).HasMaxLength(40);
            entity.Property(e => e.DeptDescription).HasMaxLength(40);
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.FromQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.FromUom)
                .HasMaxLength(8)
                .HasColumnName("FromUOM");
            entity.Property(e => e.ItemBaseUom)
                .HasMaxLength(8)
                .HasColumnName("ItemBaseUOM");
            entity.Property(e => e.ItemBrand).HasMaxLength(20);
            entity.Property(e => e.ItemBrandDescription).HasMaxLength(40);
            entity.Property(e => e.ItemCategory).HasMaxLength(20);
            entity.Property(e => e.ItemCategoryDescription).HasMaxLength(40);
            entity.Property(e => e.ItemClass).HasMaxLength(20);
            entity.Property(e => e.ItemClassDescription).HasMaxLength(40);
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.ItemDesc2).HasMaxLength(100);
            entity.Property(e => e.ItemDescription).HasMaxLength(100);
            entity.Property(e => e.ItemGroup).HasMaxLength(8);
            entity.Property(e => e.ItemGroupDescription).HasMaxLength(40);
            entity.Property(e => e.ItemType).HasMaxLength(12);
            entity.Property(e => e.ItemTypeDescription).HasMaxLength(40);
            entity.Property(e => e.ItemUdfWarDay).HasColumnName("ItemUDF_WarDay");
            entity.Property(e => e.LeadTime).HasMaxLength(40);
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.LocationAddr1).HasMaxLength(40);
            entity.Property(e => e.LocationAddr2).HasMaxLength(40);
            entity.Property(e => e.LocationAddr3).HasMaxLength(40);
            entity.Property(e => e.LocationAddr4).HasMaxLength(40);
            entity.Property(e => e.LocationContact).HasMaxLength(40);
            entity.Property(e => e.LocationDesc2).HasMaxLength(80);
            entity.Property(e => e.LocationDescription).HasMaxLength(80);
            entity.Property(e => e.LocationFax1).HasMaxLength(25);
            entity.Property(e => e.LocationFax2).HasMaxLength(25);
            entity.Property(e => e.LocationPhone1).HasMaxLength(25);
            entity.Property(e => e.LocationPhone2).HasMaxLength(25);
            entity.Property(e => e.LocationPostCode).HasMaxLength(10);
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.ProjectDesc2).HasMaxLength(40);
            entity.Property(e => e.ProjectDescription).HasMaxLength(40);
            entity.Property(e => e.ToQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.ToUom)
                .HasMaxLength(8)
                .HasColumnName("ToUOM");
        });

        modelBuilder.Entity<VStockUpdateCost>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vStockUpdateCost");

            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.CreatedUserName).HasMaxLength(40);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.LastModifiedUserName).HasMaxLength(40);
            entity.Property(e => e.UpdateToRealCost)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VStockUpdateCostDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vStockUpdateCostDetail");

            entity.Property(e => e.BarCode).HasMaxLength(30);
            entity.Property(e => e.Desc2).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.ItemBaseUom)
                .HasMaxLength(8)
                .HasColumnName("ItemBaseUOM");
            entity.Property(e => e.ItemBrand).HasMaxLength(20);
            entity.Property(e => e.ItemBrandDescription).HasMaxLength(40);
            entity.Property(e => e.ItemCategory).HasMaxLength(20);
            entity.Property(e => e.ItemCategoryDescription).HasMaxLength(40);
            entity.Property(e => e.ItemClass).HasMaxLength(20);
            entity.Property(e => e.ItemClassDescription).HasMaxLength(40);
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.ItemDesc2).HasMaxLength(100);
            entity.Property(e => e.ItemDescription).HasMaxLength(100);
            entity.Property(e => e.ItemGroup).HasMaxLength(8);
            entity.Property(e => e.ItemGroupDescription).HasMaxLength(40);
            entity.Property(e => e.ItemType).HasMaxLength(12);
            entity.Property(e => e.ItemTypeDescription).HasMaxLength(40);
            entity.Property(e => e.ItemUdfWarDay).HasColumnName("ItemUDF_WarDay");
            entity.Property(e => e.LeadTime).HasMaxLength(40);
            entity.Property(e => e.NewCost).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.OldCost).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Shelf).HasMaxLength(20);
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
            entity.Property(e => e.UombalQty)
                .HasColumnType("decimal(38, 8)")
                .HasColumnName("UOMBalQty");
            entity.Property(e => e.Uomcost)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMCost");
            entity.Property(e => e.UomitemCode)
                .HasMaxLength(30)
                .HasColumnName("UOMItemCode");
            entity.Property(e => e.Uomprice)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMPrice");
            entity.Property(e => e.Uomprice2)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMPrice2");
            entity.Property(e => e.Uomrate)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMRate");
            entity.Property(e => e.UomrealCost)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMRealCost");
            entity.Property(e => e.Volume).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.VolumeUom)
                .HasMaxLength(8)
                .HasColumnName("VolumeUOM");
            entity.Property(e => e.Weight).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.WeightUom)
                .HasMaxLength(8)
                .HasColumnName("WeightUOM");
        });

        modelBuilder.Entity<VStockWriteOff>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vStockWriteOff");

            entity.Property(e => e.CanSync)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.CreatedUserName).HasMaxLength(40);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.LastModifiedUserName).HasMaxLength(40);
            entity.Property(e => e.RefDocNo).HasMaxLength(30);
            entity.Property(e => e.Remark1).HasMaxLength(40);
            entity.Property(e => e.Remark2).HasMaxLength(40);
            entity.Property(e => e.Remark3).HasMaxLength(40);
            entity.Property(e => e.Remark4).HasMaxLength(40);
            entity.Property(e => e.Total).HasColumnType("decimal(19, 2)");
        });

        modelBuilder.Entity<VStockWriteOffDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vStockWriteOffDetail");

            entity.Property(e => e.BarCode).HasMaxLength(30);
            entity.Property(e => e.BatchBalQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.BatchDescription).HasMaxLength(40);
            entity.Property(e => e.BatchExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.BatchItemCode).HasMaxLength(30);
            entity.Property(e => e.BatchManufacturedDate).HasColumnType("datetime");
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.DeptDesc2).HasMaxLength(40);
            entity.Property(e => e.DeptDescription).HasMaxLength(40);
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Desc2).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.ItemBaseUom)
                .HasMaxLength(8)
                .HasColumnName("ItemBaseUOM");
            entity.Property(e => e.ItemBrand).HasMaxLength(20);
            entity.Property(e => e.ItemBrandDescription).HasMaxLength(40);
            entity.Property(e => e.ItemCategory).HasMaxLength(20);
            entity.Property(e => e.ItemCategoryDescription).HasMaxLength(40);
            entity.Property(e => e.ItemClass).HasMaxLength(20);
            entity.Property(e => e.ItemClassDescription).HasMaxLength(40);
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.ItemDesc2).HasMaxLength(100);
            entity.Property(e => e.ItemDescription).HasMaxLength(100);
            entity.Property(e => e.ItemGroup).HasMaxLength(8);
            entity.Property(e => e.ItemGroupDescription).HasMaxLength(40);
            entity.Property(e => e.ItemType).HasMaxLength(12);
            entity.Property(e => e.ItemTypeDescription).HasMaxLength(40);
            entity.Property(e => e.ItemUdfWarDay).HasColumnName("ItemUDF_WarDay");
            entity.Property(e => e.LeadTime).HasMaxLength(40);
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.LocationAddr1).HasMaxLength(40);
            entity.Property(e => e.LocationAddr2).HasMaxLength(40);
            entity.Property(e => e.LocationAddr3).HasMaxLength(40);
            entity.Property(e => e.LocationAddr4).HasMaxLength(40);
            entity.Property(e => e.LocationBalQty).HasColumnType("decimal(38, 8)");
            entity.Property(e => e.LocationContact).HasMaxLength(40);
            entity.Property(e => e.LocationDesc2).HasMaxLength(80);
            entity.Property(e => e.LocationDescription).HasMaxLength(80);
            entity.Property(e => e.LocationFax1).HasMaxLength(25);
            entity.Property(e => e.LocationFax2).HasMaxLength(25);
            entity.Property(e => e.LocationPhone1).HasMaxLength(25);
            entity.Property(e => e.LocationPhone2).HasMaxLength(25);
            entity.Property(e => e.LocationPostCode).HasMaxLength(10);
            entity.Property(e => e.Numbering).HasMaxLength(6);
            entity.Property(e => e.PrintOut)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.ProjectDesc2).HasMaxLength(40);
            entity.Property(e => e.ProjectDescription).HasMaxLength(40);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Shelf).HasMaxLength(20);
            entity.Property(e => e.SubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.UnitCost).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
            entity.Property(e => e.UombalQty)
                .HasColumnType("decimal(38, 8)")
                .HasColumnName("UOMBalQty");
            entity.Property(e => e.Uomcost)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMCost");
            entity.Property(e => e.UomitemCode)
                .HasMaxLength(30)
                .HasColumnName("UOMItemCode");
            entity.Property(e => e.Uomprice)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMPrice");
            entity.Property(e => e.Uomprice2)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMPrice2");
            entity.Property(e => e.Uomrate)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMRate");
            entity.Property(e => e.UomrealCost)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("UOMRealCost");
            entity.Property(e => e.Volume).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.VolumeUom)
                .HasMaxLength(8)
                .HasColumnName("VolumeUOM");
            entity.Property(e => e.Weight).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.WeightUom)
                .HasMaxLength(8)
                .HasColumnName("WeightUOM");
        });

        modelBuilder.Entity<VTaxCode>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vTaxCode");

            entity.Property(e => e.AddToCost)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.GovtTaxCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.TaxAccNo).HasMaxLength(12);
            entity.Property(e => e.TaxCode).HasMaxLength(14);
            entity.Property(e => e.TaxCodeDescription).HasMaxLength(120);
            entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 6)");
        });

        modelBuilder.Entity<VTaxEntity>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vTaxEntity");

            entity.Property(e => e.Address).HasMaxLength(200);
            entity.Property(e => e.BusinessActivityDesc).HasMaxLength(500);
            entity.Property(e => e.City).HasMaxLength(50);
            entity.Property(e => e.CountryCode).HasMaxLength(3);
            entity.Property(e => e.EmailAddress).HasMaxLength(200);
            entity.Property(e => e.GstregisterNo)
                .HasMaxLength(20)
                .HasColumnName("GSTRegisterNo");
            entity.Property(e => e.IdentityNo).HasMaxLength(30);
            entity.Property(e => e.IdentityType).HasMaxLength(10);
            entity.Property(e => e.Msiccode)
                .HasMaxLength(5)
                .HasColumnName("MSICCode");
            entity.Property(e => e.Name).HasMaxLength(100);
            entity.Property(e => e.Phone).HasMaxLength(25);
            entity.Property(e => e.PostCode).HasMaxLength(10);
            entity.Property(e => e.SstregisterNo)
                .HasMaxLength(20)
                .HasColumnName("SSTRegisterNo");
            entity.Property(e => e.StateCode).HasMaxLength(2);
            entity.Property(e => e.TaxBranchId)
                .HasMaxLength(10)
                .HasColumnName("TaxBranchID");
            entity.Property(e => e.TaxEntityId)
                .ValueGeneratedOnAdd()
                .HasColumnName("TaxEntityID");
            entity.Property(e => e.TaxRegisterNo).HasMaxLength(30);
            entity.Property(e => e.Tin)
                .HasMaxLength(20)
                .HasColumnName("TIN");
            entity.Property(e => e.TourismTaxRegisterNo).HasMaxLength(20);
            entity.Property(e => e.TradeName).HasMaxLength(100);
        });

        modelBuilder.Entity<VUser>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vUsers");

            entity.Property(e => e.Department).HasMaxLength(30);
            entity.Property(e => e.EmailAddress).HasMaxLength(200);
            entity.Property(e => e.IsActive)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.UserId)
                .HasMaxLength(10)
                .HasColumnName("UserID");
            entity.Property(e => e.UserName).HasMaxLength(40);
        });

        modelBuilder.Entity<VWithholdingTax>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vWithholdingTax");

            entity.Property(e => e.WhtcreditableAccNo)
                .HasMaxLength(12)
                .HasColumnName("WHTCreditableAccNo");
            entity.Property(e => e.WhtpayableAccNo)
                .HasMaxLength(12)
                .HasColumnName("WHTPayableAccNo");
            entity.Property(e => e.WithholdingTaxCode).HasMaxLength(14);
            entity.Property(e => e.WithholdingTaxDescription).HasMaxLength(400);
            entity.Property(e => e.WithholdingTaxRate).HasColumnType("decimal(18, 6)");
        });

        modelBuilder.Entity<VWithholdingTaxEntryDtl>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vWithholdingTaxEntryDtl");

            entity.Property(e => e.Amount).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.DocWithholdingTaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.WhtcreditableAccNo)
                .HasMaxLength(12)
                .HasColumnName("WHTCreditableAccNo");
            entity.Property(e => e.WhtpayableAccNo)
                .HasMaxLength(12)
                .HasColumnName("WHTPayableAccNo");
            entity.Property(e => e.WithholdingTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.WithholdingTaxCode).HasMaxLength(14);
            entity.Property(e => e.WithholdingTaxDescription).HasMaxLength(400);
            entity.Property(e => e.WithholdingTaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.WithholdingValueType).HasMaxLength(10);
        });

        modelBuilder.Entity<VWithholdingTaxPaymentDtl>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vWithholdingTaxPaymentDtl");

            entity.Property(e => e.Amount).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.DocWithholdingTaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.WhtcreditableAccNo)
                .HasMaxLength(12)
                .HasColumnName("WHTCreditableAccNo");
            entity.Property(e => e.WhtpayableAccNo)
                .HasMaxLength(12)
                .HasColumnName("WHTPayableAccNo");
            entity.Property(e => e.WithholdingTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.WithholdingTaxCode).HasMaxLength(14);
            entity.Property(e => e.WithholdingTaxDescription).HasMaxLength(400);
            entity.Property(e => e.WithholdingTaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.WithholdingValueType).HasMaxLength(10);
        });

        modelBuilder.Entity<Whtsetting>(entity =>
        {
            entity.HasKey(e => e.Whtname);

            entity.ToTable("WHTSetting");

            entity.Property(e => e.Whtname)
                .HasMaxLength(100)
                .HasColumnName("WHTName");
            entity.Property(e => e.Whtvalue)
                .HasMaxLength(300)
                .HasColumnName("WHTValue");
        });

        modelBuilder.Entity<WithholdingTax>(entity =>
        {
            entity.HasKey(e => e.WithholdingTaxCode);

            entity.ToTable("WithholdingTax", tb => tb.HasTrigger("UpdateWithholdingTaxChangeCount"));

            entity.Property(e => e.WithholdingTaxCode).HasMaxLength(14);
            entity.Property(e => e.Description).HasMaxLength(400);
            entity.Property(e => e.IsActive)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.WhtcreditableAccNo)
                .HasMaxLength(12)
                .HasColumnName("WHTCreditableAccNo");
            entity.Property(e => e.WhtpayableAccNo)
                .HasMaxLength(12)
                .HasColumnName("WHTPayableAccNo");
            entity.Property(e => e.Whtype)
                .HasMaxLength(30)
                .HasColumnName("WHType");
            entity.Property(e => e.WithholdingTaxRate).HasColumnType("decimal(18, 6)");

            entity.HasOne(d => d.WhtcreditableAccNoNavigation).WithMany(p => p.WithholdingTaxWhtcreditableAccNoNavigations)
                .HasForeignKey(d => d.WhtcreditableAccNo)
                .HasConstraintName("FK_WithholdingTax_WHTCreditableAccNo");

            entity.HasOne(d => d.WhtpayableAccNoNavigation).WithMany(p => p.WithholdingTaxWhtpayableAccNoNavigations)
                .HasForeignKey(d => d.WhtpayableAccNo)
                .HasConstraintName("FK_WithholdingTax_WHTPayableAccNo");
        });

        modelBuilder.Entity<WithholdingTaxEntryDtl>(entity =>
        {
            entity.HasKey(e => e.TaxEntryDtlKey);

            entity.ToTable("WithholdingTaxEntryDTL");

            entity.Property(e => e.TaxEntryDtlKey).ValueGeneratedNever();
            entity.Property(e => e.Amount).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.DocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.LocalAmount).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalWithholdingTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.TaxCurrencyAmount).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyWithholdingTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.WithholdingTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.WithholdingTaxCode).HasMaxLength(14);
            entity.Property(e => e.WithholdingTaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.WithholdingValueType).HasMaxLength(10);

            entity.HasOne(d => d.DeptNoNavigation).WithMany(p => p.WithholdingTaxEntryDtls)
                .HasForeignKey(d => d.DeptNo)
                .HasConstraintName("FK_WithholdingTaxEntryDtl_DeptNo");

            entity.HasOne(d => d.ProjNoNavigation).WithMany(p => p.WithholdingTaxEntryDtls)
                .HasForeignKey(d => d.ProjNo)
                .HasConstraintName("FK_WithholdingTaxEntryDtl_ProjNo");

            entity.HasOne(d => d.WithholdingTaxCodeNavigation).WithMany(p => p.WithholdingTaxEntryDtls)
                .HasForeignKey(d => d.WithholdingTaxCode)
                .HasConstraintName("FK_WithholdingTaxEntryDtl_WithholdingTaxCode");
        });

        modelBuilder.Entity<WithholdingTaxPaymentDtl>(entity =>
        {
            entity.HasKey(e => e.TaxPaymentDtlKey);

            entity.ToTable("WithholdingTaxPaymentDTL");

            entity.Property(e => e.TaxPaymentDtlKey).ValueGeneratedNever();
            entity.Property(e => e.Amount).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.DocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.LocalAmount).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalWithholdingTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.TaxCurrencyAmount).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyWithholdingTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.WithholdingTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.WithholdingTaxCode).HasMaxLength(14);
            entity.Property(e => e.WithholdingTaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.WithholdingValueType).HasMaxLength(10);

            entity.HasOne(d => d.DeptNoNavigation).WithMany(p => p.WithholdingTaxPaymentDtls)
                .HasForeignKey(d => d.DeptNo)
                .HasConstraintName("FK_WithholdingTaxPaymentDtl_DeptNo");

            entity.HasOne(d => d.ProjNoNavigation).WithMany(p => p.WithholdingTaxPaymentDtls)
                .HasForeignKey(d => d.ProjNo)
                .HasConstraintName("FK_WithholdingTaxPaymentDtl_ProjNo");

            entity.HasOne(d => d.WithholdingTaxCodeNavigation).WithMany(p => p.WithholdingTaxPaymentDtls)
                .HasForeignKey(d => d.WithholdingTaxCode)
                .HasConstraintName("FK_WithholdingTaxPaymentDtl_WithholdingTaxCode");
        });

        modelBuilder.Entity<WithholdingTaxTran>(entity =>
        {
            entity.HasKey(e => e.TaxTransKey).HasName("PK_WithholdingTaxTrans_TaxTransKey");

            entity.HasIndex(e => new { e.SourceType, e.SourceKey, e.PaymentDocType, e.PaymentDocKey }, "IX_WithholdingTaxTrans_SourceType_SourceKey_PaymentDocType_PaymentDocKey");

            entity.Property(e => e.CurrencyCode).HasMaxLength(5);
            entity.Property(e => e.CurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.PaymentDocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.ReceiptPayment)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SourceType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxDate).HasColumnType("datetime");
            entity.Property(e => e.TaxEntityId).HasColumnName("TaxEntityID");
            entity.Property(e => e.TaxableAccNo).HasMaxLength(12);
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxableName).HasMaxLength(100);
            entity.Property(e => e.WithholdingTaxCode).HasMaxLength(14);
            entity.Property(e => e.WithholdingTaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.WithholdingValueType).HasMaxLength(10);

            entity.HasOne(d => d.TaxEntity).WithMany(p => p.WithholdingTaxTrans)
                .HasForeignKey(d => d.TaxEntityId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WithholdingTaxTrans_TaxEntityID");

            entity.HasOne(d => d.TaxableAccNoNavigation).WithMany(p => p.WithholdingTaxTrans)
                .HasForeignKey(d => d.TaxableAccNo)
                .HasConstraintName("FK_WithholdingTaxTrans_TaxableAccNo");

            entity.HasOne(d => d.WithholdingTaxCodeNavigation).WithMany(p => p.WithholdingTaxTrans)
                .HasForeignKey(d => d.WithholdingTaxCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WithholdingTaxTrans_WithholdingTaxCode");
        });

        modelBuilder.Entity<Woff>(entity =>
        {
            entity.HasKey(e => e.DocKey).HasName("PK_WOFF_DocKey");

            entity.ToTable("WOFF", tb => tb.HasTrigger("UpdateWOFFChangeCount"));

            entity.HasIndex(e => e.DocNo, "IX_WOFF_DocNo").IsUnique();

            entity.Property(e => e.DocKey).ValueGeneratedNever();
            entity.Property(e => e.CanSync)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.Guid).HasDefaultValueSql("(newid())");
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.RefDocNo).HasMaxLength(30);
            entity.Property(e => e.Remark1).HasMaxLength(40);
            entity.Property(e => e.Remark2).HasMaxLength(40);
            entity.Property(e => e.Remark3).HasMaxLength(40);
            entity.Property(e => e.Remark4).HasMaxLength(40);
            entity.Property(e => e.Total).HasColumnType("decimal(19, 2)");

            entity.HasOne(d => d.CreatedUser).WithMany(p => p.WoffCreatedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.CreatedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WOFF_CreatedUserID");

            entity.HasOne(d => d.LastModifiedUser).WithMany(p => p.WoffLastModifiedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.LastModifiedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WOFF_LastModifiedUserID");
        });

        modelBuilder.Entity<Woffdtl>(entity =>
        {
            entity.HasKey(e => e.DtlKey).HasName("PK_WOFFDTL_DtlKey");

            entity.ToTable("WOFFDTL");

            entity.HasIndex(e => e.DocKey, "IX_WOFFDTL_DocKey");

            entity.Property(e => e.DtlKey).ValueGeneratedNever();
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Desc2).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.Guid).HasDefaultValueSql("(newid())");
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.Numbering).HasMaxLength(6);
            entity.Property(e => e.PrintOut)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.UnitCost).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");

            entity.HasOne(d => d.DeptNoNavigation).WithMany(p => p.Woffdtls)
                .HasForeignKey(d => d.DeptNo)
                .HasConstraintName("FK_WOFFDTL_DeptNo");

            entity.HasOne(d => d.LocationNavigation).WithMany(p => p.Woffdtls)
                .HasPrincipalKey(p => p.Location1)
                .HasForeignKey(d => d.Location)
                .HasConstraintName("FK_WOFFDTL_Location");

            entity.HasOne(d => d.ProjNoNavigation).WithMany(p => p.Woffdtls)
                .HasForeignKey(d => d.ProjNo)
                .HasConstraintName("FK_WOFFDTL_ProjNo");

            entity.HasOne(d => d.ItemBatch).WithMany(p => p.Woffdtls)
                .HasPrincipalKey(p => new { p.ItemCode, p.BatchNo })
                .HasForeignKey(d => new { d.ItemCode, d.BatchNo })
                .HasConstraintName("FK_WOFFDTL_ItemBatch");

            entity.HasOne(d => d.ItemUom).WithMany(p => p.Woffdtls)
                .HasPrincipalKey(p => new { p.ItemCode, p.Uom })
                .HasForeignKey(d => new { d.ItemCode, d.Uom })
                .HasConstraintName("FK_WOFFDTL_ItemUOM");
        });

        modelBuilder.Entity<X>(entity =>
        {
            entity.HasKey(e => e.DocKey).HasName("PK_XS_DocKey");

            entity.ToTable("XS", tb => tb.HasTrigger("UpdateXSChangeCount"));

            entity.HasIndex(e => e.DocNo, "IX_XS_DocNo").IsUnique();

            entity.HasIndex(e => new { e.DocStatus, e.ExpiryTimeStamp }, "IX_XS_DocStatus_ExpiryTimeStamp");

            entity.Property(e => e.DocKey).ValueGeneratedNever();
            entity.Property(e => e.AnalysisNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Attention).HasMaxLength(40);
            entity.Property(e => e.BranchCode).HasMaxLength(20);
            entity.Property(e => e.CalcDiscountOnUnitPrice)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CanSync)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.CurrencyCode).HasMaxLength(5);
            entity.Property(e => e.CurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.DebtorCode).HasMaxLength(12);
            entity.Property(e => e.DebtorName).HasMaxLength(100);
            entity.Property(e => e.DeliverAddr1).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr2).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr3).HasMaxLength(40);
            entity.Property(e => e.DeliverAddr4).HasMaxLength(40);
            entity.Property(e => e.DeliverContact).HasMaxLength(40);
            entity.Property(e => e.DeliverFax1).HasMaxLength(25);
            entity.Property(e => e.DeliverPhone1).HasMaxLength(25);
            entity.Property(e => e.Description).HasMaxLength(80);
            entity.Property(e => e.DisplayTerm).HasMaxLength(30);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.DocStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ExpiryTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.Fax1).HasMaxLength(25);
            entity.Property(e => e.Footer1Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer1TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Footer2Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer2TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Footer3Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer3TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Guid).HasDefaultValueSql("(newid())");
            entity.Property(e => e.InclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("F")
                .IsFixedLength();
            entity.Property(e => e.InvAddr1).HasMaxLength(40);
            entity.Property(e => e.InvAddr2).HasMaxLength(40);
            entity.Property(e => e.InvAddr3).HasMaxLength(40);
            entity.Property(e => e.InvAddr4).HasMaxLength(40);
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.LocalAnalysisNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.MultiPrice).HasMaxLength(8);
            entity.Property(e => e.NetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Phone1).HasMaxLength(25);
            entity.Property(e => e.Ref).HasMaxLength(40);
            entity.Property(e => e.RefDocNo).HasMaxLength(30);
            entity.Property(e => e.Remark1).HasMaxLength(40);
            entity.Property(e => e.Remark2).HasMaxLength(40);
            entity.Property(e => e.Remark3).HasMaxLength(40);
            entity.Property(e => e.Remark4).HasMaxLength(40);
            entity.Property(e => e.SalesAgent).HasMaxLength(12);
            entity.Property(e => e.SalesExemptionExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.SalesExemptionNo).HasMaxLength(60);
            entity.Property(e => e.SalesLocation).HasMaxLength(8);
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxEntityId).HasColumnName("TaxEntityID");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ToTaxCurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.Total).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.YourPodate)
                .HasColumnType("datetime")
                .HasColumnName("YourPODate");
            entity.Property(e => e.YourPono)
                .HasMaxLength(25)
                .HasColumnName("YourPONo");

            entity.HasOne(d => d.CreatedUser).WithMany(p => p.XCreatedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.CreatedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_XS_CreatedUserID");

            entity.HasOne(d => d.CurrencyCodeNavigation).WithMany(p => p.Xes)
                .HasForeignKey(d => d.CurrencyCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_XS_CurrencyCode");

            entity.HasOne(d => d.DebtorCodeNavigation).WithMany(p => p.Xes)
                .HasForeignKey(d => d.DebtorCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_XS_DebtorCode");

            entity.HasOne(d => d.DisplayTermNavigation).WithMany(p => p.Xes)
                .HasPrincipalKey(p => p.DisplayTerm)
                .HasForeignKey(d => d.DisplayTerm)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_XS_DisplayTerm");

            entity.HasOne(d => d.Footer1TaxCodeNavigation).WithMany(p => p.XFooter1TaxCodeNavigations)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.Footer1TaxCode)
                .HasConstraintName("FK_XS_Footer1TaxCode");

            entity.HasOne(d => d.Footer2TaxCodeNavigation).WithMany(p => p.XFooter2TaxCodeNavigations)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.Footer2TaxCode)
                .HasConstraintName("FK_XS_Footer2TaxCode");

            entity.HasOne(d => d.Footer3TaxCodeNavigation).WithMany(p => p.XFooter3TaxCodeNavigations)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.Footer3TaxCode)
                .HasConstraintName("FK_XS_Footer3TaxCode");

            entity.HasOne(d => d.LastModifiedUser).WithMany(p => p.XLastModifiedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.LastModifiedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_XS_LastModifiedUserID");

            entity.HasOne(d => d.SalesAgentNavigation).WithMany(p => p.Xes)
                .HasPrincipalKey(p => p.SalesAgent1)
                .HasForeignKey(d => d.SalesAgent)
                .HasConstraintName("FK_XS_SalesAgent");

            entity.HasOne(d => d.SalesLocationNavigation).WithMany(p => p.Xes)
                .HasPrincipalKey(p => p.Location1)
                .HasForeignKey(d => d.SalesLocation)
                .HasConstraintName("FK_XS_SalesLocation");

            entity.HasOne(d => d.TaxEntity).WithMany(p => p.Xes)
                .HasForeignKey(d => d.TaxEntityId)
                .HasConstraintName("FK_XS_TaxEntityID");

            entity.HasOne(d => d.Branch).WithMany(p => p.Xes)
                .HasPrincipalKey(p => new { p.AccNo, p.BranchCode })
                .HasForeignKey(d => new { d.DebtorCode, d.BranchCode })
                .HasConstraintName("FK_XS_BranchCode");
        });

        modelBuilder.Entity<Xfer>(entity =>
        {
            entity.HasKey(e => e.DocKey).HasName("PK_XFER_DocKey");

            entity.ToTable("XFER", tb => tb.HasTrigger("UpdateXFERChangeCount"));

            entity.HasIndex(e => e.DocNo, "IX_XFER_DocNo").IsUnique();

            entity.Property(e => e.DocKey).ValueGeneratedNever();
            entity.Property(e => e.AuthorisedBy).HasMaxLength(30);
            entity.Property(e => e.CanSync)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.FromLocation).HasMaxLength(8);
            entity.Property(e => e.Guid).HasDefaultValueSql("(newid())");
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.Reason).HasMaxLength(80);
            entity.Property(e => e.Ref).HasMaxLength(40);
            entity.Property(e => e.RefDocNo).HasMaxLength(30);
            entity.Property(e => e.Remark1).HasMaxLength(40);
            entity.Property(e => e.Remark2).HasMaxLength(40);
            entity.Property(e => e.Remark3).HasMaxLength(40);
            entity.Property(e => e.Remark4).HasMaxLength(40);
            entity.Property(e => e.ToLocation).HasMaxLength(8);
            entity.Property(e => e.Total).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.UdfSuperAppId)
                .HasMaxLength(32)
                .HasColumnName("UDF_SuperAppId");

            entity.HasOne(d => d.CreatedUser).WithMany(p => p.XferCreatedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.CreatedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_XFER_CreatedUserID");

            entity.HasOne(d => d.FromLocationNavigation).WithMany(p => p.XferFromLocationNavigations)
                .HasPrincipalKey(p => p.Location1)
                .HasForeignKey(d => d.FromLocation)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_XFER_FromLocation");

            entity.HasOne(d => d.LastModifiedUser).WithMany(p => p.XferLastModifiedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.LastModifiedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_XFER_LastModifiedUserID");

            entity.HasOne(d => d.ToLocationNavigation).WithMany(p => p.XferToLocationNavigations)
                .HasPrincipalKey(p => p.Location1)
                .HasForeignKey(d => d.ToLocation)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_XFER_ToLocation");
        });

        modelBuilder.Entity<Xferdtl>(entity =>
        {
            entity.HasKey(e => e.DtlKey).HasName("PK_XFERDTL_DtlKey");

            entity.ToTable("XFERDTL");

            entity.HasIndex(e => e.DocKey, "IX_XFERDTL_DocKey");

            entity.Property(e => e.DtlKey).ValueGeneratedNever();
            entity.Property(e => e.BatchNo).HasMaxLength(20);
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Desc2).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.Guid).HasDefaultValueSql("(newid())");
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.Numbering).HasMaxLength(6);
            entity.Property(e => e.PrintOut)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.UnitCost).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");

            entity.HasOne(d => d.DeptNoNavigation).WithMany(p => p.Xferdtls)
                .HasForeignKey(d => d.DeptNo)
                .HasConstraintName("FK_XFERDTL_DeptNo");

            entity.HasOne(d => d.ProjNoNavigation).WithMany(p => p.Xferdtls)
                .HasForeignKey(d => d.ProjNo)
                .HasConstraintName("FK_XFERDTL_ProjNo");

            entity.HasOne(d => d.ItemBatch).WithMany(p => p.Xferdtls)
                .HasPrincipalKey(p => new { p.ItemCode, p.BatchNo })
                .HasForeignKey(d => new { d.ItemCode, d.BatchNo })
                .HasConstraintName("FK_XFERDTL_ItemBatch");

            entity.HasOne(d => d.ItemUom).WithMany(p => p.Xferdtls)
                .HasPrincipalKey(p => new { p.ItemCode, p.Uom })
                .HasForeignKey(d => new { d.ItemCode, d.Uom })
                .HasConstraintName("FK_XFERDTL_ItemUOM");
        });

        modelBuilder.Entity<Xp>(entity =>
        {
            entity.HasKey(e => e.DocKey).HasName("PK_XP_DocKey");

            entity.ToTable("XP", tb => tb.HasTrigger("UpdateXPChangeCount"));

            entity.HasIndex(e => e.DocNo, "IX_XP_DocNo").IsUnique();

            entity.HasIndex(e => new { e.DocStatus, e.ExpiryTimeStamp }, "IX_XP_DocStatus_ExpiryTimeStamp");

            entity.Property(e => e.DocKey).ValueGeneratedNever();
            entity.Property(e => e.AnalysisNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Attention).HasMaxLength(40);
            entity.Property(e => e.BranchCode).HasMaxLength(20);
            entity.Property(e => e.CalcDiscountOnUnitPrice)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CanSync)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Cancelled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreatedTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserId)
                .HasMaxLength(10)
                .HasColumnName("CreatedUserID");
            entity.Property(e => e.CreditorCode).HasMaxLength(12);
            entity.Property(e => e.CreditorName).HasMaxLength(100);
            entity.Property(e => e.CurrencyCode).HasMaxLength(5);
            entity.Property(e => e.CurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.Description).HasMaxLength(80);
            entity.Property(e => e.DisplayTerm).HasMaxLength(30);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocNo).HasMaxLength(30);
            entity.Property(e => e.DocStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ExpiryTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.Fax1).HasMaxLength(25);
            entity.Property(e => e.Footer1Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer1TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer1TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Footer2Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer2TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer2TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Footer3Amt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3LocalAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3Param).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Footer3TaxCode).HasMaxLength(14);
            entity.Property(e => e.Footer3TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Guid).HasDefaultValueSql("(newid())");
            entity.Property(e => e.InclusiveTax)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("F")
                .IsFixedLength();
            entity.Property(e => e.InvAddr1).HasMaxLength(40);
            entity.Property(e => e.InvAddr2).HasMaxLength(40);
            entity.Property(e => e.InvAddr3).HasMaxLength(40);
            entity.Property(e => e.InvAddr4).HasMaxLength(40);
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastModifiedUserId)
                .HasMaxLength(10)
                .HasColumnName("LastModifiedUserID");
            entity.Property(e => e.LocalAnalysisNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalNetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.NetTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Phone1).HasMaxLength(25);
            entity.Property(e => e.PurchaseAgent).HasMaxLength(12);
            entity.Property(e => e.PurchaseLocation).HasMaxLength(8);
            entity.Property(e => e.Ref).HasMaxLength(40);
            entity.Property(e => e.RefDocNo).HasMaxLength(30);
            entity.Property(e => e.Remark1).HasMaxLength(40);
            entity.Property(e => e.Remark2).HasMaxLength(40);
            entity.Property(e => e.Remark3).HasMaxLength(40);
            entity.Property(e => e.Remark4).HasMaxLength(40);
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxEntityId).HasColumnName("TaxEntityID");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.ToTaxCurrencyRate).HasColumnType("decimal(19, 12)");
            entity.Property(e => e.Total).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TotalExTax).HasColumnType("decimal(19, 2)");

            entity.HasOne(d => d.CreatedUser).WithMany(p => p.XpCreatedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.CreatedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_XP_CreatedUserID");

            entity.HasOne(d => d.CreditorCodeNavigation).WithMany(p => p.Xps)
                .HasForeignKey(d => d.CreditorCode)
                .HasConstraintName("FK_XP_CreditorCode");

            entity.HasOne(d => d.CurrencyCodeNavigation).WithMany(p => p.Xps)
                .HasForeignKey(d => d.CurrencyCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_XP_CurrencyCode");

            entity.HasOne(d => d.DisplayTermNavigation).WithMany(p => p.Xps)
                .HasPrincipalKey(p => p.DisplayTerm)
                .HasForeignKey(d => d.DisplayTerm)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_XP_DisplayTerm");

            entity.HasOne(d => d.Footer1TaxCodeNavigation).WithMany(p => p.XpFooter1TaxCodeNavigations)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.Footer1TaxCode)
                .HasConstraintName("FK_XP_Footer1TaxCode");

            entity.HasOne(d => d.Footer2TaxCodeNavigation).WithMany(p => p.XpFooter2TaxCodeNavigations)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.Footer2TaxCode)
                .HasConstraintName("FK_XP_Footer2TaxCode");

            entity.HasOne(d => d.Footer3TaxCodeNavigation).WithMany(p => p.XpFooter3TaxCodeNavigations)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.Footer3TaxCode)
                .HasConstraintName("FK_XP_Footer3TaxCode");

            entity.HasOne(d => d.LastModifiedUser).WithMany(p => p.XpLastModifiedUsers)
                .HasPrincipalKey(p => p.UserId)
                .HasForeignKey(d => d.LastModifiedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_XP_LastModifiedUserID");

            entity.HasOne(d => d.PurchaseAgentNavigation).WithMany(p => p.Xps)
                .HasPrincipalKey(p => p.PurchaseAgent1)
                .HasForeignKey(d => d.PurchaseAgent)
                .HasConstraintName("FK_XP_PurchaseAgent");

            entity.HasOne(d => d.PurchaseLocationNavigation).WithMany(p => p.Xps)
                .HasPrincipalKey(p => p.Location1)
                .HasForeignKey(d => d.PurchaseLocation)
                .HasConstraintName("FK_XP_PurchaseLocation");

            entity.HasOne(d => d.TaxEntity).WithMany(p => p.Xps)
                .HasForeignKey(d => d.TaxEntityId)
                .HasConstraintName("FK_XP_TaxEntityID");

            entity.HasOne(d => d.Branch).WithMany(p => p.Xps)
                .HasPrincipalKey(p => new { p.AccNo, p.BranchCode })
                .HasForeignKey(d => new { d.CreditorCode, d.BranchCode })
                .HasConstraintName("FK_XP_BranchCode");
        });

        modelBuilder.Entity<Xpdtl>(entity =>
        {
            entity.HasKey(e => e.DtlKey).HasName("PK_XPDTL_DtlKey");

            entity.ToTable("XPDTL");

            entity.HasIndex(e => e.DocKey, "IX_XPDTL_DocKey");

            entity.HasIndex(e => e.FromDocDtlKey, "IX_XPDTL_FromDocDtlKey");

            entity.HasIndex(e => new { e.ItemCode, e.Uom }, "IX_XPDTL_ItemCode_UOM");

            entity.Property(e => e.DtlKey).ValueGeneratedNever();
            entity.Property(e => e.AddToSubTotal)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CalcByPercent).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.DeliveryDate).HasColumnType("datetime");
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Desc2).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.Discount).HasMaxLength(20);
            entity.Property(e => e.DiscountAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DtlType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EstimatedDeliveryDate).HasMaxLength(20);
            entity.Property(e => e.ExtraDiscountAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Focqty)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("FOCQty");
            entity.Property(e => e.FontStyle).HasMaxLength(8);
            entity.Property(e => e.FromDocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.FullTransferOption)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Guid).HasDefaultValueSql("(newid())");
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.LocalSubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalSubTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxAdjustment).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.MainItem)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Numbering).HasMaxLength(6);
            entity.Property(e => e.PrintOut)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SalesExemptionNo).HasMaxLength(60);
            entity.Property(e => e.SmallestQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SmallestUnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SubTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxAdjustment).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCode).HasMaxLength(14);
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
            entity.Property(e => e.UserUom)
                .HasMaxLength(8)
                .HasColumnName("UserUOM");

            entity.HasOne(d => d.DeptNoNavigation).WithMany(p => p.Xpdtls)
                .HasForeignKey(d => d.DeptNo)
                .HasConstraintName("FK_XPDTL_DeptNo");

            entity.HasOne(d => d.FontStyleNavigation).WithMany(p => p.Xpdtls)
                .HasPrincipalKey(p => p.FontStyle1)
                .HasForeignKey(d => d.FontStyle)
                .HasConstraintName("FK_XPDTL_FontStyle");

            entity.HasOne(d => d.LocationNavigation).WithMany(p => p.Xpdtls)
                .HasPrincipalKey(p => p.Location1)
                .HasForeignKey(d => d.Location)
                .HasConstraintName("FK_XPDTL_Location");

            entity.HasOne(d => d.ProjNoNavigation).WithMany(p => p.Xpdtls)
                .HasForeignKey(d => d.ProjNo)
                .HasConstraintName("FK_XPDTL_ProjNo");

            entity.HasOne(d => d.TaxCodeNavigation).WithMany(p => p.Xpdtls)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.TaxCode)
                .HasConstraintName("FK_XPDTL_TaxCode");

            entity.HasOne(d => d.ItemUom).WithMany(p => p.Xpdtls)
                .HasPrincipalKey(p => new { p.ItemCode, p.Uom })
                .HasForeignKey(d => new { d.ItemCode, d.Uom })
                .HasConstraintName("FK_XPDTL_ItemUOM");
        });

        modelBuilder.Entity<Xsdtl>(entity =>
        {
            entity.HasKey(e => e.DtlKey).HasName("PK_XSDTL_DtlKey");

            entity.ToTable("XSDTL");

            entity.HasIndex(e => e.DocKey, "IX_XSDTL_DocKey");

            entity.HasIndex(e => new { e.ItemCode, e.Uom }, "IX_XSDTL_ItemCode_UOM");

            entity.Property(e => e.DtlKey).ValueGeneratedNever();
            entity.Property(e => e.AddToSubTotal)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CalcByPercent).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.DeliveryDate).HasColumnType("datetime");
            entity.Property(e => e.DeptNo).HasMaxLength(10);
            entity.Property(e => e.Desc2).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.Discount).HasMaxLength(20);
            entity.Property(e => e.DiscountAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.DtlType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EstimatedDeliveryDate).HasMaxLength(20);
            entity.Property(e => e.ExtraDiscountAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Focqty)
                .HasColumnType("decimal(25, 8)")
                .HasColumnName("FOCQty");
            entity.Property(e => e.FontStyle).HasMaxLength(8);
            entity.Property(e => e.FromDocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.FullTransferOption)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Guid).HasDefaultValueSql("(newid())");
            entity.Property(e => e.ItemCode).HasMaxLength(30);
            entity.Property(e => e.LocalSubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalSubTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxAdjustment).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.LocalTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Location).HasMaxLength(8);
            entity.Property(e => e.MainItem)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Numbering).HasMaxLength(6);
            entity.Property(e => e.PrintOut)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProjNo).HasMaxLength(10);
            entity.Property(e => e.Qty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Rate).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SalesExemptionNo).HasMaxLength(60);
            entity.Property(e => e.SmallestQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SmallestUnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubQty).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.SubTotal).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.SubTotalExTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.Tax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxAdjustment).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCode).HasMaxLength(14);
            entity.Property(e => e.TaxCurrencyTax).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxCurrencyTaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.TaxableAmt).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(25, 8)");
            entity.Property(e => e.Uom)
                .HasMaxLength(8)
                .HasColumnName("UOM");
            entity.Property(e => e.UserUom)
                .HasMaxLength(8)
                .HasColumnName("UserUOM");
            entity.Property(e => e.YourPodate)
                .HasColumnType("datetime")
                .HasColumnName("YourPODate");
            entity.Property(e => e.YourPono)
                .HasMaxLength(25)
                .HasColumnName("YourPONo");

            entity.HasOne(d => d.DeptNoNavigation).WithMany(p => p.Xsdtls)
                .HasForeignKey(d => d.DeptNo)
                .HasConstraintName("FK_XSDTL_DeptNo");

            entity.HasOne(d => d.FontStyleNavigation).WithMany(p => p.Xsdtls)
                .HasPrincipalKey(p => p.FontStyle1)
                .HasForeignKey(d => d.FontStyle)
                .HasConstraintName("FK_XSDTL_FontStyle");

            entity.HasOne(d => d.LocationNavigation).WithMany(p => p.Xsdtls)
                .HasPrincipalKey(p => p.Location1)
                .HasForeignKey(d => d.Location)
                .HasConstraintName("FK_XSDTL_Location");

            entity.HasOne(d => d.ProjNoNavigation).WithMany(p => p.Xsdtls)
                .HasForeignKey(d => d.ProjNo)
                .HasConstraintName("FK_XSDTL_ProjNo");

            entity.HasOne(d => d.TaxCodeNavigation).WithMany(p => p.Xsdtls)
                .HasPrincipalKey(p => p.TaxCode1)
                .HasForeignKey(d => d.TaxCode)
                .HasConstraintName("FK_XSDTL_TaxCode");

            entity.HasOne(d => d.ItemUom).WithMany(p => p.Xsdtls)
                .HasPrincipalKey(p => new { p.ItemCode, p.Uom })
                .HasForeignKey(d => new { d.ItemCode, d.Uom })
                .HasConstraintName("FK_XSDTL_ItemUOM");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}
